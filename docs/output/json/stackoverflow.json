[{"UserInfo": {"is_employee": false, "website_url": "http://csharpindepth.com", "last_modified_date": 1440080343, "user_type": "registered", "creation_date": 1222430705, "reputation_change_year": 62299, "about_me": "<p>\nAuthor of <a href=\"http://www.manning.com/skeet3?a_aid=jonskeet&a_bid=66d590c3\" rel=\"nofollow\">C# in Depth</a>.<br>\nCurrently a software engineer at Google, London.<br>\nUsually a Microsoft MVP (C#, 2003-2010, 2011-)\n</p>\n\n<p>Sites:</p>\n\n<ul>\n<li><a href=\"http://csharpindepth.com\" rel=\"nofollow\">C# in Depth</a>\n<li><a href=\"http://codeblog.jonskeet.uk\" rel=\"nofollow\">Coding blog</a>\n<li><a href=\"http://pobox.com/~skeet/csharp\" rel=\"nofollow\">C# articles</a>\n<li><a href=\"http://twitter.com/jonskeet\" rel=\"nofollow\">Twitter updates (@jonskeet)</a>\n<li><a href=\"https://google.com/+jonskeet\" rel=\"nofollow\">Google+ profile</a>\n</ul>\n\n<p>Email: skeet@pobox.com (but please read <a href=\"http://tinyurl.com/stack-jon-email\" rel=\"nofollow\">my blog post on Stack Overflow-related emails</a> first)</p>\n", "reputation_change_month": 5772, "view_count": 1017965, "user_id": 22656, "last_access_date": 1440406508, "reputation": 801619, "location": "Reading, United Kingdom", "accept_rate": 87, "reputation_change_day": 200, "account_id": 11683, "answer_count": 32142, "display_name": "Jon Skeet", "question_count": 36, "age": 39, "down_vote_count": 4109, "reputation_change_quarter": 13822, "reputation_change_week": 430, "badge_counts": {"gold": 387, "silver": 5583, "bronze": 6751}, "up_vote_count": 15066}, "PostInfo": {"AnswerInfo": [[{"body": "<p>I have seen <code>\\u</code> and <code>\\x</code> used interchangeably in some places while representing a character literal.</p>\n\n<p>For example <code>'\\u00A9' == '\\x00A9'</code> evaluates to <code>true</code></p>\n\n<p>Aren't we supposed to use only <code>\\u</code> to represent unicode character? What is the use of having two ways to represent a character?</p>\n", "is_answered": true, "delete_vote_count": 0, "tags": ["c#"], "question_id": 32175482, "reopen_vote_count": 0, "down_vote_count": 0, "view_count": 35, "answers": [{"body": "<p>I would <em>strongly</em> recommend only using <code>\\u</code>, as it's much less error-prone.</p>\n\n<p><code>\\x</code> consumes 1-4 characters, so long as they're hex digits - whereas <code>\\u</code> must <em>always</em> be followed by 4 hex digits. From the C# 5 specification, section 2.4.4.4, the grammar for <code>\\x</code>:</p>\n\n<blockquote>\n  <p><em>hexadecimal-escape-sequence:</em><br>\n  &nbsp;&nbsp;<code>\\x</code> <em>hex-digit</em> <em>hex-digit</em><sub>opt</sub> <em>hex-digit</em><sub>opt</sub> <em>hex-digit</em><sub>opt</sub></p>\n</blockquote>\n\n<p>So for example:</p>\n\n<pre><code>string good = \"Tab\\x9Good compiler\";\nstring bad =  \"Tab\\x9Bad compiler\";\n</code></pre>\n\n<p>... look similar but are <em>very</em> different strings, as the latter is effectively \"Tab\" followed by <code>U+9BAD</code> followed by \" compiler\".</p>\n\n<p>Personally I wish the C# language had never included <code>\\x</code>, but there we go.</p>\n\n<p>Note that there's also <code>\\U</code>, which is always followed by 8 hex digits, primarily used for non-BMP characters.</p>\n\n<p>There's one other big difference between <code>\\u</code> and <code>\\x</code>: the latter is <em>only</em> used in character and string literals, whereas <code>\\u</code> can also be used in identifiers:</p>\n\n<pre><code>string x = \"just a normal string\";\nConsole.WriteLine(\\u0078); // Still refers to the identifier x\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 32175520, "down_vote_count": 0, "last_activity_date": 1440397163, "comments": [{"body": "Of course, this is C#, where I would expect C&#39;s quirks like this <i>not</i> to exist. Any reason why this &quot;quirk&quot; was included?", "edited": false, "comment_id": 52237506, "creation_date": 1440398165, "score": 0, "owner": {"display_name": "Cole Johnson", "reputation": 3933, "user_id": 1350209, "user_type": "registered", "accept_rate": 100}}, {"body": "Thanks Jon, using \\u in identifiers was new to me :)", "edited": false, "comment_id": 52238233, "creation_date": 1440399761, "score": 0, "owner": {"display_name": "Arnab Das", "reputation": 31, "user_id": 1592930, "user_type": "registered"}}, {"body": "@ColeJohnson: I don&#39;t know, I&#39;m afraid. The only annotation in the C# 4 spec around this is my own, expressing the same alarm :) I suspect it <i>was</i> for compatibility with C - a misguided aim in this case, IMO.", "edited": false, "reply_to_user": {"display_name": "Cole Johnson", "reputation": 3933, "user_id": 1350209, "user_type": "registered", "accept_rate": 100}, "comment_id": 52238551, "creation_date": 1440400367, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1440396816, "comment_count": 3, "score": 7, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1440397163, "up_vote_count": 7}], "last_activity_date": 1440397163, "comment_count": 0, "score": 2, "answer_count": 1, "owner": {"display_name": "Arnab Das", "reputation": 31, "user_id": 1592930, "user_type": "registered"}, "title": "What is the difference between using \\u and \\x while representing character literal", "close_vote_count": 0, "creation_date": 1440396666, "favorite_count": 0, "up_vote_count": 2}, {"body": "<p>I would like to change the timezone of a time like \"2015-08-24 01:30:40\" so that it's in the America/Los_Angeles timezone, but </p>\n\n<pre><code>$timedate = date_timezone_set(date_create_from_format('Y-m-d h:i:s A',$row[timezone]), new DateTimeZone('America/Los Angeles'));\n</code></pre>\n\n<p>isn't working. $row[timezone] successfully returns 2015-08-24 01:30:40 on it's own, but when I do it like this to try to change the timezone, it doesn't work. All PHP code after that doesn't run.\nI have done lots of searching, but I can't figure out how to get this to work properly so can someone tell me what I am doing wrong? Thanks for your help!</p>\n", "is_answered": false, "delete_vote_count": 0, "tags": ["php", "timezone", "timestamp"], "question_id": 32175328, "reopen_vote_count": 0, "down_vote_count": 0, "view_count": 15, "answers": [{"body": "<p>Your call to date_create_from_format includes an A at the end of the format string - that looks specious to me, given that your value doesn't end with am or pm. Your use of <code>h</code> looks unlikely to be correct too, as that's for a 12-hour hour-of-day, which isn't useful when you don't have an am/pm indicator. I suspect you want a format of</p>\n\n<pre><code>Y-m-d H:i:s\n</code></pre>\n\n<p>That appears to match your sample string better...</p>\n\n<p>I would also separate the various calls you have in this single large line of code, to make it easier to diagnose - that way you could tell that it's the parsing that's failing, rather than anything to do with the time zone. You have three separate operations here:</p>\n\n<ul>\n<li>Parse a string to a datetime</li>\n<li>Create a time zone object</li>\n<li>Set the time zone in the datetime</li>\n</ul>\n\n<p>Keeping those three in separate statements will make the code easier to read and easier to maintain.</p>\n", "answer_id": 32175453, "tags": [], "down_vote_count": 0, "last_activity_date": 1440396529, "creation_date": 1440396529, "comment_count": 0, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": false, "up_vote_count": 0}], "last_activity_date": 1440396529, "comment_count": 0, "score": 0, "answer_count": 1, "owner": {"display_name": "Josh", "reputation": 1, "user_id": 3983546, "user_type": "registered"}, "title": "Change Timezone of a String in PHP", "close_vote_count": 0, "creation_date": 1440396033, "favorite_count": 0, "up_vote_count": 0}, {"last_activity_date": 1440388040, "accepted_answer_id": 32170418, "creation_date": 1440356706, "owner": {"display_name": "Nicholas Waddell", "reputation": 8, "user_id": 5257883, "user_type": "registered"}, "last_edit_date": 1440388040, "favorite_count": 0, "view_count": 37, "delete_vote_count": 0, "title": "Field and Property pair shortening in C#", "comment_count": 0, "score": 1, "body": "<p>I have a couple of these properties scattered about my code:</p>\n\n<pre><code>private Animator _anim;\npublic Animator anim\n{\n    get \n    {\n        if (_anim == null) \n        {\n            _anim = GetComponent&lt;Animator&gt; ();\n        }\n        return _anim;\n    }\n    set \n    { \n        _anim = value;\n    }\n}\n</code></pre>\n\n<p>I was wondering if it was possible to shorten this semantically, either through a custom field declaration like this:</p>\n\n<pre><code>public autogetprop Animator anim;\n</code></pre>\n\n<p>or through an attribute like this:</p>\n\n<pre><code>[AutoGetProp]\npublic Animator anim;\n</code></pre>\n", "is_answered": true, "up_vote_count": 1, "tags": ["c#", "unity3d"], "reopen_vote_count": 0, "answers": [{"body": "<p>Basically, no - there's nothing to let you use automatically implemented properties with \"just a bit\" of custom code. You could shorten your code, though to:</p>\n\n<pre><code>public Animator Animator\n{\n    get { return _anim ?? (_anim = GetComponent&lt;Animator&gt;()); }\n    set { _anim = value; } \n}\n</code></pre>\n\n<p>Or you could write a <code>GetComponent</code> method with a ref parameter, and use it like this:</p>\n\n<pre><code>public Animator Animator\n{\n    get { return GetComponent(ref _anim)); }\n    set { _anim = value; } \n}\n</code></pre>\n\n<p>where <code>GetComponent</code> would be something like:</p>\n\n<pre><code>public T GetComponent(ref T existingValue)\n{\n    return existingValue ?? (existingValue = GetComponent&lt;T&gt;());\n}\n</code></pre>\n\n<p>If you don't like using the null-coalescing operator with side-effects like this, you could rewrite it as:</p>\n\n<pre><code>public T GetComponent(ref T existingValue)\n{\n    if (existingValue == null)\n    {\n        existingValue = GetComponent&lt;T&gt;();\n    }\n    return existingValue;\n}\n</code></pre>\n\n<p>Note that none of these solutions is thread-safe - just like your original code, if a second thread sets the property to null <em>after</em> the first thread has gone past the \"is it null\" check, the property can return null, which is presumably not the intention. (That's not even considering the memory model issues involved.) There are various ways of addressing this depending on what you want the semantics to be.</p>\n", "answer_id": 32170418, "tags": [], "down_vote_count": 0, "last_activity_date": 1440356845, "comments": [{"body": "Thanks for the answer, which I&#39;ll accept. I keep forgetting about ??. (Un)Fortunately the Unity API is single threaded, so I don&#39;t have to worry about safety here.", "edited": false, "comment_id": 52227926, "creation_date": 1440358624, "score": 0, "owner": {"display_name": "Nicholas Waddell", "reputation": 8, "user_id": 5257883, "user_type": "registered"}}], "creation_date": 1440356845, "comment_count": 1, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": true, "up_vote_count": 2}], "answer_count": 1, "last_editor": {"display_name": "Backs", "reputation": 3096, "user_id": 2910943, "user_type": "registered", "accept_rate": 100}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 32170393}, {"body": "<p>I'm writing a test app to reproduce some data writing scenario - a task that runs each hour.<br /> For that purpose I need to know how many times it will execute - how many hours there are on a given day. I tried to do that like this: <br /><code>Period.Between(localDateTimeStart.Date, localDateTimeStart.Date.PlusDays(1), PeriodUnits.Hours)</code> <br />but it gives me ArgumentException saying <code>Units contains time units: Hours</code>. What would be the idiomatic way to do that in NodaTime? Or is my approach wrong?</p>\n", "is_answered": true, "delete_vote_count": 0, "tags": [".net", "nodatime"], "question_id": 32135435, "reopen_vote_count": 0, "down_vote_count": 0, "view_count": 36, "answers": [{"body": "<p>Between two <em>local</em> date/time values, there will always be 24 hours. It sounds like you're interested in a date in a particular <em>zone</em>, in which case you want:</p>\n\n<pre><code> var startOfDay = zone.AtStartOfDay(date);\n var startOfNextDay = zone.AtStartOfDay(date.PlusDays(1));\n var duration = startOfNextDay.ToInstant() - startOfDay.ToInstant();\n var hours = duration.Ticks / NodaConstants.TicksPerHour;\n</code></pre>\n\n<p>(In Noda Time 2.0, <code>Duration</code> has a <code>TotalHours</code> property making this easier. That would return a <code>double</code> value, whereas here <code>hours</code> is a <code>long</code> due to the types of the operands. Be aware that it could lose information if the time zone has a transition of (say) half an hour.)</p>\n", "answer_id": 32154040, "tags": [], "down_vote_count": 0, "last_activity_date": 1440232181, "comments": [{"body": "thanks for the clarification. so if I hit a day when transition was not integer amount of hours then I just use TicksPerMinute/Second properies?", "edited": false, "comment_id": 52216834, "creation_date": 1440320319, "score": 0, "owner": {"display_name": "chester89", "reputation": 2332, "user_id": 28298, "user_type": "registered", "accept_rate": 85}}, {"body": "@chester: Yes, you could - it depends on what you want to do, really.", "edited": false, "reply_to_user": {"display_name": "chester89", "reputation": 2332, "user_id": 28298, "user_type": "registered", "accept_rate": 85}, "comment_id": 52217602, "creation_date": 1440323349, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1440232181, "comment_count": 2, "score": 4, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": true, "up_vote_count": 4}], "last_activity_date": 1440232181, "comment_count": 0, "score": 1, "answer_count": 1, "accepted_answer_id": 32154040, "owner": {"display_name": "chester89", "reputation": 2332, "user_id": 28298, "user_type": "registered", "accept_rate": 85}, "title": "How to find amount of hours in a day in NodaTime?", "close_vote_count": 0, "creation_date": 1440144729, "favorite_count": 0, "up_vote_count": 1}, {"body": "<p>SO I am new to NodaTime and trying to use it to for storing timezone information using DateTimeZone object.</p>\n\n<p>I came across below sample in user guide etc. which give me a nice DateTimeZone object from tzdb, which is great.</p>\n\n<pre><code>var london = DateTimeZoneProviders.Tzdb[\"Europe/London\"];\n</code></pre>\n\n<p>My question is - how do I get a list of timezone strings (\"Europe/London\") which are used in the tzdb. I looked around, nowhere to find. Is there a standard list somewhere which I can refer to? How does this work? ex. - what is the string I should pass for EST?</p>\n\n<p>Thanks! </p>\n", "is_answered": true, "delete_vote_count": 0, "tags": ["nodatime"], "question_id": 32104027, "reopen_vote_count": 0, "down_vote_count": 0, "view_count": 13, "answers": [{"body": "<p>Use the <a href=\"http://nodatime.org/1.3.x/api/html/P_NodaTime_IDateTimeZoneProvider_Ids.htm\" rel=\"nofollow\"><code>Ids</code></a> property in <code>IDateTimeZoneProvider</code>. For example, to find all zones:</p>\n\n<pre><code>var provider = DateTimeZoneProviders.Tzdb;\nforeach (var id in provider.Ids)\n{\n    var zone = provider[id];\n    // Use the zone \n}\n</code></pre>\n\n<p>For Eastern Time, you probably want America/New_York.</p>\n", "answer_id": 32153990, "tags": [], "down_vote_count": 0, "last_activity_date": 1440231803, "creation_date": 1440231803, "comment_count": 0, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": false, "up_vote_count": 2}], "last_activity_date": 1440231803, "comment_count": 0, "score": 1, "answer_count": 1, "owner": {"display_name": "Abhishek", "reputation": 40, "user_id": 4332574, "user_type": "registered", "accept_rate": 40}, "title": "How do I get the list of strings in tzdb used as time zone initializer?", "close_vote_count": 0, "creation_date": 1440012429, "favorite_count": 0, "up_vote_count": 1}, {"last_activity_date": 1440171932, "accepted_answer_id": 618596, "creation_date": 1236339083, "owner": {"display_name": "Tom", "user_type": "does_not_exist"}, "last_edit_date": 1414593771, "favorite_count": 320, "view_count": 355385, "delete_vote_count": 0, "title": "Difference between Decimal, Float and Double in .NET?", "comments": [{"body": "interesting article <a href=\"http://zetcode.com/lang/csharp/datatypes/\" rel=\"nofollow\">zetcode.com/lang/csharp/datatypes</a>", "edited": false, "comment_id": 33550101, "creation_date": 1393683615, "score": 0, "owner": {"display_name": "GibboK", "reputation": 14245, "user_id": 379008, "user_type": "registered", "accept_rate": 84}}], "comment_count": 1, "score": 1035, "body": "<p>What is the difference between <code>Decimal</code>, <code>Float</code> and <code>Double</code> in .NET?</p>\n\n<p>When would someone use one of these?</p>\n", "is_answered": true, "up_vote_count": 1036, "tags": [".net", "floating-point", "double", "decimal"], "reopen_vote_count": 0, "answer_count": 13, "answers": [{"body": "<p>Precision is the main difference. </p>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/b1e65aza(VS.80).aspx\">Float</a> - 7 digits (32 bit)</p>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/678hzkk9(VS.71).aspx\">Double</a>-15-16 digits (64 bit)</p>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/364x0z75(VS.80).aspx\">Decimal</a> -28-29 significant digits (128 bit)</p>\n\n<p>Decimals have much higher precision and are usually used within financial applications that require a high degree of accuracy. Decimals are much slower (up to 20X times in some tests) than a double/float. </p>\n\n<p>Decimals and Floats/Doubles cannot be compared without a cast whereas Floats and Doubles can. Decimals also allow the encoding or trailing zeros.</p>\n\n<pre><code>float flt = 1F/3;\ndouble dbl = 1D/3;\ndecimal dcm = 1M/3;\nConsole.WriteLine(\"float: {0} double: {1} decimal: {2}\", flt, dbl, dcm);\n</code></pre>\n\n<p>Result : </p>\n\n<pre><code>float: 0.3333333  \ndouble: 0.333333333333333  \ndecimal: 0.3333333333333333333333333333\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 618542, "down_vote_count": 5, "last_activity_date": 1429029282, "comments": [{"body": "This answer needs to be corrected. Precision for Decimal is not 128 bits but infinite because the format is essentially different from float. @Skeet answer is the best. <code>Example: 0.1 = 0.099999.... in float but in decimal it is 0.l, that is infinite precision. If you were to use 128 bits precision like in floats, you would get 0.999999....(upto 29 digits) but that is still not precise as decimal 0.1</code>", "edited": false, "comment_id": 10101636, "creation_date": 1321899781, "score": 3, "owner": {"display_name": "hmd", "reputation": 3758, "user_id": 777982, "user_type": "registered", "accept_rate": 73}}, {"body": "@Thecrocodilehunter: sorry, but no. Decimal can represent all numbers that can be represented in decimal notation, but not 1/3 for example. 1.0m / 3.0m will evaluate to 0.33333333... with a large but finite number of 3s at the end. Multiplying it by 3 will not return an exact 1.0.", "edited": false, "reply_to_user": {"display_name": "hmd", "reputation": 3758, "user_id": 777982, "user_type": "registered", "accept_rate": 73}, "comment_id": 10251711, "creation_date": 1322601283, "score": 33, "owner": {"display_name": "Erik P.", "reputation": 1211, "user_id": 337475, "user_type": "registered"}}, {"body": "This is a fault with the number itself ( 0.3333... in this case), not its decimal representation where it is produced 100% faithfully. When you introduced an error in the number, no body can remove it (not even decimal numbers). The only way to remove error from this number is to use 1/3 not 0.333. Some calculator might take 1/3 as mid value but most of them don&#39;t. <code>Try this: represent 0.3333 in floating point, you will end up with 0.3332999998..., this is not 0.3333 (you see the error). Now represent this in decimal it is 0.3333 (exactly as it is, no error - 100% accurate).</code>", "edited": false, "comment_id": 10252782, "creation_date": 1322604831, "score": 2, "owner": {"display_name": "hmd", "reputation": 3758, "user_id": 777982, "user_type": "registered", "accept_rate": 73}}, {"body": "@Thecrocodilehunter: I think you&#39;re confusing accuracy and precision. They are different things in this context. Precision is the number of digits available to represent a number. The more precision, the less you need to round. No data type has infinite precision.", "edited": false, "reply_to_user": {"display_name": "hmd", "reputation": 3758, "user_id": 777982, "user_type": "registered", "accept_rate": 73}, "comment_id": 10919636, "creation_date": 1325871724, "score": 23, "owner": {"display_name": "Igby Largeman", "reputation": 9860, "user_id": 293522, "user_type": "registered", "accept_rate": 93}}, {"body": "@IgbyLargeman Precision and Accuracy is used in context of measuring a value by an instrument. In this case we are not talking about any instrument. We are only talking about representing a value faithfully by decimal vs floating point. Precision does not apply here as we are not talking about consistency of measuring the same value, over and over. But Accuracy does. Accuracy of decimal point on a number that is in its range is 100%, that is infinite accuracy.", "edited": false, "reply_to_user": {"display_name": "Igby Largeman", "reputation": 9860, "user_id": 293522, "user_type": "registered", "accept_rate": 93}, "comment_id": 10969779, "creation_date": 1326138627, "score": 5, "owner": {"display_name": "hmd", "reputation": 3758, "user_id": 777982, "user_type": "registered", "accept_rate": 73}}, {"body": "@Thecrocodilehunter: You&#39;re assuming that the value that is being measured is <i>exactly</i> <code>0.1</code> -- that is rarely the case in the real world!  <i>Any</i> finite storage format will conflate an infinite number of possible values to a finite number of bit patterns.  For example, <code>float</code> will conflate <code>0.1</code> and <code>0.1 + 1e-8</code>, while <code>decimal</code> will conflate <code>0.1</code> and <code>0.1 + 1e-29</code>.  Sure, <i>within a given range</i>, certain values can be represented in any format with zero loss of accuracy (e.g. <code>float</code> can store any integer up to 1.6e7 with zero loss of accuracy) -- but that&#39;s still not <i>infinite</i> accuracy.", "edited": false, "reply_to_user": {"display_name": "hmd", "reputation": 3758, "user_id": 777982, "user_type": "registered", "accept_rate": 73}, "comment_id": 10975222, "creation_date": 1326160171, "score": 8, "owner": {"display_name": "Daniel Pryden", "reputation": 26422, "user_id": 128397, "user_type": "registered", "accept_rate": 90}}, {"body": "@DanielPryden, Ok I believe float will represent 0.1 as 0.1, not as 0.1 + 1e-29. This is because the format is essentially different than float. That is why it is very slow but accurate. If you were right than decimal is useless. Remember the main problem in float <code>if(0.1 = 0.1)</code> this condition does not holds true when we think it should be true. In decimal it will ALWAYS be true because 0.1 will be 0.1 and nothing else. For example it will not be 0.99999999999999999999999999999.", "edited": false, "reply_to_user": {"display_name": "Daniel Pryden", "reputation": 26422, "user_id": 128397, "user_type": "registered", "accept_rate": 90}, "comment_id": 10983150, "creation_date": 1326197684, "score": 0, "owner": {"display_name": "hmd", "reputation": 3758, "user_id": 777982, "user_type": "registered", "accept_rate": 73}}, {"body": "@Thecrocodilehunter: You missed my point.  <code>0.1</code> is <b>not a special value</b>!  The only thing that makes <code>0.1</code> &quot;better&quot; than <code>0.10000001</code> is because <b>human beings</b> like base 10.  And even with a <code>float</code> value, if you initialize two values with <code>0.1</code> the same way, <i>they will both be the same value</i>.  It&#39;s just that that value won&#39;t be <b>exactly</b> <code>0.1</code> -- it will be <i>the closest value to <code>0.1</code> that can be exactly represented as a <code>float</code></i>.  Sure, with binary floats, <code>(1.0 &#47; 10) * 10 != 1.0</code>, but with decimal floats, <code>(1.0 &#47; 3) * 3 != 1.0</code> either.  <b>Neither</b> is <i>perfectly</i> precise.", "edited": false, "reply_to_user": {"display_name": "hmd", "reputation": 3758, "user_id": 777982, "user_type": "registered", "accept_rate": 73}, "comment_id": 10991469, "creation_date": 1326220073, "score": 11, "owner": {"display_name": "Daniel Pryden", "reputation": 26422, "user_id": 128397, "user_type": "registered", "accept_rate": 90}}, {"body": "@DanielPryden, with decimal number, it will be <b>exactly</b> 0.1. Of course it is not about 0.1 only. A large number of decimals numbers has this problem. The fact is in decimal (0.1 == 0.1) will <b>always be true</b>. In float it may or may not be true because the actual binary value may not be exactly 0.1.", "edited": false, "reply_to_user": {"display_name": "Daniel Pryden", "reputation": 26422, "user_id": 128397, "user_type": "registered", "accept_rate": 90}, "comment_id": 10992482, "creation_date": 1326223185, "score": 0, "owner": {"display_name": "hmd", "reputation": 3758, "user_id": 777982, "user_type": "registered", "accept_rate": 73}}, {"body": "@Thecrocodilehunter: You still don&#39;t understand. I don&#39;t know how to say this any more plainly: In C, if you do <code>double a = 0.1; double b = 0.1;</code> then <code>a == b</code> <b>will be true</b>. It&#39;s just that <code>a</code> and <code>b</code> will <i>both</i> not exactly equal <code>0.1</code>. In C#, if you do <code>decimal a = 1.0m &#47; 3.0m; decimal b = 1.0m &#47; 3.0m;</code> then <code>a == b</code> will also be true.  But in that case, <b>neither</b> of <code>a</code> nor <code>b</code> will <b>exactly</b> equal <code>1&#47;3</code> -- they will both equal <code>0.3333...</code>. In <i>both</i> cases, some accuracy is lost due to representation. You stubbornly say that <code>decimal</code> has &quot;infinite&quot; precision, which is <i>false</i>.", "edited": false, "reply_to_user": {"display_name": "hmd", "reputation": 3758, "user_id": 777982, "user_type": "registered", "accept_rate": 73}, "comment_id": 10992681, "creation_date": 1326223752, "score": 6, "owner": {"display_name": "Daniel Pryden", "reputation": 26422, "user_id": 128397, "user_type": "registered", "accept_rate": 90}}, {"body": "@Thecrocodilehunter: Just in case you don&#39;t believe me, <a href=\"http://ideone.com/P5Mdh\" rel=\"nofollow\">here&#39;s some sample code that shows that <code>0.1 == 0.1</code></a>.", "edited": false, "reply_to_user": {"display_name": "hmd", "reputation": 3758, "user_id": 777982, "user_type": "registered", "accept_rate": 73}, "comment_id": 10992786, "creation_date": 1326224038, "score": 2, "owner": {"display_name": "Daniel Pryden", "reputation": 26422, "user_id": 128397, "user_type": "registered", "accept_rate": 90}}, {"body": "This should have been marked as the correct answer. Jon Skeet&#39;s answer&#39;s a bit confusing...", "edited": false, "comment_id": 15180531, "creation_date": 1342363006, "score": 1, "owner": {"display_name": "Chibueze Opata", "reputation": 4126, "user_id": 612717, "user_type": "registered", "accept_rate": 92}}, {"body": "@ChibuezeOpata: Skeet&#39;s answer discusses a completely separate difference which this answer completely ignores.  Personally, I consider Skeet&#39;s answer to be more valuable, as his answer is more relevant in deciding which data type to use.", "edited": false, "reply_to_user": {"display_name": "Chibueze Opata", "reputation": 4126, "user_id": 612717, "user_type": "registered", "accept_rate": 92}, "comment_id": 20044631, "creation_date": 1358533950, "score": 5, "owner": {"display_name": "Brian", "reputation": 15049, "user_id": 18192, "user_type": "registered", "accept_rate": 76}}, {"body": "@Brian They are both very valuable, and that is why I said ab initio that they are incomplete without each other. Concerning the question asked however, this answer simply goes straight to the point and tells you the essential differences. You can make almost all the deductions in Jon Skeet&#39;s answer from this one. :)", "edited": false, "reply_to_user": {"display_name": "Brian", "reputation": 15049, "user_id": 18192, "user_type": "registered", "accept_rate": 76}, "comment_id": 20046746, "creation_date": 1358538401, "score": 0, "owner": {"display_name": "Chibueze Opata", "reputation": 4126, "user_id": 612717, "user_type": "registered", "accept_rate": 92}}, {"body": "@ChibuezeOpata No, you can&#39;t, because this answer doesn&#39;t even mention the decimal/binary distinction.", "edited": false, "reply_to_user": {"display_name": "Chibueze Opata", "reputation": 4126, "user_id": 612717, "user_type": "registered", "accept_rate": 92}, "comment_id": 24980553, "creation_date": 1371831096, "score": 1, "owner": {"display_name": "svick", "reputation": 99256, "user_id": 41071, "user_type": "registered", "accept_rate": 85}}, {"body": "@DanielPryden - I know this is an old issue, but maybe I can help clarify.  The issue here is that Decimal numbers are 100% accurate when representing numbers that are within the precision of the decimal format.  That is, not the result of pi, or 1/3, or 2/3.  That&#39;s irrelevant because those numbers require greater precision than decimal can represent.  If you do a calculation on a decimal value that exceeds the precision, then all bets are off.  With float/double numbers that ARE within the precision of the format are not always 100% accurate.  .1 for example.", "edited": false, "reply_to_user": {"display_name": "Daniel Pryden", "reputation": 26422, "user_id": 128397, "user_type": "registered", "accept_rate": 90}, "comment_id": 24984938, "creation_date": 1371840018, "score": 0, "owner": {"display_name": "Erik Funkenbusch", "reputation": 64762, "user_id": 61164, "user_type": "registered", "accept_rate": 100}}, {"body": "@MystereMan: what do you mean by &quot;within the precision of the decimal format&quot;? If the number you are measuring is exactly an integer raised to a power of ten, then absolutely use a <code>decimal</code>. Many numbers encountered in everyday life have this property (because the are discrete, not continuous, measurements), but many others do not. The correct data type for any purpose always depends on the purpose. Please don&#39;t mistake anything I&#39;m saying here as implying that anyone should <i>always</i> use floats -- I&#39;m merely arguing that one shouldn&#39;t blindly always use <code>decimal</code>s instead.", "edited": false, "reply_to_user": {"display_name": "Erik Funkenbusch", "reputation": 64762, "user_id": 61164, "user_type": "registered", "accept_rate": 100}, "comment_id": 24991793, "creation_date": 1371858726, "score": 4, "owner": {"display_name": "Daniel Pryden", "reputation": 26422, "user_id": 128397, "user_type": "registered", "accept_rate": 90}}, {"body": "@MystereMan: I think part of your confusion is betrayed by the phrase &quot;within the precision of the format&quot;. I don&#39;t think that makes sense -- do you mean something like &quot;within the representable range&quot; instead? But even that doesn&#39;t prove anything: 0.1 is not any more &quot;within the precision&quot; of a double than 2^53+1 is, and both can be represented equally faithfully.", "edited": false, "reply_to_user": {"display_name": "Erik Funkenbusch", "reputation": 64762, "user_id": 61164, "user_type": "registered", "accept_rate": 100}, "comment_id": 24991899, "creation_date": 1371859175, "score": 0, "owner": {"display_name": "Daniel Pryden", "reputation": 26422, "user_id": 128397, "user_type": "registered", "accept_rate": 90}}, {"body": "Pretty much every time the issue of precision of floating point representation (be it decimal or binary) comes up, there ensues a long conversation of comments at cross-purposes.  Fundamentally this is due to the question of whether the <i>exact</i> value <i>represented</i> by the floating point <i>representation</i> corresponds to the same <i>exact</i> value in the real world.  This cannot be known by looking at the representation of the number itself; it can only be known by the humans that use the representation.", "edited": false, "comment_id": 25104097, "creation_date": 1372205794, "score": 1, "owner": {"display_name": "Dan Nissenbaum", "reputation": 3812, "user_id": 368896, "user_type": "registered", "accept_rate": 72}}, {"body": "Here are a small example code for C# (which this article is about) that visualizes the problem (using decimal &amp; float). <code>(0.1f == 1f&#47;10)</code> and <code>(0.1m == 1m&#47;10)</code>. The first will evaluate to false while the second will evaluate to true, even though both should evaluate to true.  This is due to the fact that float cannot exactly store the value 0.1.", "edited": false, "comment_id": 25167030, "creation_date": 1372343273, "score": 3, "owner": {"display_name": "David M\u00e5rtensson", "reputation": 4748, "user_id": 479137, "user_type": "registered", "accept_rate": 100}}, {"body": "@DavidM&#229;rtensson: Why should 0.1f not equal 1f/10?  Should not both evaluate to 13421773/134217728?", "edited": false, "reply_to_user": {"display_name": "David M\u00e5rtensson", "reputation": 4748, "user_id": 479137, "user_type": "registered", "accept_rate": 100}, "comment_id": 27667437, "creation_date": 1378997882, "score": 0, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}, {"body": "@supercat Because how float works internally 0.1f cannot be exactly represented in the internal binary format and due to the fact that calculations use more precision internally 1f/10 will not land on the same rounded value as 0.1f, hence they will not be equal.", "edited": false, "reply_to_user": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}, "comment_id": 27707967, "creation_date": 1379088543, "score": 0, "owner": {"display_name": "David M\u00e5rtensson", "reputation": 4748, "user_id": 479137, "user_type": "registered", "accept_rate": 100}}, {"body": "@DavidM&#229;rtensson: The compile-time type of the expression <code>1f&#47;10</code> is <code>float</code>.  Are you saying that compilers are not required to round the result of the division to the nearest <code>float</code> before performing the comparison? I regard as somewhat broken the fact that one is allowed to directly compare a <code>float</code> to anything else, or a <code>double</code> to anything else other than 32-bit-or-smaller integers [I think a cast should be required] but I would consider severely broken a compiler that performed what was by the rules of the language a float/float comparison as though it were a float/double comparison.", "edited": false, "reply_to_user": {"display_name": "David M\u00e5rtensson", "reputation": 4748, "user_id": 479137, "user_type": "registered", "accept_rate": 100}, "comment_id": 27708554, "creation_date": 1379089782, "score": 0, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}, {"body": "@DavidM&#229;rtensson: (Incidentally, what I&#39;d like to see would be a language with both &quot;loose&quot; and &quot;strict&quot; 32- and 64-bit floating-point types, where the strict ones would not accept any implicit conversions and the &quot;loose&quot; one would be defined as extending operation results to <code>double</code> and would generally allow implicit down-conversions to <code>float</code>, but would disallow direct comparisons between 32-bit and 64-bit values. I would posit that while C# will have no qualm about <code>double d1=f1*f2;</code> it would be rare for the programmer to actually intend that <code>d1</code> might hold a <code>float</code>-precision result.)", "edited": false, "reply_to_user": {"display_name": "David M\u00e5rtensson", "reputation": 4748, "user_id": 479137, "user_type": "registered", "accept_rate": 100}, "comment_id": 27708754, "creation_date": 1379090212, "score": 0, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}, {"body": "The IEEE standard for binary floating point does not mandate strict decimal precision, see Mark Jones answer below. It is not defined by the language. If you require strict rounding you should use the decimal datatype which is a decimal floating point as Jon Skeet points out in Mehrdad&#39;s answer below. The different types have different uses and different requirements. When calculating real world values in physics for example, your original numbers are probably less precise than your compiler so the computational errors will usually have less impact that measurement errors.", "edited": false, "comment_id": 27763216, "creation_date": 1379315265, "score": 0, "owner": {"display_name": "David M\u00e5rtensson", "reputation": 4748, "user_id": 479137, "user_type": "registered", "accept_rate": 100}}, {"body": "Yet another attempt to try to hit the nail on the head: Both <code>float</code> and <code>double</code> can <i>exactly</i> represent fractions of the form <code>p&#47;q</code> where <code>q</code> is a power of 2. E.g. 0.5, 3.25, 1/256, etc. <code>decimal</code> however can <i>exactly</i> represent fractions of the form <code>p&#47;q</code> where <code>q</code> is a power of 10 (ten). See <a href=\"http://stackoverflow.com/a/15348989/2700898\">this answer</a>. Though it is correct  that <code>decimal</code> has more significant digits, it is misleading to leave it at that; the <i>representation</i> is fundamentally different than <code>float</code> and <code>double</code> which lends <code>decimal</code> to precise decimal calculations.", "edited": false, "comment_id": 33528595, "creation_date": 1393613535, "score": 3, "owner": {"display_name": "Matt", "reputation": 11371, "user_id": 2700898, "user_type": "registered"}}, {"body": "Precision is not the main difference. Decimal being base 10 is the main difference.", "edited": false, "comment_id": 37760072, "creation_date": 1403701831, "score": 2, "owner": {"display_name": "Randall Sutton", "reputation": 719, "user_id": 91177, "user_type": "registered", "accept_rate": 78}}, {"body": "-1 no mention of range or different bases.", "edited": false, "comment_id": 41790828, "creation_date": 1414414261, "score": 0, "owner": {"display_name": "NPSF3000", "reputation": 1798, "user_id": 836713, "user_type": "registered"}}, {"body": "-1 while the main difference between float and double is precision, the main difference between float, double, and decimal is not.  It&#39;s true that decimal does have a wider precision, but more importantly, it also stores the values in a decimal-centric format, as opposed to float and double, which store their values in binary-centric format.  To give an example, the number &quot;.75&quot; in decimal is equivalent to &quot;.11&quot; in binary, because one half plus one forth == three fourths.  Naturally, some fractional decimal values (even within the ~7 digit range) can only be approximated by double and float.", "edited": false, "comment_id": 46347531, "creation_date": 1426373085, "score": 0, "owner": {"display_name": "BrainSlugs83", "reputation": 1893, "user_id": 398630, "user_type": "registered", "accept_rate": 75}}, {"body": "@Matt decimal can exactly represent fractions of the form p/q when q is a power of 2 or a power of 5 (i.e., prime factors of 10).  Consider 1/2 (0.5) and 1/5 (0.2), for example; neither denominator is a power of 10.", "edited": false, "reply_to_user": {"display_name": "Matt", "reputation": 11371, "user_id": 2700898, "user_type": "registered"}, "comment_id": 49038299, "creation_date": 1432722468, "score": 0, "owner": {"display_name": "phoog", "reputation": 27162, "user_id": 385844, "user_type": "registered", "accept_rate": 100}}, {"body": "@hmd consider a floating-point base-3 system, where 1/10 (rather 1/101) is an infinitely repeating fraction: 0.00220022....  However, 1/3 is not; it is 0.1. Consider Matt&#39;s comment: Fractions that can be exactly represented in a given base are those that use the prime factors of the base. Decimal does not have infinite precision; it has 28 decimal digits of precision. If it truly had infinite precision, you would be able to represent half of <code>0.0000000037252902984619140625m</code>.  But you can&#39;t; dividing that by 2 gives <code>0.0000000018626451492309570312m</code> instead of <code>0.00000000186264514923095703125</code>", "edited": false, "reply_to_user": {"display_name": "hmd", "reputation": 3758, "user_id": 777982, "user_type": "registered", "accept_rate": 73}, "comment_id": 49039045, "creation_date": 1432723518, "score": 0, "owner": {"display_name": "phoog", "reputation": 27162, "user_id": 385844, "user_type": "registered", "accept_rate": 100}}, {"body": "@phoog There is no requirement that p/q be in simplest form. In your examples, 1/2=5/10 and 1/5=2/10 and therefore have exact decimal representations. Another example is 1/20=0.05 in which the denominator is neither a power of 2, 5 or 10. You said &quot;decimal can exactly represent fractions of the form p/q when q is a power of 2 or a power of 5&quot;. Though technically correct, this is actually more restrictive than what I said because 1/10, for example, cannot be written in the form p/q where q is a power of 2 or 5.", "edited": false, "reply_to_user": {"display_name": "phoog", "reputation": 27162, "user_id": 385844, "user_type": "registered", "accept_rate": 100}, "comment_id": 49060973, "creation_date": 1432755262, "score": 0, "owner": {"display_name": "Matt", "reputation": 11371, "user_id": 2700898, "user_type": "registered"}}, {"body": "@hmd In addition to the values, like 0.1, that can be represented as <code>decimal</code> but not as <code>double</code>, there are some values that can be exactly represented as <code>double</code> but not <code>decimal</code>. Consider the fraction <code>1 &#47; 2^31</code>. The <code>decimal</code> representation is truncated, while the <code>double</code> representation is exact. The .NET <i>string representation</i> of the <code>double</code> is not exact, but the in-memory bit representation is exact. Jon Skeet has a class that will convert any double to the exact decimal string representation, which can be quite long: <a href=\"http://csharpindepth.com/Articles/General/FloatingPoint.aspx\" rel=\"nofollow\">csharpindepth.com/Articles/General/FloatingPoint.aspx</a>", "edited": false, "reply_to_user": {"display_name": "hmd", "reputation": 3758, "user_id": 777982, "user_type": "registered", "accept_rate": 73}, "comment_id": 49064692, "creation_date": 1432762235, "score": 0, "owner": {"display_name": "phoog", "reputation": 27162, "user_id": 385844, "user_type": "registered", "accept_rate": 100}}, {"body": "@Matt I also oversimplified. The real requirement is that after reducing the fraction to its simplest form q is the product of a power of 2 and a power of 5; that is, q&#39;s unique prime factors must be the same as or a subset of the unique prime factors of the base.  You can of course equivalently recast that as all of q`s prime factors being either a prime factor of the base or a divisor of p.", "edited": false, "reply_to_user": {"display_name": "Matt", "reputation": 11371, "user_id": 2700898, "user_type": "registered"}, "comment_id": 49064808, "creation_date": 1432762447, "score": 0, "owner": {"display_name": "phoog", "reputation": 27162, "user_id": 385844, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1236339182, "comment_count": 34, "score": 595, "owner": {"display_name": "cgreeno", "reputation": 19813, "user_id": 6088, "user_type": "registered"}, "last_editor": {"display_name": "cgreeno", "reputation": 19813, "user_id": 6088, "user_type": "registered"}, "last_edit_date": 1429029282, "up_vote_count": 600}, {"body": "<p><code>float</code> and <code>double</code> are <a href=\"http://csharpindepth.com/Articles/General/FloatingPoint.aspx\" rel=\"nofollow\">floating <em>binary</em> point types</a>. In other words, they represent a number like this:</p>\n\n<pre><code>10001.10010110011\n</code></pre>\n\n<p>The binary number and the location of the binary point are both encoded within the value.</p>\n\n<p><code>decimal</code> is a <a href=\"http://csharpindepth.com/Articles/General/Decimal.aspx\" rel=\"nofollow\">floating <em>decimal</em> point type</a>. In other words, they represent a number like this:</p>\n\n<pre><code>12345.65789\n</code></pre>\n\n<p>Again, the number and the location of the <em>decimal</em> point are both encoded within the value \u2013 that's what makes <code>decimal</code> still a floating point type instead of a fixed point type.</p>\n\n<p>The important thing to note is that humans are used to representing non-integers in a decimal form, and expect exact results in decimal representations; not all decimal numbers are exactly representable in binary floating point \u2013 0.1, for example \u2013 so if you use a binary floating point value you'll actually get an approximation to 0.1. You'll still get approximations when using a floating decimal point as well \u2013 the result of dividing 1 by 3 can't be exactly represented, for example.</p>\n\n<p>As for what to use when:</p>\n\n<ul>\n<li><p>For values which are \"naturally exact decimals\" it's good to use decimal. This is usually suitable for any concepts invented by humans: financial values are the most obvious example, but there are others too. Consider the score given to divers or ice skaters, for example.</p></li>\n<li><p>For values which are more artefacts of nature which can't really be measured <em>exactly</em> anyway, <code>float</code>/<code>double</code> are more appropriate. For example, scientific data would usually be represented in this form. Here, the original values won't be \"decimally accurate\" to start with, so it's not important for the expected results to maintain the \"decimal accuracy\". Floating binary point types are much faster to work with than decimals.</p></li>\n</ul>\n", "is_accepted": true, "tags": [], "answer_id": 618596, "down_vote_count": 3, "last_activity_date": 1440171932, "comments": [{"body": "<code>float</code>/<code>double</code> usually do not represent numbers as <code>101.101110</code>, normally it is represented as something like <code>1101010 * 2^(01010010)</code> - an exponent", "edited": false, "comment_id": 39425880, "creation_date": 1407966633, "score": 9, "owner": {"display_name": "Hazzard", "reputation": 174, "user_id": 2398020, "user_type": "registered", "accept_rate": 80}}, {"body": "@Hazzard: That&#39;s what the &quot;and the location of the binary point&quot; part of the answer means.", "edited": false, "reply_to_user": {"display_name": "Hazzard", "reputation": 174, "user_id": 2398020, "user_type": "registered", "accept_rate": 80}, "comment_id": 39426105, "creation_date": 1407967078, "score": 24, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I&#39;m surprised it hasn&#39;t been said already, <code>float</code> is a C# alias keyword and isn&#39;t a .Net type. it&#39;s <code>System.Single</code>.. <code>single</code> and <code>double</code> are floating binary point types.", "edited": false, "comment_id": 44957327, "creation_date": 1422978538, "score": 23, "owner": {"display_name": "Brett Caswell", "reputation": 527, "user_id": 3987238, "user_type": "registered"}}], "creation_date": 1236340562, "comment_count": 3, "score": 1325, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "Appulus", "reputation": 6485, "user_id": 1578713, "user_type": "registered", "accept_rate": 86}, "last_edit_date": 1440171932, "up_vote_count": 1328}, {"body": "<ol>\n<li>Double and float can be divided by integer zero without an exception at both compilation and run time.</li>\n<li>Decimal cannot be divided by integer zero. Compilation will always fail if you do that.</li>\n</ol>\n", "answer_id": 3360252, "tags": [], "down_vote_count": 0, "last_activity_date": 1280388070, "comments": [{"body": "They sure can!  They also also have a couple of &quot;magic&quot; values such as Infinity, Negative Infinity, and NaN (not a number) which make it very useful for detecting vertical lines while computing slopes...  Further, if you need to decide between calling float.TryParse, double.TryParse, and decimal.TryParse (to detect if a string is a number, for example), I recommend using double or float, as they will parse &quot;Infinity&quot;, &quot;-Infinity&quot;, and &quot;NaN&quot; properly, whereas decimal will not.", "edited": false, "comment_id": 7587439, "creation_date": 1308857382, "score": 4, "owner": {"display_name": "BrainSlugs83", "reputation": 1893, "user_id": 398630, "user_type": "registered", "accept_rate": 75}}], "creation_date": 1280388070, "comment_count": 1, "score": 15, "owner": {"display_name": "xport", "reputation": 2062, "user_id": 397524, "user_type": "registered", "accept_rate": 90}, "is_accepted": false, "up_vote_count": 15}, {"body": "<p>The Decimal structure is strictly geared to financial calculations requiring accuracy, which are relatively intolerant of rounding.  Decimals are not adequate for scientific applications, however, for several reasons:</p>\n\n<ul>\n<li>A certain loss of precision is acceptable in many scientific calculations because of the practical limits of the physical problem or artifact being measured.  Loss of precision is not acceptable in finance.</li>\n<li>Decimal is much (much) slower than float and double for most operations, primarily because floating point operations are done in binary, whereas Decimal stuff is done in base 10 (i.e. floats and doubles are handled by the FPU hardware, such as MMX/SSE, whereas decimals are calculated in software).</li>\n<li>Decimal has an unacceptably smaller value range than double, despite the fact that it supports more digits of precision. Therefore, Decimal can't be used to represent many scientific values.</li>\n</ul>\n", "answer_id": 5650441, "tags": [], "down_vote_count": 1, "last_activity_date": 1302702901, "creation_date": 1302702901, "comment_count": 0, "score": 33, "owner": {"display_name": "Mark Jones", "reputation": 906, "user_id": 703178, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 34}, {"body": "<p><code>float</code> 7 digits of precision </p>\n\n<p><code>double</code> has about 15 digits of precision</p>\n\n<p><code>decimal</code> has about 28 digits of precision</p>\n\n<p>If you need better accuracy, use double instead of float.\nIn modern CPUs both data types have almost the same performance. The only benifit of using float is they take up less space. Practically matters only if you have got many of them.</p>\n\n<p>I found this is interesting. <a href=\"http://download.oracle.com/docs/cd/E19957-01/806-3568/ncg_goldberg.html\">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a></p>\n", "is_accepted": false, "tags": [], "answer_id": 7224889, "down_vote_count": 4, "last_activity_date": 1405460534, "comments": [{"body": "-1: Use decimal in accounting applications.", "edited": false, "comment_id": 25449034, "creation_date": 1373134202, "score": 15, "owner": {"display_name": "Roger Lipscombe", "reputation": 39946, "user_id": 8446, "user_type": "registered", "accept_rate": 69}}, {"body": "@RogerLipscombe: I would consider <code>double</code> proper in accounting applications in those cases (and basically only those cases) where no integer type larger than 32 bits was available, and the <code>double</code> was being used as though it were a 53-bit integer type (e.g. to hold a whole number of pennies, or a whole number of hundredths of a cent).  Not much use for such things nowadays, but many languages gained the ability to use double-precision floating-point values long before they gained 64-bit (or in some cases even 32-bit!) integer math.", "edited": false, "reply_to_user": {"display_name": "Roger Lipscombe", "reputation": 39946, "user_id": 8446, "user_type": "registered", "accept_rate": 69}, "comment_id": 36873872, "creation_date": 1401386254, "score": 1, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}, {"body": "Your answer implies precision is the only difference between these data types. Given binary floating point arithmetic is typically implemented in <i>hardware FPU</i>, performance is a significant difference. This may be inconsequential for some applications, but is critical for others.", "edited": false, "comment_id": 44307221, "creation_date": 1421291770, "score": 1, "owner": {"display_name": "saille", "reputation": 4243, "user_id": 30246, "user_type": "registered", "accept_rate": 100}}, {"body": "@supercat double is <i>never</i> proper in accounting applications.  Because Double can only approximate decimal values (even within the range of its own precision).  This is because double stores the values in a base-2 (binary)-centric format.", "edited": false, "reply_to_user": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}, "comment_id": 46347619, "creation_date": 1426373417, "score": 3, "owner": {"display_name": "BrainSlugs83", "reputation": 1893, "user_id": 398630, "user_type": "registered", "accept_rate": 75}}, {"body": "@BrainSlugs83: Use of floating-point types to hold <i>non-whole-number</i> quantities would be improper, but it was historically very common for languages to have floating-point types that could precisely represent larger whole-number values than their integer types could represent.  Perhaps the most extreme example was Turbo-87 whose only integer types were limited to -32768 to +32767, but whose <code>Real</code> could IIRC represent values up to 1.8E+19 with unit precision.  I would think it would be much saner for an accounting application to use <code>Real</code> to represent a whole number of pennies than...", "edited": false, "reply_to_user": {"display_name": "BrainSlugs83", "reputation": 1893, "user_id": 398630, "user_type": "registered", "accept_rate": 75}, "comment_id": 46366378, "creation_date": 1426448728, "score": 2, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}, {"body": "...for it to try to perform multi-precision math using a bunch of 16-bit values.  For most other languages the difference wasn&#39;t that extreme, but for a long time it has been very common for languages not to have any integer type that went beyond 4E9 but have a <code>double</code> type which had unit accuracy up to 9E15.  If one needs to store whole numbers which are bigger than the largest available integer type, using <code>double</code> is apt to be simpler and more efficient than trying to fudge multi-precision math, especially given that while processors have instructions to perform 16x16-&gt;32 or...", "edited": false, "comment_id": 46366411, "creation_date": 1426448822, "score": 1, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}, {"body": "...32x32-&gt;64 multiplication, programming languages generally don&#39;t.", "edited": false, "comment_id": 46366479, "creation_date": 1426449061, "score": 0, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}], "creation_date": 1314576387, "comment_count": 7, "score": 22, "owner": {"display_name": "CharithJ", "reputation": 20451, "user_id": 591656, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "ABCD", "reputation": 375, "user_id": 888052, "user_type": "registered", "accept_rate": 86}, "last_edit_date": 1405460534, "up_vote_count": 26}, {"body": "<p>This has been an interesting thread of me, as today, we've just had a nasty little bug, concerning \"decimal\" having less precision than a \"float\".</p>\n\n<p>In our C# code, we are reading numeric values from an Excel spreadsheet, converting them into a <em>decimal</em>, then sending this <em>decimal</em> back to a Service, to save into a <em>SQL Server</em> database.</p>\n\n<pre><code>Microsoft.Office.Interop.Excel.Range cell = ...\nobject cellValue = cell.Value2;\nif (cellValue != null)\n{\n    decimal value = 0;\n    Decimal.TryParse(cellValue.ToString(), out value);\n}\n</code></pre>\n\n<p>Now, for <em>almost all</em> of our Excel values, this worked beautifully.  But for some, very small Excel values, using \"<strong>decimal.TryParse</strong>\" lost the value completely.  One such example:</p>\n\n<ul>\n<li><p>cellValue = <strong>0.00006317592</strong></p></li>\n<li><p><em>Decimal.TryParse(cellValue.ToString(), out value);</em> would return <strong>0</strong></p></li>\n</ul>\n\n<p>The solution, bizarrely, was to convert the Excel values into a <em>double</em> first, and then into a <em>decimal</em>.</p>\n\n<pre><code>Microsoft.Office.Interop.Excel.Range cell = ...\nobject cellValue = cell.Value2;\nif (cellValue != null)\n{\n    double valueDouble = 0;\n    double.TryParse(cellValue.ToString(), out valueDouble);\n    decimal value = (decimal)valueDouble;\n    ...\n}\n</code></pre>\n\n<p>Even though <em>double</em> has less precision than a <em>decimal</em>, this actually ensured small numbers would still be recognised.  For some reason, \"<strong>double.TryParse</strong>\" was actually able to retrieve such small numbers, whereas \"<strong>decimal.TryParse</strong>\" would set them to zero.</p>\n\n<p>Odd.  Very odd.  </p>\n", "is_accepted": false, "tags": [], "answer_id": 10171572, "down_vote_count": 3, "last_activity_date": 1334651302, "comments": [{"body": "Out of curiosity, what was the raw value of cellValue.ToString()?  Decimal.TryParse(&quot;0.00006317592&quot;, out val) seems to work...", "edited": false, "comment_id": 16258081, "creation_date": 1346111869, "score": 3, "owner": {"display_name": "micahtan", "reputation": 7788, "user_id": 107290, "user_type": "registered"}}, {"body": "-1 Don&#39;t get me wrong, if true, it&#39;s very interesting but this is a separate question, it&#39;s certainly not an answer to this question.", "edited": false, "comment_id": 24026474, "creation_date": 1369232345, "score": 8, "owner": {"display_name": "weston", "reputation": 20502, "user_id": 360211, "user_type": "registered", "accept_rate": 77}}, {"body": "Maybe because the Excel cell was returning a double and ToString() value was &quot;6.31759E-05&quot; therefore the decimal.Parse() didn&#39;t like the notation. I bet if you checked the return value of Decimal.TryParse() it would have been false.", "edited": false, "comment_id": 41436556, "creation_date": 1413405892, "score": 2, "owner": {"display_name": "SergioL", "reputation": 3775, "user_id": 92526, "user_type": "registered", "accept_rate": 100}}, {"body": "@weston Answers often complement other answers by filling in nuances they have missed. This answer highlights a difference in terms of parsing. It is very much an answer to the question!", "edited": false, "reply_to_user": {"display_name": "weston", "reputation": 20502, "user_id": 360211, "user_type": "registered", "accept_rate": 77}, "comment_id": 48801483, "creation_date": 1432137159, "score": 1, "owner": {"display_name": "Robino", "reputation": 834, "user_id": 833208, "user_type": "registered", "accept_rate": 80}}], "creation_date": 1334568224, "comment_count": 4, "score": 5, "owner": {"display_name": "Mike Gledhill", "reputation": 5270, "user_id": 391605, "user_type": "registered", "accept_rate": 38}, "last_editor": {"display_name": "Mike Gledhill", "reputation": 5270, "user_id": 391605, "user_type": "registered", "accept_rate": 38}, "last_edit_date": 1334651302, "up_vote_count": 8}, {"body": "<p>Integers, as was mentioned, are whole numbers. They can't store the point something, like .7, .42, and .007. If you need to store numbers that are not whole numbers, you need a different type of variable. You can use the double type, or the float type. You set these types of variables up in exactly the same way: instead of using the word int, you type double, or float. Like this:</p>\n\n<pre><code>float myFloat;\ndouble myDouble;\n</code></pre>\n\n<p>(Float is short for \"floating point\", and just means a number with a point something on the end.)</p>\n\n<p>The difference between the two is in the size of the numbers that they can hold. For float, you can have up to 7 digits in your number. For doubles, you can have up to 16 digits. To be more precise, here's the official size:</p>\n\n<pre><code>float:  1.5 \u00d7 10^-45  to 3.4 \u00d7 10^38  \ndouble: 5.0 \u00d7 10^-324 to 1.7 \u00d7 10^308\n</code></pre>\n\n<p>Float is a 32-bit number and double is a 64-bit number.</p>\n\n<p>Double click your new button to get at the code. Add the following three lines to your button code:</p>\n\n<pre><code>double myDouble;\nmyDouble = 0.007;\nMessageBox.Show(myDouble.ToString());\n</code></pre>\n\n<p>Halt your program and return to the coding window. Change this line:</p>\n\n<pre><code>myDouble = 0.007;\nmyDouble = 12345678.1234567;\n</code></pre>\n\n<p>Run your programme and click your double button. The message box correctly displays the number. Add another number on the end, though, and C# will again round up or down. The moral is, if you want accuracy, careful of rounding!</p>\n", "is_accepted": false, "tags": [], "answer_id": 10701720, "down_vote_count": 0, "last_activity_date": 1434744826, "comments": [{"body": "Upvoted for using .42 and .007 in your example. : D", "edited": false, "comment_id": 26660144, "creation_date": 1376327674, "score": 0, "owner": {"display_name": "PruitIgoe", "reputation": 1663, "user_id": 468455, "user_type": "registered", "accept_rate": 61}}], "creation_date": 1337688317, "comment_count": 1, "score": 8, "owner": {"display_name": "daniel", "reputation": 149, "user_id": 1389261, "user_type": "registered"}, "last_editor": {"display_name": "royhowie", "reputation": 5432, "user_id": 2476755, "user_type": "registered", "accept_rate": 91}, "last_edit_date": 1434744826, "up_vote_count": 8}, {"body": "<p><img src=\"http://i.stack.imgur.com/PnZ2a.png\" alt=\"enter image description here\"></p>\n\n<p>for more information you can go to source of this picture:</p>\n\n<p><a href=\"http://social.msdn.microsoft.com/Forums/en-US/csharpgeneral/thread/921a8ffc-9829-4145-bdc9-a96c1ec174a5\">http://social.msdn.microsoft.com/Forums/en-US/csharpgeneral/thread/921a8ffc-9829-4145-bdc9-a96c1ec174a5</a></p>\n", "answer_id": 16984608, "tags": [], "down_vote_count": 2, "last_activity_date": 1370609410, "comments": [{"body": "-1 for claiming that decimal is 96 bits.  <a href=\"http://msdn.microsoft.com/en-us/library/364x0z75.aspx\" rel=\"nofollow\">MSDN clearly says 128.</a>", "edited": false, "comment_id": 41630373, "creation_date": 1413940147, "score": 2, "owner": {"display_name": "Ben Voigt", "reputation": 182054, "user_id": 103167, "user_type": "registered", "accept_rate": 50}}, {"body": "And if you dig deeper, it&#39;s 102 bits used, 128 stored.  No way to fit that in 12 bytes.", "edited": false, "comment_id": 41630547, "creation_date": 1413941076, "score": 0, "owner": {"display_name": "Ben Voigt", "reputation": 182054, "user_id": 103167, "user_type": "registered", "accept_rate": 50}}, {"body": "You left out the biggest difference, which is the base used for the decimal type (decimal is stored as base 10, all other numeric types listed are base 2).", "edited": false, "comment_id": 46347694, "creation_date": 1426373728, "score": 0, "owner": {"display_name": "BrainSlugs83", "reputation": 1893, "user_id": 398630, "user_type": "registered", "accept_rate": 75}}, {"body": "The value ranges for the Single and Double are not depicted correctly in the above image or the source forum post. Since we can&#39;t easily superscript the text here, use the caret character: Single should be 10^-45 and 10^38, and Double should be 10^-324 and 10^308. Also, MSDN has the float with a range of -3.4x10^38 to +3.4x10^38. Search MSDN for System.Single and System.Double in case of link changes. Single: <a href=\"https://msdn.microsoft.com/en-us/library/b1e65aza.aspx\" rel=\"nofollow\">msdn.microsoft.com/en-us/library/b1e65aza.aspx</a> Double: <a href=\"https://msdn.microsoft.com/en-us/library/678hzkk9.aspx\" rel=\"nofollow\">msdn.microsoft.com/en-us/library/678hzkk9.aspx</a>", "edited": false, "comment_id": 50006013, "creation_date": 1435000687, "score": 0, "owner": {"display_name": "deegee", "reputation": 620, "user_id": 1655625, "user_type": "registered"}}], "creation_date": 1370609410, "comment_count": 4, "score": 20, "owner": {"display_name": "user2389722", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 22}, {"body": "<p>float   ~ \u00b11.5 x 10-45 to \u00b13.4 x 1038 --------7 figures<br/>\ndouble  ~ \u00b15.0 x 10-324 to \u00b11.7 x 10308 ------15 or 16 figures<br/>\ndecimal ~ \u00b11.0 x 10-28 to \u00b17.9 x 1028 --------28 or 29 figures<br/></p>\n", "answer_id": 20876624, "tags": [], "down_vote_count": 0, "last_activity_date": 1388638901, "creation_date": 1388638901, "comment_count": 0, "score": 5, "owner": {"display_name": "Mukesh Kumar", "reputation": 602, "user_id": 3074275, "user_type": "registered", "accept_rate": 56}, "is_accepted": false, "up_vote_count": 5}, {"body": "<p>For applications such as games and embedded systems where memory and performance are both critical, float is usually the numeric type of choice as it is faster and half the size of a double. Integers used to be the weapon of choice, but floating point performance has overtaken integer in modern processors. Decimal is <a href=\"http://5isrightout.com/\" rel=\"nofollow\">right out!</a></p>\n", "answer_id": 23700141, "tags": [], "down_vote_count": 0, "last_activity_date": 1400257289, "creation_date": 1400257289, "comment_count": 0, "score": 2, "owner": {"display_name": "yoyo", "reputation": 1639, "user_id": 503688, "user_type": "registered", "accept_rate": 75}, "is_accepted": false, "up_vote_count": 2}, {"body": "<p>The Decimal, Double, and Float variable types are different in the way that they store the values. Precision is the main difference where float is a single precision (32 bit) floating point data type, double is a double precision (64 bit) floating point data type and decimal is a 128-bit floating point data type.</p>\n\n<p>Float - 32 bit (7 digits)</p>\n\n<p>Double - 64 bit (15-16 digits)</p>\n\n<p>Decimal - 128 bit (28-29 significant digits)</p>\n\n<p>More about...<a href=\"http://net-informations.com/q/faq/float.html\" rel=\"nofollow\">the difference between Decimal, Float and Double</a></p>\n", "is_accepted": false, "tags": [], "answer_id": 26116049, "down_vote_count": 0, "last_activity_date": 1421153795, "creation_date": 1412065344, "comment_count": 0, "score": 1, "owner": {"display_name": "warnerl", "reputation": 11, "user_id": 4094148, "user_type": "unregistered"}, "last_editor": {"display_name": "John Saunders", "reputation": 130738, "user_id": 76337, "user_type": "registered", "accept_rate": 70}, "last_edit_date": 1421153795, "up_vote_count": 1}, {"body": "<p>The main difference between each of these is the precision.</p>\n\n<p><code>float</code> is a <code>32-bit</code> number, <code>double</code> is a <code>64-bit</code> number and <code>decimal</code> is a <code>128-bit</code> number.</p>\n", "is_accepted": false, "tags": [], "answer_id": 27592599, "down_vote_count": 3, "last_activity_date": 1433578022, "creation_date": 1419187812, "comment_count": 0, "score": -2, "owner": {"display_name": "user3776645", "reputation": 25, "user_id": 3776645, "user_type": "registered"}, "last_editor": {"display_name": "Khan Imran Ali", "reputation": 2281, "user_id": 2723943, "user_type": "registered", "accept_rate": 93}, "last_edit_date": 1433578022, "up_vote_count": 1}, {"body": "<p>No one has mentioned that</p>\n\n<blockquote>\n  <p>In default settings, Floats (System.Single) and doubles (System.Double) will never use\n  overflow checking while Decimal (System.Decimal) will always use\n  overflow checking.</p>\n</blockquote>\n\n<p>I mean </p>\n\n<pre><code>decimal myNumber = decimal.MaxValue;\nmyNumber += 1;\n</code></pre>\n\n<p>throws <strong>OverflowException</strong>.</p>\n\n<p>But these do not:</p>\n\n<pre><code>float myNumber = float.MaxValue;\nmyNumber += 1;\n</code></pre>\n\n<p>&amp;</p>\n\n<pre><code>double myNumber = double.MaxValue;\nmyNumber += 1;\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 27742824, "down_vote_count": 0, "last_activity_date": 1429106110, "comments": [{"body": "<code>float.MaxValue+1 == float.MaxValue</code>, just as <code>decimal.MaxValue+0.1D == decimal.MaxValue</code>.  Perhaps you meant something like <code>float.MaxValue*2</code>?", "edited": false, "comment_id": 44265455, "creation_date": 1421194888, "score": 0, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}, {"body": "@supercar But it is not true that  decimal.MaxValue + 1 == decimal.MaxValue", "edited": false, "reply_to_user": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}, "comment_id": 44270446, "creation_date": 1421215928, "score": 0, "owner": {"display_name": "Grkmksk", "reputation": 550, "user_id": 2959540, "user_type": "registered"}}, {"body": "@supercar decimal.MaxValue + 0.1m == decimal.MaxValue ok", "edited": false, "reply_to_user": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}, "comment_id": 44270593, "creation_date": 1421216385, "score": 0, "owner": {"display_name": "Grkmksk", "reputation": 550, "user_id": 2959540, "user_type": "registered"}}, {"body": "The <code>System.Decimal</code> throws an exception just before it becomes unable to distinguish whole units, but if an application is supposed to be dealing with e.g. dollars and cents, that could be too late.", "edited": false, "comment_id": 44289870, "creation_date": 1421252101, "score": 0, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}], "creation_date": 1420204359, "comment_count": 4, "score": 8, "owner": {"display_name": "Grkmksk", "reputation": 550, "user_id": 2959540, "user_type": "registered"}, "last_editor": {"display_name": "Grkmksk", "reputation": 550, "user_id": 2959540, "user_type": "registered"}, "last_edit_date": 1429106110, "up_vote_count": 8}], "last_editor": {"display_name": "ProgramFOX", "reputation": 3397, "user_id": 2619912, "user_type": "registered"}, "down_vote_count": 1, "close_vote_count": 0, "question_id": 618535}, {"last_activity_date": 1440014146, "accepted_answer_id": 32102705, "creation_date": 1440006965, "owner": {"display_name": "Joe Almore", "reputation": 457, "user_id": 866390, "user_type": "registered", "accept_rate": 46}, "last_edit_date": 1440014146, "favorite_count": 0, "view_count": 110, "delete_vote_count": 0, "title": "C# - Get Integer Byte Array in String", "comments": [{"body": "What do you mean by &quot;represent in String as a Byte array&quot;? A string is a string, a byte array is a byte array. Do you <i>really</i> want unprintable characters in there? This sounds like a bad idea to me - what&#39;s the context?", "edited": false, "comment_id": 52099525, "creation_date": 1440007656, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet This is a prefix that represents the length of a message. And the String has to go in that exact format so the receiver can parse the String properly. Using NamedPipes protocol. So, the first 4 bytes of the message is the length of the message, and the rest of the bytes of the message is its content.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 52100261, "creation_date": 1440008854, "score": 0, "owner": {"display_name": "Joe Almore", "reputation": 457, "user_id": 866390, "user_type": "registered", "accept_rate": 46}}, {"body": "It sounds like you should be writing this <i>as binary data</i> rather than as a string. Fundamentally it <i>isn&#39;t</i> text, so don&#39;t try to act as if it is.", "edited": false, "comment_id": 52100988, "creation_date": 1440009940, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet What do you want me to say? It works embedded as text along with the message, and the message is received and parsed properly by the other endpoint.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 52101159, "creation_date": 1440010214, "score": 0, "owner": {"display_name": "Joe Almore", "reputation": 457, "user_id": 866390, "user_type": "registered", "accept_rate": 46}}, {"body": "And if you ever decide to propagate that text in a different way? Chances are very high it will break. I have seen hundreds and <i>hundreds</i> of people get bitten by treating arbitrary binary data as text over the years. Just don&#39;t. There&#39;s no need to here, so why do it? You&#39;ve got a binary data stream over the named pipe - why introduce an extra level of text encoding to it pointlessly? See my answer for the approach I&#39;d use.", "edited": false, "comment_id": 52101218, "creation_date": 1440010319, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "comment_count": 5, "score": 0, "body": "<p>I have a random integer value which I need to represent in String as a Byte array. For example:</p>\n\n<pre><code>int value = 32;\nString strValue = getStringByteArray(value);\nConsole.WriteLine(strValue); // should write: \" \\0\\0\\0\"\n</code></pre>\n\n<p>If <code>value = 11</code> then <code>getStringByteArray(value)</code> shuld return <code>\"\\v\\0\\0\\0\"</code>. </p>\n\n<p>If <code>value = 13</code> then <code>getStringByteArray(value)</code> shuld return <code>\"\\r\\0\\0\\0\"</code>. </p>\n\n<p>And so on.</p>\n\n<p>Any idea on how to implement the method <code>getStringByteArray(int value)</code> in C#?</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>This is the code that receives the data from the C# NamedPipe Server:</p>\n\n<pre><code>bool CFilePipe::ReadString(int m_handle, string &amp;value)\n{\n   //--- check for data\n   if(WaitForRead(sizeof(int)))\n     {\n      ResetLastError();\n      int size=FileReadInteger(m_handle);\n      if(GetLastError()==0)\n        {\n         //--- check for data\n         if(WaitForRead(size))\n           {\n            value=FileReadString(m_handle,size);\n            return(size==StringLen(value));\n           }\n        }\n     }\n   //--- failure\n   return(false);\n}\n</code></pre>\n", "is_answered": true, "up_vote_count": 0, "tags": ["c#", "arrays", "encoding", "character-encoding"], "reopen_vote_count": 0, "answer_count": 5, "answers": [{"body": "<p>This should help with that.</p>\n\n<pre><code>class Program\n    {\n        static void Main(string[] args)\n        {\n            Random rand = new Random();\n            int number = rand.Next(1, 1000);\n            byte[] intBytes = BitConverter.GetBytes(number);\n            string answer = \"\";\n\n            for (int i = 0; i &lt; intBytes.Length; i++)\n            {\n                answer += intBytes[i] + @\"\\\";\n            }\n\n            Console.WriteLine(answer);\n            Console.WriteLine(number);\n\n            Console.ReadKey();\n        }\n    }\n</code></pre>\n", "answer_id": 32102596, "tags": [], "down_vote_count": 0, "last_activity_date": 1440007587, "creation_date": 1440007587, "comment_count": 0, "score": 1, "owner": {"display_name": "John Thompson", "reputation": 26, "user_id": 3958223, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 1}, {"body": "<p>Well. First of all you should get bytes from integer. You can do it with <a href=\"https://msdn.microsoft.com/ru-ru/library/system.bitconverter(v=vs.110).aspx\" rel=\"nofollow\">BitConverter</a>:</p>\n\n<pre><code>var bytes = BitConverter.GetBytes(value);\n</code></pre>\n\n<p>Next, here is three variants. First - if you want to get result in binary format. Just take all your bytes and write as it is:</p>\n\n<pre><code>var str =  string.Concat(bytes.Select(b =&gt; Convert.ToString(b, 2)));\n</code></pre>\n\n<p>Second variant. If you want convert your byte array to hexadecimal string:</p>\n\n<pre><code>var hex = BitConverter.ToString(array).Replace(\"-\",\"\");     \n</code></pre>\n\n<p>Third variant. Your representation (\"\\v\\0\\0\\0\") - it is simple converting byte to char. Use this:</p>\n\n<pre><code>var s = bytes.Aggregate(string.Empty, (current, t) =&gt; current + Convert.ToChar(t));\n</code></pre>\n", "is_accepted": true, "tags": [], "answer_id": 32102705, "down_vote_count": 1, "last_activity_date": 1440008735, "comments": [{"body": "Hi thanks for your answer but the output is not in binary nor in hex, this is the output <code>\\v\\0\\0\\0</code>.", "edited": false, "comment_id": 52100044, "creation_date": 1440008489, "score": 0, "owner": {"display_name": "Joe Almore", "reputation": 457, "user_id": 866390, "user_type": "registered", "accept_rate": 46}}, {"body": "I understood. Added third variant, it gives same result as you want. Check it please.", "edited": false, "reply_to_user": {"display_name": "Joe Almore", "reputation": 457, "user_id": 866390, "user_type": "registered", "accept_rate": 46}, "comment_id": 52100200, "creation_date": 1440008756, "score": 0, "owner": {"display_name": "Artem Kulikov", "reputation": 1512, "user_id": 5168225, "user_type": "registered"}}, {"body": "Third variant does the trick. Thank you very much.", "edited": false, "comment_id": 52100449, "creation_date": 1440009147, "score": 0, "owner": {"display_name": "Joe Almore", "reputation": 457, "user_id": 866390, "user_type": "registered", "accept_rate": 46}}, {"body": "Glad to help you :)", "edited": false, "reply_to_user": {"display_name": "Joe Almore", "reputation": 457, "user_id": 866390, "user_type": "registered", "accept_rate": 46}, "comment_id": 52100528, "creation_date": 1440009282, "score": 0, "owner": {"display_name": "Artem Kulikov", "reputation": 1512, "user_id": 5168225, "user_type": "registered"}}, {"body": "This is treating binary data as text, when it&#39;s not. It&#39;s very error prone, and should just be avoided to start with. Yes, it&#39;s what the OP sort of asked for (although admittedly not as simple a way as <code>new string(bytes.Select(x =&gt; (char) x).ToArray())</code>) but the <i>underlying</i> requirement is better solved by not using text for this at all.", "edited": false, "comment_id": 52101142, "creation_date": 1440010192, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1440007938, "comment_count": 5, "score": 1, "owner": {"display_name": "Artem Kulikov", "reputation": 1512, "user_id": 5168225, "user_type": "registered"}, "last_editor": {"display_name": "Artem Kulikov", "reputation": 1512, "user_id": 5168225, "user_type": "registered"}, "last_edit_date": 1440008735, "up_vote_count": 2}, {"body": "<p>Obviously, you should implement two steps to achieve the goal:</p>\n\n<ol>\n<li><p>Extract bytes from the integer in the appropriate order (little-endian or big-endian, it's up to you to decide), using bit arithmetics.</p></li>\n<li><p>Merge extracted bytes into string using the format you need.</p></li>\n</ol>\n\n<p>Possible implementation:</p>\n\n<pre><code>using System;\nusing System.Text;\n\npublic class Test\n{\n    public static void Main()\n    {\n        Int32 value = 5152;\n        byte[] bytes = new byte[4];\n        for (int i = 0; i &lt; 4; i++)\n        {\n            bytes[i] = (byte)((value &gt;&gt; i * 8) &amp; 0xFF);\n        }\n\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i &lt; 4; i++)\n        {\n            result.Append(\"\\\\\" + bytes[i].ToString(\"X2\"));\n        }\n\n        Console.WriteLine(result);\n    }\n}\n</code></pre>\n\n<p>Ideone snippet: <a href=\"http://ideone.com/wLloo1\" rel=\"nofollow\">http://ideone.com/wLloo1</a></p>\n", "answer_id": 32102711, "tags": [], "down_vote_count": 0, "last_activity_date": 1440007979, "creation_date": 1440007979, "comment_count": 0, "score": 1, "owner": {"display_name": "Nipheris", "reputation": 217, "user_id": 3927447, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 1}, {"body": "<p>I think you are saying that you want to convert each byte into a character literal, using escape sequences for the non printable characters.</p>\n\n<p>After converting the integer to 4 bytes, cast to char. Then use Char.IsControl() to identify the non-printing characters. Use the printable char directly, and use a lookup table to find the corresponding escape sequence for each non-printable char.</p>\n", "answer_id": 32102866, "tags": [], "down_vote_count": 0, "last_activity_date": 1440008485, "creation_date": 1440008485, "comment_count": 0, "score": 1, "owner": {"display_name": "Dave Mackersie", "reputation": 555, "user_id": 4096470, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 1}, {"body": "<p>Don't take this approach at all. You should be writing to a binary stream of some description - and write the <em>binary data</em> for the length of the packet/message, followed by the message itself. For example:</p>\n\n<pre><code>BinaryWriter writer = new BinaryWriter(stream);\nbyte[] data = Encoding.UTF8.GetBytes(text);\nwriter.Write(data.Length);\nwriter.Write(data);\n</code></pre>\n\n<p>Then at the other end, you'd use:</p>\n\n<pre><code>BinaryReader reader = new BinaryReader(stream);\nint length = reader.ReadInt32();\nbyte[] data = reader.ReadBytes(length);\nstring text = Encoding.UTF8.GetString(data);\n</code></pre>\n\n<p>No need to treat binary data as text at all.</p>\n", "answer_id": 32103358, "tags": [], "down_vote_count": 0, "last_activity_date": 1440010096, "comments": [{"body": "Hi, thanks for your answer. Your method seems to work but partially. With the tests I ran using your method, I send the String &quot;Avogadro&quot; and the other terminal receives &quot;Avogadr&quot; with an unprintable char in the first character. Afterward, I increase the length by 1 and it receives the complete message but with an unprintable character in the beginning. What would be causing this?", "edited": false, "comment_id": 52101557, "creation_date": 1440010895, "score": 0, "owner": {"display_name": "Joe Almore", "reputation": 457, "user_id": 866390, "user_type": "registered", "accept_rate": 46}}, {"body": "@JoeAlmore: Hard to tell without seeing your actual test code.", "edited": false, "reply_to_user": {"display_name": "Joe Almore", "reputation": 457, "user_id": 866390, "user_type": "registered", "accept_rate": 46}, "comment_id": 52102836, "creation_date": 1440013018, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Just added the code which receives the data from the NamedPipe Server. The code works, but it is retrieving one additional character in the beginning hence I have to increase the length of the message by 1. It reads first the four bytes of the message and then proceeds to read the message with that size. I test to send the very same String with the same method to a Java application, and Java receives the complete String without any additional character.", "edited": false, "comment_id": 52103625, "creation_date": 1440014303, "score": 0, "owner": {"display_name": "Joe Almore", "reputation": 457, "user_id": 866390, "user_type": "registered", "accept_rate": 46}}, {"body": "@JoeAlmore: Well we have no idea what <code>FileReadInteger</code>, <code>FileReadString</code> or <code>StringLen</code> do, which doesn&#39;t help. You need to work out what&#39;s happening to that additional byte - I suggest you try to look at <i>exactly</i> what binary data is being transmitted. This is definitely an implementation issue rather than a conceptual one - the idea of &quot;write an integer, write the data&quot; is a very simple and widely used one.", "edited": false, "reply_to_user": {"display_name": "Joe Almore", "reputation": 457, "user_id": 866390, "user_type": "registered", "accept_rate": 46}, "comment_id": 52104006, "creation_date": 1440014992, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Those methods do what they say in their names. Anyways, I found the problem. That additional character is the size of the String embedded in the String itself. Seems like the NamedPipe server is still adding the length of the message in the first 4 bytes, regardless of having sent the length before. Well, that&#39;s no big deal, I can remove those four bytes from that client when it receives messages. Thanks.", "edited": false, "comment_id": 52104341, "creation_date": 1440015557, "score": 0, "owner": {"display_name": "Joe Almore", "reputation": 457, "user_id": 866390, "user_type": "registered", "accept_rate": 46}}], "creation_date": 1440010096, "comment_count": 5, "score": 7, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": false, "up_vote_count": 7}], "last_editor": {"display_name": "Joe Almore", "reputation": 457, "user_id": 866390, "user_type": "registered", "accept_rate": 46}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 32102433}, {"last_activity_date": 1439976567, "accepted_answer_id": 32091561, "creation_date": 1439975474, "owner": {"display_name": "konrad.kruczynski", "reputation": 12550, "user_id": 549315, "user_type": "registered", "accept_rate": 93}, "last_edit_date": 1439976500, "favorite_count": 7, "view_count": 752, "delete_vote_count": 0, "title": "Why is the base type of an open generic type not open?", "comments": [{"body": "The <code>System.Type</code> class does not have a method named <code>GetGenericTypeArguments</code>. Did you mean <code>GetGenericArguments</code>?", "edited": false, "comment_id": 52077342, "creation_date": 1439975763, "score": 3, "owner": {"display_name": "Wazner", "reputation": 152, "user_id": 5082427, "user_type": "registered"}}, {"body": "@Wazner: yup, fixed.", "edited": false, "reply_to_user": {"display_name": "Wazner", "reputation": 152, "user_id": 5082427, "user_type": "registered"}, "comment_id": 52077368, "creation_date": 1439975800, "score": 0, "owner": {"display_name": "konrad.kruczynski", "reputation": 12550, "user_id": 549315, "user_type": "registered", "accept_rate": 93}}, {"body": "<a href=\"https://dotnetfiddle.net/n6jJ4A\" rel=\"nofollow\">dotnetfiddle.net/n6jJ4A</a> - I get 0 and 1.", "edited": false, "comment_id": 52077511, "creation_date": 1439976027, "score": 0, "owner": {"display_name": "Piotr Zierhoffer", "reputation": 2644, "user_id": 882200, "user_type": "registered", "accept_rate": 93}}, {"body": "What&#39;s more, <code>Console.WriteLine(typeof(B&lt;&gt;).BaseType.GenericTypeArguments[0].FullName == null);</code> gives true.", "edited": false, "comment_id": 52077604, "creation_date": 1439976161, "score": 0, "owner": {"display_name": "Piotr Zierhoffer", "reputation": 2644, "user_id": 882200, "user_type": "registered", "accept_rate": 93}}], "comment_count": 4, "score": 17, "body": "<p>Consider a piece of the code below:</p>\n\n<pre><code>public class A&lt;T&gt; { }\n\npublic class B&lt;T&gt; : A&lt;T&gt; { }\n</code></pre>\n\n<p>In such case:</p>\n\n<pre><code>var a = typeof(A&lt;&gt;).GenericTypeArguments.Length;\n</code></pre>\n\n<p><code>a</code> has the value <code>0</code>, which is not surprising. This, however, is somehow unexpected for me:</p>\n\n<pre><code>var b = typeof(B&lt;&gt;).BaseType.GenericTypeArguments.Length;\n</code></pre>\n\n<p>where <code>b</code> has the value <code>1</code>. So it is closed using a non-existing type of name \"T\" and only doing <code>GetGenericTypeDefinition</code> on it makes it open again. Why is that?</p>\n", "is_answered": true, "up_vote_count": 18, "tags": ["c#", "reflection"], "reopen_vote_count": 0, "answer_count": 2, "answers": [{"body": "<p>The <a href=\"https://msdn.microsoft.com/en-us/library/system.type.generictypearguments(v=vs.110).aspx\" rel=\"nofollow\">Type.GenericTypeArguments</a> property returns the types used as generic parameters for a closed generic type, for open generic types, it returns an emtpy array.</p>\n\n<p>The reason <code>typeof(B&lt;&gt;).BaseType.GenericTypeArguments</code> does not return an empty array is because it's not a open generic type.</p>\n\n<p>To illustrate this behaviour, I used <code>Type.MetadataToken</code> to identify types.</p>\n\n<pre><code>Console.WriteLine(typeof(A&lt;&gt;).GetGenericArguments()[0].MetadataToken);\nConsole.WriteLine(typeof(B&lt;&gt;).GetGenericArguments()[0].MetadataToken);\nConsole.WriteLine(typeof(B&lt;&gt;).BaseType.GetGenericArguments()[0].MetadataToken);\n</code></pre>\n\n<p>This prints the following on the screen (numbers will vary, but equality will stay the same):</p>\n\n<pre><code>704643073\n704643074\n704643074\n</code></pre>\n\n<p>This indicates that the <code>BaseType</code> of type <code>B&lt;&gt;</code> is indeed a closed type having its generic parameter the 'virtual' generic type of class <code>A&lt;&gt;</code>.</p>\n", "is_accepted": false, "tags": [], "answer_id": 32091481, "down_vote_count": 0, "last_activity_date": 1439976532, "comments": [{"body": "Yup,  I&#39;m sorry, but I have used the wrong method in my example at first. Please try the current one.", "edited": false, "comment_id": 52077693, "creation_date": 1439976270, "score": 0, "owner": {"display_name": "konrad.kruczynski", "reputation": 12550, "user_id": 549315, "user_type": "registered", "accept_rate": 93}}, {"body": "Also note that <code>MetadataToken</code> isn&#39;t good identifier when working with generics, since all of <code>A&lt;T&gt;</code>, <code>A&lt;&gt;</code> and e.g. <code>A&lt;int&gt;</code> will have the same value of it. Concrete generic implementations are made during runtime from the same IL entity (thus having the same token).", "edited": false, "comment_id": 52107101, "creation_date": 1440021237, "score": 0, "owner": {"display_name": "konrad.kruczynski", "reputation": 12550, "user_id": 549315, "user_type": "registered", "accept_rate": 93}}], "creation_date": 1439976218, "comment_count": 2, "score": 0, "owner": {"display_name": "Wazner", "reputation": 152, "user_id": 5082427, "user_type": "registered"}, "last_editor": {"display_name": "Wazner", "reputation": 152, "user_id": 5082427, "user_type": "registered"}, "last_edit_date": 1439976532, "up_vote_count": 0}, {"body": "<blockquote>\n  <p>So it is closed using a non-existing type of name \"T\" and only doing GetGenericTypeArgument on it makes it open again. Why is that?</p>\n</blockquote>\n\n<p>Because there <em>is</em> one type argument provided - the type parameter to <code>B</code>.</p>\n\n<p>Look at how you're specifying the base class:</p>\n\n<pre><code>public class B&lt;T&gt; : A&lt;T&gt;\n</code></pre>\n\n<p>What's the <code>T</code> in <code>A&lt;T&gt;</code> if it's not a type argument? Just because the type argument is itself a type parameter doesn't mean it's not being specified as a type argument.</p>\n\n<p>Consider this:</p>\n\n<pre><code>public class A&lt;T1, T2&gt; { }\n\npublic class B&lt;T&gt; : A&lt;T, int&gt; { }\n</code></pre>\n\n<p>Here, the base class of <code>B&lt;T&gt;</code> is <code>A&lt;T, int&gt;</code> - and you can determine that the <code>int</code> has been specified by asking for the type arguments. You can also show where the <code>T</code> comes from:</p>\n\n<pre><code>using System;\nusing System.Reflection;\nusing System.Collections.Generic;\n\npublic class A&lt;T1, T2&gt; { }\n\npublic class B&lt;T&gt; : A&lt;T, int&gt; { }\n\nclass Program\n{\n    static void Main()\n    {\n        var bT = typeof(B&lt;&gt;).GetTypeInfo().GenericTypeParameters[0];\n        var listT = typeof(List&lt;&gt;).GetTypeInfo().GenericTypeParameters[0];\n        var bBaseArguments = typeof(B&lt;&gt;).BaseType.GenericTypeArguments;\n        Console.WriteLine(bBaseArguments[0] == bT); // True\n        // Shows that the T from B&lt;T&gt; isn't the same as the T from List&lt;T&gt;\n        Console.WriteLine(bBaseArguments[0] == listT); // False\n        Console.WriteLine(bBaseArguments[1] == typeof(int)); // True\n    }\n}\n</code></pre>\n", "answer_id": 32091561, "tags": [], "down_vote_count": 0, "last_activity_date": 1439976435, "comments": [{"body": "Exactly. Only thing I can add is that you can make it a generic type definition again (which implicitly also demonstrates how this works because this works :-) ). E.g.: <code>typeof(B&lt;&gt;).BaseType.GetGenericTypeDefinition().GenericTypeArguments.Length</code> will give you 0 again.", "edited": false, "comment_id": 52077993, "creation_date": 1439976671, "score": 0, "owner": {"display_name": "atlaste", "reputation": 9816, "user_id": 1031591, "user_type": "registered", "accept_rate": 74}}], "creation_date": 1439976435, "comment_count": 1, "score": 18, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": true, "up_vote_count": 18}], "last_editor": {"display_name": "konrad.kruczynski", "reputation": 12550, "user_id": 549315, "user_type": "registered", "accept_rate": 93}, "down_vote_count": 1, "close_vote_count": 0, "question_id": 32091197}, {"body": "<p>I have this small code here:</p>\n\n<pre><code>@foreach (var date in ViewBag.MissingDays)\n{\n    var isoDate = date.ToString(\"yyMMdd\");\n    &lt;div class=\"col-md-1\"&gt;\n        &lt;input type=\"checkbox\" id=\"isoDate\" name=\"isoDate\" value=\"@isoDate\" /&gt;\n        @isoDate\n    &lt;/div&gt;\n}\n</code></pre>\n\n<p>That will print out all the dates in my view that i missed, and like you can see it prints out them like \"yymmdd yymmdd yymmdd\" etc, but it's hard to know what weekday it is, so I would like to be \"mo yymmdd tu yymmdd we yymmdd\" so it's the two first letters of the day, how can I achive this?</p>\n", "is_answered": true, "delete_vote_count": 0, "accepted_answer_id": 32067330, "tags": ["c#", "html", "asp.net"], "question_id": 32067244, "reopen_vote_count": 0, "down_vote_count": 0, "view_count": 84, "comments": [{"body": "Side note: Your format does not follow ISO8601, so please don&#39;t name fields in such deceiving way.", "edited": false, "comment_id": 52031794, "creation_date": 1439886554, "score": 3, "owner": {"display_name": "Alexei Levenkov", "reputation": 60082, "user_id": 477420, "user_type": "registered"}}], "last_activity_date": 1439893246, "comment_count": 1, "score": 0, "answer_count": 4, "answers": [{"body": "<p>I believe you should be using the format \"ddd yyMMdd\" instead.\nIt will print the first 3 letters on the week day, instead of of just 2. But I think there is no standard format just for two letters.</p>\n\n<p>If you really need just 2 letter, you can substring the original \"ddd\" format:</p>\n\n<pre><code>@date.ToString(\"ddd\").Substring(0, 2)\n</code></pre>\n", "answer_id": 32067330, "tags": [], "down_vote_count": 0, "last_activity_date": 1439886540, "comments": [{"body": "Things are always easier than I seem to make them.", "edited": false, "comment_id": 52032355, "creation_date": 1439887463, "score": 0, "owner": {"display_name": "foo bar", "reputation": 21, "user_id": 5228246, "user_type": "registered", "accept_rate": 100}}, {"body": "Please be aware that <code>&quot;ddd&quot;</code> may create strings longer or shorter than 3 letters in other languages and clipping it to 2 letters could possibly be ambiguous in some language.", "edited": false, "comment_id": 52032412, "creation_date": 1439887533, "score": 1, "owner": {"display_name": "Sebastian Negraszus", "reputation": 4887, "user_id": 469708, "user_type": "registered", "accept_rate": 84}}], "creation_date": 1439886540, "comment_count": 2, "score": 0, "owner": {"display_name": "gjsduarte", "reputation": 1111, "user_id": 209880, "user_type": "registered", "accept_rate": 82}, "is_accepted": true, "up_vote_count": 0}, {"body": "<p>You probably want to keep the <code>value</code> part as it is - or ideally as <code>yyyyMMdd</code>, as two-digit year formats are horrible - and just format the <em>display</em> part differently. I don't think there's anything to use two-letter month abbreviations - the abbreviated month names are in English cultures are normally three letters rather than two. (This varies by culture. I don't know of any English-based cultures which use two letters, but some other cultures do, such as German.)</p>\n\n<p>I'd actually recommend using just the <code>d</code> <a href=\"https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx\" rel=\"nofollow\">standard date format</a> for display, or possibly <code>D</code> (long rather than short) as that will then use an appropriate format for the culture - assuming the current thread's culture has been set appropriately. So something like:</p>\n\n<pre><code>@foreach (var date in ViewBag.MissingDays)\n{\n    &lt;div class=\"col-md-1\"&gt;\n        &lt;input type=\"checkbox\" id=\"isoDate\"\n               name=\"isoDate\"\n               value=\"@date.ToString(\"yyyyMMdd\", CultureInfo.InvariantCulture)\" /&gt;\n        @date.ToString(\"D\")\n    &lt;/div&gt;\n}\n</code></pre>\n\n<p>(The razor syntax may be  slightly off - hopefully you'll be able to adapt it accordingly.)</p>\n\n<p>I know you've said what you want the format to be, but I suspect you're thinking solely about users in your own culture. Do you know whether that format will be appropriate in other cultures? If all your users are guaranteed to be English, that's not such a problem - but in general you should avoid such assumptions.</p>\n", "is_accepted": false, "tags": [], "answer_id": 32067350, "down_vote_count": 0, "last_activity_date": 1439887772, "comments": [{"body": "&quot;the abbreviated month names are normally three letters rather than two&quot;: This is not true for all languages; in German for example it is two letters.", "edited": false, "comment_id": 52032133, "creation_date": 1439887149, "score": 0, "owner": {"display_name": "Sebastian Negraszus", "reputation": 4887, "user_id": 469708, "user_type": "registered", "accept_rate": 84}}, {"body": "I did try a simular solution first, but that did end up like like displaying 4t may 2015. I just want it to say &quot;Mo yymdd Tu yymmdd We yymmdd&quot; the first two letters of the weekday.", "edited": false, "comment_id": 52032138, "creation_date": 1439887152, "score": 0, "owner": {"display_name": "foo bar", "reputation": 21, "user_id": 5228246, "user_type": "registered", "accept_rate": 100}}, {"body": "@Sebastian: Right. I suspected that might be the case, hence &quot;normally&quot; rather than &quot;always&quot; - but I&#39;ll reword later, when I get a chance.", "edited": false, "reply_to_user": {"display_name": "Sebastian Negraszus", "reputation": 4887, "user_id": 469708, "user_type": "registered", "accept_rate": 84}, "comment_id": 52032385, "creation_date": 1439887489, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I get what you are saying, but English is not more &quot;normal&quot; than any other language ;)", "edited": false, "comment_id": 52032514, "creation_date": 1439887698, "score": 0, "owner": {"display_name": "Sebastian Negraszus", "reputation": 4887, "user_id": 469708, "user_type": "registered", "accept_rate": 84}}, {"body": "@SebastianNegraszus: Well, if <i>most</i> cultures use three letters, I think that makes it the &quot;normal&quot; case. I&#39;ve edited though - hope this is clearer.", "edited": false, "reply_to_user": {"display_name": "Sebastian Negraszus", "reputation": 4887, "user_id": 469708, "user_type": "registered", "accept_rate": 84}, "comment_id": 52032567, "creation_date": 1439887801, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@foobar: Yes, I know what you want - but I&#39;m saying that you&#39;re making an assumption about what format is useful which may well not be valid for all your users. (I would personally <i>hate</i> to see a format using &quot;yy&quot;... and I don&#39;t expect a year-first format is friendly to many users.) Then there&#39;s the matter of whether the first two letters even uniquely identify the day of week. If you&#39;re in the unusual situation where you <i>only</i> care about English cultures, it would be worth stating that in the question.", "edited": false, "reply_to_user": {"display_name": "foo bar", "reputation": 21, "user_id": 5228246, "user_type": "registered", "accept_rate": 100}, "comment_id": 52032642, "creation_date": 1439887917, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet Indeed, your solution would be the best it&#39;s easy to understand which date it is. But I were told to have it like that, and I am just doing what I am told.", "edited": false, "comment_id": 52033321, "creation_date": 1439888948, "score": 0, "owner": {"display_name": "foo bar", "reputation": 21, "user_id": 5228246, "user_type": "registered", "accept_rate": 100}}, {"body": "@JonSkeet, I agree your point. But we can achieve this in different way. What do you think about my solution?", "edited": false, "comment_id": 52034614, "creation_date": 1439890800, "score": 0, "owner": {"display_name": "codeninja", "reputation": 465, "user_id": 3548640, "user_type": "registered", "accept_rate": 71}}, {"body": "@codeninja: Yes, that would work if you only care about English. .", "edited": false, "reply_to_user": {"display_name": "codeninja", "reputation": 465, "user_id": 3548640, "user_type": "registered", "accept_rate": 71}, "comment_id": 52035635, "creation_date": 1439892285, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@foobar: That&#39;s not the same as &quot;I would like&quot; in your question. I would at least point out the drawbacks of this to whoever has told you to do this...", "edited": false, "reply_to_user": {"display_name": "foo bar", "reputation": 21, "user_id": 5228246, "user_type": "registered", "accept_rate": 100}, "comment_id": 52038699, "creation_date": 1439897050, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet Right, I am sorry for that. Next time I ask something i&#39;ll look through it a third time. I did have it setup so it did show 2015-08-19 but they wanted it just to be mo150809", "edited": false, "comment_id": 52072812, "creation_date": 1439968499, "score": 0, "owner": {"display_name": "foo bar", "reputation": 21, "user_id": 5228246, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1439886591, "comment_count": 11, "score": 6, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1439887772, "up_vote_count": 6}, {"body": "<blockquote>\n  <p>var isoDate = date.ToString(\"dddd yyMMdd\");</p>\n</blockquote>\n\n<p>This will solve your problem.</p>\n\n<pre><code>@foreach (var date in ViewBag.MissingDays)\n{\n\n\nvar isoDate = date.ToString(\"dddd yyMMdd\");\n\n    &lt;div class=\"col-md-1\"&gt;\n        &lt;input type=\"checkbox\" id=\"isoDate\" name=\"isoDate\" value=\"@isoDate\" /&gt;\n        @isoDate\n    &lt;/div&gt;\n}\n</code></pre>\n", "answer_id": 32067693, "tags": [], "down_vote_count": 0, "last_activity_date": 1439887622, "creation_date": 1439887622, "comment_count": 0, "score": 0, "owner": {"display_name": "staticvoidmain", "reputation": 201, "user_id": 4950795, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 0}, {"body": "<blockquote>\n  <p>By default, <code>AbbreviatedDayNames</code> contains three letter days (\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", and \"Sat\")</p>\n</blockquote>\n\n<p>To get custom day name, you are allowed to assign your custom day names array to <code>AbbreviatedDayNames</code></p>\n\n<pre><code>@{   \nSystem.Globalization.CultureInfo ci = System.Globalization.CultureInfo.CreateSpecificCulture(\"\");\nSystem.Globalization.DateTimeFormatInfo dtinfo = ci.DateTimeFormat;\ndtinfo.AbbreviatedDayNames = new string[] { \"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\" };\n }\n</code></pre>\n\n<p><code>ddd</code> is the format specifier of <code>AbbreviatedDayNames</code> so you should use <code>ddd</code> to get your custom day name</p>\n\n<pre><code>@foreach (var date in ViewBag.MissingDays)\n{\n var isoDate = date.ToString(\"{ddd yyMMdd}\", dtinfo);\n&lt;div class=\"col-md-1\"&gt;\n    &lt;input type=\"checkbox\" id=\"isoDate\" name=\"isoDate\" value=\"@isoDate\" /&gt;\n    @isoDate\n&lt;/div&gt;\n}\n</code></pre>\n\n<p>--SJ</p>\n", "is_accepted": false, "tags": [], "answer_id": 32068761, "down_vote_count": 0, "last_activity_date": 1439893246, "creation_date": 1439890616, "comment_count": 0, "score": 0, "owner": {"display_name": "codeninja", "reputation": 465, "user_id": 3548640, "user_type": "registered", "accept_rate": 71}, "last_editor": {"display_name": "codeninja", "reputation": 465, "user_id": 3548640, "user_type": "registered", "accept_rate": 71}, "last_edit_date": 1439893246, "up_vote_count": 0}], "owner": {"display_name": "foo bar", "reputation": 21, "user_id": 5228246, "user_type": "registered", "accept_rate": 100}, "title": "asp.net get date from yyMMdd", "close_vote_count": 0, "creation_date": 1439886248, "favorite_count": 0, "up_vote_count": 0}, {"last_activity_date": 1439818068, "creation_date": 1439555417, "owner": {"display_name": "user5217533", "user_type": "does_not_exist"}, "last_edit_date": 1439555605, "favorite_count": 9, "view_count": 2294, "delete_vote_count": 0, "title": "What is the difference between a variable, object and a reference?", "comments": [{"body": "I&#39;m sorry but OP <i>couldn&#39;t</i> find these terms with 1 minute search in Google? Close vote is fine is my perspective.", "edited": false, "comment_id": 51922889, "creation_date": 1439556109, "score": 26, "owner": {"display_name": "Soner G\u00f6n\u00fcl", "reputation": 55355, "user_id": 447156, "user_type": "registered", "accept_rate": 98}}, {"body": "@BenRobinson You can read the close reason if you want to know why it should be closed.  The reason is stated right there.", "edited": false, "reply_to_user": {"display_name": "Ben Robinson", "reputation": 16645, "user_id": 253257, "user_type": "registered", "accept_rate": 85}, "comment_id": 51922905, "creation_date": 1439556143, "score": 3, "owner": {"display_name": "Servy", "reputation": 129071, "user_id": 1159478, "user_type": "registered"}}, {"body": "My most reasonable objection is that it&#39;s tagged for both C# and Java.  It makes the assumption that both languages treat objects the same way when that isn&#39;t quite true.", "edited": false, "comment_id": 51922957, "creation_date": 1439556218, "score": 9, "owner": {"display_name": "maniak1982", "reputation": 377, "user_id": 202891, "user_type": "registered"}}, {"body": "@Servy That reason is not good. Sorry but the answer right bellow prove your put on hold for the reason explain is a mistake.", "edited": false, "reply_to_user": {"display_name": "Servy", "reputation": 129071, "user_id": 1159478, "user_type": "registered"}, "comment_id": 51922990, "creation_date": 1439556260, "score": 0, "owner": {"display_name": "Guillaume Beauvois", "reputation": 117, "user_id": 4677162, "user_type": "registered", "accept_rate": 33}}, {"body": "@GuillaumeBeauvois The fact that there is an answer in no way makes the question not broad.  Jon only <i>begins</i> to touch the surface of the topic, and leaves <i>lots</i> of relevant information about all three concepts unsaid (entirely expectantly, given the vast amount of information required to <i>actually</i> answer the question asked).  That&#39;s what makes a broad question a broad question; you can provide an answer with good information on the topic, but it&#39;ll never be a <i>complete</i> answer.", "edited": false, "reply_to_user": {"display_name": "Guillaume Beauvois", "reputation": 117, "user_id": 4677162, "user_type": "registered", "accept_rate": 33}, "comment_id": 51923091, "creation_date": 1439556399, "score": 4, "owner": {"display_name": "Servy", "reputation": 129071, "user_id": 1159478, "user_type": "registered"}}, {"body": "While all these close reasons are somewhat valid from a technical point of view, i have often googled this question in order to find examples or analogies to explain these concepts to novices. i have never found something as complete and simple as Jon Skeet&#39;s answer. That alone, in my eyes, is reason enough to keep this open. Just my 2 cents.", "edited": false, "comment_id": 51925145, "creation_date": 1439559414, "score": 10, "owner": {"display_name": "katzenhut", "reputation": 1210, "user_id": 1978306, "user_type": "registered", "accept_rate": 86}}, {"body": "I feel awkward closing it as a dupe for a question for which mine is the accepted answer, but this seems very similar to <a href=\"http://stackoverflow.com/questions/9224517\">stackoverflow.com/questions/9224517</a> (and uses the same metaphor as Jon Skeet&#39;s, for that matter)", "edited": false, "comment_id": 51927101, "creation_date": 1439562256, "score": 3, "owner": {"display_name": "yshavit", "reputation": 20616, "user_id": 1076640, "user_type": "registered"}}, {"body": "@katzenhut And yet Jon, and others, have used this exact same example plenty of ties before.  He even says as much in his answer; this is an analogy he gives regularly.  If someone wasn&#39;t finding it before, they&#39;re not really more likely to see it with this post, given, as you said, the <i>vast</i> amount of information shown when searching on this topic.  And of course, none of that reasoning makes the question any more on topic on SO.", "edited": false, "reply_to_user": {"display_name": "katzenhut", "reputation": 1210, "user_id": 1978306, "user_type": "registered", "accept_rate": 86}, "comment_id": 51928667, "creation_date": 1439564644, "score": 2, "owner": {"display_name": "Servy", "reputation": 129071, "user_id": 1159478, "user_type": "registered"}}, {"body": "@Servy - So maybe this answer just needs to be plastered all over the internet? Starting here, maybe?", "edited": false, "reply_to_user": {"display_name": "Servy", "reputation": 129071, "user_id": 1159478, "user_type": "registered"}, "comment_id": 51929263, "creation_date": 1439565564, "score": 0, "owner": {"display_name": "katzenhut", "reputation": 1210, "user_id": 1978306, "user_type": "registered", "accept_rate": 86}}, {"body": "@katzenhut It already is, and has already been shown from previously linked duplicates, it&#39;s even already been provided <i>here</i>.", "edited": false, "reply_to_user": {"display_name": "katzenhut", "reputation": 1210, "user_id": 1978306, "user_type": "registered", "accept_rate": 86}, "comment_id": 51929387, "creation_date": 1439565787, "score": 1, "owner": {"display_name": "Servy", "reputation": 129071, "user_id": 1159478, "user_type": "registered"}}, {"body": "@Servy - Ah, ok. I didnt see the duplicate. Closing as a duplicate i can understand, then. But as for closing as &quot;too broad&quot; or &quot;off tpoic&quot; just seems wrong to me.", "edited": false, "reply_to_user": {"display_name": "Servy", "reputation": 129071, "user_id": 1159478, "user_type": "registered"}, "comment_id": 51929583, "creation_date": 1439566062, "score": 0, "owner": {"display_name": "katzenhut", "reputation": 1210, "user_id": 1978306, "user_type": "registered", "accept_rate": 86}}, {"body": "@katzenhut You think that it&#39;s wrong to close a question for a reason that applies perfectly to that question, just because you don&#39;t know the answer to that question?  That&#39;s not how closing works.", "edited": false, "reply_to_user": {"display_name": "katzenhut", "reputation": 1210, "user_id": 1978306, "user_type": "registered", "accept_rate": 86}, "comment_id": 51929672, "creation_date": 1439566222, "score": 0, "owner": {"display_name": "Servy", "reputation": 129071, "user_id": 1159478, "user_type": "registered"}}, {"body": "@Servy - No, it seems like you misunderstood me. I knew the answer beforehand, i just thought the explanation is really neat. As for &quot;too broad&quot; or &quot;off tpoic&quot;, it just doesn&#39;t seem to &quot;apply perfectly&quot;, and at least some SO users seem to agree with that. To me it seems like there is room for more than one point of view. After all, that&#39;s how a debate works.", "edited": false, "reply_to_user": {"display_name": "Servy", "reputation": 129071, "user_id": 1159478, "user_type": "registered"}, "comment_id": 51930352, "creation_date": 1439567320, "score": 0, "owner": {"display_name": "katzenhut", "reputation": 1210, "user_id": 1978306, "user_type": "registered", "accept_rate": 86}}, {"body": "@katzenhut So you think that a question shouldn&#39;t be closed, even if it meets the closure criteria, because you think that it&#39;s neat?  Being popular doesn&#39;t make a question on topic.", "edited": false, "reply_to_user": {"display_name": "katzenhut", "reputation": 1210, "user_id": 1978306, "user_type": "registered", "accept_rate": 86}, "comment_id": 51930468, "creation_date": 1439567527, "score": 0, "owner": {"display_name": "Servy", "reputation": 129071, "user_id": 1159478, "user_type": "registered"}}, {"body": "@Servy - I&#39;ll repeat it one more time: I think that the &quot;off topic&quot; is debatable, and in the spirit of a debate i have offered an opinion and an explanation for that opinion. If you disagree, thats fine.", "edited": false, "reply_to_user": {"display_name": "Servy", "reputation": 129071, "user_id": 1159478, "user_type": "registered"}, "comment_id": 51931119, "creation_date": 1439568765, "score": 1, "owner": {"display_name": "katzenhut", "reputation": 1210, "user_id": 1978306, "user_type": "registered", "accept_rate": 86}}, {"body": "I&#39;m going to have to agree with @Servy here. A real answer to this question requires going into a lot of detail about how memory works and is probably going to be too much to handle in a single answer. Jon&#39;s answer is nice, but it doesn&#39;t <i>really</i> answer the question. Rather, it provides an analogy to help the user get an oversimplified view of how to think about these concepts. If that&#39;s what the OP wanted, the question is not phrased well and probably belongs on Programmer&#39;s.", "edited": false, "reply_to_user": {"display_name": "Servy", "reputation": 129071, "user_id": 1159478, "user_type": "registered"}, "comment_id": 51940280, "creation_date": 1439587697, "score": 1, "owner": {"display_name": "jpmc26", "reputation": 5294, "user_id": 1394393, "user_type": "registered", "accept_rate": 86}}, {"body": "@jpmc26: I&#39;ve now added a bit more detail as a non-analogy as well.", "edited": false, "reply_to_user": {"display_name": "jpmc26", "reputation": 5294, "user_id": 1394393, "user_type": "registered", "accept_rate": 86}, "comment_id": 51974173, "creation_date": 1439738195, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I feel happy that some beginner friendly answers are not forfeit by nonsense close votes", "edited": false, "comment_id": 51984787, "creation_date": 1439781173, "score": 0, "owner": {"display_name": "amuse", "reputation": 2418, "user_id": 4822120, "user_type": "registered", "accept_rate": 0}}, {"body": "<a href=\"http://meta.stackoverflow.com/questions/300457/canonical-answer-for-object-reference-assignment-why-does-x-change-when-i-mutat#comment227418_300457\">Someone finally did it!</a>", "edited": false, "comment_id": 52110877, "creation_date": 1440035889, "score": 0, "owner": {"display_name": "Sotirios Delimanolis", "reputation": 126041, "user_id": 438154, "user_type": "registered", "accept_rate": 99}}], "comment_count": 19, "score": 27, "body": "<p>Exactly what are the differences between <strong>variables</strong>, <strong>objects</strong> and <strong>references</strong>?</p>\n\n<p>For example they all point to some type and they must all all hold values (unless of course you have the temporary null-able type) but precisely how are their functions and implementations different from each other?</p>\n\n<p>Example:</p>\n\n<pre><code>Dog myDog = new Dog(); //variable myDog that holds a reference to object Dog\nint x = 12; //variable x that hold a value of 12\n</code></pre>\n\n<p>they have the same concepts but how are they different?</p>\n", "is_answered": true, "up_vote_count": 45, "tags": ["java", "c#", "variables", "object", "reference"], "reopen_vote_count": 0, "answer_count": 5, "answers": [{"body": "<p>(Just to be clear, the explanation I'm giving here is specific to Java and C#. Don't assume it applies to other languages, although bits of it may.)</p>\n\n<p>I like to use an analogy of telling someone where I live. I might write my address on a piece of paper:</p>\n\n<ul>\n<li>A variable is like a piece of paper. It holds a value, but it isn't the value in itself. You can cross out whatever's there and write something else instead.</li>\n<li>The address that I write on the piece of paper is like a reference. It isn't my house, but it's a way of <em>navigating</em> to my house.</li>\n<li>My house itself is like an object. I can give out multiple references to the same object, but there's only one object.</li>\n</ul>\n\n<p>Does that help?</p>\n\n<p>The difference between a value type and a reference type is what gets written on the piece of paper. For example, here:</p>\n\n<pre><code>int x = 12;\n</code></pre>\n\n<p>is like having a piece of paper with the number 12 written on it directly. Whereas:</p>\n\n<pre><code>Dog myDog = new Dog();\n</code></pre>\n\n<p>doesn't write the Dog object contents itself on the piece of paper - it creates a new <code>Dog</code>, and then writes a reference to the dog on that paper.</p>\n\n<p>In non-analogy terms:</p>\n\n<ul>\n<li>A variable represents a storage location in memory. It has a name by which you can refer to it at compile time, and at execution time it has a value, which will always be compatible with its compile-time type. (For example, if you've got a <code>Button</code> variable, the value will always be a reference to an object of type <code>Button</code> or some subclass - or the <code>null</code> reference.)</li>\n<li>An object is a sort of separate entity. Importantly, the value of a variable or any expression is <em>never</em> an object, only a reference. An object effectively consists of:\n\n<ul>\n<li>Fields (the state)</li>\n<li>A type reference (can never change through the lifetime of the object)</li>\n<li>A monitor (for synchronization)</li>\n</ul></li>\n<li>A reference is a value used to access an object - e.g. to call methods on it, access fields etc. You typically navigate the reference with the <code>.</code> operator. For example, if <code>foo</code> is a <code>Person</code> variable, <code>foo.getAddress().getLength()</code> would take the value of <code>foo</code> (a reference) and call <code>getAddress()</code> on the object that that reference refers to. The result might be a <code>String</code> reference... we then call <code>getLength()</code> on the object that <em>that</em> reference refers to.</li>\n</ul>\n", "is_accepted": false, "tags": [], "answer_id": 32010236, "down_vote_count": 0, "last_activity_date": 1439623472, "comments": [{"body": "Sorry for stupid question but in: &quot;<i>I can give out multiple references to the same object</i>&quot; shouldn&#39;t there be &quot;variables&quot;? Using your analogy we can have many paper pieces (many variables) with same address (same, but one reference), pointing to one house (object).", "edited": false, "comment_id": 51923941, "creation_date": 1439557592, "score": 0, "owner": {"display_name": "Pshemo", "reputation": 54362, "user_id": 1393766, "user_type": "registered"}}, {"body": "@Pshemo: No, not necessarily. For example, I could be asked for the address several times, and every time it <i>might</i> be written down on the same piece of paper. Alternatively, think of it as a <code>GetJonsAddress</code> method - what I return is a <i>value</i> (the reference)... what the caller does with it is irrelevant to me. I can&#39;t return a new variable - I return the value. The caller <i>may</i> write it down on a piece of paper, but they may not.", "edited": false, "reply_to_user": {"display_name": "Pshemo", "reputation": 54362, "user_id": 1393766, "user_type": "registered"}, "comment_id": 51924081, "creation_date": 1439557797, "score": 3, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "It seems that either I am not able to see answer which I was looking for, or you answered different question than I meant to ask. I usually doubt myself first so I will try to rephrase what I meant and ask again (sorry for confusion). Lets say we have have <code>Dog d1 = new Dog();</code> <code>Dog d2 = d1</code>. Which is correct? We have: (1) two variables, holding one reference, to one object, (2) two variables, two references, one object, (3) some other option?", "edited": false, "comment_id": 51924315, "creation_date": 1439558152, "score": 0, "owner": {"display_name": "Pshemo", "reputation": 54362, "user_id": 1393766, "user_type": "registered"}}, {"body": "@Pshemo: In that code example, there are two variables, two equal values (the same reference twice) and one Dog object. Think of a reference as being like a number - if you had <code>int x = 15; int y = x;</code> would you have one number or two? :)", "edited": false, "reply_to_user": {"display_name": "Pshemo", "reputation": 54362, "user_id": 1393766, "user_type": "registered"}, "comment_id": 51924409, "creation_date": 1439558302, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "So by &quot;the same reference twice&quot; can we say that we have two references or one reference (held by two variables)?", "edited": false, "comment_id": 51924469, "creation_date": 1439558391, "score": 0, "owner": {"display_name": "Pshemo", "reputation": 54362, "user_id": 1393766, "user_type": "registered"}}, {"body": "@Pshemo: Answer my question about the <code>int</code> variables and I&#39;ll tell you about references :)", "edited": false, "reply_to_user": {"display_name": "Pshemo", "reputation": 54362, "user_id": 1393766, "user_type": "registered"}, "comment_id": 51924540, "creation_date": 1439558508, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I would have two variables, and each would store copy of same number <code>15</code>. OK I think I get it. Thank you for your time :)", "edited": false, "comment_id": 51924625, "creation_date": 1439558615, "score": 0, "owner": {"display_name": "Pshemo", "reputation": 54362, "user_id": 1393766, "user_type": "registered"}}, {"body": "You don&#39;t need these 42 votes in an hour, you&#39;re already 60 passed the daily reputation cap ;)", "edited": false, "comment_id": 51927020, "creation_date": 1439562127, "score": 5, "owner": {"display_name": "Jean-Fran\u00e7ois Savard", "reputation": 13211, "user_id": 2683146, "user_type": "registered", "accept_rate": 84}}, {"body": "Best answer I&#39;ve seen was inthis duplicate question: <a href=\"http://stackoverflow.com/a/430958/234954\">stackoverflow.com/a/430958/234954</a>", "edited": false, "comment_id": 51946210, "creation_date": 1439619676, "score": 0, "owner": {"display_name": "jmoreno", "reputation": 7977, "user_id": 234954, "user_type": "registered", "accept_rate": 60}}, {"body": "@jmoreno: That&#39;s about how parameters are handled - not the same thing.", "edited": false, "reply_to_user": {"display_name": "jmoreno", "reputation": 7977, "user_id": 234954, "user_type": "registered", "accept_rate": 60}, "comment_id": 51946224, "creation_date": 1439619794, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I didn&#39;t mean the question was a duplicate, but that the differences between a value type and a reference type are basically the same as the difference between a passing by value and passing by reference.  And that IMO the print a page vs give a URL analogy works for both for those that don&#39;t understand the mechanics.", "edited": false, "comment_id": 51990177, "creation_date": 1439797694, "score": 0, "owner": {"display_name": "jmoreno", "reputation": 7977, "user_id": 234954, "user_type": "registered", "accept_rate": 60}}, {"body": "@jmoreno: I don&#39;t think the difference is really the same... Conflating the two causes confusion when you then have reference type arguments passed <i>by</i> reference using ref in C# for example.", "edited": false, "reply_to_user": {"display_name": "jmoreno", "reputation": 7977, "user_id": 234954, "user_type": "registered", "accept_rate": 60}, "comment_id": 51990814, "creation_date": 1439798941, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1439555637, "comment_count": 12, "score": 104, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1439623472, "up_vote_count": 104}, {"body": "<p>new Dog() will instantiate an object Dog ie) it will create a memory for the object. You need to access the variable to manipulate some operations. For that you need an reference that is Dog myDog. If you try to print the object it will print an non readable value which is nothing but the address.</p>\n\n<pre><code>      myDog -------&gt; new Dog().\n</code></pre>\n", "answer_id": 32010239, "tags": [], "down_vote_count": 0, "last_activity_date": 1439555646, "creation_date": 1439555646, "comment_count": 0, "score": 3, "owner": {"display_name": "Shriram", "reputation": 1891, "user_id": 424830, "user_type": "registered", "accept_rate": 32}, "is_accepted": false, "up_vote_count": 3}, {"body": "<p>I often use the following analogy when explaining these concepts.</p>\n\n<hr>\n\n<p>Imagine that an object is a balloon. A variable is a person. Every person is either in the <em>value type</em> team or in the <em>reference type</em> team. And they all play a little game with the following rules:</p>\n\n<p>Rules for <em>value types</em>: </p>\n\n<ul>\n<li>You hold in your arms a balloon filled with air.  <em>(Value type variables store the object.)</em></li>\n<li>You must always be holding exactly one balloon. <em>(Value types are not nullable.)</em></li>\n<li>When someone else wants your balloon, they can blow up their own identical one, and hold that in their arms. <em>(In value types, the object is copied.)</em></li>\n<li>Two people can't hold the same balloon. <em>(Value types are not shared.)</em></li>\n<li>If you want to hold a different balloon, you have to pop the one you're already holding and grab another. <em>(A value type object is destroyed when replaced.)</em></li>\n</ul>\n\n<p>Rules for <em>reference types</em>:</p>\n\n<ul>\n<li>You may hold a piece of string that leads to a balloon filled with helium. <em>(Reference type variables store a reference to the object.)</em></li>\n<li>You are allowed to hold one piece of string, or no piece of string at all. <em>(Reference type variables are nullable.)</em></li>\n<li>When someone else wants your balloon, they can get their own piece of string and tie it to the same balloon as you have. <em>(In reference types, the reference is copied.)</em></li>\n<li>Multiple people can hold pieces of string that all lead to the same balloon. <em>(Reference type objects can be shared.)</em></li>\n<li>As long as there is at least one person still holding the string to a particular balloon, the balloon is safe. <em>(A reference type object is alive as long as it is reachable.)</em></li>\n<li>For any particular balloon, if everyone eventually lets go of it, then that balloon flies away and nobody can reach it anymore. <em>(A reference type object may become unreachable at some point.)</em></li>\n<li>At some later point before the game ends, a lost balloon may pop by itself due to atmospheric pressure. <em>(Unreachable objects are eligible for garbage collection, which is non-deterministic.)</em></li>\n</ul>\n", "is_accepted": false, "tags": [], "answer_id": 32011685, "down_vote_count": 0, "last_activity_date": 1439651017, "comments": [{"body": "+1: I believe this answer better describes the nuances of reference types than the analogy with pieces of paper.", "edited": false, "comment_id": 51941037, "creation_date": 1439589803, "score": 3, "owner": {"display_name": "evilcandybag", "reputation": 1273, "user_id": 607917, "user_type": "registered"}}, {"body": "12 items to understand the difference between 3 simple notions?", "edited": false, "comment_id": 51942462, "creation_date": 1439595732, "score": 0, "owner": {"display_name": "Smollet", "reputation": 192, "user_id": 716720, "user_type": "registered", "accept_rate": 75}}, {"body": "@Smollet Well, yes.Since the OP asked, apparently it wasn&#39;t that simple for him/her (and probably for other people who end up here). I&#39;m sure one can give a simpler analogy in a shorter answer, but I peronally found all the above points important enough to include.", "edited": false, "reply_to_user": {"display_name": "Smollet", "reputation": 192, "user_id": 716720, "user_type": "registered", "accept_rate": 75}, "comment_id": 51947700, "creation_date": 1439627765, "score": 0, "owner": {"display_name": "Theodoros Chatzigiannakis", "reputation": 12155, "user_id": 1892179, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1439559980, "comment_count": 3, "score": 20, "owner": {"display_name": "Theodoros Chatzigiannakis", "reputation": 12155, "user_id": 1892179, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "Theodoros Chatzigiannakis", "reputation": 12155, "user_id": 1892179, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1439651017, "up_vote_count": 20}, {"body": "<p>You can think of it like a answering questions.<br></p>\n\n<p><strong>An object is a what...</strong><br>\nIt's like any physical thing in the world, a \"thing\" which is recognizable by itself and has significant properties that distinguishes from other \"thing\".\nLike you know a dog is a dog because it barks, move its tail and go after a ball if you throw it.<br><br>\n<strong>A variable is a which...</strong><br>\nLike if you watch your own hands. Each one is a hand itself. They have fingers, nails and bones within the skin but you know one is your left hand and the other the right one.\nThat is to say, you can have two \"things\" of the same type/kind but every one could be different in it's own way, can have different values.</p>\n\n<p><strong>A reference is a where...</strong><br>\nIf you look at two houses in a street, although they're have their own facade, you can get to each one by their one unique address, meaning, if you're far away like three blocks far or in another country, you could tell the address of the house cause they'll still be there where you left them, even if you cannot point them directly.</p>\n\n<p>Now for programming's sake, examples in a C++ way<br></p>\n\n<pre><code>class Person{...}\nPerson Ana = new Person(); //An object is an instance of a class(normally)\n</code></pre>\n\n<p>That is to say, Ana is a person, but she has unique properties that distinguishes her from another person.</p>\n\n<pre><code>&amp;Ana //This is a reference to Ana, that is to say, a \"where\" does the variable \n     //\"Ana\" is stored, wether or not you know it's value(s)\n</code></pre>\n\n<p><code>Ana</code> itself is the variable for storing the properties of the person named \"Ana\"</p>\n", "is_accepted": false, "tags": [], "answer_id": 32013566, "down_vote_count": 1, "last_activity_date": 1439818068, "comments": [{"body": "Not sure what the difference between an object/variable is according to these definitions.", "edited": false, "comment_id": 51941663, "creation_date": 1439592010, "score": 0, "owner": {"display_name": "Matthew", "reputation": 1786, "user_id": 2142219, "user_type": "registered"}}], "creation_date": 1439566003, "comment_count": 1, "score": 3, "owner": {"display_name": "Kronos", "reputation": 90, "user_id": 2197793, "user_type": "registered", "accept_rate": 89}, "last_editor": {"display_name": "Kronos", "reputation": 90, "user_id": 2197793, "user_type": "registered", "accept_rate": 89}, "last_edit_date": 1439818068, "up_vote_count": 4}, {"body": "<p>Jon's answer is great for approaching it from analogy.  If a more concrete wording is useful for you, I can pitch in.</p>\n\n<p>Let's start with a variable.  A variable is a [named] thing which contains a value.  For instance, <code>int x = 3</code> defines a variable named x, which contains the integer 3.  If I then follow it up with an assignment, <code>x=4</code>, x now contains the integer 4.  The key thing is that we didn't replace the variable.  We don't have a new \"variable x whose value is now 4,\" we merely replaced the value of x with a new value.</p>\n\n<p>Now let's move to objects.  Objects are useful because often you need one \"thing\" to be referenced from many places.  For example, if you have a document open in an editor and want to send it to the printer, it'd be nice to only have one document, referenced both by the editor and the printer.  That'd save you having to copy it more times than you might want.</p>\n\n<p>However, because you don't want to copy it more than once, we can't just put an object in a variable.  Variables hold onto a value, so if two variables held onto an object, they'd have to make two copies, one for each variable.  References are the go-between that resolves this.  References are small, easily copied values which can be stored in variables.</p>\n\n<p>So, in code, when you type <code>Dog dog = new Dog()</code>, the new operator creates a new Dog Object, and returns a Reference to that object, so that it can be assigned to a variable.  The assignment then gives <code>dog</code> the value of a Reference to your newly created Object.</p>\n", "answer_id": 32019015, "tags": [], "down_vote_count": 0, "last_activity_date": 1439588250, "creation_date": 1439588250, "comment_count": 0, "score": 2, "owner": {"display_name": "Cort Ammon", "reputation": 2890, "user_id": 2728148, "user_type": "registered", "accept_rate": 40}, "is_accepted": false, "up_vote_count": 2}], "last_editor": {"display_name": "Andrew Tobilko", "reputation": 1128, "user_id": 4922375, "user_type": "registered", "accept_rate": 100}, "down_vote_count": 18, "close_vote_count": 0, "question_id": 32010172}, {"body": "<p>This code should wait for <code>.help</code> to be typed in chat, then send a message saying <code>\"Help text.\"</code>.\nNothing happens.</p>\n\n<pre><code>package testplugin.HelpMe;\nimport java.util.logging.Logger;\nimport org.bukkit.plugin.java.JavaPlugin;\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.event.player.PlayerChatEvent;\n\npublic class HelpMe extends JavaPlugin implements {\n\n    Logger log;\n\n    public void onEnable(){\n        log = this.getLogger();\n        log.info(\"Your plugin has been enabled!\");\n    }\n\n    public void onDisable(){\n        log.info(\"Your plugin has been disabled.\");\n    }\n\n    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n        return false;\n\n\n      }\n      public void onChat(PlayerChatEvent event) {\n            if (event.getMessage().startsWith(\".help\"))\n            {\n              event.getPlayer().sendMessage(\"Help text.\");\n              event.setCancelled(true);\n            }\n      }\n}\n</code></pre>\n", "is_answered": true, "close_vote_count": 0, "delete_vote_count": 0, "tags": ["java", "bukkit"], "question_id": 10822832, "reopen_vote_count": 0, "down_vote_count": 1, "view_count": 721, "answers": [{"body": "<p>I think you want the <code>@EventHandler</code> annotation:</p>\n\n<pre><code>@EventHandler public void onChat(PlayerChatEvent event) {\n    ...\n}\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 10822917, "down_vote_count": 0, "last_activity_date": 1439816505, "creation_date": 1338405924, "comment_count": 0, "score": 5, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "Francesco Menzani", "reputation": 2296, "user_id": 3453226, "user_type": "registered", "accept_rate": 81}, "last_edit_date": 1439816505, "up_vote_count": 5}, {"body": "<p>All I needed to add was this to my code and it worked perfectly!</p>\n\n<pre><code>public void onEnable() {\n    getServer().getPluginManager().registerEvents(this, this);\n}\n</code></pre>\n\n<p>And <code>@EventHandler</code> in front of <code>onChat()</code>.</p>\n\n<p>The finished code:</p>\n\n<pre><code>package testplugin.HelpMe;\nimport java.util.logging.Logger;\nimport org.bukkit.plugin.java.JavaPlugin;\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.event.player.PlayerChatEvent;\n\npublic class HelpMe extends JavaPlugin implements {\n\nLogger log;\n\npublic void onEnable(){\n    log = this.getLogger();\n    log.info(\"Your plugin has been enabled!\");\n    getServer().getPluginManager().registerEvents(this, this);\n}\n\npublic void onDisable(){\n    log.info(\"Your plugin has been disabled.\");\n}\n\npublic boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n    return false;\n\n\n  }\n  @EventHandler public void onChat(PlayerChatEvent event) {\n        if (event.getMessage().startsWith(\".help\"))\n        {\n          event.getPlayer().sendMessage(\"Help text.\");\n          event.setCancelled(true);\n        }\n  }\n}\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 10826058, "down_vote_count": 0, "last_activity_date": 1439816707, "creation_date": 1338424626, "comment_count": 0, "score": 1, "owner": {"display_name": "ash-breeze", "reputation": 125, "user_id": 1326598, "user_type": "registered", "accept_rate": 67}, "last_editor": {"display_name": "Francesco Menzani", "reputation": 2296, "user_id": 3453226, "user_type": "registered", "accept_rate": 81}, "last_edit_date": 1439816707, "up_vote_count": 1}, {"body": "<p>You are missing 3 things:</p>\n\n<ul>\n<li><code>implements Listener</code> (you missed that in the code you provided, copy paste error?)</li>\n<li>The <code>@EventHandler</code> annotation on the <code>onChat</code> method</li>\n<li>The code which actually registers your plugin to listen for events, which is <code>getServer().getPluginManager().registerEvents(this, this);</code> in your <code>onEnable</code></li>\n</ul>\n\n<p>So, the end result would look like:</p>\n\n<pre><code>package testplugin.HelpMe;\nimport java.util.logging.Logger;\nimport org.bukkit.plugin.java.JavaPlugin;\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.event.player.PlayerChatEvent;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.EventHandler;\n\npublic class HelpMe extends JavaPlugin implements Listener {\n\n    Logger log;\n\n    public void onEnable(){\n        log = this.getLogger();\n        log.info(\"Your plugin has been enabled!\");\n        //Tell the server that this plugin provides an event listener (which is this class), and to invoke event handlers in that class\n        getServer().getPluginManager().registerEvents(this, this);\n    }\n\n    public void onDisable(){\n        log.info(\"Your plugin has been disabled.\");\n    }\n\n    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n        return false;\n    }\n\n    //Marks that this method handles the PlayerChatEvent\n    @EventHandler\n    public void onChat(PlayerChatEvent event) {\n        if (event.getMessage().startsWith(\".help\"))\n        {\n          event.getPlayer().sendMessage(\"Help text.\");\n          event.setCancelled(true);\n        }\n    }\n}\n</code></pre>\n", "answer_id": 19199417, "tags": [], "down_vote_count": 0, "last_activity_date": 1380987052, "creation_date": 1380987052, "comment_count": 0, "score": 3, "owner": {"display_name": "glen3b", "reputation": 331, "user_id": 1175406, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 3}], "last_activity_date": 1439816707, "comment_count": 0, "score": 0, "answer_count": 3, "owner": {"display_name": "ash-breeze", "reputation": 125, "user_id": 1326598, "user_type": "registered", "accept_rate": 67}, "title": "onChat() not being called", "last_editor": {"display_name": "Francesco Menzani", "reputation": 2296, "user_id": 3453226, "user_type": "registered", "accept_rate": 81}, "last_edit_date": 1439816430, "creation_date": 1338405575, "favorite_count": 0, "up_vote_count": 1}, {"body": "<p>For several reasons we prefer <code>Nullable&lt;Int32&gt;</code> over <code>int?</code>. Wherever possible we prefer Types over keywords - as we do so since C#2 we have a large codebase already using that style.</p>\n\n<p>I recently switched to VS2015 and got the annoying light bulbs all over my code. For <code>Int32</code> and other related non-generic types I fixed that by using <a href=\"http://stackoverflow.com/a/31563565/303290\">this answer</a>. For <code>Nullable&lt;T&gt;</code> however I cannot find the option to disable nagging.</p>\n\n<p><a href=\"http://i.stack.imgur.com/wR9iA.png\" rel=\"nofollow\"><img src=\"http://i.stack.imgur.com/wR9iA.png\" alt=\"Suggestion to &quot;simplify&quot; &lt;code&gt;Nullable&lt;Int32&gt;&lt;/code&gt; to &lt;code&gt;Int32?&lt;/code&gt;\"></a></p>\n\n<p>How do I disable the <code>IDE0001 Name can be simplified.</code> for <code>Nullable&lt;T&gt;</code>?</p>\n", "is_answered": true, "delete_vote_count": 0, "accepted_answer_id": 32006300, "tags": ["visual-studio-2015"], "question_id": 32006201, "reopen_vote_count": 0, "down_vote_count": 1, "view_count": 115, "comments": [{"body": "Would be cool if the downvoter cared to give a reason.", "edited": false, "comment_id": 51921037, "creation_date": 1439553040, "score": 1, "owner": {"display_name": "mbx", "reputation": 2313, "user_id": 303290, "user_type": "registered", "accept_rate": 92}}, {"body": "This excellent new feature only ever seems to be truly &quot;annoying&quot; to programmers that use a Darth Vader color scheme.   You are asking for the wrong solution.", "edited": false, "comment_id": 51925064, "creation_date": 1439559273, "score": 0, "owner": {"display_name": "Hans Passant", "reputation": 569404, "user_id": 17034, "user_type": "registered"}}], "last_activity_date": 1439778337, "comment_count": 2, "score": 2, "answer_count": 2, "answers": [{"body": "<p>In your project properties, under the Build tab, in \"Errors and warnings\", add <code>IDE0001</code> to the set of suppressed warnings. I know this isn't really a warning (just a suggestion) but it's the same infrastructure. That removes the suggestion.</p>\n", "answer_id": 32006300, "tags": [], "down_vote_count": 0, "last_activity_date": 1439543119, "comments": [{"body": "I still have the hope that there is another option. Disabling <code>IDE0001</code> would also mean loosing helpful suggestions. As we have ReSharper setting that is already aligned with our style that shouldn&#39;t hurt too much.", "edited": false, "comment_id": 51915195, "creation_date": 1439543518, "score": 1, "owner": {"display_name": "mbx", "reputation": 2313, "user_id": 303290, "user_type": "registered", "accept_rate": 92}}, {"body": "@mbx: That&#39;s all I&#39;ve got, I&#39;m afraid. I don&#39;t know of any way of configuring it at a more fine-grained level.", "edited": false, "reply_to_user": {"display_name": "mbx", "reputation": 2313, "user_id": 303290, "user_type": "registered", "accept_rate": 92}, "comment_id": 51915580, "creation_date": 1439544064, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@bitbonk: The OP already refers to that question <i>in the question</i>, so I don&#39;t think it helps...", "edited": false, "reply_to_user": {"display_name": "bitbonk", "reputation": 16546, "user_id": 4227, "user_type": "registered", "accept_rate": 71}, "comment_id": 52016690, "creation_date": 1439842561, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1439543119, "comment_count": 3, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": true, "up_vote_count": 2}, {"body": "<p>This is a highly disfunctional and annoying 'feature'. Whenever we use whatever macro defined in whatever included header file residing outside of the standard include paths (yet still specified in additional include directories), BOOM, green squiggles. It's highly distracting and makes it hard to differentiate from actual errors. There's not even an error here for it's perfectly fine. The error is within this Visual Studio product. What's worst is that an annoying light bulb with some rectangle containing text pops up, cluttering the screen, showing all over the code. To make it even worst we have no option to disable it. Until this is either removed or implemented and actually functional as should, we'll continue using the previous VS versions. It's a shame that such a promising product gets ruined, and quite frankly in some of our projects unusable at best, by such a faulty 'feature'.</p>\n\n<p>EDIT: Just to top it off: zero feedback on our support queries from Microsoft. Sad.</p>\n", "is_accepted": false, "tags": [], "answer_id": 32041932, "down_vote_count": 0, "last_activity_date": 1439778337, "creation_date": 1439778027, "comment_count": 0, "score": 1, "owner": {"display_name": "Coriiander Drewitt", "reputation": 37, "user_id": 2860558, "user_type": "registered"}, "last_editor": {"display_name": "Coriiander Drewitt", "reputation": 37, "user_id": 2860558, "user_type": "registered"}, "last_edit_date": 1439778337, "up_vote_count": 1}], "owner": {"display_name": "mbx", "reputation": 2313, "user_id": 303290, "user_type": "registered", "accept_rate": 92}, "title": "How to disable \"Light Bulb\" Quick Action \"simplification\" for Nullable<T>?", "close_vote_count": 0, "creation_date": 1439542795, "favorite_count": 0, "up_vote_count": 3}, {"last_activity_date": 1439682579, "accepted_answer_id": 32023757, "creation_date": 1439633761, "owner": {"display_name": "Alexander Fuchs", "reputation": 8, "user_id": 4893736, "user_type": "registered"}, "last_edit_date": 1439636981, "favorite_count": 0, "view_count": 74, "delete_vote_count": 0, "title": "Access to modified closure: ReSharper", "comments": [{"body": "I looked also at: <a href=\"http://stackoverflow.com/questions/304258/access-to-modified-closure-2\">Access to Modified Closure (2)</a> which contains a link to ReSharper documentation in the original posts comment.", "edited": false, "comment_id": 51949028, "creation_date": 1439633815, "score": 0, "owner": {"display_name": "Alexander Fuchs", "reputation": 8, "user_id": 4893736, "user_type": "registered"}}], "comment_count": 1, "score": 0, "body": "<p>I created a library that handles database access. I recently added transaction handling; however, I came across a small issue. To outline this, I wrote this sample for demonstration purposes:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>class Program\n{\n    static void Main(string[] args)\n    {\n        String data = null;\n        DoAction(ref data, () =&gt;\n        {\n            Console.WriteLine(data);\n        });\n        Console.ReadLine();\n    }\n\n    private static void DoAction(ref String data, Action action)\n    {\n        if (data == null)\n            data = \"Initialized Data\";\n        action();\n    }\n}\n</code></pre>\n\n<p>I get \"Access to modified closure\" underline on the following code line for the 'data' variable:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>Console.WriteLine(data);\n</code></pre>\n\n<p>I understand that the modification of the ref data variable can cause issues (e.g. when running foreach loops). However, in the following case, I don't see this to happen.</p>\n\n<p>Here is another version with a loop changing the variable further - the output is as expected:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>class Program\n{\n    static void Main(string[] args)\n    {\n        String data = null;\n        for (var i = 0; i &lt; 10; i++)\n            DoAction(ref data, () =&gt;\n            {\n                Console.WriteLine(data);\n            });\n        Console.ReadLine();\n    }\n\n    private static void DoAction(ref String data, Action action)\n    {\n        if (data == null)\n            data = \"Initialized Data\";\n        else\n            data += \"|\";\n\n        action();\n    }\n}\n</code></pre>\n\n<p>ReSharper offers me to create a local variable, but I explicitly want to use the created string from the DoAction() method. If I would accept ReSharpers approach, it actually would break the code. Is there any other way to solve this problem? I'd like to use this Action approach, but I don't want ReSharper to complain about it either (and possibly not disable ReSharpers inspection).</p>\n\n<p>Any suggestions?</p>\n", "is_answered": true, "up_vote_count": 0, "tags": ["c#", "c#-4.0", "resharper"], "reopen_vote_count": 0, "answer_count": 2, "answers": [{"body": "<p>I would suggest avoid using a <code>ref</code> parameter for this in the first place - it seems needlessly complicated to me. I'd rewrite <code>DoAction</code> as:</p>\n\n<pre><code>static string DoAction(string data, Action&lt;string&gt; action)\n{\n    data = data == null ? \"Initialized Data\" : data + \"|\";\n    action(data);\n    return data;\n}\n</code></pre>\n\n<p>Then you can have:</p>\n\n<pre><code>data = DoAction(data, Console.WriteLine);\n</code></pre>\n\n<p>or if you want to use a lambda expression:</p>\n\n<pre><code>data = DoAction(data, txt =&gt; Console.WriteLine(txt));\n</code></pre>\n\n<p>You can make <code>DoAction</code> a <code>void</code> method if you don't actually need the result afterwards. (It's not clear why you need the result to be returned <em>and</em> a delegate to execute in <code>DoAction</code>, but presumably that makes more sense in your wider context.)</p>\n", "answer_id": 32023757, "tags": [], "down_vote_count": 0, "last_activity_date": 1439634007, "comments": [{"body": "I understand - and I have done the same thing. However, I would have twice a suitable variable for Console.WriteLine(string). data as well as txt. It could lead to confusion for other team members.", "edited": false, "comment_id": 51949082, "creation_date": 1439634100, "score": 0, "owner": {"display_name": "Alexander Fuchs", "reputation": 8, "user_id": 4893736, "user_type": "registered"}}, {"body": "@AlexanderFuchs: Well it&#39;s a somewhat confusing method to start with - why is <code>DoAction</code> responsible for computing a new value <i>and</i> executing an action? It&#39;s hard to tell what the best solution is without knowing more about what you&#39;re really trying to achieve, but using a <code>ref</code> parameter <i>and</i> a closure seems like a bad idea to me.", "edited": false, "reply_to_user": {"display_name": "Alexander Fuchs", "reputation": 8, "user_id": 4893736, "user_type": "registered"}, "comment_id": 51949102, "creation_date": 1439634191, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Sorry, I didnt understand the solution before the Lambda. This looks nice! I will try it", "edited": false, "comment_id": 51949110, "creation_date": 1439634227, "score": 0, "owner": {"display_name": "Alexander Fuchs", "reputation": 8, "user_id": 4893736, "user_type": "registered"}}, {"body": "The idea was to have sql statements execute with transaction. The DoAction method would create a transaction and use it for all queries in the Lambda block. Don&#39;t know if that makes sense.", "edited": false, "comment_id": 51949131, "creation_date": 1439634361, "score": 0, "owner": {"display_name": "Alexander Fuchs", "reputation": 8, "user_id": 4893736, "user_type": "registered"}}, {"body": "@AlexanderFuchs: Yes, that makes sense, but then it&#39;s not clear why you need to pass <code>data</code> into the method rather than <i>only</i> referring to it in the closure.", "edited": false, "reply_to_user": {"display_name": "Alexander Fuchs", "reputation": 8, "user_id": 4893736, "user_type": "registered"}, "comment_id": 51949140, "creation_date": 1439634420, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I might have an existing Transaction already and only create a new Transaction if the &#39;data&#39; is null. This is the reason why I would like to pass it.", "edited": false, "comment_id": 51949171, "creation_date": 1439634587, "score": 0, "owner": {"display_name": "Alexander Fuchs", "reputation": 8, "user_id": 4893736, "user_type": "registered"}}, {"body": "@AlexanderFuchs: Hmm. It feels like you might be better encapsulating this in a separate transaction-wrapping class, to be honest. But even if you want to stick to your rough current design, I would go with the option here rather than using <code>ref</code>.", "edited": false, "reply_to_user": {"display_name": "Alexander Fuchs", "reputation": 8, "user_id": 4893736, "user_type": "registered"}, "comment_id": 51949284, "creation_date": 1439635080, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I decided to go with the Lambda expression because it allows for multiple statements and it seems to be the cleanest solution. Each person just needs to pay attention what variable is referenced inside the Lambda block.", "edited": false, "comment_id": 51976819, "creation_date": 1439746373, "score": 0, "owner": {"display_name": "Alexander Fuchs", "reputation": 8, "user_id": 4893736, "user_type": "registered"}}, {"body": "@AlexanderFuchs, also look at threadLocalStorage if you need to track if you already have a transaction running and can&#39;t use nested transactions for some reason.", "edited": false, "reply_to_user": {"display_name": "Alexander Fuchs", "reputation": 8, "user_id": 4893736, "user_type": "registered"}, "comment_id": 52133925, "creation_date": 1440080413, "score": 0, "owner": {"display_name": "Ian Ringrose", "reputation": 22210, "user_id": 57159, "user_type": "registered", "accept_rate": 88}}], "creation_date": 1439634007, "comment_count": 9, "score": 4, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": true, "up_vote_count": 4}, {"body": "<p>In case you feel certain that the warning is not appropriate, there is the <code>InstantHandleAttribute</code> which is documented as:</p>\n\n<blockquote>\n  <p>Tells code analysis engine if the parameter is completely handled\n  when the invoked method is on stack. If the parameter is a delegate,\n  indicates that delegate is executed while the method is executed.\n  If the parameter is an enumerable, indicates that it is enumerated\n  while the method is executed.</p>\n</blockquote>\n\n<p>I think is exactly what you want.</p>\n\n<p>You can get the attribute from the <a href=\"https://www.nuget.org/packages/JetBrains.Annotations/\" rel=\"nofollow\">JetBrains.Annotations</a> package or alternatively as copy-paste from ReSharper options.</p>\n", "is_accepted": false, "tags": [], "answer_id": 32030468, "down_vote_count": 0, "last_activity_date": 1439682579, "comments": [{"body": "I will give this a try", "edited": false, "comment_id": 51966709, "creation_date": 1439709873, "score": 0, "owner": {"display_name": "Alexander Fuchs", "reputation": 8, "user_id": 4893736, "user_type": "registered"}}], "creation_date": 1439682127, "comment_count": 1, "score": 1, "owner": {"display_name": "Matthias", "reputation": 4083, "user_id": 568266, "user_type": "registered", "accept_rate": 80}, "last_editor": {"display_name": "Matthias", "reputation": 4083, "user_id": 568266, "user_type": "registered", "accept_rate": 80}, "last_edit_date": 1439682579, "up_vote_count": 1}], "last_editor": {"display_name": "Hwasoo Lee", "reputation": 248, "user_id": 518978, "user_type": "registered", "accept_rate": 0}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 32023730}, {"body": "<p>In case of \"TreeMap\" , if pass our own class object as key then which interface is needed to be implemented Comparable or Comparator and why? </p>\n", "is_answered": true, "delete_vote_count": 0, "accepted_answer_id": 32024507, "tags": ["java", "collections", "treemap"], "question_id": 32024495, "reopen_vote_count": 0, "down_vote_count": 1, "view_count": 85, "comments": [{"body": "Well, did you look at the <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/TreeMap.html#TreeMap%28java.util.Comparator%29\" rel=\"nofollow\">documentation</a>?", "edited": false, "comment_id": 51950531, "creation_date": 1439640141, "score": 3, "owner": {"display_name": "Tunaki", "reputation": 2205, "user_id": 1743880, "user_type": "registered", "accept_rate": 100}}], "last_activity_date": 1439640154, "comment_count": 1, "score": 0, "answer_count": 1, "answers": [{"body": "<p>If you construct the <code>TreeMap</code> specifying a comparator, then that will be used to compare the keys.</p>\n\n<p>If you construct the <code>TreeMap</code> <em>without</em> specifying a comparator, then the keys must implement <code>Comparable</code>.</p>\n\n<p>Typically the key would implement <code>Comparable</code> if there's a natural ordering, but you'd use a separate class as a <code>Comparator</code> for some custom ordering, or if there <em>is</em> no natural ordering for the key type. It would be unusual for the key type to implement <code>Comparator</code> itself.</p>\n", "answer_id": 32024507, "tags": [], "down_vote_count": 0, "last_activity_date": 1439640154, "comments": [{"body": "so when to use Comparable and when Comparator?   can u give me any example?", "edited": false, "comment_id": 51950621, "creation_date": 1439640454, "score": 0, "owner": {"display_name": "Sumit Patyal", "reputation": 8, "user_id": 4487923, "user_type": "registered"}}, {"body": "@SumitPatyal: I&#39;ve already explained in the answer: if the key has a <i>natural</i> ordering (as numbers do, for example) then it makes sense for them to implement <code>Comparable</code>. If you need a more <i>custom</i> ordering (e.g. to order a <code>Person</code> collection by name, or by age) then use a <code>Comparator</code>.", "edited": false, "reply_to_user": {"display_name": "Sumit Patyal", "reputation": 8, "user_id": 4487923, "user_type": "registered"}, "comment_id": 51951071, "creation_date": 1439642309, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1439640154, "comment_count": 2, "score": 9, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": true, "up_vote_count": 9}], "owner": {"display_name": "Sumit Patyal", "reputation": 8, "user_id": 4487923, "user_type": "registered"}, "title": "in case of TreeMap , if pass our own class object as key then which interface is needed to be implemented Comparable or Comparator and why?", "close_vote_count": 0, "creation_date": 1439640050, "favorite_count": 0, "up_vote_count": 1}, {"last_activity_date": 1439635404, "accepted_answer_id": 32023815, "creation_date": 1439634349, "owner": {"display_name": "UnderNotic", "reputation": 28, "user_id": 4519970, "user_type": "registered", "accept_rate": 86}, "last_edit_date": 1439634585, "favorite_count": 0, "view_count": 125, "delete_vote_count": 0, "title": "Similar Extension methods - are there any differences?", "comments": [{"body": "Yes :) another question?", "edited": false, "comment_id": 51949153, "creation_date": 1439634494, "score": 3, "owner": {"display_name": "Backs", "reputation": 3096, "user_id": 2910943, "user_type": "registered", "accept_rate": 100}}, {"body": "While this question could be expressed with a bit more detail about what the OP is looking for, I really don&#39;t think it&#39;s that bad at all - and could be a genuinely good question, with a bit more detail.", "edited": false, "comment_id": 51949179, "creation_date": 1439634626, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "comment_count": 2, "score": -1, "body": "<p>What are the differences between these two extension methods?</p>\n\n<pre><code>public static class Test\n{\n    public static int First&lt;T&gt;(this T obj)\n    {\n        return 2;\n    }\n\n    public static int Second(this object obj)\n    {\n        return 2;\n    }\n}\n</code></pre>\n", "is_answered": true, "up_vote_count": 3, "tags": ["c#", "generics", "extension-methods"], "reopen_vote_count": 0, "answer_count": 1, "answers": [{"body": "<p>There are a few differences, yes. The first one won't box value types - but will end up JIT-compiling the method multiple times for different type arguments (once for all reference types, and once per value type).</p>\n\n<p>So:</p>\n\n<pre><code>byte x1 = 10;\nint y1 = x1.First(); // No boxing\n\nbyte x2 = 10;\nint y2 = x2.Second(); // Boxes before the call\n</code></pre>\n\n<p>The IL generated is:</p>\n\n<pre><code>IL_0001:  ldc.i4.s   10\nIL_0003:  stloc.0\nIL_0004:  ldloc.0\nIL_0005:  call       int32 Test::First&lt;uint8&gt;(!!0)\nIL_000a:  stloc.1\nIL_000b:  ldc.i4.s   10\nIL_000d:  stloc.2\nIL_000e:  ldloc.2\nIL_000f:  box        [mscorlib]System.Byte\nIL_0014:  call       int32 Test::Second(object)\n</code></pre>\n\n<p>Additionally, within your <code>First</code> extension method, you could get the <em>compile-time</em> type of <code>T</code> separately from the <em>execution-time</em> type of the object referred to by <code>obj</code>. So for example, changing the body of the methods:</p>\n\n<pre><code>public static class Test\n{\n    public static int First&lt;T&gt;(this T obj)\n    {\n        Console.WriteLine(\"Compile-time type: {0}\", typeof(T));\n        Console.WriteLine(\"Execution-time type: {0}\", obj.GetType());\n        return 2;\n    }\n\n    public static int Second(this object obj)\n    {\n        // No compile-time type to know about\n        Console.WriteLine(\"Execution-time type: {0}\", obj.GetType());\n        return 2;\n    }\n}\n</code></pre>\n\n<p>Then:</p>\n\n<pre><code>Stream foo = new MemoryStream();\nfoo.First(); // Will print Stream, then MemoryStream\nfoo.Second(); // Only knows about MemoryStream\n</code></pre>\n", "is_accepted": true, "tags": [], "answer_id": 32023815, "down_vote_count": 1, "last_activity_date": 1439635404, "comments": [{"body": "In addition to this, the official documentation is very useful with good examples: <a href=\"https://msdn.microsoft.com/en-us/library/yz2be5wk.aspx\" rel=\"nofollow\">Boxing and Unboxing (C# Programming Guide)</a>", "edited": false, "comment_id": 51949402, "creation_date": 1439635640, "score": 0, "owner": {"display_name": "Gustav", "reputation": 3292, "user_id": 3527297, "user_type": "registered"}}, {"body": "Thanks that was very helpful", "edited": false, "comment_id": 51954154, "creation_date": 1439652910, "score": 0, "owner": {"display_name": "UnderNotic", "reputation": 28, "user_id": 4519970, "user_type": "registered", "accept_rate": 86}}], "creation_date": 1439634493, "comment_count": 2, "score": 14, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1439635404, "up_vote_count": 15}], "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "down_vote_count": 4, "close_vote_count": 0, "question_id": 32023801}, {"body": "<p>I've read that Task.Delay() is advised to be awaited not to block the calling thread (as oposed to Task.Delay().Wait() and Thread.Sleep()). But as I learned more about async/await I got a feeling that all it does is shifting the awaitable task for an execution on another thread.</p>\n\n<p>So, did I understand it correctly: await Task.Delay() does not block the calling thread, however it blocks SOME thread, where the awaited task gets shifted to?</p>\n\n<p>If that statement IS TRUE, then could you advice me on a method that asks a task to wait for a while WITHOUT blocking any thread during the wait?</p>\n", "is_answered": true, "delete_vote_count": 0, "accepted_answer_id": 32023725, "tags": ["c#", ".net", "multithreading", "asynchronous"], "question_id": 32023699, "reopen_vote_count": 0, "down_vote_count": 0, "view_count": 103, "comments": [{"body": "I have a blog post that <a href=\"http://blog.stephencleary.com/2013/11/there-is-no-thread.html\" rel=\"nofollow\">goes into detail how async works without blocking a thread</a>.", "edited": false, "comment_id": 51955368, "creation_date": 1439656918, "score": 1, "owner": {"display_name": "Stephen Cleary", "reputation": 130012, "user_id": 263693, "user_type": "registered", "accept_rate": 83}}], "last_activity_date": 1439633740, "comment_count": 1, "score": 4, "answer_count": 1, "answers": [{"body": "<blockquote>\n  <p>however it blocks SOME thread, where the awaited task gets shifted to?</p>\n</blockquote>\n\n<p>It depends on what you mean by \"block\". It doesn't cause any thread to go to sleep for 1 second, or (worse) spin wait for the delay to complete. Instead, it effectively schedules a timer to fire in 1 second, and then executes the continuation that will have been registered due to the <code>await</code>.</p>\n\n<p>At a somewhat simplified level, <code>await</code> just translates to:</p>\n\n<ul>\n<li>Call <code>GetAwaiter</code> on the awaitable, to get an awaiter</li>\n<li>Check whether the awaiter has already completed - if so, just continue</li>\n<li>Otherwise, schedule a continuation with the awaiter, and return</li>\n<li>When the awaiter completes, the continuation is called and the async method continues</li>\n</ul>\n\n<p>The clever bit is the way that the compiler saves state and manages the continuation so that it continues from the end of the <code>await</code> expression.</p>\n", "answer_id": 32023725, "tags": [], "down_vote_count": 0, "last_activity_date": 1439633740, "comments": [{"body": "So as I get it, the the thread where the awaited Delay() task gets sent to can be used to process other tasks, while Delay() is under way?", "edited": false, "comment_id": 51949058, "creation_date": 1439633972, "score": 0, "owner": {"display_name": "cubrman", "reputation": 202, "user_id": 2333390, "user_type": "registered", "accept_rate": 55}}, {"body": "@cubrman: What do you mean by &quot;where the awaited Delay() task gets sent&quot;? <code>Delay()</code> returns a <code>Task</code>, and that task is completed a second later... it&#39;s not like this is a task which is actually <i>doing</i> anything. If you&#39;re comfortable with how <code>System.Timers.Timer</code> works (or similar) it&#39;s like that.", "edited": false, "reply_to_user": {"display_name": "cubrman", "reputation": 202, "user_id": 2333390, "user_type": "registered", "accept_rate": 55}, "comment_id": 51949080, "creation_date": 1439634098, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Ok, then I misunderstood it, thanks.", "edited": false, "comment_id": 51949105, "creation_date": 1439634196, "score": 0, "owner": {"display_name": "cubrman", "reputation": 202, "user_id": 2333390, "user_type": "registered", "accept_rate": 55}}], "creation_date": 1439633740, "comment_count": 3, "score": 9, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": true, "up_vote_count": 9}], "owner": {"display_name": "cubrman", "reputation": 202, "user_id": 2333390, "user_type": "registered", "accept_rate": 55}, "title": "Does 'await Task.Delay(1000)' block ANY thread?", "close_vote_count": 0, "creation_date": 1439633537, "favorite_count": 0, "up_vote_count": 4}, {"last_activity_date": 1439585711, "accepted_answer_id": 32018187, "creation_date": 1439584022, "owner": {"display_name": "Max Segal", "reputation": 120, "user_id": 4457721, "user_type": "registered", "accept_rate": 76}, "last_edit_date": 1439585711, "favorite_count": 0, "view_count": 86, "delete_vote_count": 0, "title": "Why can't I access outer class from inner Thread class in Java?", "comments": [{"body": "Reopened on the grounds that the other question doesn&#39;t have the complete example that this does - we can <i>definitely</i> tell what&#39;s wrong here, and the other question doesn&#39;t make that clear.", "edited": false, "comment_id": 51938862, "creation_date": 1439584267, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "possible duplicate of <a href=\"http://stackoverflow.com/q/5439241/1768232\">No enclosing instance of the type is accessible in scope</a>", "edited": false, "comment_id": 51938941, "creation_date": 1439584452, "score": 1, "owner": {"display_name": "durron597", "reputation": 18287, "user_id": 1768232, "user_type": "registered", "accept_rate": 81}}], "comment_count": 2, "score": 3, "body": "<p>I have these class and its nested classes (please go to the relevant line):</p>\n\n<pre><code>import java.awt.*;\nimport java.awt.event.*;\n\nimport javax.swing.*;\n\npublic class Client {\n  private static final int FRAME_WIDTH = 500, FRAME_HEIGHT = 500;\n\n  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.setSize(FRAME_WIDTH, FRAME_HEIGHT);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.add(new ClientPanel());\n    EventQueue.invokeLater(new Runnable() {\n      @Override\n      public void run() {\n        frame.setVisible(true);\n      }\n    });\n  }\n\n  @SuppressWarnings(\"serial\")\n  private static class ClientPanel extends JPanel {\n    JTextArea textArea;\n    JTextField textField;\n    JButton goButton;\n\n    private ClientPanel() {\n      setLayout(new BorderLayout());\n\n      textArea = new JTextArea();\n      add(textArea, BorderLayout.NORTH);\n\n      textField = new JTextField();\n      add(textField, BorderLayout.CENTER);\n\n      goButton = new JButton(\"Go\");\n      add(goButton, BorderLayout.PAGE_END);\n      goButton.addActionListener(new ActionListener() {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n          textArea.append(\"Go button pressed. Text in field: \"\n              + textField.getText() + \"\\n \");\n        }\n      });\n    }\n\n    private static class GetBinaryThread extends Thread {\n      private String data;\n\n      public GetBinaryThread(String data) {\n          this.data = data;\n      }\n\n      public void run() {\n        try {\n          ClientPanel.this.textArea.append(\", recieved\" + data);\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n}\n</code></pre>\n\n<p>The compiler gives me an error on line: </p>\n\n<pre><code>ClientPanel.this.textArea.append(\", recieved\" + data);\n</code></pre>\n\n<blockquote>\n  <p>No enclosing instance of the type <code>Client.ClientPanel</code> is accessible in scope</p>\n</blockquote>\n\n<p>How am I able to access the JTextArea of the outer class?</p>\n", "is_answered": true, "up_vote_count": 3, "tags": ["java", "compiler-errors", "scope"], "reopen_vote_count": 0, "answer_count": 1, "answers": [{"body": "<p>Your nested class is a <em>static</em> nested class:</p>\n\n<pre><code>private static class GetBinaryThread extends Thread\n</code></pre>\n\n<p>Therefore it doesn't have an enclosing instance.</p>\n\n<p>Get rid of <code>static</code> and then it'll be an inner class, with a reference to an instance of <code>ClientPanel</code>. Note that when you create an instance of <code>GetBinaryThread</code> (which you don't in the code you've shown) you'll need to have a <code>ClientPanel</code> reference to implicitly pass to the constructor as context.</p>\n", "answer_id": 32018187, "tags": [], "down_vote_count": 0, "last_activity_date": 1439584232, "comments": [{"body": "@durron597: Where does the duplicate indicate that the OP&#39;s nested class was declared as <code>static</code>, and that that was the problem? It&#39;s easy to overlook unless it&#39;s pointed out. I&#39;d argue that it would be more useful to close the <i>other</i> question as a duplicate of <i>this</i> one as this one provides more context.", "edited": false, "reply_to_user": {"display_name": "durron597", "reputation": 18287, "user_id": 1768232, "user_type": "registered", "accept_rate": 81}, "comment_id": 51939067, "creation_date": 1439584685, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@durron597: I agree that there&#39;s more code here than would be ideal, but it&#39;s not <i>that</i> much to sort through (116 lines) - I&#39;ve seen a <i>lot</i> worse, and the question does also include the error message and where it occurs. Much better than far too little code, as is the case in the other question.", "edited": false, "reply_to_user": {"display_name": "durron597", "reputation": 18287, "user_id": 1768232, "user_type": "registered", "accept_rate": 81}, "comment_id": 51939179, "creation_date": 1439584934, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I&#39;m sure you have seen much worse. I removed a lot of the junk and some of the more obvious swing mistakes.", "edited": false, "comment_id": 51939529, "creation_date": 1439585738, "score": 0, "owner": {"display_name": "durron597", "reputation": 18287, "user_id": 1768232, "user_type": "registered", "accept_rate": 81}}], "creation_date": 1439584232, "comment_count": 3, "score": 4, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": true, "up_vote_count": 4}], "last_editor": {"display_name": "durron597", "reputation": 18287, "user_id": 1768232, "user_type": "registered", "accept_rate": 81}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 32018139}, {"last_activity_date": 1439584288, "accepted_answer_id": 32018103, "creation_date": 1439583503, "owner": {"display_name": "Help123", "reputation": 75, "user_id": 371646, "user_type": "registered", "accept_rate": 67}, "last_edit_date": 1439583911, "favorite_count": 0, "view_count": 56, "delete_vote_count": 0, "title": "Java comparator interface and initializing comparator", "comments": [{"body": "You have not told sort to use your comparator. This is also a strange way to set up a comparator. See <a href=\"http://stackoverflow.com/questions/8632857/sorting-string-lengths-using-comparator\" title=\"sorting string lengths using comparator\">stackoverflow.com/questions/8632857/&hellip;</a> for an example.", "edited": false, "comment_id": 51938664, "creation_date": 1439583807, "score": 1, "owner": {"display_name": "jarmod", "reputation": 2763, "user_id": 271415, "user_type": "registered", "accept_rate": 89}}, {"body": "You might want to check that <code>strArr</code> has at least 3 elements too.", "edited": false, "comment_id": 51938714, "creation_date": 1439583886, "score": 0, "owner": {"display_name": "Andy Turner", "reputation": 3562, "user_id": 3788176, "user_type": "registered"}}, {"body": "I recommend separating your comparator implementation from your main class.  It is easier to understand when the comparator is just the comparator and doesn&#39;t have extraneous static methods in it.", "edited": false, "comment_id": 51938755, "creation_date": 1439583985, "score": 0, "owner": {"display_name": "dsh", "reputation": 3871, "user_id": 1172714, "user_type": "registered"}}, {"body": "@dsh yes I think I will do that in the future!", "edited": false, "reply_to_user": {"display_name": "dsh", "reputation": 3871, "user_id": 1172714, "user_type": "registered"}, "comment_id": 51938899, "creation_date": 1439584333, "score": 0, "owner": {"display_name": "Help123", "reputation": 75, "user_id": 371646, "user_type": "registered", "accept_rate": 67}}], "comment_count": 4, "score": 0, "body": "<p>I have a question regarding the Comparator interface. Below my class implements the interface to sort strings by length instead of by the default sort which sorts by character value.</p>\n\n<p>After overriding the default compare, I used <code>Arrays.sort()</code> to sort my string array. Even though I have overridden the default method, if I use Arrays.sort, it calls the default compare instead of my overridden method. Is this because I am explicitly calling the super class method?</p>\n\n<p>The other question is initializing the interface itself. I know you cannot initialize an interface and instead initialize a class object (that implements said interface) to reference the methods available to the interface. In this case, when I initialize a comparator, <code>Arrays.sort(strArr, new Ideone());</code> the sort works correctly. How does the method know that I am passing it a comparator? I only initialized a class object and didn't call the <code>compare(ob1, ob2)</code> method explicitly. </p>\n\n<p>Even if I do <code>Comparator x = new Ideone();</code>, how is the class object reduced to a comparator object? Any explanation on this would be helpful.</p>\n\n<pre><code>import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\n/* Name of the class has to be \"Main\" only if the class is public. */\nclass Ideone implements Comparator\n{\n\n    static String ThirdGreatest(String[] strArr)\n    { \n        Arrays.sort(strArr);\n        //Arrays.sort(strArr, new Ideone());\n        for(String x: strArr)\n            {\n            System.out.println(x);\n            }\n        return strArr[strArr.length-3];\n    } \n\n    @Override\n    public int compare(Object s1, Object s2)\n    {\n        return (s1.toString().length() - s2.toString().length());\n    }\n\n    public static void main (String[] args) throws java.lang.Exception\n    {\n        String[] myarr = {\"coder\",\"byte\",\"code\", \"asfasfasfasf\"};\n        System.out.println(ThirdGreatest(myarr));\n    }\n}\n</code></pre>\n", "is_answered": true, "up_vote_count": 1, "tags": ["java", "arrays", "string", "sorting", "inheritance"], "reopen_vote_count": 0, "answer_count": 3, "answers": [{"body": "<p>I think the issue here is that while you've created a comparator for use in <code>Arrays.sort</code>, you haven't actually told <code>Arrays.sort</code> to use it. By default, if you just say</p>\n\n<pre><code> Arrays.sort(strArr);\n</code></pre>\n\n<p>then <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#sort-java.lang.Object:A-\" rel=\"nofollow\">the strings will be sorted using the default comparator</a>. To tell the sorting algorithm to use your custom comparator, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#sort-T:A-java.util.Comparator-\" rel=\"nofollow\">you need to pass it as a second argument to the method:</a></p>\n\n<pre><code> Arrays.sort(strArr, new Ideone());\n</code></pre>\n\n<p>Try seeing if that fixes things. As a fun test, put a <code>println</code> statement in your comparison function to see if you can watch it getting called.</p>\n\n<p>That said, it's pretty unusual to implement the comparator this way. A more common route would be to do something like this:</p>\n\n<pre><code> Arrays.sort(strArr, new Comparator&lt;String&gt;() {\n     public int compare(Object s1, Object s2) {\n       return (s1.toString().length() - s2.toString().length());\n     }\n });\n</code></pre>\n\n<p>Now, you don't need to implement <code>compare</code> on the <code>Ideone</code> class, which makes clearer that (1) it's not going to get called automatically, and (2) you only need it for this one sorting step.</p>\n", "is_accepted": false, "tags": [], "answer_id": 32018078, "down_vote_count": 0, "last_activity_date": 1439583926, "comments": [{"body": "This definitely helps. I am assuming that you are using an anonymous class to create a comparator to pass it into the sort method.", "edited": false, "comment_id": 51938883, "creation_date": 1439584298, "score": 0, "owner": {"display_name": "Help123", "reputation": 75, "user_id": 371646, "user_type": "registered", "accept_rate": 67}}, {"body": "@Help123 Yep, that&#39;s exactly it. Generally speaking, if you need a one-time comparator, this is a pretty good way to make one!", "edited": false, "reply_to_user": {"display_name": "Help123", "reputation": 75, "user_id": 371646, "user_type": "registered", "accept_rate": 67}, "comment_id": 51938917, "creation_date": 1439584380, "score": 0, "owner": {"display_name": "templatetypedef", "reputation": 160805, "user_id": 501557, "user_type": "registered", "accept_rate": 89}}], "creation_date": 1439583731, "comment_count": 2, "score": 2, "owner": {"display_name": "templatetypedef", "reputation": 160805, "user_id": 501557, "user_type": "registered", "accept_rate": 89}, "last_editor": {"display_name": "templatetypedef", "reputation": 160805, "user_id": 501557, "user_type": "registered", "accept_rate": 89}, "last_edit_date": 1439583926, "up_vote_count": 2}, {"body": "<blockquote>\n  <p>Even though I have overridden the default method, if I use Arrays.sort, it calls the default compare instead of my overridden method. Is this because I am explicitly calling the super class method?</p>\n</blockquote>\n\n<p>No, it's because in the example you've given, you don't pass in the comparator - so the <code>sort</code> method has no way of know that you're trying to use a custom comparison.</p>\n\n<blockquote>\n  <p>In this case, when I initialize a comparator, <code>Arrays.sort(strArr, new Ideone());</code> the sort works correctly. How does the method know that I am passing it a comparator? </p>\n</blockquote>\n\n<p>Because you're calling the overload that accepts a comparator. There <em>is</em> only <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#sort-T:A-java.util.Comparator-\" rel=\"nofollow\">one overload</a> with two parameters:</p>\n\n<pre><code>public static &lt;T&gt; void sort(T[] a, Comparator&lt;? super T&gt; c)\n</code></pre>\n\n<p>Now admittedly it would be better if you implemented <code>Comparator&lt;String&gt;</code> instead of the raw <code>Comparator</code> type, but it's still valid.</p>\n\n<blockquote>\n  <p>I only initialized a class object and didn't call the <code>compare(ob1, ob2)</code> method explicitly.</p>\n</blockquote>\n\n<p>Indeed - <em>you</em> don't have to call <code>compare</code>. That's the job of the <code>sort</code> method. You pass the comparator in so that it <em>can</em> call <code>compare</code>.</p>\n", "answer_id": 32018103, "tags": [], "down_vote_count": 0, "last_activity_date": 1439583826, "comments": [{"body": "That helps! I didn&#39;t realize that I was only overriding the 2 parameter and expected it be called automatically by the default sort call.", "edited": false, "comment_id": 51938844, "creation_date": 1439584228, "score": 0, "owner": {"display_name": "Help123", "reputation": 75, "user_id": 371646, "user_type": "registered", "accept_rate": 67}}, {"body": "@Help123: I don&#39;t know what you mean by &quot;only overriding the 2 parameter&quot;...", "edited": false, "reply_to_user": {"display_name": "Help123", "reputation": 75, "user_id": 371646, "user_type": "registered", "accept_rate": 67}, "comment_id": 51938908, "creation_date": 1439584357, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Sorry meant to say, I didn&#39;t realize after overriding compare, I had to pass in a Comparator so that it would use my custom compare method. I was under the assumption that it would be called by default once I overrode it on my class. I have to read up on this subject.", "edited": false, "comment_id": 51938998, "creation_date": 1439584559, "score": 0, "owner": {"display_name": "Help123", "reputation": 75, "user_id": 371646, "user_type": "registered", "accept_rate": 67}}, {"body": "@Help123: Right, no. Without passing an instance to the <code>sort</code> method, it has no way of working out what the context is. Glad it helped.", "edited": false, "reply_to_user": {"display_name": "Help123", "reputation": 75, "user_id": 371646, "user_type": "registered", "accept_rate": 67}, "comment_id": 51939017, "creation_date": 1439584600, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "thanks much for the help", "edited": false, "comment_id": 51939058, "creation_date": 1439584671, "score": 0, "owner": {"display_name": "Help123", "reputation": 75, "user_id": 371646, "user_type": "registered", "accept_rate": 67}}], "creation_date": 1439583826, "comment_count": 5, "score": 4, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": true, "up_vote_count": 4}, {"body": "<pre><code>Arrays.sort(strArr)\n</code></pre>\n\n<p>This sorts an array of string objects using the java comparator. You haven't told your sort function to use the compare function you created. There needs to be a reference to your Ideone class. </p>\n\n<pre><code>Comparator x = new Ideone();\n</code></pre>\n\n<p>Because Ideone() implements Comparator, it must implement all the methods within the Comparator interface. The variable x would use the compare method of the Ideone class as it is overridden. However, if you try to use a method from the Ideone class that isn't in the Comparator class then you'll throw an exception.</p>\n", "answer_id": 32018200, "tags": [], "down_vote_count": 0, "last_activity_date": 1439584288, "creation_date": 1439584288, "comment_count": 0, "score": 0, "owner": {"display_name": "Sterls", "reputation": 60, "user_id": 1309717, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 0}], "last_editor": {"display_name": "dsh", "reputation": 3871, "user_id": 1172714, "user_type": "registered"}, "down_vote_count": 1, "close_vote_count": 0, "question_id": 32018017}, {"last_activity_date": 1439575787, "accepted_answer_id": 32015848, "creation_date": 1439573679, "owner": {"display_name": "onlynone", "reputation": 858, "user_id": 436287, "user_type": "registered", "accept_rate": 50}, "last_edit_date": 1439574904, "favorite_count": 0, "view_count": 50, "delete_vote_count": 0, "title": "Pattern to replace nested conditionals with guard clauses while still performing some action for the vast majority of cases but not all", "comments": [{"body": "Could you call <code>doNormalThing()</code> after <code>myMethod()</code> instead of inside it? I actually prefer the nested <code>if</code>s rather than the early <code>return</code>s though.", "edited": false, "comment_id": 51933836, "creation_date": 1439574022, "score": 0, "owner": {"display_name": "Andrew Mairose", "reputation": 740, "user_id": 2561365, "user_type": "registered", "accept_rate": 67}}, {"body": "Not easily, since <code>doNormalThing()</code> isn&#39;t always called. I suppose I could have <code>myMethod()</code> changed to return a value indicating whether <code>doNormalThing()</code> should be called... Unfortunately, <code>myMethod()</code> is actually the implementation of a method of an interface which is called by other code, and I can&#39;t change its signature or how it&#39;s called.", "edited": false, "reply_to_user": {"display_name": "Andrew Mairose", "reputation": 740, "user_id": 2561365, "user_type": "registered", "accept_rate": 67}, "comment_id": 51933961, "creation_date": 1439574267, "score": 0, "owner": {"display_name": "onlynone", "reputation": 858, "user_id": 436287, "user_type": "registered", "accept_rate": 50}}, {"body": "Sounds like your first example is as clean as you&#39;ll get then, if you&#39;re bound to using a specific method signature. Like I said, I don&#39;t think the nested <code>if</code>s are that &#39;unclean&#39;.", "edited": false, "comment_id": 51934082, "creation_date": 1439574491, "score": 0, "owner": {"display_name": "Andrew Mairose", "reputation": 740, "user_id": 2561365, "user_type": "registered", "accept_rate": 67}}], "comment_count": 3, "score": 0, "body": "<p>I've got a method that kind follows the following pattern:</p>\n\n<pre><code>void myMethod(String arg1) {\n  SomeObject foo = getSomeObject(arg1);\n\n  if(foo != null) {\n    SomeOtherObject bar = foo.getSomeOtherObject();\n\n    if(bar != null) {\n      bar.doSomething();\n\n      if(bar.isGood()) {\n        YetAnother baz = getAnotherByName(bar.getAnotherName());\n\n        if(baz != null) {\n          if(baz.exitEarly()) {\n            foo.recordEarlyExit(baz.getName());\n            return;\n          }\n        }\n      }\n    }\n  }\n  doNormalThing();\n}\n</code></pre>\n\n<p>I'm wondering if there's a cleaner way to get the same behavior without so many levels.</p>\n\n<p>If I didn't have to do <code>doNormalThing();</code> at the end, I could do something like this:</p>\n\n<pre><code>void myMethod(String arg1) {\n  SomeObject foo = getSomeObject(arg1);\n  if(foo == null) { return; }\n\n  SomeOtherObject bar = foo.getSomeOtherObject();\n  if(bar == null) { return; }\n\n  bar.doSomething();\n  if(!bar.isGood()) { return; }\n\n  YetAnother baz = getAnotherByName(bar.getAnotherName());\n\n  if(baz == null) { return; }\n\n  if(baz.exitEarly()) {\n    foo.recordEarlyExit(baz.getName());\n  }\n}\n</code></pre>\n\n<p>I'm basically doing the above, but add <code>doNormalThing();</code> prior to all the <code>return</code>s. But that's a lot of repetition and if I need to change something, I have to do it in all those blocks.</p>\n\n<p>I could do something like wrap it in a <code>try{ ... } catch (DoNormalThingException e) { doNormalThing(); }</code> and only throw <code>DoNormalThingException</code> when I want to call that method prior to returning from the method, and not throw it when <code>baz.exitEarly()</code> is true. But that doesn't seem clean either, and seems like it's abusing exceptions.</p>\n\n<p>If it was just checking for <code>null</code> in all the conditionals, then I could wrap in a <code>try</code> and only run <code>doNormalThing()</code> when a <code>NullPointerException</code> is thrown. It's a a lot cleaner than the other exception based way: I wouldn't need any conditionals, and I'm catching a legit exception, not a made up one just being used for control flow. But not all the checks are for <code>== null</code> and I wouldn't want to mask NPEs coming from deeper method calls.</p>\n\n<p>If only java had <code>goto</code>...</p>\n\n<p>Edit: So I knew this type of refactoring had a name, it's: Replace Nested Conditional with Guard Clauses. This is what I attempted to do, but it doesn't work well if you have that extra method that needs to be called in most cases but not all. Still, I thought I'd mention it to help others find this question.</p>\n", "is_answered": true, "up_vote_count": 0, "tags": ["java", "goto", "control-flow"], "reopen_vote_count": 0, "answer_count": 2, "answers": [{"body": "<p>One option would be to wrap all but the <code>doNormalThing</code> method call in another method that returns whether or not to execute <code>doNormalThing</code> afterwards:</p>\n\n<pre><code>void myMethod(String arg1) {\n    if (myMethodInternal(arg1)) {\n        doNormalThing();\n    }\n}\n\nprivate boolean myMethodInternal(String arg1) {\n    SomeObject foo = getSomeObject(arg1);\n    if (foo == null) {\n        return true;\n    }\n\n    SomeOtherObject bar = goo.getSomeOtherObject();\n    if (bar == null) {\n        return true;\n    }\n    // etc\n\n    if (baz.exitEarly()) {\n        foo.recordEarlyExit(baz.getName());\n        return false;\n    }\n    return true;\n}\n</code></pre>\n\n<p>It doesn't feel terribly clean, but it would at least work. You <em>could</em> also use <code>try/finally</code> without the exception - using a <code>boolean</code> field to determine whether or not to execute <code>doNormalThing</code>.</p>\n", "answer_id": 32015848, "tags": [], "down_vote_count": 0, "last_activity_date": 1439574099, "comments": [{"body": "As I mentioned to @andrew-mairose, I can&#39;t change the signature of the method, nor how it&#39;s called. The <code>try&#47;finally</code> with a boolean is an option though, I might see how that looks.", "edited": false, "comment_id": 51934021, "creation_date": 1439574375, "score": 0, "owner": {"display_name": "onlynone", "reputation": 858, "user_id": 436287, "user_type": "registered", "accept_rate": 50}}, {"body": "@onlynone: I didn&#39;t suggest changing the signature of the method - look at my code... the &quot;externally visible&quot; method has the same signature as before.  It calls a new <i>private</i> method which returns <code>boolean</code>.", "edited": false, "reply_to_user": {"display_name": "onlynone", "reputation": 858, "user_id": 436287, "user_type": "registered", "accept_rate": 50}, "comment_id": 51934078, "creation_date": 1439574481, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I see what you&#39;re saying, sorry I didn&#39;t read as closely. I think I still might prefer the <code>try&#47;finally</code> though.", "edited": false, "comment_id": 51934261, "creation_date": 1439574827, "score": 0, "owner": {"display_name": "onlynone", "reputation": 858, "user_id": 436287, "user_type": "registered", "accept_rate": 50}}, {"body": "@onlynone: The problem with that is you&#39;ll end up calling doNormalThing even in the face of an exception unless you&#39;re careful.", "edited": false, "reply_to_user": {"display_name": "onlynone", "reputation": 858, "user_id": 436287, "user_type": "registered", "accept_rate": 50}, "comment_id": 51934312, "creation_date": 1439574902, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Marking this one as the answer as it came closest to what I wanted. I&#39;m actually going with the <code>try&#47;finally</code> approach, but if things were slightly different in my code, I could see the given answer working. I also liked @marstran&#39;s <code>Optional</code> approach below.", "edited": false, "comment_id": 52004826, "creation_date": 1439821594, "score": 0, "owner": {"display_name": "onlynone", "reputation": 858, "user_id": 436287, "user_type": "registered", "accept_rate": 50}}], "creation_date": 1439574099, "comment_count": 5, "score": 3, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": true, "up_vote_count": 3}, {"body": "<p>You could do it by composing Java 8 Optionals like this:</p>\n\n<pre><code>void myMethod(String arg1) {\n    SomeObject foo = getSomeObject(arg1);\n\n    Optional&lt;SomeOtherObject&gt; opBar = \n                Optional.ofNullable(foo)\n                        .map(foo -&gt; foo.getSomeOtherObject())\n\n    opBar.ifPresent(bar -&gt; bar.doSomething());\n\n    Optional&lt;YetAnother&gt; opBaz = \n                  opBar.filter(bar -&gt; bar.isGood())\n                       .map(bar -&gt; getAnotherByName(bar.getAnotherName())\n                       .filter(baz -&gt; baz.exitEarly());\n\n    opBaz.ifPresent(baz -&gt; foo.recordEarlyExit(baz.getName()));\n\n    if (!opBaz.isPresent()) {\n        doNormalThing();\n    }\n}\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 32016024, "down_vote_count": 0, "last_activity_date": 1439575787, "comments": [{"body": "I like it. Unfortunately my case is a little more complicated than my example, plus I don&#39;t know if it&#39;s definitely clearer.", "edited": false, "comment_id": 51937085, "creation_date": 1439580338, "score": 0, "owner": {"display_name": "onlynone", "reputation": 858, "user_id": 436287, "user_type": "registered", "accept_rate": 50}}, {"body": "Yes, it gets cluttered by the <code>void</code> methods like <code>bar.doSomething()</code> and <code>foo.recordEarlyExit(baz.getName())</code>. It would get cleaner if they were returning a new object, instead of relying on their side effects.", "edited": false, "reply_to_user": {"display_name": "onlynone", "reputation": 858, "user_id": 436287, "user_type": "registered", "accept_rate": 50}, "comment_id": 51941488, "creation_date": 1439591346, "score": 0, "owner": {"display_name": "marstran", "reputation": 556, "user_id": 4137489, "user_type": "registered"}}], "creation_date": 1439574869, "comment_count": 2, "score": 1, "owner": {"display_name": "marstran", "reputation": 556, "user_id": 4137489, "user_type": "registered"}, "last_editor": {"display_name": "marstran", "reputation": 556, "user_id": 4137489, "user_type": "registered"}, "last_edit_date": 1439575787, "up_vote_count": 1}], "last_editor": {"display_name": "onlynone", "reputation": 858, "user_id": 436287, "user_type": "registered", "accept_rate": 50}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 32015743}, {"last_activity_date": 1439559445, "creation_date": 1439536609, "owner": {"display_name": "Himanshu", "reputation": 1, "user_id": 5209672, "user_type": "registered"}, "last_edit_date": 1439537626, "favorite_count": 0, "view_count": 67, "delete_vote_count": 0, "title": "java system.out.printf format numerics rounding off and spacing issue together", "comments": [{"body": "It would be easier to reproduce this if you just hard-coded the data into your program... mind if I do that?", "edited": false, "comment_id": 51911570, "creation_date": 1439536897, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Isn&#39;t this just a matter of changing <code>%-5s</code> to <code>%-15s</code>?", "edited": false, "comment_id": 51911623, "creation_date": 1439537047, "score": 0, "owner": {"display_name": "Keppil", "reputation": 30585, "user_id": 1343161, "user_type": "registered"}}, {"body": "@JonSkeet sorry i couldnt get you . please make me clear . i am new user .", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 51911638, "creation_date": 1439537076, "score": 0, "owner": {"display_name": "Himanshu", "reputation": 1, "user_id": 5209672, "user_type": "registered"}}, {"body": "Also, the output you show here must be from a previous version of the program. It is not from the exact code posted in the question at least.", "edited": false, "comment_id": 51911661, "creation_date": 1439537128, "score": 1, "owner": {"display_name": "Keppil", "reputation": 30585, "user_id": 1343161, "user_type": "registered"}}, {"body": "import java.util.Scanner;  public class Solution {      public static void main(String[] args) {             Scanner sc=new Scanner(System.in);             System.out.println(&quot;================================&quot;);                          for(int i=0;i&lt;3;i++)             {                 String s1=sc.next();                 int x=sc.nextInt();                 System.out.printf(&quot;%-5s %03d %n&quot;,s1,x);                 //Complete this line             }             System.out.println(&quot;================================&quot;);      } }code  is working but i can not able to meet the desired output", "edited": false, "comment_id": 51911760, "creation_date": 1439537306, "score": 0, "owner": {"display_name": "Himanshu", "reputation": 1, "user_id": 5209672, "user_type": "registered"}}, {"body": "@Keppil  thk . can you please tell m the &quot;-&quot; sign meaning before % s", "edited": false, "reply_to_user": {"display_name": "Keppil", "reputation": 30585, "user_id": 1343161, "user_type": "registered"}, "comment_id": 51911884, "creation_date": 1439537538, "score": 0, "owner": {"display_name": "Himanshu", "reputation": 1, "user_id": 5209672, "user_type": "registered"}}, {"body": "I mean that in order to reproduce the problem, we have to type stuff into the console. There&#39;s no need for that. Will edit so you can see what I mean.", "edited": false, "comment_id": 51911910, "creation_date": 1439537575, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "The &#180;-&#180; makes the text left-aligned instead of right-aligned.", "edited": false, "comment_id": 51911919, "creation_date": 1439537593, "score": 0, "owner": {"display_name": "Keppil", "reputation": 30585, "user_id": 1343161, "user_type": "registered"}}, {"body": "Btw, when I run this code I get 065 and 050 displayed, not 65 and 50... are you sure you&#39;re seeing the output you put into the question?", "edited": false, "comment_id": 51911960, "creation_date": 1439537677, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "comment_count": 9, "score": 0, "body": "<pre><code>public class Solution {    \n    public static void main(String[] args) {\n        String[] languages = { \"java\", \"cpp\", \"python\" };\n        int[] values = { 100, 65, 60 };\n\n        for (int i = 0; i &lt; 3; i++) {\n            System.out.printf(\"%-5s %03d %n\", languages[i], values[i]);\n            //Complete this line\n        }\n    }\n}\n</code></pre>\n\n<p>Output I'm getting</p>\n\n<pre><code>java 100\ncpp 65\npython 50\n</code></pre>\n\n<p>Desired output</p>\n\n<pre><code>java           100 \ncpp            065 \npython         050 \n</code></pre>\n", "is_answered": true, "up_vote_count": 0, "tags": ["java", "arrays", "core"], "reopen_vote_count": 0, "answer_count": 2, "answers": [{"body": "<pre><code>    System.out.printf(\"%-15s %03d %n\", s1, x);\n</code></pre>\n\n<p>where s1 is a string and x is a number.</p>\n\n<p>Explanation:</p>\n\n<pre><code> in the above code -15s is defined as follows : - is for left justified, and width is specified as 15. s is to print the string\n in the above code  %03d is defined as follows.\n\n    0 - to pad with zeros\n    3 - width of the field was set as 3.\n\nRunning the program:\n        ================================\n        java 100(input)\n        java           100\n        cpp 65(input)\n        cpp            065\n        ================================\n\nNow the second line output \"100\", starts at the 16th character/position.Also it is padding 0 in the 4th line output.\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 32004592, "down_vote_count": 0, "last_activity_date": 1439559445, "comments": [{"body": "but this is not meeting the exact output . @keppil i am running this code   but its editor is displaying the wrong answer", "edited": false, "comment_id": 51920227, "creation_date": 1439551666, "score": 0, "owner": {"display_name": "Himanshu", "reputation": 1, "user_id": 5209672, "user_type": "registered"}}, {"body": "@Himanshu, edited my answer, can you try now?", "edited": false, "reply_to_user": {"display_name": "Himanshu", "reputation": 1, "user_id": 5209672, "user_type": "registered"}, "comment_id": 51925123, "creation_date": 1439559378, "score": 0, "owner": {"display_name": "Raghu", "reputation": 429, "user_id": 2830842, "user_type": "registered", "accept_rate": 67}}, {"body": "actually this is ques from challenge and its editor is supporting the &quot;NO SPACE&quot; between the &quot;%-15s%03d%n&quot; . however you idea help me to correct the code .. thks for the help", "edited": false, "comment_id": 51992909, "creation_date": 1439802717, "score": 0, "owner": {"display_name": "Himanshu", "reputation": 1, "user_id": 5209672, "user_type": "registered"}}], "creation_date": 1439537372, "comment_count": 3, "score": 0, "owner": {"display_name": "Raghu", "reputation": 429, "user_id": 2830842, "user_type": "registered", "accept_rate": 67}, "last_editor": {"display_name": "Raghu", "reputation": 429, "user_id": 2830842, "user_type": "registered", "accept_rate": 67}, "last_edit_date": 1439559445, "up_vote_count": 0}, {"body": "<p>The code you've got doesn't match the output you've shown - it's <em>nearly</em> right already. It comes up with:</p>\n\n<pre><code>java  100 \ncpp   065 \npython 060\n</code></pre>\n\n<p>The only problem here is that you're right-padding the names to a minimum of 5 characters... but python has 6 characters. So you just need to increase the <code>5</code> in your format string. For example:</p>\n\n<pre><code>System.out.printf(\"%-10s %03d %n\", languages[i], values[i]);\n</code></pre>\n\n<p>Separately, your comments have suggested that you don't know what each of the bits of your format string does. You should read the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax\" rel=\"nofollow\"><code>Formatter</code></a> documentation carefully. For example, the <code>-</code> in <code>%-10s</code> is a flag, with a meaning of \"The result will be left-justified.\"</p>\n", "answer_id": 32004722, "tags": [], "down_vote_count": 0, "last_activity_date": 1439537870, "creation_date": 1439537870, "comment_count": 0, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": false, "up_vote_count": 1}], "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 32004382}, {"last_activity_date": 1439555920, "accepted_answer_id": 32009455, "creation_date": 1439552621, "owner": {"display_name": "Royi Namir", "reputation": 45653, "user_id": 859154, "user_type": "registered", "accept_rate": 97}, "last_edit_date": 1439555270, "favorite_count": 2, "view_count": 127, "delete_vote_count": 0, "title": "&& operator overloading and assignments in C# - Clarification?", "comments": [{"body": "If the <code>false()</code> operator returns <code>true</code> then it means that the operation returns <code>false</code> (&quot;is x false? yes it is (return true;)&quot;)! It isn&#39;t an <code>operator bool()</code>.", "edited": false, "comment_id": 51920914, "creation_date": 1439552861, "score": 0, "owner": {"display_name": "xanatos", "reputation": 55582, "user_id": 613130, "user_type": "registered", "accept_rate": 80}}, {"body": "The <code>false()</code> operator is called to short-circuit the <code>&amp;&amp;</code>... They could have called the <code>true()</code> operator, but for example the definition of <code>&amp;&amp;</code> in <a href=\"https://msdn.microsoft.com/en-us/library/2a723cdk.aspx\" rel=\"nofollow\">msdn</a>: <i>except that <b>if x is false</b>, y is not evaluated</i>", "edited": false, "comment_id": 51921006, "creation_date": 1439552999, "score": 0, "owner": {"display_name": "xanatos", "reputation": 55582, "user_id": 613130, "user_type": "registered", "accept_rate": 80}}, {"body": "See <a href=\"http://stackoverflow.com/a/5203515/613130\">stackoverflow.com/a/5203515/613130</a> : <i>&amp;&amp; is defined as a short-circuiting operator; <b>if the first operand evaluates false</b>, it is demanded to short circuit there and not evaluate the right hand side.</i>", "edited": false, "comment_id": 51921069, "creation_date": 1439553097, "score": 0, "owner": {"display_name": "xanatos", "reputation": 55582, "user_id": 613130, "user_type": "registered", "accept_rate": 80}}, {"body": "@xanatos Yes. but that&#39;st the problem I dont see where the first operand gets to have a false value.", "edited": false, "reply_to_user": {"display_name": "xanatos", "reputation": 55582, "user_id": 613130, "user_type": "registered", "accept_rate": 80}, "comment_id": 51921091, "creation_date": 1439553138, "score": 0, "owner": {"display_name": "Royi Namir", "reputation": 45653, "user_id": 859154, "user_type": "registered", "accept_rate": 97}}, {"body": "You <code>return true;</code> in <code>operator false(X x)</code> (<code>{Console.WriteLine(&quot;in false operator for &quot;+ x.H); **return true;** }</code>). Try changin it to <code>return false;</code>", "edited": false, "comment_id": 51921114, "creation_date": 1439553180, "score": 0, "owner": {"display_name": "xanatos", "reputation": 55582, "user_id": 613130, "user_type": "registered", "accept_rate": 80}}, {"body": "@xanatos Sorry  , I might be nagging but why does the control gets into <code>operator false(X x)  </code> at first place ???", "edited": false, "reply_to_user": {"display_name": "xanatos", "reputation": 55582, "user_id": 613130, "user_type": "registered", "accept_rate": 80}, "comment_id": 51921165, "creation_date": 1439553255, "score": 0, "owner": {"display_name": "Royi Namir", "reputation": 45653, "user_id": 859154, "user_type": "registered", "accept_rate": 97}}, {"body": "Because the <code>&amp;&amp;</code> operator is translated to if (not operator false(left expression)) then calculate right expression", "edited": false, "comment_id": 51921191, "creation_date": 1439553304, "score": 1, "owner": {"display_name": "xanatos", "reputation": 55582, "user_id": 613130, "user_type": "registered", "accept_rate": 80}}], "comment_count": 7, "score": 7, "body": "<p>Following <a href=\"https://github.com/dotnet/roslyn/issues/4509#issuecomment-130391723\" rel=\"nofollow\">this <strong>very</strong> interesting issue</a>  which was originated from <a href=\"http://stackoverflow.com/questions/31961411/roslyn-failed-to-compile-code\"><strong>this</strong></a> question  -</p>\n\n<p>I want to take <em>1 steps back please</em>  (removed the dynamic environment) : </p>\n\n<p>Looking at this code : ( <sub><a href=\"https://github.com/dotnet/roslyn/issues/4509#issuecomment-130391723\" rel=\"nofollow\">a variant of this one</a></sub>) </p>\n\n<pre><code>void Main()\n{\n    int a;\n     int b = 100;\n    Console.WriteLine(X.M(1, out a));\n\n}\n\npublic class X\n{\n    public  int H=0;\n\n    public static X M(int x, out int y)\n    {\n        Console.WriteLine(\"x = \"+x);\n        y = x;\n        return new X(x);\n    }\n\n    public X(){}\n\n    public X(int h)\n    {\n        H=h;\n    }\n\n    public static bool operator false(X x)     {Console.WriteLine(\"in false operator for \"+ x.H); return true; }\n    public static bool operator true(X x)      {Console.WriteLine(\"in true operator for \"+ x.H); return true; }\n    public static X operator &amp;(X a, X b)       {Console.WriteLine(\"in &amp; operator for \"+ a.H+\",\"+b.H);   return new X(); }\n    public static implicit operator bool (X x) {Console.WriteLine(\"in bool operator for \"+ x.H);return true; }\n}\n</code></pre>\n\n<p>The result is : </p>\n\n<pre><code>x = 1\nin bool operator for 1\nTrue\n</code></pre>\n\n<p>This is understood :</p>\n\n<ul>\n<li>The <code>x = 1</code> is from the method itself ( using <code>Console.Writeline</code>)  </li>\n<li><code>in bool operator for 1</code> is from the implicit operator from <code>X</code> to <code>Bool</code> \n(so - <code>Console.WriteLine</code> treats the whole expression as <code>Console.Writeline(bool)</code>)</li>\n<li>The last \"True\" is from the \"return true\" in the  <code>operator bool (X x)</code></li>\n</ul>\n\n<p>OK - So let's change </p>\n\n<pre><code>Console.WriteLine(X.M(1, out a));\n</code></pre>\n\n<p>to </p>\n\n<pre><code>Console.WriteLine(X.M(1, out a) &amp;&amp;  X.M(2, out b));\n</code></pre>\n\n<p>Now - the result is  : </p>\n\n<pre><code>x = 1\nin false operator for 1\nin bool operator for 1\nTrue\n</code></pre>\n\n<p><strong>2 questions</strong> :</p>\n\n<ol>\n<li><p>Why does this <code>in false operator for 1</code> executes ? I don't see any reason for <code>false</code> to be present here.</p></li>\n<li><p>I could understand why the right part in <code>X.M(1, out a) &amp;&amp;  X.M(2, out b)</code> won't executes ONLY if the left part is <code>false</code> - but again I don't see how the left part can be false. It does return <code>true</code> (according to my first code)</p></li>\n</ol>\n\n<p>NB</p>\n\n<p>I've read many times the answers from the post : </p>\n\n<p>Jon said : </p>\n\n<blockquote>\n  <p>The second &amp;&amp; is a normal &amp;&amp; between two bool expressions - because\n  Nop returns bool, and there's no &amp;(X, bool) operator... but there is a\n  conversion from X to bool.</p>\n  \n  <p>So it's more like:</p>\n  \n  <p>bool first = X.M(1, out a) &amp;&amp; X.M(2, out b);<br>\n  if (first &amp;&amp; Nop(a, b))</p>\n  \n  <p>Now first is true even though only the first operand of &amp;&amp; has been\n  evaluated... so b really hasn't been assigned.</p>\n</blockquote>\n\n<p>Still I don't understand : <em>\"first is <code>true</code>(????) even though only the first operand of &amp;&amp; has been evaluated\"</em></p>\n", "is_answered": true, "up_vote_count": 7, "tags": ["c#"], "reopen_vote_count": 0, "answer_count": 1, "answers": [{"body": "<p>Firstly, don't forget that this is deliberately bizarre code, used to find a corner case. If you ever find a type that behaves like this in a genuine program, find the author and have a quiet word with them.</p>\n\n<blockquote>\n  <p>Still I don't understand : \"first is true(????) even though only the first operand of &amp;&amp; has been evaluated\"</p>\n</blockquote>\n\n<p>Yes, because of the way the <code>&amp;&amp;</code> operand is handled in the case where the operands aren't <code>bool</code>. It's specified in section 7.12.2 of the C# spec:</p>\n\n<blockquote>\n  <p>The operation <code>x &amp;&amp; y</code> is evaluated as <code>T.false(x) ? x : T.&amp;(x, y)</code> where <code>T.false(x)</code> is an invocation of the <code>operator false</code> declared in <code>T</code>, and <code>T.&amp;(x, y)</code> is an invocation of the selected operator in <code>&amp;</code>. In other words, <code>x</code> is first evaluated and <code>operator false</code> is invoked on the result to determine if <code>x</code> is definitely false. Then, if <code>x</code> is definitely false, the result of the operation is the value previously computed for <code>x</code>. Otherwise, <code>y</code> is evaluated, and the selected <code>operator &amp;</code> is invoked on the value previously computed for <code>x</code> and the value computed for <code>y</code> to produce the result of the operation.</p>\n</blockquote>\n\n<p>So, in order:</p>\n\n<ul>\n<li><code>X.M(1, out a)</code> is invoked, to get a result - call it <code>op1</code> for the moment</li>\n<li>Next <code>X.false(op1)</code> is invoked, and returns <code>true</code></li>\n<li>Then by the above, the result of the expression <code>X.M(1, out a) &amp;&amp;  X.M(2, out b)</code> is <code>op1</code></li>\n<li>Next, the value of the conversion from <code>op1</code> to <code>bool</code> is invoked, and that returns <code>true</code>. This is due to overload resolution for <code>Console.WriteLine</code>.</li>\n</ul>\n\n<p>To answer your specific confusion:</p>\n\n<blockquote>\n  <p>but again I don't see how the left part can be false.It does return true (according to my first code)</p>\n</blockquote>\n\n<p>It returns a value which is somewhat contradictory - it's <code>false</code> in that the <code>false</code> operator returns <code>true</code>, but it's <code>true</code> in that the conversion to <code>bool</code> returns <code>true</code>. Once you understand that it's the value returned by the <code>false</code> operator which determines whether or not to evaluate the second operand of <code>&amp;&amp;</code>, it should all be clear.</p>\n", "is_accepted": true, "tags": [], "answer_id": 32009455, "down_vote_count": 0, "last_activity_date": 1439555920, "comments": [{"body": "But why does it invoke <code>operator bool</code>? As I interpret the spec, the result of the <code>&amp;&amp;</code> operation should just be the result of the <code>operator &amp;</code> call.", "edited": false, "comment_id": 51922562, "creation_date": 1439555555, "score": 0, "owner": {"display_name": "erikkallen", "reputation": 19451, "user_id": 47161, "user_type": "registered", "accept_rate": 66}}, {"body": "@erikkallen: This depends on the context :) In the context of the <code>Console.WriteLine</code> call, it&#39;s because there&#39;s an overload accepting <code>bool</code>, and that&#39;s more specific than the overload accepting <code>object</code>. In the original context of Neal Gafter&#39;s program, it was because the result was going to be used as the first operand in <i>another</i> <code>&amp;&amp;</code> expression, where the right hand expression was of type <code>bool</code>.", "edited": false, "reply_to_user": {"display_name": "erikkallen", "reputation": 19451, "user_id": 47161, "user_type": "registered", "accept_rate": 66}, "comment_id": 51922765, "creation_date": 1439555885, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Thank you for the explanation. I must say that I am rather surprised that it will use implicit operators to locate more specific overloads.", "edited": false, "comment_id": 51923849, "creation_date": 1439557442, "score": 0, "owner": {"display_name": "erikkallen", "reputation": 19451, "user_id": 47161, "user_type": "registered", "accept_rate": 66}}], "creation_date": 1439553254, "comment_count": 3, "score": 5, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1439555920, "up_vote_count": 5}], "last_editor": {"display_name": "marc_s", "reputation": 384934, "user_id": 13302, "user_type": "registered", "accept_rate": 93}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 32009254}, {"body": "<p>I wrote a timer class. And I want to override its <code>toString</code> method. But when I call the <code>toString</code> method, it still returns the super implementation. (fully qualified name of the class)</p>\n\n<p>Here is my timer class:</p>\n\n<pre><code>import android.os.Handler;\nimport android.widget.TextView;\n\npublic class Timer implements Comparable&lt;Timer&gt; {\n    private Handler handler;\n    private boolean paused;\n    private TextView text;\n\n    private int minutes;\n    private int seconds;\n\n    private final Runnable timerTask = new Runnable () {\n        @Override\n        public void run() {\n            if (!paused) {\n                seconds++;\n                if (seconds &gt;= 60) {\n                    seconds = 0;\n                    minutes++;\n                }\n\n                text.setText (toString ()); //Here I call the toString\n                Timer.this.handler.postDelayed (this, 1000);\n            }\n        }\n    };\n\n    //Here is the toString method, anything wrong?\n    @Override\n    public String toString () {\n        if (Integer.toString (seconds).length () == 1) {\n            return minutes + \":0\" + seconds;\n        } else {\n            return minutes + \":\" + seconds;\n        }\n    }\n\n    public void startTimer () {\n        paused = false;\n        handler.postDelayed (timerTask, 1000);\n    }\n\n    public void stopTimer () {\n        paused = true;\n    }\n\n    public void resetTimer () {\n        stopTimer ();\n        minutes = 0;\n        seconds = 0;\n        text.setText (toString ()); //Here is another call\n    }\n\n    public Timer (TextView text) {\n        this.text = text;\n        handler = new Handler ();\n    }\n\n    @Override\n    public int compareTo(Timer another) {\n        int compareMinutes = ((Integer)minutes).compareTo (another.minutes);\n        if (compareMinutes != 0) {\n            return compareMinutes;\n        }\n        return ((Integer)seconds).compareTo (another.seconds);\n    }\n}\n</code></pre>\n\n<p>I can see that the text view's text is the fully qualified name of the <code>Timer</code> class. I even tried <code>this.toString</code> but it doesn't work either.</p>\n", "is_answered": true, "delete_vote_count": 0, "accepted_answer_id": 32010152, "tags": ["java", "android", "override", "object-to-string"], "question_id": 32010071, "reopen_vote_count": 0, "down_vote_count": 1, "view_count": 108, "comments": [{"body": "you printed by screen value &quot;Integer.toString(seconds).length&quot;. thus &quot; Log.i(&quot;value&quot;,&quot;&quot;+Integer.toString(seconds).length);&quot; ??", "edited": false, "comment_id": 51922667, "creation_date": 1439555720, "score": 0, "owner": {"display_name": "Gonzalo GM", "reputation": 64, "user_id": 4758698, "user_type": "registered", "accept_rate": 50}}], "last_activity_date": 1439555380, "comment_count": 1, "score": 5, "answer_count": 1, "answers": [{"body": "<p>You're calling <code>toString()</code> from your anonymous inner class - the <code>new Runnable() { ... }</code>. That means you're calling <code>toString()</code> <em>on</em> your anonymous class instance, not on the <code>Timer</code> instance. I suspect you're getting a <code>$1</code> in the output, showing that it's an anonymous inner class.</p>\n\n<p>Try:</p>\n\n<pre><code>text.setText(Timer.this.toString());\n</code></pre>\n\n<p>... so that you call it on the enclosing <code>Timer</code> instance instead.</p>\n\n<p>Here's a short but complete console app to demonstrate the difference:</p>\n\n<pre><code>class Test\n{\n    public Test() {\n        Runnable r = new Runnable() {\n            @Override public void run() {\n                System.out.println(toString()); // toString on anonymous class\n                System.out.println(Test.this.toString()); // toString on Test\n            }\n        };\n        r.run();\n    }\n\n    public static void main(String[] args) {\n        new Test();\n    }\n\n    @Override public String toString() {\n        return \"Test.toString()\";\n    }\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>Test$1@15db9742\nTest.toString()\n</code></pre>\n", "answer_id": 32010152, "tags": [], "down_vote_count": 0, "last_activity_date": 1439555380, "comments": [{"body": "Oh yes! Thank you very much! btw I&#39;m reading your book!", "edited": false, "comment_id": 51922563, "creation_date": 1439555556, "score": 2, "owner": {"display_name": "Sweeper", "reputation": 1343, "user_id": 5133585, "user_type": "registered", "accept_rate": 85}}], "creation_date": 1439555380, "comment_count": 1, "score": 13, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": true, "up_vote_count": 13}], "owner": {"display_name": "Sweeper", "reputation": 1343, "user_id": 5133585, "user_type": "registered", "accept_rate": 85}, "title": "Failed to override toString method", "close_vote_count": 0, "creation_date": 1439555144, "favorite_count": 0, "up_vote_count": 6}, {"last_activity_date": 1439534038, "accepted_answer_id": 32003542, "creation_date": 1439533263, "owner": {"display_name": "Dib", "reputation": 390, "user_id": 254215, "user_type": "registered", "accept_rate": 60}, "last_edit_date": 1439533425, "favorite_count": 0, "view_count": 67, "delete_vote_count": 0, "title": "Using generic interface as typeparameter for a method or function", "comment_count": 0, "score": 2, "body": "<p>Assuming the following interface which I use to define the parameter type and return type for a stored procedure...</p>\n\n<pre><code>public interface IStoredProcedure&lt;out TReturn, out TParameter&gt;\n    where TReturn : class \n    where TParameter : class\n{\n    TReturn ReturnType { get; }\n\n    TParameter ParameterType { get; }\n}\n</code></pre>\n\n<p>...is it possible to pass this interface as a <code>TypeParameter</code> for a method? Something along the lines of this (which does not compile)</p>\n\n<pre><code>public static void DoAction&lt;TProcedure&gt;(TProcedure procedure1)\n        where TProcedure : IStoredProcedure&lt;TReturnType, TParameterType&gt;\n{\n        // do some work\n}\n</code></pre>\n\n<p>... or something along these lines...</p>\n\n<pre><code>public static void DoAction&lt;IStoredProcedure&lt;TReturnType, TParameterType&gt;&gt;(IStoredProcedure procedure1)\n        where TReturnType : class\n        where TParameterType : class\n{\n        // do some work\n}\n</code></pre>\n\n<p>neither of these two methods compile, and I just cant work out how to write them to make them compile. In the <code>DoAction()</code> method I need to interogate the types of the parameters and return type.</p>\n", "is_answered": true, "up_vote_count": 2, "tags": ["c#", "type-parameter", "generic-interface"], "reopen_vote_count": 0, "answers": [{"body": "<p>You need to use the type arguments where you specify the interface:</p>\n\n<pre><code>public static void DoAction&lt;TReturnType, TParameterType&gt;\n   (IStoredProcedure&lt;TReturnType, TParameterType&gt; procedure1)\n    where TReturnType : class\n    where TParameterType : class\n{\n    // do some work\n}\n</code></pre>\n\n<p>... otherwise you're referring to a non-generic <code>IStoredProcedure</code> interface. (Don't forget that C# allows types to be \"overloaded\" by generic arity.)</p>\n", "is_accepted": true, "tags": [], "answer_id": 32003542, "down_vote_count": 0, "last_activity_date": 1439533708, "comments": [{"body": "I&#39;m not sure this compiles.  Shouldn&#39;t it be <code>DoAction&lt;TReturnType, TParameterType&gt;</code>?", "edited": false, "comment_id": 51909966, "creation_date": 1439533648, "score": 1, "owner": {"display_name": "Charles Mager", "reputation": 6889, "user_id": 1320845, "user_type": "registered"}}, {"body": "@Charles: Sorry, yes. Was focusing on the parameter and didn&#39;t spot the type parameter issue. Fixed.", "edited": false, "reply_to_user": {"display_name": "Charles Mager", "reputation": 6889, "user_id": 1320845, "user_type": "registered"}, "comment_id": 51910001, "creation_date": 1439533745, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Yes that works now thank you, and answers alsow what would of been my next question which was how make the method into a function that returns a list of TReturnType, but that all works as well now like this..          public List&lt;TReturnType&gt; GetAction&lt;TReturnType, TParameterType&gt;             (IStoredProcedure&lt;TReturnType, TParameterType&gt; procedure1)             where TReturnType : class             where TParameterType : class         {             // do some work             return new List&lt;TReturnType&gt;();         }", "edited": false, "comment_id": 51910116, "creation_date": 1439533996, "score": 0, "owner": {"display_name": "Dib", "reputation": 390, "user_id": 254215, "user_type": "registered", "accept_rate": 60}}, {"body": "Will accept as answer as soon as site lets me...", "edited": false, "comment_id": 51910135, "creation_date": 1439534048, "score": 0, "owner": {"display_name": "Dib", "reputation": 390, "user_id": 254215, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1439533443, "comment_count": 4, "score": 4, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1439533708, "up_vote_count": 4}, {"body": "<pre><code>public static void DoAction&lt;TProcedure, TReturnType, TParameterType&gt;(TProcedure procedure1)\n        where TProcedure : IStoredProcedure&lt;TReturnType, TParameterType&gt;\n        where TReturnType : class\n        where TParameterType : class\n        {\n            // do some work\n        }\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 32003562, "down_vote_count": 0, "last_activity_date": 1439534038, "comments": [{"body": "This did not compile for me.", "edited": false, "comment_id": 51910012, "creation_date": 1439533763, "score": 0, "owner": {"display_name": "Dib", "reputation": 390, "user_id": 254215, "user_type": "registered", "accept_rate": 60}}, {"body": "Compiles now after your edit, but @Jon Skeet got there first with a compiling solution that fits my needs so accepted his answer. Sorry.", "edited": false, "comment_id": 51910218, "creation_date": 1439534240, "score": 1, "owner": {"display_name": "Dib", "reputation": 390, "user_id": 254215, "user_type": "registered", "accept_rate": 60}}, {"body": "Also, using a type parameter for something that isn&#39;t generic is confusing and unnecessary. There are cases where it would be useful to have the <code>TProcedure</code> (e.g. if you returned <code>TProcedure</code>), but this isn&#39;t one of them.", "edited": false, "comment_id": 51911854, "creation_date": 1439537491, "score": 1, "owner": {"display_name": "Luaan", "reputation": 21506, "user_id": 3032289, "user_type": "registered"}}, {"body": "Although I dont intend to return TProcedure, I do want the return type for a similar method to be one of the types defined by the &quot;TReturnType&quot; type parameter of &quot;IStoredProcedure&quot;. I dont want to have to define the Type param in the code that calls DoAction / GetAction, rather I&#39;d prefer to let the class that implements &quot;IStoredProcedure&quot; define that and then use generics to allow GetAction() to return &quot;List&lt;TReturnType&gt;&quot;, if you catch my drift?", "edited": false, "comment_id": 51916590, "creation_date": 1439545545, "score": 0, "owner": {"display_name": "Dib", "reputation": 390, "user_id": 254215, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1439533560, "comment_count": 4, "score": 1, "owner": {"display_name": "nmaait", "reputation": 1359, "user_id": 1043629, "user_type": "registered"}, "last_editor": {"display_name": "nmaait", "reputation": 1359, "user_id": 1043629, "user_type": "registered"}, "last_edit_date": 1439534038, "up_vote_count": 1}], "answer_count": 2, "last_editor": {"display_name": "user2946329", "reputation": 2937, "user_id": 2946329, "user_type": "registered"}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 32003500}, {"last_activity_date": 1439531411, "accepted_answer_id": 31961546, "creation_date": 1439372239, "owner": {"display_name": "ramil89", "reputation": 427, "user_id": 1904893, "user_type": "registered", "accept_rate": 75}, "last_edit_date": 1439398334, "favorite_count": 18, "view_count": 4757, "delete_vote_count": 0, "title": "Roslyn failed to compile code", "comments": [{"body": "@BinaryWorrier: Why? It only uses <code>b</code> after assigning it via an <code>out</code> parameter.", "edited": false, "reply_to_user": {"display_name": "Binary Worrier", "reputation": 30419, "user_id": 18797, "user_type": "registered", "accept_rate": 93}, "comment_id": 51830536, "creation_date": 1439372396, "score": 11, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "<a href=\"https://msdn.microsoft.com/en-us/library/kx37x362.aspx\" rel=\"nofollow\">The VS 2015 documentation says</a> &quot;Although variables passed as out arguments do not have to be initialized before being passed, the called method is required to assign a value before the method returns.&quot; so this does look like a bug yes, it is guaranteed to be initialised by that tryParse.", "edited": false, "comment_id": 51830563, "creation_date": 1439372448, "score": 1, "owner": {"display_name": "Rup", "reputation": 20037, "user_id": 243245, "user_type": "registered", "accept_rate": 70}}, {"body": "Yes, I&#39;m surprised too. As I know <code>out</code> requires assigning inside method. So this error  little bit strange.", "edited": false, "comment_id": 51830689, "creation_date": 1439372619, "score": 0, "owner": {"display_name": "ramil89", "reputation": 427, "user_id": 1904893, "user_type": "registered", "accept_rate": 75}}, {"body": "@Jon: It hurts my eyes! Hang on, I&#39;ve unrolled the linq syntax into lambdas and I can see what it&#39;s doing. My initial wibble was for locals being set as a side effect of the where clause, I can see it&#39;s perfectly legal (still hurts my eyes a little though).", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 51830822, "creation_date": 1439372782, "score": 0, "owner": {"display_name": "Binary Worrier", "reputation": 30419, "user_id": 18797, "user_type": "registered", "accept_rate": 93}}, {"body": "Regardless of the error, this code exemplified everything that\u2019s bad about <code>out</code> arguments. Would that <code>TryParse</code> returned a a nullable value (or equivalent).", "edited": false, "comment_id": 51830917, "creation_date": 1439372902, "score": 3, "owner": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}}, {"body": "@KonradRudolph <code>where (a = decimal.TryParse(v)).HasValue &amp;&amp; (b = decimal.TryParse(v)).HasValue &amp;&amp; a &lt;= b</code> looks <i>much</i> better", "edited": false, "reply_to_user": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}, "comment_id": 51831037, "creation_date": 1439373061, "score": 1, "owner": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}}, {"body": "@Rawling No of course not, that code is silly; but that\u2019s now how you\u2019d actually write this. You\u2019d write <code>from v in array let a = decimal.Parse(v) let b = decimal.Parse(&quot;15&quot;) where a &lt;= b select v</code> (Or, if nullables were proper monads, you\u2019d use <code>SelectMany</code> and write <code>from v in array from a in Parse(v) from b in Parse(&quot;15&quot;) where a &lt;= b select v</code> \u2014 that\u2019s actually valid C#, for suitable definitions of <code>Parse</code>). In <i>real</i> code (OP\u2019s code makes absolutely no sense) this becomes even more readable.", "edited": false, "reply_to_user": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}, "comment_id": 51833343, "creation_date": 1439376523, "score": 1, "owner": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}}, {"body": "Beyond the compiler error. Why are you doing a TryParse on each iteration?", "edited": false, "comment_id": 51846956, "creation_date": 1439394566, "score": 0, "owner": {"display_name": "Fernando Pelliccioni", "reputation": 373, "user_id": 1006264, "user_type": "registered"}}, {"body": "Just to note, you can simplify this to <code>decimal a, b; var q = decimal.TryParse((dynamic)&quot;10&quot;, out a) &amp;&amp; decimal.TryParse(&quot;15&quot;, out b) &amp;&amp; a &lt;= b;</code>. I&#39;ve <a href=\"https://github.com/dotnet/roslyn/issues/4507\" rel=\"nofollow\">opened a Roslyn bug</a> raising this.", "edited": false, "comment_id": 51849624, "creation_date": 1439399059, "score": 2, "owner": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}}, {"body": "Also a note: this doesn&#39;t build for me in VS2013 on a system with VS2015 installed. Does 2015 overwrite 2013&#39;s compiler or something?", "edited": false, "comment_id": 51849690, "creation_date": 1439399192, "score": 0, "owner": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}}, {"body": "@Rawling Firstly I had uninstalled VS 2013. Only then I installed VS 2015.", "edited": false, "reply_to_user": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}, "comment_id": 51849821, "creation_date": 1439399428, "score": 0, "owner": {"display_name": "ramil89", "reputation": 427, "user_id": 1904893, "user_type": "registered", "accept_rate": 75}}, {"body": "@ramil89 Yeah, I believe it used to work for you :p This is the second time I&#39;ve seen something that installing VS2015 seems to have broken retroactively in VS2013 too.", "edited": false, "comment_id": 51849871, "creation_date": 1439399526, "score": 0, "owner": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}}], "comment_count": 12, "score": 78, "body": "<p>After I have migrated my project from VS2013 to VS2015 the project no longer builds.  A compilation error occurs in the following LINQ statement:</p>\n\n<pre><code>static void Main(string[] args)\n{\n    decimal a, b;\n    IEnumerable&lt;dynamic&gt; array = new string[] { \"10\", \"20\", \"30\" };\n    var result = (from v in array\n                  where decimal.TryParse(v, out a) &amp;&amp; decimal.TryParse(\"15\", out b) &amp;&amp; a &lt;= b // Error here\n                  orderby decimal.Parse(v)\n                  select v).ToArray();\n}\n</code></pre>\n\n<p>The compiler returns an error:</p>\n\n<blockquote>\n  <p>Error CS0165  Use of unassigned local variable 'b'</p>\n</blockquote>\n\n<p>What causes this issue?  Is it possible to fix it through a compiler setting?</p>\n", "is_answered": true, "up_vote_count": 78, "tags": ["c#", ".net", "linq", "roslyn"], "reopen_vote_count": 0, "answer_count": 4, "answers": [{"body": "<blockquote>\n  <p>What does cause this issue?</p>\n</blockquote>\n\n<p>Looks like a compiler bug to me. At least, it did. Although the <code>decimal.TryParse(v, out a)</code> and <code>decimal.TryParse(v, out b)</code> expressions are evaluated dynamically, I <em>expected</em> the compiler to still understand that by the time it reaches <code>a &lt;= b</code>, both <code>a</code> and <code>b</code> are definitely assigned. Even with the weirdnesses you can come up with in dynamic typing, I'd expect to only ever evaluate <code>a &lt;= b</code> after evaluating both of the <code>TryParse</code> calls.</p>\n\n<p>However, it turns out that through operator and conversion tricky, it's entirely feasible to have an expression <code>A &amp;&amp; B &amp;&amp; C</code> which evaluates <code>A</code> and <code>C</code> but not <code>B</code> - if you're cunning enough. See the <a href=\"https://github.com/dotnet/roslyn/issues/4509\">Roslyn bug report</a> for Neal Gafter's ingenious example.</p>\n\n<p>Making that work with <code>dynamic</code> is even harder - the semantics involved when the operands are dynamic are harder to describe, because in order to perform overload resolution, you need to evaluate operands to find out what types are involved, which can be counter-intuitive. However, again Neal has come up with an example which shows that the compiler error is required... this isn't a bug, it's a bug <em>fix</em>. Huge amounts of kudos to Neal for proving it.</p>\n\n<blockquote>\n  <p>Is it possible to fix it through compiler settings?</p>\n</blockquote>\n\n<p>No, but there are alternatives which avoid the error.</p>\n\n<p>Firstly, you could stop it from being dynamic - if you know that you'll only ever use strings, then you could use <code>IEnumerable&lt;string&gt;</code> <em>or</em> give the range variable <code>v</code> a type of <code>string</code> (i.e. <code>from string v in array</code>). That would be my preferred option.</p>\n\n<p>If you <em>really</em> need to keep it dynamic, just give <code>b</code> a value to start with:</p>\n\n<pre><code>decimal a, b = 0m;\n</code></pre>\n\n<p>This won't do any harm - we know that <em>actually</em> your dynamic evaluation won't do anything crazy, so you'll still end up assigning a value to <code>b</code> before you use it, making the initial value irrelevant.</p>\n\n<p>Additionally, it seems that adding parentheses works too:</p>\n\n<pre><code>where decimal.TryParse(v, out a) &amp;&amp; (decimal.TryParse(\"15\", out b) &amp;&amp; a &lt;= b)\n</code></pre>\n\n<p>That changes the point at which various pieces of overload resolution are triggered, and happens to make the compiler happy.</p>\n\n<p>There is <em>one</em> issue still remaining - the spec's rules on definite assignment with the <code>&amp;&amp;</code> operator need to be clarified to state that they only apply when the <code>&amp;&amp;</code> operator is being used in its \"regular\" implementation with two <code>bool</code> operands. I'll try to make sure this is fixed for the next ECMA standard.</p>\n", "is_accepted": true, "tags": [], "answer_id": 31961546, "down_vote_count": 0, "last_activity_date": 1439531411, "comments": [{"body": "Yeah! Applying <code>IEnumerable&lt;string&gt;</code> or adding brackets worked for me. Now compiler builds without error.", "edited": false, "comment_id": 51832260, "creation_date": 1439374852, "score": 0, "owner": {"display_name": "ramil89", "reputation": 427, "user_id": 1904893, "user_type": "registered", "accept_rate": 75}}, {"body": "using <code>decimal a, b = 0m;</code> might remove the error, but then <code>a &lt;= b</code> would always use <code>0m</code>, since the out value hasn&#39;t been calculated yet.", "edited": false, "comment_id": 51832473, "creation_date": 1439375200, "score": 1, "owner": {"display_name": "Paw Baltzersen", "reputation": 908, "user_id": 94923, "user_type": "registered", "accept_rate": 100}}, {"body": "@PawBaltzersen: What makes you think that? It always <i>will</i> be assigned before the comparison - it&#39;s just that the compiler can&#39;t prove it, for some reason (a bug, basically).", "edited": false, "reply_to_user": {"display_name": "Paw Baltzersen", "reputation": 908, "user_id": 94923, "user_type": "registered", "accept_rate": 100}, "comment_id": 51832535, "creation_date": 1439375275, "score": 11, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Having a parsing method without a side effect ie. <code>decimal? TryParseDecimal(string txt)</code> may be a solution too", "edited": false, "comment_id": 51833114, "creation_date": 1439376161, "score": 1, "owner": {"display_name": "zahir", "reputation": 586, "user_id": 311618, "user_type": "registered", "accept_rate": 100}}, {"body": "I wonder if it&#39;s lazy initialization; it thinks &quot;if the first one is true then I don&#39;t need to evaluate the second one which means <code>b</code> might not be assigned&quot;; I know that&#39;s invalid reasoning but it explains why the parentheses fixes it...", "edited": false, "comment_id": 51841293, "creation_date": 1439387251, "score": 1, "owner": {"display_name": "durron597", "reputation": 18287, "user_id": 1768232, "user_type": "registered", "accept_rate": 81}}, {"body": "@durron597: I suspect it&#39;s more like &quot;this is a dynamically evaluated expression - pretty much anything could happen&quot;. But hey, we&#39;ll see...", "edited": false, "reply_to_user": {"display_name": "durron597", "reputation": 18287, "user_id": 1768232, "user_type": "registered", "accept_rate": 81}, "comment_id": 51841451, "creation_date": 1439387432, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet Unless the bug is that it tries to compare before the output param is initialized.", "edited": false, "comment_id": 51843641, "creation_date": 1439390104, "score": 0, "owner": {"display_name": "Paw Baltzersen", "reputation": 908, "user_id": 94923, "user_type": "registered", "accept_rate": 100}}, {"body": "@PawBaltzersen: Well it doesn&#39;t happen when the expressions involved <i>aren&#39;t</i> dynamic... and the comparison itself definitely <i>shouldn&#39;t</i> happen until after the method calls.", "edited": false, "reply_to_user": {"display_name": "Paw Baltzersen", "reputation": 908, "user_id": 94923, "user_type": "registered", "accept_rate": 100}, "comment_id": 51843934, "creation_date": 1439390424, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Why not just initialize <code>b</code> outside the LINQ expression - it&#39;s invariant throughout the enumeration of the values of <code>array</code>?", "edited": false, "comment_id": 51850356, "creation_date": 1439400343, "score": 0, "owner": {"display_name": "tvanfosson", "reputation": 308606, "user_id": 12950, "user_type": "registered", "accept_rate": 95}}, {"body": "@tvanfosson: I suspect the real code is more complicated - I very much doubt that the OP is <i>really</i> trying to parse a constant...", "edited": false, "reply_to_user": {"display_name": "tvanfosson", "reputation": 308606, "user_id": 12950, "user_type": "registered", "accept_rate": 95}, "comment_id": 51850596, "creation_date": 1439400803, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I don&#39;t disagree but it&#39;s probable that it does come from outside the collection being iterated over in which case it could be parsed prior to the conditional.  Hard to tell from an abstracted example but I wouldn&#39;t want to be performing that parse for every element in the collection if I could avoid it.", "edited": false, "comment_id": 51851277, "creation_date": 1439401972, "score": 0, "owner": {"display_name": "tvanfosson", "reputation": 308606, "user_id": 12950, "user_type": "registered", "accept_rate": 95}}, {"body": "@tvanfosson: I don&#39;t think I&#39;d say it&#39;s &quot;probable&quot; just from the example which is only meant to demonstrate the compiler error...", "edited": false, "reply_to_user": {"display_name": "tvanfosson", "reputation": 308606, "user_id": 12950, "user_type": "registered", "accept_rate": 95}, "comment_id": 51851556, "creation_date": 1439402443, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "It reminds me of a <a href=\"http://stackoverflow.com/questions/16305287/why-does-this-null-tryparse-conditional-result-in-use-of-unassigned-local\">popular question</a> that also had something to do with an uninitialized variable, bool and dynamic. Maybe this has something to do with it.", "edited": false, "comment_id": 51859434, "creation_date": 1439418645, "score": 0, "owner": {"display_name": "IllidanS4", "reputation": 2497, "user_id": 1424244, "user_type": "registered", "accept_rate": 79}}, {"body": "Sorry about the typo. I tried Google (<a href=\"https://www.google.pt/search?q=parenthesys&amp;ie=utf-8&amp;oe=utf-8&amp;gws_rd=cr&amp;ei=_VrMVeLCH4qeaNjmg9gC\" rel=\"nofollow\">google.pt/&hellip;</a>) to fix my spelling. I guess it failed.", "edited": false, "comment_id": 51872478, "creation_date": 1439456040, "score": 0, "owner": {"display_name": "Ismael Miguel", "reputation": 1865, "user_id": 2729937, "user_type": "registered", "accept_rate": 50}}], "creation_date": 1439372574, "comment_count": 14, "score": 101, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1439531411, "up_vote_count": 101}, {"body": "<p>This does appear to be a bug, or at the least a regression, in the Roslyn compiler.  The following bug has been filed to track it:</p>\n\n<blockquote>\n  <p><a href=\"https://github.com/dotnet/roslyn/issues/4509\">https://github.com/dotnet/roslyn/issues/4509</a></p>\n</blockquote>\n\n<p>In the meantime, Jon's <a href=\"http://stackoverflow.com/a/31961546/23283\">excellent answer</a> has a couple of work arounds.  </p>\n", "answer_id": 31972036, "tags": [], "down_vote_count": 0, "last_activity_date": 1439401503, "comments": [{"body": "Also <a href=\"https://github.com/dotnet/roslyn/issues/4507\" rel=\"nofollow\">this bug</a> that notes that it&#39;s nowt to do with LINQ...", "edited": false, "comment_id": 51851634, "creation_date": 1439402629, "score": 0, "owner": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}}], "creation_date": 1439401503, "comment_count": 1, "score": 18, "owner": {"display_name": "JaredPar", "reputation": 389992, "user_id": 23283, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 18}, {"body": "<p>Since I got schooled so hard in the bug report, I'm going to try to explain this myself.</p>\n\n<hr>\n\n<p>Imagine <code>T</code> is some user-defined type with an implicit cast to <code>bool</code> that alternates between <code>false</code> and <code>true</code>, starting with <code>false</code>. As far as the compiler knows, the <code>dynamic</code> first argument to the first <code>&amp;&amp;</code> might evaluate to that type, so it has to be pessimistic.</p>\n\n<p>If, then, it let the code compile, this could happen:</p>\n\n<ul>\n<li>When the dynamic binder evaluates the first <code>&amp;&amp;</code>, it does the following:\n\n<ul>\n<li>Evaluate the first argument</li>\n<li>It's a <code>T</code> - implicitly cast it to <code>bool</code>.</li>\n<li>Oh, it's <code>false</code>, so we don't need to evaluate the second argument.</li>\n<li>Make the result of the <code>&amp;&amp;</code> evaluate as the first argument. (No, not <code>false</code>, for some reason.)</li>\n</ul></li>\n<li>When the dynamic binder evaluates the second <code>&amp;&amp;</code>, it does the following:\n\n<ul>\n<li>Evaluate the first argument.</li>\n<li>It's a <code>T</code> - implicitly cast it to <code>bool</code>.</li>\n<li>Oh, it's <code>true</code>, so evaluate the second argument.</li>\n<li>... Oh crap, <code>b</code> isn't assigned.</li>\n</ul></li>\n</ul>\n\n<hr>\n\n<p>In spec terms, in short, there are special \"definite assignment\" rules that let us say not only whether a variable is \"definitely assigned\" or \"not definitely assigned\", but also if it is \"definitely assigned after <code>false</code> statement\" or \"definitely assigned after <code>true</code> statement\".</p>\n\n<p>These exist so that when dealing with <code>&amp;&amp;</code> and <code>||</code> (and <code>!</code> and <code>??</code> and <code>?:</code>) the compiler can examine whether variables may be assigned in particular branches of a complex boolean expression.</p>\n\n<p>However, these only work <em>while the expressions' types remain boolean</em>. When part of the expression is <code>dynamic</code> (or a non-boolean static type) we can no longer reliably say that the expression is <code>true</code> or <code>false</code> - the next time we cast it to <code>bool</code> to decide which branch to take, it may have changed its mind.</p>\n\n<hr>\n\n<p>Update: this has now been <a href=\"https://github.com/dotnet/roslyn/pull/4551\" rel=\"nofollow\">resolved</a> and <a href=\"https://github.com/gafter/roslyn/blob/doc4509/docs/compilers/CSharp/Definite%20Assignment%20And%20Dynamic.md\" rel=\"nofollow\">documented</a>:</p>\n\n<blockquote>\n  <p>The definite assignment rules implemented by previous compilers for dynamic expressions allowed some cases of code that could result in variables being read that are not definitely assigned. See <a href=\"https://github.com/dotnet/roslyn/issues/4509\" rel=\"nofollow\">https://github.com/dotnet/roslyn/issues/4509</a> for one report of this.</p>\n  \n  <p>...</p>\n  \n  <p>Because of this possibility the compiler must not allow this program to be compiled if val has no initial value. Previous versions of the compiler (prior to VS2015) allowed this program to compile even if val has no initial value. Roslyn now diagnoses this attempt to read a possibly uninitialized variable.</p>\n</blockquote>\n", "is_accepted": false, "tags": [], "answer_id": 31975764, "down_vote_count": 0, "last_activity_date": 1439529227, "comments": [{"body": "Using VS2013 on my other machine, I have actually managed to read unassigned memory using this. It&#39;s not very exciting :(", "edited": false, "comment_id": 51859109, "creation_date": 1439417665, "score": 1, "owner": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}}, {"body": "You can read uninitialized variables with simple delegate. Create a delegate that gets <code>out</code> to a method that has <code>ref</code>. It will happily do it, and it will make variables assigned, without changing the value.", "edited": false, "comment_id": 51859491, "creation_date": 1439418787, "score": 0, "owner": {"display_name": "IllidanS4", "reputation": 2497, "user_id": 1424244, "user_type": "registered", "accept_rate": 79}}, {"body": "Out of curiosity, I tested that snippet with C# v4. Out of curiosity, though - how does the compiler decide to use the operator <code>false</code>/<code>true</code> as opposed to the implicit cast operator? Locally, it will call <code>implicit operator bool</code> on the first argument, then invoke the second operand, call <code>operator false</code> on the first operand, followed by <code>implicit operator bool</code> on the first operand <i>again</i>. This doesn&#39;t make sense to me, the first operand should essentially boil down to a boolean once, no?", "edited": false, "comment_id": 51865105, "creation_date": 1439441525, "score": 0, "owner": {"display_name": "Rob", "reputation": 4086, "user_id": 563532, "user_type": "registered", "accept_rate": 83}}, {"body": "@Rob Is this the <code>dynamic</code>, chained-<code>&amp;&amp;</code> case? I&#39;ve seen it basically go (1) evaluate the first argument (2) use implicit cast to see if I can short circuit (3) I can&#39;t, so evauate the second argument (4) now I know both types, I can see the best <code>&amp;&amp;</code> is a user-defined <code>&amp;</code> (5) call operator <code>false</code> on the first argument to see if I can short circuit (6) I can (because <code>false</code> and <code>implicit bool</code> disagree), so the result is the first argument... and then the next <code>&amp;&amp;</code>, (7) use implicit cast to see if I can short circuit (again).", "edited": false, "reply_to_user": {"display_name": "Rob", "reputation": 4086, "user_id": 563532, "user_type": "registered", "accept_rate": 83}, "comment_id": 51867918, "creation_date": 1439448311, "score": 0, "owner": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}}, {"body": "@IllidanS4 Sounds interesting but I haven&#39;t found out how to do it. Can you give me a snippet?", "edited": false, "reply_to_user": {"display_name": "IllidanS4", "reputation": 2497, "user_id": 1424244, "user_type": "registered", "accept_rate": 79}, "comment_id": 51868419, "creation_date": 1439449242, "score": 0, "owner": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}}, {"body": "@Rawling Yeah, check <a href=\"https://github.com/IllidanS4/SharpUtils/blob/master/Reference.cs#L38\" rel=\"nofollow\">here</a>.", "edited": false, "comment_id": 51898958, "creation_date": 1439496912, "score": 0, "owner": {"display_name": "IllidanS4", "reputation": 2497, "user_id": 1424244, "user_type": "registered", "accept_rate": 79}}, {"body": "@IllidanS4 Ah... some kind of reflection? That does bypass the type safety of the compiler, and the CLR doesn&#39;t know the difference between <code>out</code> and <code>ref</code> parameters, so I can believe that.", "edited": false, "reply_to_user": {"display_name": "IllidanS4", "reputation": 2497, "user_id": 1424244, "user_type": "registered", "accept_rate": 79}, "comment_id": 51901343, "creation_date": 1439502082, "score": 0, "owner": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}}], "creation_date": 1439415069, "comment_count": 7, "score": 15, "owner": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}, "last_editor": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}, "last_edit_date": 1439529227, "up_vote_count": 15}, {"body": "<p>This is not a bug. See <a href=\"https://github.com/dotnet/roslyn/issues/4509#issuecomment-130872713\">https://github.com/dotnet/roslyn/issues/4509#issuecomment-130872713</a> for an example of how a dynamic expression of this form can leave such an out variable unassigned.</p>\n", "answer_id": 31999909, "tags": [], "down_vote_count": 0, "last_activity_date": 1439507490, "comments": [{"body": "As my answer is accepted and highly upvoted, I&#39;ve edited it to indicate the resolution. Thanks for all your work on this - including explaining my mistake to me :)", "edited": false, "comment_id": 51909104, "creation_date": 1439531464, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Big thanks, for your amazing proof.", "edited": false, "comment_id": 51911382, "creation_date": 1439536530, "score": 0, "owner": {"display_name": "ramil89", "reputation": 427, "user_id": 1904893, "user_type": "registered", "accept_rate": 75}}], "creation_date": 1439507490, "comment_count": 2, "score": 9, "owner": {"display_name": "Neal Gafter", "reputation": 2637, "user_id": 241658, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 9}], "last_editor": {"display_name": "Ian Boyd", "reputation": 67117, "user_id": 12597, "user_type": "registered", "accept_rate": 75}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 31961411}, {"body": "<p>I'm trying to new up a LocalCommand instance which is a private class of System.Data.SqlClient.SqlCommandSet. I seem to be able to grab the type information just fine:</p>\n\n<pre><code>Assembly sysData = Assembly.Load(\"System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\");\nlocalCmdType = sysData.GetType(\"System.Data.SqlClient.SqlCommandSet+LocalCommand\");\n</code></pre>\n\n<p>but Activator.CreateInstance throws an exception when I try to instantiate it:</p>\n\n<pre><code>object item = Activator.CreateInstance(localCmdType,\n  new object[] { commandText, parameters, num7, commandType });\n</code></pre>\n\n<p>System.MissingMethodException: Constructor on type 'System.Data.SqlClient.SqlCommandSet+LocalCommand' not found.</p>\n\n<p>The constructor arguments match the signature I see in Reflector. Is new'ing up a private class with an internal ctor supported with a different CreateInstance overload or what?</p>\n", "is_answered": true, "delete_vote_count": 0, "tags": ["c#", "reflection", "ado.net"], "question_id": 440016, "reopen_vote_count": 0, "down_vote_count": 0, "view_count": 8311, "answers": [{"body": "<p>My first thought would be to get the <code>ConstructorInfo</code> using <code>ConstructorInfo constructorInfo = Type.GetConstructor()</code>, and then <code>constructorInfo.Invoke()</code> that. I suspect that <code>Activator.CreateInstance</code> makes it hard to call constructors you wouldn't normally have access to, although I don't remember trying it myself.</p>\n", "is_accepted": true, "tags": [], "answer_id": 440047, "down_vote_count": 0, "last_activity_date": 1439514939, "comments": [{"body": "The docs say CreateInstance only calls public constructors before 2.0sp1. After that, there&#39;s a bunch of permissions that are necessary.", "edited": false, "comment_id": 262200, "creation_date": 1231869402, "score": 2, "owner": {"display_name": "Robert C. Barth", "reputation": 11454, "user_id": 9209, "user_type": "registered", "accept_rate": 75}}, {"body": "Good call on GetConstructor(), that does work. I find it strange considering that the GetConstructor call looks very similar to one of the Activator.CreateInstance() overloads.", "edited": false, "comment_id": 263101, "creation_date": 1231885201, "score": 1, "owner": {"display_name": "Sneal", "user_type": "does_not_exist"}}], "creation_date": 1231869340, "comment_count": 2, "score": 13, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "ErikE", "reputation": 21673, "user_id": 57611, "user_type": "registered", "accept_rate": 93}, "last_edit_date": 1439514939, "up_vote_count": 13}, {"body": "<p>I got it to work this way:</p>\n\n<pre><code>using System;\nusing System.Reflection;\n\nclass Test\n{\n    public String X { get; set; }\n\n    Test(String x)\n    {\n    \tthis.X = x;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n    \tType type = typeof(Test);\n\n    \tConstructorInfo c = type.GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance, \n    \t\tnull, new Type[] { typeof(String) }, null);\n\n    \tObject o = c.Invoke(new Object[] { \"foo\" });\n    }\n}\n</code></pre>\n\n<p>The trick was to go after the constructor specifically with <code>GetConstructor</code> rather then trying to find it in the results of <code>GetConstructors</code>.  Go figure.</p>\n", "answer_id": 440519, "tags": [], "down_vote_count": 0, "last_activity_date": 1231876351, "comments": [{"body": "Thanks for the example!", "edited": false, "comment_id": 263103, "creation_date": 1231885233, "score": 0, "owner": {"display_name": "Sneal", "user_type": "does_not_exist"}}], "creation_date": 1231876351, "comment_count": 1, "score": 12, "owner": {"display_name": "Andrew Hare", "reputation": 185104, "user_id": 34211, "user_type": "registered", "accept_rate": 83}, "is_accepted": false, "up_vote_count": 12}, {"community_owned_date": 1250563912, "body": "<p>I might be a little late in responding, but I ran into a similar problem that fits into this topic.  I wanted to instantiate a non public constructor using Activator.CreateInstance and passing it arguments.</p>\n\n<pre><code>    public class Node\n    {\n        string name;\n        Node parent;\n        protected Node(string name,Node parent)\n        {\n           this.name = name;\n           this.parent = parent;\n        }\n        public static Node Create(string name,Node parent)\n        {\n           Node result = Activator.CreateInstance(typeof(Node),BindingFlags.Instance  | BindingFlags.NonPublic,null, new object[] { name, parent }, null) as Node;\n           return result;\n        }\n</code></pre>\n\n<p>The tricky part was the binding flags.  My first instinct was to use BindingFlags.CreateInstance | BindingFlags.NonPublic, however that caused an exception to be thrown: MissingMethodException Constructor on type 'Node' not found.  Enjoy</p>\n", "answer_id": 1291556, "tags": [], "down_vote_count": 0, "last_activity_date": 1250563912, "comments": [{"body": "This fails for me with the error you describe but oddly, Andrew Hare&#39;s answer does work, even though both answers share the same binding flags.", "edited": false, "comment_id": 37776957, "creation_date": 1403729874, "score": 0, "owner": {"display_name": "Jerther", "reputation": 551, "user_id": 2498426, "user_type": "registered", "accept_rate": 82}}], "creation_date": 1250563912, "comment_count": 1, "score": 5, "owner": {"user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 5}], "last_activity_date": 1439514939, "comment_count": 0, "score": 6, "answer_count": 3, "accepted_answer_id": 440047, "owner": {"display_name": "Sneal", "user_type": "does_not_exist"}, "title": "Activator.CreateInstance with private sealed class", "close_vote_count": 0, "creation_date": 1231868877, "favorite_count": 1, "up_vote_count": 6}, {"last_activity_date": 1439488737, "accepted_answer_id": 31995050, "creation_date": 1439487543, "owner": {"display_name": "9a3eedi", "reputation": 271, "user_id": 1074358, "user_type": "registered", "accept_rate": 74}, "last_edit_date": 1439488045, "favorite_count": 0, "view_count": 85, "delete_vote_count": 0, "title": "Use of unassigned local variable in an if-else statement that assigns it", "comments": [{"body": "Why do you write &amp;&amp; instead of || ?", "edited": false, "comment_id": 51894157, "creation_date": 1439487799, "score": 3, "owner": {"display_name": "TaW", "reputation": 14814, "user_id": 3152130, "user_type": "registered", "accept_rate": 94}}, {"body": "In the second example, when are you declaring exponent?", "edited": false, "comment_id": 51894181, "creation_date": 1439487845, "score": 0, "owner": {"display_name": "Michael McPherson", "reputation": 97, "user_id": 1585043, "user_type": "registered"}}, {"body": "doh! It was a stupid mistake I hadn&#39;t noticed! I can&#39;t believe I was stuck at this for a while....", "edited": false, "comment_id": 51894407, "creation_date": 1439488270, "score": 1, "owner": {"display_name": "9a3eedi", "reputation": 271, "user_id": 1074358, "user_type": "registered", "accept_rate": 74}}, {"body": "@MichaelMcPherson I hand-wrote that code. I forgot to declare exponent. I edited my question to fix it.", "edited": false, "reply_to_user": {"display_name": "Michael McPherson", "reputation": 97, "user_id": 1585043, "user_type": "registered"}, "comment_id": 51894433, "creation_date": 1439488322, "score": 1, "owner": {"display_name": "9a3eedi", "reputation": 271, "user_id": 1074358, "user_type": "registered", "accept_rate": 74}}, {"body": "Hey, at least it&#39;s solved. Be sure to accept the answer that helped!", "edited": false, "comment_id": 51894474, "creation_date": 1439488397, "score": 0, "owner": {"display_name": "Michael McPherson", "reputation": 97, "user_id": 1585043, "user_type": "registered"}}], "comment_count": 5, "score": 3, "body": "<p>I have the following code that parses some strings into doubles</p>\n\n<pre><code>double number;\ndouble exponent;\nif(!double.TryParse(line1, out number) &amp;&amp;\n   !double.TryParse(line2, out exponent))\n   throw new ArgumentException(\"Invalid string\");\nelse\n   number *= 10.0 * exponent;\n</code></pre>\n\n<p>I'm getting an error with the compiler that the <code>exponent</code> is being used when it's not assigned (Use of unassigned local variable 'exponent'). However, I do not get the error with the <code>number</code> variable even though it's being treated in the same manner. Additionally, the <code>&amp;&amp;</code> coupled with the <code>out</code> specifier in the functions being called in the if statement pretty much should guarantee that both number and exponent are assigned by the time it reaches the else block.</p>\n\n<p>The following code DOES compile.</p>\n\n<pre><code>double number;\ndouble exponent;\nif(!double.TryParse(line1, out number))\n    throw new ArgumentException(\"Invalid string\");\nelse{\n    if(!double.TryParse(line2, out exponent)){\n        throw new ArgumentException(\"Invalid string\");\n    }else{\n        number *= 10.0 * exponent;\n    }\n}\n</code></pre>\n\n<p>Why is this the case? In the first code sample, aren't both variables guaranteed to be assigned by the time the else statement is executed? Aren't both code samples equivalent logically? Is this a limitation of the compiler? Actually, I'm kinda surprised the compiler is smart enough to recognize the case in the bottom code sample in the first place.</p>\n", "is_answered": true, "up_vote_count": 3, "tags": ["c#", "parsing", "compiler-errors"], "reopen_vote_count": 0, "answer_count": 3, "answers": [{"body": "<p><code>&amp;&amp;</code> short circuits, so if the parsing of <code>number</code> fails the second <code>TryParse</code> will never execute and thus <code>exponent</code> could be left uninitialized.  </p>\n\n<p>Side note - you want to fail if <em>either</em> parse fails, so you really want OR (<code>|</code>) instead of AND (<code>&amp;</code>)</p>\n\n<p>Some options:</p>\n\n<ul>\n<li>change <code>&amp;&amp;</code> to <code>||</code> to fix the logic error </li>\n<li><p>Reverse the logic to put the \"happy case\" first:</p>\n\n<pre><code>double number;\ndouble exponent;\n// you can use \"&amp;&amp;\" here because you don't reference exponent unless both parses succeed.\nif(double.TryParse(line1, out number) &amp;&amp;\n   double.TryParse(line2, out exponent))\n{\n   number *= 10.0 * exponent;\n}\nelse\n   throw new ArgumentException(\"Invalid string\");\n</code></pre></li>\n</ul>\n", "is_accepted": false, "tags": [], "answer_id": 31995045, "down_vote_count": 0, "last_activity_date": 1439488737, "comments": [{"body": "Changing <code>&amp;&amp;</code> to <code>&amp;</code> would end up going to the &quot;everything&#39;s fine&quot; case when the OP doesn&#39;t really want to though, I suspect.", "edited": false, "comment_id": 51894208, "creation_date": 1439487895, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet True - I focused on the compiler error and missed the logic error.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 51894427, "creation_date": 1439488308, "score": 1, "owner": {"display_name": "D Stanley", "reputation": 78788, "user_id": 1081897, "user_type": "registered"}}], "creation_date": 1439487776, "comment_count": 2, "score": 3, "owner": {"display_name": "D Stanley", "reputation": 78788, "user_id": 1081897, "user_type": "registered"}, "last_editor": {"display_name": "D Stanley", "reputation": 78788, "user_id": 1081897, "user_type": "registered"}, "last_edit_date": 1439488737, "up_vote_count": 3}, {"body": "<p>I'm pretty sure you want <code>||</code> instead of <code>&amp;&amp;</code>. Currently, you're only throwing an exception if <em>both</em> lines are invalid - if the first line is valid, you're never even parsing the second. I assume you actually only want to use <code>number</code> and <code>exponent</code> if both of them are valid...</p>\n\n<p>So your code should be (with more idiomatic formatting):</p>\n\n<pre><code>if (!double.TryParse(line1, out number) || !double.TryParse(line2, out exponent))\n{\n    throw new ArgumentException(\"Invalid string\");\n}\nelse\n{\n    number *= 10.0 * exponent;\n}\n</code></pre>\n\n<p>Or to make the whole thing easier to understand, reduce the number of negatives involved - show what you want to do if everything <em>is</em> valid, and handle the negative situations in the <code>else</code>:</p>\n\n<pre><code>if (double.TryParse(line1, out number) &amp;&amp; double.TryParse(line2, out exponent))\n{\n    number *= 10.0 * exponent;\n}\nelse\n{\n    throw new ArgumentException(\"Invalid string\");\n}\n</code></pre>\n", "is_accepted": true, "tags": [], "answer_id": 31995050, "down_vote_count": 0, "last_activity_date": 1439488698, "comments": [{"body": "I am using &amp;&amp;.. but I see your point. This was a stupid mistake that I haven&#39;t noticed :/ Thanks!", "edited": false, "comment_id": 51894348, "creation_date": 1439488169, "score": 0, "owner": {"display_name": "9a3eedi", "reputation": 271, "user_id": 1074358, "user_type": "registered", "accept_rate": 74}}, {"body": "@9a3eedi: Yes, that&#39;s my point - you&#39;re using <code>&amp;&amp;</code> but you shouldn&#39;t be.", "edited": false, "reply_to_user": {"display_name": "9a3eedi", "reputation": 271, "user_id": 1074358, "user_type": "registered", "accept_rate": 74}, "comment_id": 51894404, "creation_date": 1439488267, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet what I meant to say was the statement &quot;I&#39;m pretty sure you want <code>&amp;&amp;</code> instead of <code>||</code>&quot; implies that I&#39;m using <code>||</code> when I wasn&#39;t. I think you meant to say &quot;I&#39;m pretty sure you want <code>||</code> instead of <code>&amp;&amp;</code>&quot; . ;)", "edited": false, "comment_id": 51894578, "creation_date": 1439488584, "score": 1, "owner": {"display_name": "9a3eedi", "reputation": 271, "user_id": 1074358, "user_type": "registered", "accept_rate": 74}}, {"body": "@9a3eedi: Ah, right. Yes, fixed that :)", "edited": false, "reply_to_user": {"display_name": "9a3eedi", "reputation": 271, "user_id": 1074358, "user_type": "registered", "accept_rate": 74}, "comment_id": 51894632, "creation_date": 1439488705, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1439487787, "comment_count": 4, "score": 6, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1439488698, "up_vote_count": 6}, {"body": "<p>Nope, because in your top example, both number and exponent have to be null to get to a non-breakable path:</p>\n\n<p>if(!double.TryParse(line1, out number) &amp;&amp;\n   !double.TryParse(line2, out exponent))</p>\n\n<p>this won't compile, either:</p>\n\n<p>if(!double.TryParse(line1, out number) ||\n   !double.TryParse(line2, out exponent))</p>\n\n<p>Because if the line fails (isn't a number) then you bail out of the IF statement before you initialize exponent.  Your 2nd IF statement is the right way to do it.</p>\n", "answer_id": 31995121, "tags": [], "down_vote_count": 0, "last_activity_date": 1439488040, "comments": [{"body": "Neither <code>number</code> nor <code>exponent</code> can be null", "edited": false, "comment_id": 51894602, "creation_date": 1439488655, "score": 0, "owner": {"display_name": "D Stanley", "reputation": 78788, "user_id": 1081897, "user_type": "registered"}}, {"body": "Exactly!  Which is why his logic wouldn&#39;t work...  If number is a valid number, the if terminates before it evaluates the 2nd number and sees if it can assign a value to exponent.", "edited": false, "reply_to_user": {"display_name": "D Stanley", "reputation": 78788, "user_id": 1081897, "user_type": "registered"}, "comment_id": 51895052, "creation_date": 1439489427, "score": 0, "owner": {"display_name": "Clay Sills", "reputation": 121, "user_id": 5179198, "user_type": "registered"}}], "creation_date": 1439488040, "comment_count": 2, "score": 0, "owner": {"display_name": "Clay Sills", "reputation": 121, "user_id": 5179198, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 0}], "last_editor": {"display_name": "9a3eedi", "reputation": 271, "user_id": 1074358, "user_type": "registered", "accept_rate": 74}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 31994981}, {"last_activity_date": 1439480516, "accepted_answer_id": 31992822, "creation_date": 1439479945, "owner": {"display_name": "Kalec", "reputation": 708, "user_id": 1036386, "user_type": "registered", "accept_rate": 91}, "last_edit_date": 1439480373, "favorite_count": 0, "view_count": 62, "delete_vote_count": 0, "title": "SimpleDateFormat: unexpected results and unexpected parse exceptions", "comments": [{"body": "Please be more explicit about the <i>difficulties</i> in your title. What output do you expect in your second snippet? Why? Remember that a <code>Date</code> does not have a format.", "edited": false, "comment_id": 51889574, "creation_date": 1439480106, "score": 3, "owner": {"display_name": "Sotirios Delimanolis", "reputation": 126041, "user_id": 438154, "user_type": "registered", "accept_rate": 99}}, {"body": "Ok, let me try.", "edited": false, "reply_to_user": {"display_name": "Sotirios Delimanolis", "reputation": 126041, "user_id": 438154, "user_type": "registered", "accept_rate": 99}, "comment_id": 51889637, "creation_date": 1439480194, "score": 0, "owner": {"display_name": "Kalec", "reputation": 708, "user_id": 1036386, "user_type": "registered", "accept_rate": 91}}, {"body": "What culture are you in? You&#39;re not specifying a culture anywhere, so if &quot;Jun&quot; isn&#39;t a valid month abbreviation in your system default culture, that would explain the first problem. For the second format, you almost certainly want <code>HH</code> instead of <code>hh</code>.", "edited": false, "comment_id": 51889665, "creation_date": 1439480226, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "you&#39;re asking why your Jun 7 date got converted to Aug 6?", "edited": false, "comment_id": 51889673, "creation_date": 1439480235, "score": 0, "owner": {"display_name": "Marc B", "reputation": 235807, "user_id": 118068, "user_type": "registered"}}, {"body": "Or why the result of <code>Date.toString()</code> is the documented result?", "edited": false, "comment_id": 51889701, "creation_date": 1439480274, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet Culture? Hmm, I have no idea what that is. More reading up on <code>date</code> I guess ? @MarcB There are two code snippets: Why did the first one fail, for the second one look at edit.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 51889860, "creation_date": 1439480487, "score": 0, "owner": {"display_name": "Kalec", "reputation": 708, "user_id": 1036386, "user_type": "registered", "accept_rate": 91}}, {"body": "<i>I&#39;m starting to think that is because I&#39;m printing a date.</i> Yes. You&#39;re parsing a date string into a <code>Date</code> object, but then trying to print the <code>Date</code>. This uses its <code>toString()</code> which may or may not match the format it got parsed from. If you already have the formatted string (which you just parsed), there&#39;s no reason to parse it to a <code>Date</code> just to re-print it. Otherwise, just use <code>DateFormat#format(..)</code>.", "edited": false, "comment_id": 51889871, "creation_date": 1439480499, "score": 2, "owner": {"display_name": "Sotirios Delimanolis", "reputation": 126041, "user_id": 438154, "user_type": "registered", "accept_rate": 99}}], "comment_count": 7, "score": 0, "body": "<p>I'm having huge difficulties with simple date format. First of all, I know not all tutorials on all sites are actually good, but the fact that all non trivial formats (not dd/MM/yyyy) gave a parse exception (plus my own tests don't work as expected) is rather frustrating to me.</p>\n\n<p>This is the site in question: <a href=\"http://www.mkyong.com/java/how-to-convert-string-to-date-java/\" rel=\"nofollow\">http://www.mkyong.com/java/how-to-convert-string-to-date-java/</a></p>\n\n<p>And I don't understand why something as simple as:</p>\n\n<pre><code>private static void unexpectedFailure() {\n    SimpleDateFormat formatter = new SimpleDateFormat(\"dd-MMM-yyyy\");\n    String dateInString = \"7-Jun-2013\";\n\n    try {\n\n        Date date = formatter.parse(dateInString);\n        System.out.println(date);\n        System.out.println(formatter.format(date));\n\n    } catch (ParseException e) {\n        e.printStackTrace();\n    }\n}\n</code></pre>\n\n<p>Throws a parse exception.</p>\n\n<p>Also besides that, I'm trying to parse my own dates. This code gives strange results (unexpected I would say):</p>\n\n<pre><code>public static void doSomething(List&lt;String&gt; list) { \n    Iterator&lt;String&gt; iter = list.iterator();\n    String[] line = iter.next().split(\" \");\n    System.out.println(Arrays.toString(line));\n    DateFormat format = new SimpleDateFormat(\"dd/MM/yyyy hh:mm:ss\");\n    format.setLenient(true);\n\n\n    try {\n        System.out.println(line[0]+\" \"+line[1]);\n        System.out.println(format.parse(line[0]+\" \"+line[1]));\n    } catch (ParseException e) {\n        System.out.println(\"In theory this should not get caught.\");\n    }\n}\n</code></pre>\n\n<p>Prints out this:</p>\n\n<pre><code>[06/08/2015, 13:51:29:849, DEBUG, etc...]\n06/08/2015 13:51:29:849\nThu Aug 06 13:51:29 EEST 2015\n</code></pre>\n\n<p><code>Thu Aug 06 13:51:29 EEST 2015</code> WHAT? WHY?</p>\n\n<p><strong>EDIT</strong> I'll try and explain. In my last code snippet I'm just trying to determine if the string is a date, and it passes \"the test\". However when I'm printing it out the format is simply bizzare. I'm starting to think that is because I'm printing a date. How can I even print a DateFormat? What I was expecting was <code>dd/MM/yyyy hh:mm:ss</code> not <code>ddd MMM 06? hh:mm:ss G YYYY</code></p>\n", "is_answered": true, "up_vote_count": 0, "tags": ["java", "date", "parsing", "simpledateformat"], "reopen_vote_count": 0, "answer_count": 1, "answers": [{"body": "<blockquote>\n  <p>And I don't understand why something as simple as:<br>\n  (code snipped)<br>\n  Throws a parse exception.</p>\n</blockquote>\n\n<p>My guess is that it's tripping up over <code>Jun</code> which may not be a valid month abbreviation in your system default locale. I suggest you specify the locale in your <code>SimpleDateFormat</code> constructor:</p>\n\n<pre><code>SimpleDateFormat formatter = new SimpleDateFormat(\"dd-MMM-yyyy\", Locale.US);\n</code></pre>\n\n<p>Then you're dealing with a locale which <em>definitely</em> has <code>Jun</code> as a month abbreviation.</p>\n\n<p>That said, where possible I'd suggest using numeric formats where possibly, ideally ones following ISO-8601, e.g.</p>\n\n<pre><code>yyyy-MM-dd'T'HH:mm:ss\n</code></pre>\n\n<blockquote>\n  <p>However when I'm printing it out the format is simply bizzare. </p>\n</blockquote>\n\n<p>No it's not. You're effectively using</p>\n\n<pre><code>Date date = format.parse(line[0]+\" \"+line[1]);\nSystem.out.println(date);\n</code></pre>\n\n<p>So that's calling <code>Date.toString()</code>, <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Date.html#toString--\" rel=\"nofollow\">documented</a> as:</p>\n\n<blockquote>\n  <p>Converts this Date object to a String of the form:</p>\n\n<pre><code>dow mon dd hh:mm:ss zzz yyyy\n</code></pre>\n</blockquote>\n\n<p>So that's working as expected. However, you want to <em>format</em> the date using your <code>SimpleDateFormat</code> - so you need to call <code>format</code>:</p>\n\n<pre><code>System.out.println(format.format(date));\n</code></pre>\n\n<p>Of course that just checks that it can round-trip, basically.</p>\n\n<p>As a side note, I suspect you want <code>HH</code> (24-hour clock) instead of <code>hh</code> (12-hour clock) in your format string.</p>\n", "answer_id": 31992822, "tags": [], "down_vote_count": 0, "last_activity_date": 1439480516, "comments": [{"body": "Yup, that pretty much sums up everything. Thank you a bunch. For a beginner this is a bit too much data, miss something like <code>.parse()</code> returns a date and you&#39;re stuck. Again, thanks!", "edited": false, "comment_id": 51890192, "creation_date": 1439480978, "score": 0, "owner": {"display_name": "Kalec", "reputation": 708, "user_id": 1036386, "user_type": "registered", "accept_rate": 91}}], "creation_date": 1439480516, "comment_count": 1, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": true, "up_vote_count": 2}], "last_editor": {"display_name": "Kalec", "reputation": 708, "user_id": 1036386, "user_type": "registered", "accept_rate": 91}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 31992598}, {"body": "<p>This is my method. Note that I am returning the equivalent nullable type for the generic parameter <code>R</code>:</p>\n\n<pre><code>    public static Nullable&lt;R&gt; GetValue&lt;T, R&gt;(this T a, Expression&lt;Func&lt;T, R&gt;&gt; expression)\n        where T : Attribute\n        where R : struct\n    {\n        if (a == null)\n            return null;\n\n        PropertyInfo p = GetProperty(expression);\n        if (p == null)\n            return null;\n\n        return (R)p.GetValue(a, null);\n    }\n</code></pre>\n\n<p>I can use it in a call to get the value of an attribute like this:</p>\n\n<pre><code>//I don't throw exceptions for invalid or missing calls \n//because I want to chain the calls together:\nint maximumLength4 = instance.GetProperty(x =&gt; x.ToString())\n                            .GetAttribute&lt;StringLengthAttribute&gt;()\n                            .GetValue(x =&gt; x.MaximumLength)\n                            .GetValueOrDefault(50);\n</code></pre>\n\n<p>I'd like to use the same generic method with strings:</p>\n\n<pre><code>//I'd like to use the GetValue generic method with strings as well as integers \nstring erroMessage = instance.GetProperty(x =&gt; x.ToString())\n                            .GetAttribute&lt;StringLengthAttribute&gt;()\n                            .GetValue(x =&gt; x.ErrorMessage);\n</code></pre>\n\n<p>but it won't compile:</p>\n\n<blockquote>\n  <p>The type 'R' must be a non-nullable value type in order to use it as\n  parameter 'T' in the generic type or method 'System.Nullable'</p>\n  \n  <p>Cannot implicitly convert type 'string?' to 'string'</p>\n</blockquote>\n\n<p>Is there any trick I can use to get the same method signature here and yet get generics to infer the return type as one that can be null?</p>\n\n<p>This is some test code to show that it works for integer values:</p>\n\n<pre><code>//[StringLength(256)]\n//public string Name { get; set; }\nPropertyInfo info = ReflectionAPI.GetProperty&lt;Organisation, String&gt;(x =&gt; x.Name);//not null\nStringLengthAttribute attr = info.GetAttribute&lt;StringLengthAttribute&gt;();//not null\nint? maximumLength = attr.GetValue(x =&gt; x.MaximumLength);//256\nint? minimumLength = attr.GetValue(x =&gt; x.MinimumLength);//0\n\nPropertyInfo info2 = ReflectionAPI.GetProperty&lt;Organisation, int&gt;(x =&gt; x.ID);//not null\nStringLengthAttribute attr2 = info2.GetAttribute&lt;StringLengthAttribute&gt;();//null because ID doesn't have the attribute\nint? maximumLength2 = attr2.GetValue(x =&gt; x.MaximumLength);//null\nint? minimumLength2 = attr2.GetValue(x =&gt; x.MinimumLength);//null\n\n//I can use the GetProperty extension method on an instance\nOrganisation instance = (Organisation)null;\nPropertyInfo info3 = instance.GetProperty(x =&gt; x.ToString());//null because its a method call not a property\nStringLengthAttribute attr3 = info3.GetAttribute&lt;StringLengthAttribute&gt;();//null\nint? maximumLength3 = attr3.GetValue(x =&gt; x.MaximumLength);//null\nint? minimumLength3 = attr3.GetValue(x =&gt; x.MinimumLength);//null\n</code></pre>\n\n<p>And this is the rest of my <code>ReflectionAPI</code>:</p>\n\n<pre><code>public static class ReflectionAPI\n{\n\n    public static Nullable&lt;R&gt; GetValue&lt;T, R&gt;(this T a, Expression&lt;Func&lt;T, R&gt;&gt; expression)\n        where T : Attribute\n    {\n        if (a == null)\n            return null;\n\n        PropertyInfo p = GetProperty(expression);\n        if (p == null)\n            return null;\n\n        return (R)p.GetValue(a, null);\n    }\n\n    public static T GetAttribute&lt;T&gt;(this PropertyInfo p) where T : Attribute\n    {\n        if (p == null)\n            return null;\n\n        return p.GetCustomAttributes(false).OfType&lt;T&gt;().LastOrDefault();\n    }\n\n    public static PropertyInfo GetProperty&lt;T, R&gt;(Expression&lt;Func&lt;T, R&gt;&gt; expression)\n    {\n        if (expression == null)\n            return null;\n\n        MemberExpression memberExpression = expression.Body as MemberExpression;\n        if (memberExpression == null)\n            return null;\n\n        return memberExpression.Member as PropertyInfo;\n    }\n}\n</code></pre>\n", "is_answered": true, "delete_vote_count": 0, "tags": ["c#", "generics", "reflection", "data-annotations"], "question_id": 19571213, "reopen_vote_count": 0, "down_vote_count": 0, "view_count": 457, "answers": [{"body": "<p>No, there's no individual signature that can do this - there's no way of saying \"the nullable type of <code>R</code>, which is either <code>R</code> itself for a reference type, or <code>Nullable&lt;R&gt;</code> for a non-nullable value type\".</p>\n\n<p>You can have different methods, each with a different constraint on <code>R</code> - but then you either have to provide different names, or use <a href=\"http://codeblog.jonskeet.uk/2010/11/02/evil-code-overload-resolution-workaround/\" rel=\"nofollow\"><em>horrible hacks</em></a> to <em>effectively</em> overload by type parameter constraints.</p>\n\n<p>I suspect you should basically have two different method names here, for simplicity. So signatures of:</p>\n\n<pre><code>public static Nullable&lt;R&gt; GetValue&lt;T, R&gt;(this T a, Expression&lt;Func&lt;T, R&gt;&gt; expression)\n    where T : Attribute\n    where R : struct\n\npublic static R GetReference&lt;T, R&gt;(this T a, Expression&lt;Func&lt;T, R&gt;&gt; expression)\n    where T : Attribute\n    where R : class\n</code></pre>\n\n<p>Two asides:</p>\n\n<ul>\n<li>Conventionally type parameters start with <code>T</code>, e.g. <code>TInput</code> and <code>TResult</code></li>\n<li>Why are you using expression trees at all for <code>GetValue</code>? Why not just take a <code>Func&lt;T, R&gt;</code> and execute it? </li>\n</ul>\n\n<p>As an example of the second bullet point:</p>\n\n<pre><code>public static Nullable&lt;R&gt; GetValue&lt;T, R&gt;(this T a, Func&lt;T, R&gt; func)\n    where T : Attribute\n    where R : struct\n{\n    if (a == null)\n        return null;\n\n    return func(a);\n}\n</code></pre>\n", "is_accepted": true, "tags": [], "answer_id": 19571296, "down_vote_count": 0, "last_activity_date": 1439479824, "comments": [{"body": "I thought that might be the case, Jon. I&#39;m using an expression tree bcause that appears to be the most common way that people go about getting a PropertyInfo using lambdas rather than magic strings, not because I really understand it. If I promise to go back and read that chapter in your book again will you show me an example of what you mean now? ;-)", "edited": false, "comment_id": 29044892, "creation_date": 1382632359, "score": 0, "owner": {"display_name": "Colin", "reputation": 8155, "user_id": 150342, "user_type": "registered", "accept_rate": 88}}, {"body": "@Colin: Sure, will edit that in.", "edited": false, "reply_to_user": {"display_name": "Colin", "reputation": 8155, "user_id": 150342, "user_type": "registered", "accept_rate": 88}, "comment_id": 29047098, "creation_date": 1382636534, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Note that if you have these two methods you can accept any object that a method without either constraint could <i>except for a nullable struct</i>.  You need to add a third overload where <code>T</code> is a nullable struct to really get everything.", "edited": false, "comment_id": 29047167, "creation_date": 1382636704, "score": 1, "owner": {"display_name": "Servy", "reputation": 129071, "user_id": 1159478, "user_type": "registered"}}, {"body": "@Servy I was thinking of changing my signatures to <code>Nullable&lt;R&gt; GetValueOrDefault&lt;T, R&gt;(this T a, Func&lt;T, R&gt; func, Nullable&lt;R&gt; default)</code> and <code>R GetValueOrDefault&lt;T, R&gt;(this T a, Func&lt;T, R&gt; func,  string default)</code> I was feeling pleased with that because it makes the developer handle the null problem that I am delaying by chaining. But your point means that attributes with nullable parameters aren&#39;t covered. But maybe it&#39;s a small edge case I don&#39;t have to worry about because of this:<a href=\"http://stackoverflow.com/questions/1416126/why-is-a-nullablet-not-a-valid-custom-attribute-parameter-when-t-is\" title=\"why is a nullablet not a valid custom attribute parameter when t is\">stackoverflow.com/questions/1416126/&hellip;</a>", "edited": false, "reply_to_user": {"display_name": "Servy", "reputation": 129071, "user_id": 1159478, "user_type": "registered"}, "comment_id": 29054155, "creation_date": 1382649875, "score": 0, "owner": {"display_name": "Colin", "reputation": 8155, "user_id": 150342, "user_type": "registered", "accept_rate": 88}}, {"body": "@Colin If you have no <code>class</code> or <code>struct</code> constraint then it&#39;s fine.  It&#39;s just an odd case that nullable technically is not a <code>class</code> or a <code>struct</code> as per the generic constraints.  It&#39;s a struct, but it still &quot;fails&quot; that check.  You could still close the gap with a 3rd overload, if it&#39;s important to cover it though.", "edited": false, "reply_to_user": {"display_name": "Colin", "reputation": 8155, "user_id": 150342, "user_type": "registered", "accept_rate": 88}, "comment_id": 29054355, "creation_date": 1382650315, "score": 0, "owner": {"display_name": "Servy", "reputation": 129071, "user_id": 1159478, "user_type": "registered"}}, {"body": "@Servy not sure there&#39;s a good overload though because the default for both an <code>int</code> and an <code>int?</code> needs to be an <code>int?</code> too...I think the easiest is just to remove the constraint. Many thanks to you both I&#39;ve learned a lot today", "edited": false, "reply_to_user": {"display_name": "Servy", "reputation": 129071, "user_id": 1159478, "user_type": "registered"}, "comment_id": 29054741, "creation_date": 1382651217, "score": 0, "owner": {"display_name": "Colin", "reputation": 8155, "user_id": 150342, "user_type": "registered", "accept_rate": 88}}], "creation_date": 1382631438, "comment_count": 6, "score": 4, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "RJ Cuthbertson", "reputation": 447, "user_id": 1197771, "user_type": "registered", "accept_rate": 100}, "last_edit_date": 1439479824, "up_vote_count": 4}], "last_activity_date": 1439479824, "comment_count": 0, "score": 1, "answer_count": 1, "accepted_answer_id": 19571296, "owner": {"display_name": "Colin", "reputation": 8155, "user_id": 150342, "user_type": "registered", "accept_rate": 88}, "title": "Can I create a generic method that takes a value type or a reference type but always returns a nullable type", "close_vote_count": 0, "creation_date": 1382631192, "favorite_count": 0, "up_vote_count": 1}, {"last_activity_date": 1439478367, "accepted_answer_id": 31991393, "creation_date": 1439476527, "owner": {"display_name": "user130110", "reputation": 21, "user_id": 3630632, "user_type": "registered", "accept_rate": 80}, "last_edit_date": 1439478367, "favorite_count": 0, "view_count": 47, "delete_vote_count": 0, "title": "How do I return a valid input from scanner?", "comment_count": 0, "score": 1, "body": "<p>I gave up. I'm trying to figure out why my code is returning the first (incorrect) value. </p>\n\n<p>For instance:</p>\n\n<pre><code>public static String lastName() {\n\n    System.out.println(\"Last Name: \");\n    String lastName = input.nextLine();\n    String dataCheck = \"[a-zA-Z]{1,77}\";\n    Pattern pattern = Pattern.compile(dataCheck);\n    Matcher patternMatcher = pattern.matcher(lastName);\n\n    if(!patternMatcher.matches()){\n        do{\n            System.out.println(\"Incorrect input:\\n\"\n                    + \"1) Shorten the first name less than 77 characters;\\n\"\n                    + \"2) Only alphabet characters are allowed (no numbers or special characters.)\\n\\n\"\n                    + \"Please enter Last Name: \");\n            lastName();\n\n        }\n            while (!patternMatcher.matches());\n\n    }\n    return lastName;\n}\npublic static void recall(String lastName){\n    System.out.println(lastName);\n}\n</code></pre>\n\n<p>What happens is if I enter an incorrect input, the scanner \"stores\" the first input and only uses it; if the input is correct, it continues. Research so far has told me to scrap the regex and just use input.hasNextLine(). Any help would be appreciated.</p>\n", "is_answered": true, "up_vote_count": 1, "tags": ["java", "regex"], "reopen_vote_count": 0, "answers": [{"body": "<p>You're making a recursive call, but not using the result... so once you come out of the loop, you're just returning the <code>lastName</code> variable from the top-most stack frame If you change this:</p>\n\n<pre><code>lastName();\n</code></pre>\n\n<p>to this:</p>\n\n<pre><code>return lastName();\n</code></pre>\n\n<p>then it <em>might</em> work. It's not entirely clear to me, because the code structure is unclear to me.</p>\n\n<p>Fundamentally, it's not clear why you're recursing <em>and</em> looping at the same time. That feels like a very bad idea to me. Work out what you want to do on iteration (probably: display options; read a line; check the line) and put all of that inside the loop. So something like (pseudo-code):</p>\n\n<pre><code>do {\n    display-menu\n    ask-for-input  \n} while (test-to-check-it's-not-valid)\n</code></pre>\n\n<p>Additionally, I'd revisit your naming - something like <code>getLastName()</code> or <code>readLastName()</code> would be clearer for the method than just <code>lastName()</code> - particularly as you have a local variable called <code>lastName</code> within the method.</p>\n", "is_accepted": true, "tags": [], "answer_id": 31991393, "down_vote_count": 0, "last_activity_date": 1439477287, "comments": [{"body": "It worked! I didn&#39;t know you can return a method! I definitely have code to modify. Thank you!!", "edited": false, "comment_id": 51887153, "creation_date": 1439477132, "score": 0, "owner": {"display_name": "user130110", "reputation": 21, "user_id": 3630632, "user_type": "registered", "accept_rate": 80}}, {"body": "that&#39;s jon skeet who answered you ofc it will work!", "edited": false, "comment_id": 51887227, "creation_date": 1439477210, "score": 0, "owner": {"display_name": "QuakeCore", "reputation": 131, "user_id": 2281189, "user_type": "registered", "accept_rate": 50}}, {"body": "@user130110: It&#39;s not returning a method - it&#39;s returning the value that the method call returned. If that&#39;s new to you, I would <i>strongly</i> recommend you put down regular expressions, and just learn a bit more of the core of the language for a while. Also even if the small modification worked, that doesn&#39;t mean it&#39;s the best approach - please read the rest of the answer carefully.", "edited": false, "reply_to_user": {"display_name": "user130110", "reputation": 21, "user_id": 3630632, "user_type": "registered", "accept_rate": 80}, "comment_id": 51887232, "creation_date": 1439477213, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Oh, OK. I&#39;m learning as I go, I can only take it one step at a time...", "edited": false, "comment_id": 51887543, "creation_date": 1439477558, "score": 0, "owner": {"display_name": "user130110", "reputation": 21, "user_id": 3630632, "user_type": "registered", "accept_rate": 80}}, {"body": "@user130110: That&#39;s absolutely the right approach - but I&#39;d say that it&#39;s worth leaving regular expressions (which are relatively complex, with a complex API) until after learning the core bits of the language. Best of luck :)", "edited": false, "reply_to_user": {"display_name": "user130110", "reputation": 21, "user_id": 3630632, "user_type": "registered", "accept_rate": 80}, "comment_id": 51887664, "creation_date": 1439477687, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1439476872, "comment_count": 5, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1439477287, "up_vote_count": 1}], "answer_count": 1, "last_editor": {"display_name": "Phiwa", "reputation": 314, "user_id": 4321044, "user_type": "registered"}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 31991260}, {"body": "<p>I made the following code to find if the current date is within a specific period, but with optional boundaries:</p>\n\n<pre><code>func isElligiblePeriod() {\n    now = new Date();\n\n    if (!validFrom &amp;&amp; !validTo) {\n        return true;\n    } elseif (now &gt;= validFrom &amp;&amp; now &lt;= validTo) {\n        return true;\n    } elseif (!validTo &amp;&amp; now &gt;= validFrom) {\n        return true;\n    } elseif (!validFrom &amp;&amp; now &lt;= validTo) {\n        return true;\n    }\n\n    return false;\n}\n</code></pre>\n\n<p>Basically, this means that the check will happen if there is a validTo date, a validFrom, both or none. The date is always valid if there are no constraints, can be checked agaisnt each one individually. However, this code is ugly as hell. How can i improve this?</p>\n", "is_answered": true, "delete_vote_count": 0, "accepted_answer_id": 31990605, "tags": ["java", "c#"], "question_id": 31990437, "reopen_vote_count": 0, "down_vote_count": 0, "view_count": 60, "comments": [{"body": "This looks like <code>javascript</code> to me, not <code>java</code> or <code>c#</code>.", "edited": false, "comment_id": 51885241, "creation_date": 1439474627, "score": 0, "owner": {"display_name": "Soner G\u00f6n\u00fcl", "reputation": 55355, "user_id": 447156, "user_type": "registered", "accept_rate": 98}}, {"body": "Pseudo-code, actually. I didn&#39;t want to clutter the example, since syntax is not the issue.", "edited": false, "reply_to_user": {"display_name": "Soner G\u00f6n\u00fcl", "reputation": 55355, "user_id": 447156, "user_type": "registered", "accept_rate": 98}, "comment_id": 51885264, "creation_date": 1439474650, "score": 0, "owner": {"display_name": "vinnylinux", "reputation": 1401, "user_id": 983333, "user_type": "registered", "accept_rate": 60}}, {"body": "If you have working code and want it reviewed then you might want to post on <a href=\"http://codereview.stackexchange.com/\">Code Review</a>", "edited": false, "comment_id": 51885299, "creation_date": 1439474724, "score": 1, "owner": {"display_name": "juharr", "reputation": 9294, "user_id": 302918, "user_type": "registered", "accept_rate": 81}}, {"body": "@SonerG&#246;n&#252;l That loosely resembles GO", "edited": false, "reply_to_user": {"display_name": "Soner G\u00f6n\u00fcl", "reputation": 55355, "user_id": 447156, "user_type": "registered", "accept_rate": 98}, "comment_id": 51885388, "creation_date": 1439474837, "score": 0, "owner": {"display_name": "Ismael Miguel", "reputation": 1865, "user_id": 2729937, "user_type": "registered", "accept_rate": 50}}, {"body": "@juharr This won&#39;t be suited on Code Review, since the O.P. doesn&#39;t even know what language this was made. Also, it is missing too much to be even a working code, in whatever language it is.", "edited": false, "reply_to_user": {"display_name": "juharr", "reputation": 9294, "user_id": 302918, "user_type": "registered", "accept_rate": 81}, "comment_id": 51885441, "creation_date": 1439474916, "score": 0, "owner": {"display_name": "Ismael Miguel", "reputation": 1865, "user_id": 2729937, "user_type": "registered", "accept_rate": 50}}, {"body": "Is working code really necessary for recommending a better code structure? I mean... it&#39;s a bunch of if&#39;s and elif&#39;s.", "edited": false, "comment_id": 51885475, "creation_date": 1439474968, "score": 1, "owner": {"display_name": "vinnylinux", "reputation": 1401, "user_id": 983333, "user_type": "registered", "accept_rate": 60}}, {"body": "@vinnylinux: It&#39;s helpful as it avoids the fact that it&#39;s pseudo-code being a distraction.", "edited": false, "comment_id": 51885492, "creation_date": 1439474990, "score": 3, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Worth mentioning that this was cross-posted on Code Review: <a href=\"http://codereview.stackexchange.com/questions/100814/improving-date-range-check-with-optional-boundaries\" title=\"improving date range check with optional boundaries\">codereview.stackexchange.com/questions/100814/&hellip;</a> (deleted by owner)", "edited": false, "comment_id": 51885650, "creation_date": 1439475231, "score": 0, "owner": {"display_name": "Ismael Miguel", "reputation": 1865, "user_id": 2729937, "user_type": "registered", "accept_rate": 50}}], "last_activity_date": 1439476201, "comment_count": 8, "score": 1, "answer_count": 3, "answers": [{"body": "<p>It looks like you want:</p>\n\n<pre><code>// Check the lower bound, if we have one\nif (validFrom &amp;&amp; now &lt; validFrom)\n{\n    return false;\n}\n// Check the upper bound, if we have one\nif (validTo &amp;&amp; now &gt; validTo)\n{\n    return false;\n}\nreturn true;\n</code></pre>\n\n<p>Or as a conditional:</p>\n\n<pre><code>return validFrom &amp;&amp; now &lt; validFrom ? false\n    : validTo &amp;&amp; now &gt; validTo ? false\n    : true;\n</code></pre>\n\n<p>Or as a single condition:</p>\n\n<pre><code>return !(validFrom &amp;&amp; now &lt; validFrom)\n    &amp;&amp; !(validTo &amp;&amp; now &gt; validTo);\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>return (!validFrom || now &gt;= validFrom)\n    &amp;&amp; (!validTo || now &lt;= validTo);\n</code></pre>\n\n<p>Pick whichever approach you find most readable.</p>\n\n<p>Note that it can be <em>really</em> readable if you make sure that <code>validFrom</code> and <code>validTo</code> are always sensible values - with \"start of time\" and \"end of time\" values to mean \"no from constraint\" or \"no to constraint\". Then you can just have:</p>\n\n<pre><code>return validFrom &lt;= now &amp;&amp; now &lt;= validTo;\n</code></pre>\n\n<p>As an aside, you might want to consider making the upper bound exclusive. That's often (but not always) a good idea - it means that you can have abutting time periods really easily (where the <code>validFrom</code> of one period is the <code>validTo</code> of the previous one).</p>\n", "is_accepted": true, "tags": [], "answer_id": 31990605, "down_vote_count": 0, "last_activity_date": 1439476201, "comments": [{"body": "This could be all simplified to one return statement.", "edited": false, "comment_id": 51885556, "creation_date": 1439475083, "score": 1, "owner": {"display_name": "Jean-Fran\u00e7ois Savard", "reputation": 13211, "user_id": 2683146, "user_type": "registered", "accept_rate": 84}}, {"body": "@Jean-Fran&#231;oisSavard It would be ugly as hell, but it can.", "edited": false, "reply_to_user": {"display_name": "Jean-Fran\u00e7ois Savard", "reputation": 13211, "user_id": 2683146, "user_type": "registered", "accept_rate": 84}, "comment_id": 51885624, "creation_date": 1439475187, "score": 0, "owner": {"display_name": "Ismael Miguel", "reputation": 1865, "user_id": 2729937, "user_type": "registered", "accept_rate": 50}}, {"body": "@Jean-Fran&#231;oisSavard Perhaps something like <code>return !( (validFrom &amp;&amp; now &lt; validFrom) || (validTo &amp;&amp; now &gt; validTo) );</code>?", "edited": false, "reply_to_user": {"display_name": "Jean-Fran\u00e7ois Savard", "reputation": 13211, "user_id": 2683146, "user_type": "registered", "accept_rate": 84}, "comment_id": 51885897, "creation_date": 1439475545, "score": 0, "owner": {"display_name": "Ismael Miguel", "reputation": 1865, "user_id": 2729937, "user_type": "registered", "accept_rate": 50}}, {"body": "@IsmaelMiguel Yes ..", "edited": false, "reply_to_user": {"display_name": "Ismael Miguel", "reputation": 1865, "user_id": 2729937, "user_type": "registered", "accept_rate": 50}, "comment_id": 51885967, "creation_date": 1439475629, "score": 0, "owner": {"display_name": "Jean-Fran\u00e7ois Savard", "reputation": 13211, "user_id": 2683146, "user_type": "registered", "accept_rate": 84}}, {"body": "@Jean-Fran&#231;oisSavard As I said, ugly as hell", "edited": false, "reply_to_user": {"display_name": "Jean-Fran\u00e7ois Savard", "reputation": 13211, "user_id": 2683146, "user_type": "registered", "accept_rate": 84}, "comment_id": 51886126, "creation_date": 1439475826, "score": 0, "owner": {"display_name": "Ismael Miguel", "reputation": 1865, "user_id": 2729937, "user_type": "registered", "accept_rate": 50}}, {"body": "@IsmaelMiguel When turned around and properly formatted as in my answer, I&#39;d say it doesn&#39;t look bad at all.", "edited": false, "reply_to_user": {"display_name": "Ismael Miguel", "reputation": 1865, "user_id": 2729937, "user_type": "registered", "accept_rate": 50}, "comment_id": 51886180, "creation_date": 1439475885, "score": 1, "owner": {"display_name": "Chris", "reputation": 4074, "user_id": 2531341, "user_type": "registered"}}, {"body": "@IsmaelMiguel Ident it properly on two lines and it is less ugly then having 3 return encapsulated in two ifs IMHO.", "edited": false, "reply_to_user": {"display_name": "Ismael Miguel", "reputation": 1865, "user_id": 2729937, "user_type": "registered", "accept_rate": 50}, "comment_id": 51886196, "creation_date": 1439475912, "score": 1, "owner": {"display_name": "Jean-Fran\u00e7ois Savard", "reputation": 13211, "user_id": 2683146, "user_type": "registered", "accept_rate": 84}}, {"body": "@Chris You are right about it, but I can&#39;t do much in a comment.", "edited": false, "reply_to_user": {"display_name": "Chris", "reputation": 4074, "user_id": 2531341, "user_type": "registered"}, "comment_id": 51886349, "creation_date": 1439476118, "score": 0, "owner": {"display_name": "Ismael Miguel", "reputation": 1865, "user_id": 2729937, "user_type": "registered", "accept_rate": 50}}, {"body": "@Jean-Fran&#231;oisSavard Refer for the comment I sent to Chris", "edited": false, "reply_to_user": {"display_name": "Jean-Fran\u00e7ois Savard", "reputation": 13211, "user_id": 2683146, "user_type": "registered", "accept_rate": 84}, "comment_id": 51886364, "creation_date": 1439476138, "score": 0, "owner": {"display_name": "Ismael Miguel", "reputation": 1865, "user_id": 2729937, "user_type": "registered", "accept_rate": 50}}, {"body": "Note that I&#39;m not the downvoter.", "edited": false, "comment_id": 51886420, "creation_date": 1439476212, "score": 1, "owner": {"display_name": "Jean-Fran\u00e7ois Savard", "reputation": 13211, "user_id": 2683146, "user_type": "registered", "accept_rate": 84}}, {"body": "@Jean-Fran&#231;oisSavard: Have added lots of different options now :)", "edited": false, "reply_to_user": {"display_name": "Jean-Fran\u00e7ois Savard", "reputation": 13211, "user_id": 2683146, "user_type": "registered", "accept_rate": 84}, "comment_id": 51886430, "creation_date": 1439476224, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1439474961, "comment_count": 11, "score": 4, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1439476201, "up_vote_count": 4}, {"body": "<p>In C#:</p>\n\n<pre><code>bool IsElligiblePeriod( DateTime t, DateTime? from, DateTime? to )\n{\n    return ( from == null || t &gt;= from.Value ) &amp;&amp;\n           ( to == null || t &lt;= to.Value );\n}\n</code></pre>\n\n<p>Or if we do it in the style of your pseudo code:</p>\n\n<pre><code>return ( !validFrom || now &gt;= validFrom ) &amp;&amp;\n       ( !validTo || now &lt;= validTo );\n</code></pre>\n\n<p>Alot shorter and neater than a bunch of if's, IMHO.</p>\n", "is_accepted": false, "tags": [], "answer_id": 31990881, "down_vote_count": 0, "last_activity_date": 1439476094, "creation_date": 1439475675, "comment_count": 0, "score": 1, "owner": {"display_name": "Chris", "reputation": 4074, "user_id": 2531341, "user_type": "registered"}, "last_editor": {"display_name": "Chris", "reputation": 4074, "user_id": 2531341, "user_type": "registered"}, "last_edit_date": 1439476094, "up_vote_count": 1}, {"body": "<p>In C#, assuming <code>validFrom</code> and <code>validTo</code> are nullable DateTimes, I prefer:</p>\n\n<pre><code>return (now &gt;= validFrom ?? DateTime.MinValue)\n    &amp;&amp; (now &lt;= validTo ?? DateTime.MaxValue);\n</code></pre>\n", "answer_id": 31991012, "tags": [], "down_vote_count": 0, "last_activity_date": 1439475966, "creation_date": 1439475966, "comment_count": 0, "score": 0, "owner": {"display_name": "RMalke", "reputation": 2473, "user_id": 821054, "user_type": "registered", "accept_rate": 73}, "is_accepted": false, "up_vote_count": 0}], "owner": {"display_name": "vinnylinux", "reputation": 1401, "user_id": 983333, "user_type": "registered", "accept_rate": 60}, "title": "Find if DateTime is within period, with optional boundaries?", "close_vote_count": 0, "creation_date": 1439474588, "favorite_count": 0, "up_vote_count": 1}]], "QuestionInfo": [[{"body": "<p>What are the correct version numbers for C#? What came out when? Why can't I find any answers about C# 3.5?</p>\n\n<p>This question is primarily to aid those who are searching for an answer using an incorrect version number, e.g. \"C# 3.5\". The hope is that anyone failing to find an answer with the wrong version number will find <em>this</em> question and then search again with the right version number.</p>\n", "last_activity_date": 1439190616, "accepted_answer_id": 247623, "creation_date": 1225300180, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1428963903, "favorite_count": 245, "view_count": 129307, "delete_vote_count": 0, "title": "What are the correct version numbers for C#?", "comments": [{"body": "This is one of a good source to understand everything. <a href=\"http://en.wikipedia.org/wiki/C_Sharp_(programming_language)\" rel=\"nofollow\">en.wikipedia.org/wiki/C_Sharp_(programming_language)</a>", "edited": false, "comment_id": 18759064, "creation_date": 1354436514, "score": 25, "owner": {"display_name": "user725388", "user_type": "does_not_exist"}}], "comment_count": 1, "score": 1054, "community_owned_date": 1225300180, "is_answered": true, "up_vote_count": 1070, "tags": ["c#", "compiler-version"], "reopen_vote_count": 0, "answer_count": 6, "answers": [{"community_owned_date": 1225300218, "body": "<p>These are the versions of C# known about at the time of this writing:</p>\n\n<ul>\n<li><strong>C# 1.0</strong> released with .NET 1.0 and VS2002 (January 2002)</li>\n<li><strong>C# 1.2</strong> (bizarrely enough); released with .NET 1.1 and VS2003 (April 2003). First version to call <code>Dispose</code> on <code>IEnumerator</code>s which implemented <code>IDisposable</code>. A few other small features.</li>\n<li><strong>C# 2.0</strong> released with .NET 2.0 and VS2005 (November 2005). Major new features: generics, anonymous methods, nullable types, iterator blocks</li>\n<li><strong>C# 3.0</strong> released with .NET 3.5 and VS2008 (November 2007). Major new features: lambda expressions, extension methods, expression trees, anonymous types, implicit typing (<code>var</code>), query expressions</li>\n<li><strong>C# 4.0</strong> released with .NET 4 and VS2010 (April 2010). Major new features: late binding (<code>dynamic</code>), delegate and interface generic variance, more COM support, named arguments and optional parameters</li>\n<li><strong>C# 5.0</strong> released with .NET 4.5 and VS2012 (August 2012). <a href=\"http://blogs.msdn.com/b/csharpfaq/archive/2012/02/29/visual-studio-11-beta-is-here.aspx\">Major features</a>: async programming, caller info attributes. Breaking change: <a href=\"http://blogs.msdn.com/b/ericlippert/archive/2009/11/16/closing-over-the-loop-variable-part-two.aspx\">loop variable closure</a>.</li>\n<li><strong>C# 6.0</strong> released with .NET 4.6 and VS2015 (July 2015). Implemented by <a href=\"https://github.com/dotnet/roslyn\">Roslyn</a>. Features: initializers for automatically implemented properties, using directives to import static members, exception filters, binary literals and digit separators, indexed members and element initializers, <code>await</code> in <code>catch</code> and <code>finally</code>, extension <code>Add</code> methods in collection initializers.</li>\n</ul>\n\n<p>There is no such thing as C# 3.5 - the cause of confusion here is that the C# 3.0 is present in .NET 3.5. The language and framework are versioned independently, however - as is the CLR, which is at version 2.0 for .NET 2.0 through 3.5, .NET 4 introducing CLR 4.0, service packs notwithstanding. The CLR in .NET 4.5 has various improvements, but the versioning is unclear: in some places it may be referred to as CLR 4.5 (<a href=\"http://msdn.microsoft.com/en-us/library/bb822049.aspx\">this MSDN page</a> used to refer to it that way, for example), but the <a href=\"http://msdn.microsoft.com/en-us/library/system.environment.version.aspx\"><code>Environment.Version</code></a> property still reports 4.0.xxx.</p>\n\n<p>More detailed information about the relationship between the language, runtime and framework versions is available on the <a href=\"http://csharpindepth.com/Articles/Chapter1/Versions.aspx\">C# in Depth</a> site. This includes information about which features of C# 3.0 you can use when targeting .NET 2.0. (If anyone wants to bring all of the content into this wiki answer, they're welcome to.)</p>\n", "is_accepted": true, "tags": [], "answer_id": 247623, "down_vote_count": 1, "last_activity_date": 1438978961, "comments": [{"body": "The MSDN Documentation refers to it as CLR 4.5. At least according to this link : <a href=\"http://msdn.microsoft.com/en-us/library/bb822049.aspx\" rel=\"nofollow\">msdn.microsoft.com/en-us/library/bb822049.aspx</a>.  Although the .NET Framework 4.5 is an in-place update of the .NET Framework 4, the underlying CLR version number is referred to as CLR 4.5.", "edited": false, "comment_id": 23865869, "creation_date": 1368772606, "score": 1, "owner": {"display_name": "cvraman", "reputation": 978, "user_id": 682762, "user_type": "registered"}}, {"body": "@cvraman: I&#39;ve looked back at those emails and they&#39;re not as clear as they might be. Hopefully my edit is a good compromise - please check it and suggest improvements.", "edited": false, "reply_to_user": {"display_name": "cvraman", "reputation": 978, "user_id": 682762, "user_type": "registered"}, "comment_id": 23866963, "creation_date": 1368775192, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@cvraman: I&#39;ve just had an email from someone who noted that the page has now changed and doesn&#39;t refer to it as CLR 4.5. Isn&#39;t versioning fun? :)", "edited": false, "reply_to_user": {"display_name": "cvraman", "reputation": 978, "user_id": 682762, "user_type": "registered"}, "comment_id": 26301095, "creation_date": 1375346885, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Yup. The new page refers to the underlying CLR version as 4.0. I guess the edit (to the original answer) can be removed. Versioning is fun, if done right.", "edited": false, "comment_id": 26361556, "creation_date": 1375468079, "score": 0, "owner": {"display_name": "cvraman", "reputation": 978, "user_id": 682762, "user_type": "registered"}}, {"body": "@cvraman: I&#39;m going to leave it for the moment, as I strongly suspect that <i>some</i> places will still refer to it as 4.5, darn it...", "edited": false, "reply_to_user": {"display_name": "cvraman", "reputation": 978, "user_id": 682762, "user_type": "registered"}, "comment_id": 26361889, "creation_date": 1375468746, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "To whoever suggested including concurrent collections: this is a list of <i>language</i> features, not <i>framework</i> features. Note the lack of mentioning WPF, etc.", "edited": false, "reply_to_user": {"display_name": "cvraman", "reputation": 978, "user_id": 682762, "user_type": "registered"}, "comment_id": 34468927, "creation_date": 1395748366, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Interesting Trivia (and potentially useful): you can target different versions of the framework / language than the default pairs listed above (for example, if you have a C# 5.0+ compiler, like what&#39;s shipped in VS2012+, you can use the <a href=\"http://www.thomaslevesque.com/2012/06/13/using-c-5-caller-info-attributes-when-targeting-earlier-versions-of-the-net-framework/\" rel=\"nofollow\">caller info attributes</a> of the C# 5.0 language while targeting .NET 4.0 for example.)", "edited": false, "comment_id": 49877893, "creation_date": 1434643528, "score": 0, "owner": {"display_name": "BrainSlugs83", "reputation": 1893, "user_id": 398630, "user_type": "registered", "accept_rate": 75}}, {"body": "Hmm so the CLR version for .NET 4.6 is still called 4.0? I expected it to change considering the changes to .NET and C#, you know RyuJIT, Roslyn, .NET Native etc.", "edited": false, "comment_id": 52122753, "creation_date": 1440064325, "score": 0, "owner": {"display_name": "nawfal", "reputation": 20216, "user_id": 661933, "user_type": "registered", "accept_rate": 94}}, {"body": "@nawfal: Roslyn is irrelevant to that - and .NET native is somewhat separate. But basically, yes, I believe it&#39;s still 4.", "edited": false, "reply_to_user": {"display_name": "nawfal", "reputation": 20216, "user_id": 661933, "user_type": "registered", "accept_rate": 94}, "comment_id": 52122826, "creation_date": 1440064418, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet I know Roslyn is just a C# compiler, but I assumed changes that must have gone to language and compiler would have forced design changes in CLR, along with modularizing .NET framework itself. Anyway good to know, thanks..", "edited": false, "comment_id": 52122977, "creation_date": 1440064656, "score": 0, "owner": {"display_name": "nawfal", "reputation": 20216, "user_id": 661933, "user_type": "registered", "accept_rate": 94}}, {"body": "@nawfal: None of the language changes need any CLR changes.", "edited": false, "reply_to_user": {"display_name": "nawfal", "reputation": 20216, "user_id": 661933, "user_type": "registered", "accept_rate": 94}, "comment_id": 52123106, "creation_date": 1440064823, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet Hmm I get it.", "edited": false, "comment_id": 52123867, "creation_date": 1440065948, "score": 0, "owner": {"display_name": "nawfal", "reputation": 20216, "user_id": 661933, "user_type": "registered", "accept_rate": 94}}], "creation_date": 1225300218, "comment_count": 12, "score": 1228, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "Edward Brey", "reputation": 13914, "user_id": 145173, "user_type": "registered", "accept_rate": 75}, "last_edit_date": 1438978961, "up_vote_count": 1229}, {"community_owned_date": 1227629404, "body": "<p>The biggest problem when dealing with C#'s version numbers is the fact that it is not tied to a version of the .NET Framework, which it appears to be due to the syncronized releases between Visual Studio and the .NET Framework.</p>\n\n<p>The version of C# is actually bound to the compiler, not the framework.  For instance, in VS2008 you can write C# 3.0 and target .NET Framework 2.0, 3.0 and 3.5.  The C# 3.0 nomenclature describes the version of the code syntax and supported features in the same way that <a href=\"http://en.wikipedia.org/wiki/ANSI_C\">ANSI C89, C90, C99</a> describe the code syntax/features for C.</p>\n\n<p>Take a look at <a href=\"http://www.mono-project.com\">Mono</a>, you will see that Mono 2.0 (mostly implemented version 2.0 of the .NET Framework from the ECMA specs) supports the C# 3.0 syntax and features.</p>\n", "answer_id": 317885, "tags": [], "down_vote_count": 0, "last_activity_date": 1227629404, "comments": [{"body": "So true. But I wouldn&#39;t call it &quot;a problem&quot;, rather an &quot;advantage&quot;. My company builds a 2.0-app using all the amazing features of C# 4.0 - love it.", "edited": false, "comment_id": 25562187, "creation_date": 1373457113, "score": 11, "owner": {"display_name": "jitbit", "reputation": 12288, "user_id": 56621, "user_type": "registered", "accept_rate": 93}}], "creation_date": 1227629404, "comment_count": 1, "score": 133, "owner": {"display_name": "Bryan Rehbein", "reputation": 4687, "user_id": 5862, "user_type": "registered", "accept_rate": 50}, "is_accepted": false, "up_vote_count": 133}, {"community_owned_date": 1273230501, "body": "<p><a href=\"http://social.msdn.microsoft.com/Forums/en-US/csharpgeneral/thread/f19a5ce8-1206-4600-a940-cacbbf588344\">VERSION</a><code>_____</code>LANGUAGE SPECIFICATION<code>______</code>MICROSOFT COMPILER</p>\n\n<p>C# <a href=\"http://download.microsoft.com/download/a/9/e/a9e229b9-fee5-4c3e-8476-917dee385062/CSharp%20Language%20Specification%20v1.0.doc\">1.0</a>/<a href=\"http://download.microsoft.com/download/5/e/5/5e58be0a-b02b-41ac-a4a3-7a22286214ff/csharp%20language%20specification%20v1.2.doc\">1.2</a><code>____</code>December 2001<sup>?</sup>/2003<sup>?</sup><code>___________</code>January 2002<sup>?</sup></p>\n\n<p>C# 2.0<code>_______</code><a href=\"http://download.microsoft.com/download/7/E/6/7E6A548C-9C20-4C80-B3B8-860FAF20887A/CSharp%204.0%20Specification.doc\">September 2005</a><code>________________</code>November 2005<sup>?</sup></p>\n\n<p>C# 3.0<code>_______</code><a href=\"http://download.microsoft.com/download/5/8/6/5868081c-68aa-40de-9a45-a3803d8134b8/CSharp_3.0_Specification.doc\">May 2006</a><code>_____________________</code>November 2006<sup>?</sup></p>\n\n<p>C# 4.0<code>_______</code><a href=\"http://download.microsoft.com/download/7/E/6/7E6A548C-9C20-4C80-B3B8-860FAF20887A/CSharp%204.0%20Specification.doc\">March 2009 (draft)</a><code>______________</code>April 2010<sup>?</sup></p>\n\n<p>C# 5.0; released with .NET 4.5 in August 2012</p>\n", "is_accepted": false, "tags": [], "answer_id": 2788024, "down_vote_count": 2, "last_activity_date": 1368624506, "comments": [{"body": "Where did you get a C# 2.0 language specification in December 2002 from? Likewise C# 4 in June 2006? Are you sure you&#39;re not talking about ECMA editions, which are completely different?", "edited": false, "comment_id": 2823790, "creation_date": 1273231711, "score": 4, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "just refer the following link   <a href=\"http://en.wikipedia.org/wiki/C_Sharp_(programming_language)\" rel=\"nofollow\">en.wikipedia.org/wiki/C_Sharp_(programming_language)</a>", "edited": false, "comment_id": 2823822, "creation_date": 1273231984, "score": 3, "owner": {"display_name": "Pramodh", "reputation": 28, "user_id": 335339, "user_type": "unregistered"}}, {"body": "Ah, well, if it&#39;s on Wikipedia, it <i>must</i> be right :-)", "edited": false, "comment_id": 2846479, "creation_date": 1273552273, "score": 135, "owner": {"display_name": "paxdiablo", "reputation": 417658, "user_id": 14860, "user_type": "registered", "accept_rate": 99}}, {"body": "@paxdiablo Same goes for Stack Overflow. :) It&#39;s all about the community...", "edited": false, "reply_to_user": {"display_name": "paxdiablo", "reputation": 417658, "user_id": 14860, "user_type": "registered", "accept_rate": 99}, "comment_id": 16113051, "creation_date": 1345590170, "score": 73, "owner": {"display_name": "Nikola Male\u0161evi\u0107", "reputation": 864, "user_id": 388664, "user_type": "registered", "accept_rate": 93}}], "creation_date": 1273230501, "comment_count": 4, "score": 29, "owner": {"display_name": "Pramodh", "reputation": 28, "user_id": 335339, "user_type": "unregistered"}, "last_editor": {"display_name": "Ramesh Durai", "reputation": 1219, "user_id": 1537422, "user_type": "registered", "accept_rate": 95}, "last_edit_date": 1368624506, "up_vote_count": 31}, {"community_owned_date": 1293801312, "body": "<ul>\n<li><p><strong>C# 1.0</strong> with Visual Studio.NET</p></li>\n<li><p><strong>C# 2.0</strong> with Visual Studio 2005</p></li>\n<li><p><strong>C# 3.0</strong> with Visual Studio 2008</p></li>\n<li><p><strong>C# 4.0</strong> with Visual Studio 2010</p></li>\n<li><p><strong>C# 5.0</strong> with Visual Studio 2012</p></li>\n<li><p><strong>C# 6.0</strong> with Visual Studio 2015</p></li>\n</ul>\n", "is_accepted": false, "tags": [], "answer_id": 4570323, "down_vote_count": 3, "last_activity_date": 1426466561, "comments": [{"body": "The C# 5 <i>CTP</i> installs on top of Visual Studio 2010. We have no evidence that the final release will do so. Bear in mind that the LINQ CTP also installed on Visual Studio 2005.", "edited": false, "reply_to_user": {"display_name": "iTSrAVIE", "reputation": 475, "user_id": 359349, "user_type": "registered", "accept_rate": 54}, "comment_id": 5014674, "creation_date": 1293802072, "score": 8, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Yes, agreed, unless next version of Visual Studio comes, Microsoft will take initiative to do that.", "edited": false, "comment_id": 5014719, "creation_date": 1293802643, "score": 3, "owner": {"display_name": "iTSrAVIE", "reputation": 475, "user_id": 359349, "user_type": "registered", "accept_rate": 54}}, {"body": "the next version VS2011 is announched and looks promising with .Net4.5", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 9469959, "creation_date": 1318669031, "score": 0, "owner": {"display_name": "iTSrAVIE", "reputation": 475, "user_id": 359349, "user_type": "registered", "accept_rate": 54}}], "creation_date": 1293801312, "comment_count": 3, "score": 79, "owner": {"display_name": "iTSrAVIE", "reputation": 475, "user_id": 359349, "user_type": "registered", "accept_rate": 54}, "last_editor": {"display_name": "Ilya Suzdalnitski", "reputation": 18468, "user_id": 77449, "user_type": "registered", "accept_rate": 99}, "last_edit_date": 1426466561, "up_vote_count": 82}, {"community_owned_date": 1369104853, "body": "<p>Comparing the MSDN articles <a href=\"http://msdn.microsoft.com/en-US/library/7cz8t42e%28v=vs.80%29.aspx\">\"What's New in the C# 2.0 Language and Compiler\"</a> and \"<a href=\"http://msdn.microsoft.com/en-US/library/t27ahy37%28v=vs.80%29.aspx\">What's New in Visual C# 2005</a>\", it is possible to deduce that \"C# major_version.minor_version\" is coined according to compiler's version numbering.  </p>\n\n<p>There is <a href=\"http://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29#Versions\">C# 1.2 corresponding to .NET  1.1 and VS 2003</a> and also named as <a href=\"http://msdn.microsoft.com/en-us/library/aa289527%28v=vs.71%29.aspx\">Visual C# .NET 2003</a> </p>\n\n<p>But further on Microsoft stopped to increment minor version (after dot) numbers or to have them other than zero <code>0</code>.<br>\nThough it should be noted that C# corresponding to .NET 3.5 is named in msdn.microsoft.com as <a href=\"http://msdn.microsoft.com/en-us/library/bb383815%28v=vs.90%29.aspx\">\"Visual C# 2008 Service Pack 1\"</a>  </p>\n\n<p>There are 2 parallel naming:  by major .NET/compiler version numbering and by Visual Studio numbering</p>\n\n<p><a href=\"http://msdn.microsoft.com/en-US/library/7cz8t42e%28v=vs.80%29.aspx\">C# 2.0</a>  is synonym for  <a href=\"http://msdn.microsoft.com/en-US/library/t27ahy37%28v=vs.80%29.aspx\">Visual C# 2005</a><br>\nC# 3.0  corresponds (or, more correctly, can target) to:  </p>\n\n<ul>\n<li>.NET 2.0 &lt;==> <a href=\"http://msdn.microsoft.com/en-US/library/t27ahy37%28v=vs.80%29.aspx\">Visual C# 2005</a></li>\n<li>.NET3.0 &lt;==> Visual C# 2008 </li>\n<li>.NET 3.5 &lt;==> <a href=\"http://msdn.microsoft.com/en-us/library/bb383815%28v=vs.90%29.aspx\">Visual C# 2008 Service Pack 1</a>  </li>\n</ul>\n", "answer_id": 16661422, "tags": [], "down_vote_count": 0, "last_activity_date": 1369104853, "comments": [{"body": "No, C# corresponding to .NET 3.5 is named &quot;Visual C# 2008&quot; if you really want to use that numbering. The C# 3.0 features were introduced in &quot;Visual C# 2008&quot; which is why on the page you&#39;re linked to they&#39;re under &quot;What&#39;s New in the Original Release Version of Visual C# 2008&quot;. Using the Visual Studio version numbers is a bad idea in general though, as it makes very little sense when you&#39;re building with Mono, for example. The C# language has well-specified version numbers... we know which Visual C# product originally introduced that version of C#, but they&#39;re not the same thing.", "edited": false, "comment_id": 23980216, "creation_date": 1369131736, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet, no, I don&#39;t. Wanted to ask you (and another answerer) update your answer but since my comment became too lengthy, I&#39;ve decided then to put as answer. Thanks for your info", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 23986740, "creation_date": 1369143143, "score": 0, "owner": {"display_name": "Gennady Vanin \u0413\u0435\u043d\u043d\u0430\u0434\u0438\u0439 \u0412\u0430\u043d\u0438\u043d", "reputation": 4440, "user_id": 200449, "user_type": "registered", "accept_rate": 80}}], "creation_date": 1369104853, "comment_count": 2, "score": 8, "owner": {"display_name": "Gennady Vanin \u0413\u0435\u043d\u043d\u0430\u0434\u0438\u0439 \u0412\u0430\u043d\u0438\u043d", "reputation": 4440, "user_id": 200449, "user_type": "registered", "accept_rate": 80}, "is_accepted": false, "up_vote_count": 8}, {"community_owned_date": 1413321914, "body": "<p>You can check the latest C# versions <a href=\"http://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29\">here</a>\n<img src=\"http://i.stack.imgur.com/Xld6e.png\" alt=\"C# Versions\"></p>\n", "is_accepted": false, "tags": [], "answer_id": 26370600, "down_vote_count": 0, "last_activity_date": 1414699113, "creation_date": 1413321914, "comment_count": 0, "score": 11, "owner": {"display_name": "Israel Ocbina", "reputation": 69, "user_id": 1990838, "user_type": "registered"}, "last_editor": {"display_name": "Mati Cicero", "reputation": 2532, "user_id": 2401769, "user_type": "registered", "accept_rate": 65}, "last_edit_date": 1414699113, "up_vote_count": 11}], "last_editor": {"display_name": "LyingOnTheSky", "reputation": 1117, "user_id": 4211034, "user_type": "registered", "accept_rate": 59}, "down_vote_count": 16, "close_vote_count": 0, "question_id": 247621}, {"last_activity_date": 1437855034, "accepted_answer_id": 31630647, "creation_date": 1437826675, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1437839992, "favorite_count": 0, "view_count": 222, "delete_vote_count": 0, "title": "How can I get the \"current\" IANA time zone abbreviation throughout time in ICU4J?", "comments": [{"body": "@RealSkeptic: Not sure what you mean - I&#39;m specifying the time zone for the format, so that should be okay... what are you linking the calendar to, in your reading of the docs?", "edited": false, "reply_to_user": {"display_name": "RealSkeptic", "reputation": 13061, "user_id": 4125191, "user_type": "registered"}, "comment_id": 51200549, "creation_date": 1437827722, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Sorry, I misinterpreted what you asked there. Have you tried using <code>format.setTimeZoneFormat(format.getTimeZoneFormat().setTimeZoneNames(TimeZoneNa&zwnj;&#8203;mes.getTZDBInstance(ULocale.US)))</code>?", "edited": false, "comment_id": 51201634, "creation_date": 1437832092, "score": 0, "owner": {"display_name": "RealSkeptic", "reputation": 13061, "user_id": 4125191, "user_type": "registered"}}, {"body": "@RealSkeptic: Nope - will give that a go in a minute!", "edited": false, "reply_to_user": {"display_name": "RealSkeptic", "reputation": 13061, "user_id": 4125191, "user_type": "registered"}, "comment_id": 51201653, "creation_date": 1437832164, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@RealSkeptic: Interesting - that gives <i>more</i> names, but still not all of them, and still only from 1970 onwards. More importantly, your comment revealed the <code>TimeZoneNames</code> type which makes the code cleaner. It doesn&#39;t help me before 1970, but it&#39;s still nicer...", "edited": false, "reply_to_user": {"display_name": "RealSkeptic", "reputation": 13061, "user_id": 4125191, "user_type": "registered"}, "comment_id": 51201894, "creation_date": 1437832979, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@RealSkeptic: See my edit for more...", "edited": false, "reply_to_user": {"display_name": "RealSkeptic", "reputation": 13061, "user_id": 4125191, "user_type": "registered"}, "comment_id": 51204108, "creation_date": 1437840001, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I think you have a lost cause here. To get the display name, it first calls <code>getMetaZoneID(String,long)</code>. This, in turn, calls <code>com.ibm.icu.impl.TimeZoneNamesImpl._getMetaZoneID(String,long)</code> which in turn calls <a href=\"http://grepcode.com/file/repo1.maven.org/maven2/com.ibm.icu/icu4j/54.1.1/com/ibm/icu/impl/TimeZoneNamesImpl.java?av=h#TimeZoneNamesImpl.TZ2MZsCache\" rel=\"nofollow\">this thing</a> where you can see January 1, 1970 hard-coded as the <code>from</code> point.", "edited": false, "comment_id": 51205870, "creation_date": 1437845826, "score": 0, "owner": {"display_name": "RealSkeptic", "reputation": 13061, "user_id": 4125191, "user_type": "registered"}}, {"body": "@RealSkeptic: Humbug. Thanks a lot for looking!", "edited": false, "reply_to_user": {"display_name": "RealSkeptic", "reputation": 13061, "user_id": 4125191, "user_type": "registered"}, "comment_id": 51205893, "creation_date": 1437845906, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@RealSkeptic: It sounds like you&#39;ve basically got the answer there - feel free to add it as such, and I&#39;ll accept it... with regret, obviously :(", "edited": false, "reply_to_user": {"display_name": "RealSkeptic", "reputation": 13061, "user_id": 4125191, "user_type": "registered"}, "comment_id": 51207756, "creation_date": 1437852332, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "comment_count": 8, "score": 9, "body": "<p>I'm currently trying to write a <a href=\"https://github.com/nodatime/tzvalidate\">suite of time zone validation programs</a> to see whether various platforms interpret the <a href=\"http://www.iana.org/time-zones\">IANA time zone data</a>.</p>\n\n<p>The output format I'm targeting includes the abbreviation in effect for a particular time - such as \"BST\" for \"British Summer Time\", or \"PST\" for \"Pacific Standard Time\".</p>\n\n<p>On most platforms, this is easy - but ICU4J seems not to be working, oddly. According to the <a href=\"http://icu-project.org/apiref/icu4j/com/ibm/icu/text/SimpleDateFormat.html\"><code>SimpleDateFormat</code> documentation</a> I should be able to use a pattern of \"zzz\" to get what I'm looking for, but this seems to fall back to the \"O\" pattern of GMT+X for a lot of the time. For some time zones, there are no abbreviations at all.</p>\n\n<p>Short example using New York:</p>\n\n<pre><code>import java.util.Date;\nimport java.util.Locale;\nimport com.ibm.icu.util.TimeZone;\nimport com.ibm.icu.text.SimpleDateFormat;\n\npublic class Test {\n    public static void main(String[] args) {\n        TimeZone zone = TimeZone.getTimeZone(\"America/New_York\");\n        SimpleDateFormat format = new SimpleDateFormat(\"zzz\", Locale.US);\n        format.setTimeZone(zone);\n\n        // One month before the unix epoch\n        System.out.println(format.format(new Date(-2678400000L))); // GMT-5\n\n        // At the unix epoch\n        System.out.println(format.format(new Date(0L))); // EST\n    }\n}\n</code></pre>\n\n<p>(I'm running using ICU4J 55.1, both the stock download and after updating it with the 2015e data release.)</p>\n\n<p>It's not clear to me whether ICU4J is getting its abbreviations from the tz data or from CLDR - I suspect it's the latter, given that there's nothing in the tz data to suggest a difference here.</p>\n\n<p>It also seems to be affected by locale, which I suppose is reasonable - using the US locale I can see EST/EDT for America/New_York, but nothing for Europe/London; with the UK locale I see GMT/BST for Europe/London, but nothing for America/New_York :(</p>\n\n<p>Is there a way to persuade ICU4J to fall back to tz abbreviations? In my very specific case, that's all I'm looking for.</p>\n\n<p><strong>Update</strong></p>\n\n<p>Thanks to RealSkeptic's comments, it looks like <code>TimeZoneNames</code> is a cleaner way of getting this data without formatting. It all sounds so promising - there's even <code>TimeZoneNames.getTZDBInstance</code>:</p>\n\n<blockquote>\n  <p>Returns an instance of TimeZoneNames containing only short specific zone names (<code>TimeZoneNames.NameType.SHORT_STANDARD</code> and <code>TimeZoneNames.NameType.SHORT_DAYLIGHT</code>), compatible with the IANA tz database's zone abbreviations (not localized). </p>\n</blockquote>\n\n<p>That's pretty much exactly what I want - but that doesn't go earlier than 1970 either in most cases, nor does it include all the relevant data:</p>\n\n<pre><code>import static com.ibm.icu.text.TimeZoneNames.NameType.SHORT_STANDARD;\n\nimport com.ibm.icu.text.TimeZoneNames;\nimport com.ibm.icu.text.TimeZoneNames.NameType;\nimport com.ibm.icu.util.ULocale;\n\npublic class Test {\n    public static void main(String[] args) {\n        TimeZoneNames names = TimeZoneNames.getTZDBInstance(ULocale.ROOT);\n\n        long december1969 = -2678400000L;\n        // 24 hours into the Unix epoch...\n        long january1970 = 86400000L;\n\n        // null\n        System.out.println(\n            names.getDisplayName(\"America/New_York\",  SHORT_STANDARD, december1969));\n        // EST\n        System.out.println(\n            names.getDisplayName(\"America/New_York\",  SHORT_STANDARD, january1970));\n\n        // null\n        System.out.println(\n            names.getDisplayName(\"Europe/London\",  SHORT_STANDARD, december1969));\n        // null\n        System.out.println(\n            names.getDisplayName(\"Europe/London\",  NameType.SHORT_STANDARD, january1970));\n    }\n}\n</code></pre>\n\n<p>Given that there's really very little indirection at this point - I'm telling ICU4J exactly what I want - my suspicion is that the information just isn't available :(</p>\n", "is_answered": true, "up_vote_count": 9, "tags": ["java", "timezone", "icu4j"], "reopen_vote_count": 0, "answer_count": 1, "answers": [{"body": "<p>Tracing through the sources to see how this works, it turns out that to find the display name, it gets the name of the meta zone from the zone name and the date, and then, from the meta zone and the type, the display name.</p>\n\n<p><code>com.ibm.icu.impl.TZDBTimeZoneNames</code>, which is the class returned from <code>TimeZoneNames.getTZDBInstance(ULocale)</code>, implements <code>getMetaZoneID(String,Long)</code> by calling <code>com.ibm.icu.impl.TimeZoneNamesImpl._getMetaZoneID(String,long)</code>, which retrieves the mappings from the given time zone name to meta zone names, and then checks if the date is between the <code>from</code> and <code>to</code> parameters in any of those mappings.</p>\n\n<p>The mapping is read by a nested class, like this:</p>\n\n<pre><code>            for (int idx = 0; idx &lt; zoneBundle.getSize(); idx++) {\n                UResourceBundle mz = zoneBundle.get(idx);\n                String mzid = mz.getString(0);\n                String fromStr = \"1970-01-01 00:00\";\n                String toStr = \"9999-12-31 23:59\";\n                if (mz.getSize() == 3) {\n                    fromStr = mz.getString(1);\n                    toStr = mz.getString(2);\n                }\n                long from, to;\n                from = parseDate(fromStr);\n                to = parseDate(toStr);\n                mzMaps.add(new MZMapEntry(mzid, from, to));\n            }\n</code></pre>\n\n<p>(<a href=\"http://grepcode.com/file/repo1.maven.org/maven2/com.ibm.icu/icu4j/54.1.1/com/ibm/icu/impl/TimeZoneNamesImpl.java#TimeZoneNamesImpl.TZ2MZsCache\">source</a>)</p>\n\n<p>As you can see, it has hard-coded values for the <code>to</code> and <code>from</code> values it will return (although it reads the <code>to</code> and <code>from</code> from the resource bundle itself when the meta zone entry has three items, most of them don't - as can be seen in the actual <a href=\"http://source.icu-project.org/repos/icu/icu/trunk/source/data/misc/metaZones.txt\">meta zone file</a> from which the bundle is built - and those who do, also do not have 'from' dates before January 1970.)</p>\n\n<p>Thus, the meta zone ID will be <code>null</code> for any date before January 1970, and in turn, so will the display name.</p>\n", "answer_id": 31630647, "tags": [], "down_vote_count": 0, "last_activity_date": 1437855034, "creation_date": 1437855034, "comment_count": 0, "score": 6, "owner": {"display_name": "RealSkeptic", "reputation": 13061, "user_id": 4125191, "user_type": "registered"}, "is_accepted": true, "up_vote_count": 6}], "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 31626356}, {"last_activity_date": 1437590928, "accepted_answer_id": 31569625, "creation_date": 1437567141, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1437590928, "favorite_count": 31, "view_count": 3761, "delete_vote_count": 0, "title": "What makes the Visual Studio debugger stop evaluating a ToString override?", "comments": [{"body": "<code>$&quot;Struct: {Name}&quot;</code> ... what&#39;s with the <code>$</code>? Is that a new language feature or yet another thing i have never seen before?!", "edited": false, "comment_id": 51081508, "creation_date": 1437567575, "score": 0, "owner": {"display_name": "3-14159265358979323846264", "reputation": 1283, "user_id": 5040941, "user_type": "registered"}}, {"body": "@John same behavior in VS 2013 (I had to remove the c#6 stuff), with an additional message: \t\tName\tFunction evaluation disabled because a previous function evaluation timed out. You must continue execution to reenable function evaluation.\tstring", "edited": false, "comment_id": 51081525, "creation_date": 1437567602, "score": 6, "owner": {"display_name": "vc 74", "reputation": 17537, "user_id": 446279, "user_type": "registered", "accept_rate": 100}}, {"body": "welcome to c# 6.0 @3-14159265358979323846264", "edited": false, "reply_to_user": {"display_name": "3-14159265358979323846264", "reputation": 1283, "user_id": 5040941, "user_type": "registered"}, "comment_id": 51081560, "creation_date": 1437567660, "score": 0, "owner": {"display_name": "Neel", "reputation": 7110, "user_id": 1997103, "user_type": "registered", "accept_rate": 83}}, {"body": "Maybe a <code>DebuggerDisplayAttribute</code> would cause it to try a little harder.", "edited": false, "comment_id": 51081607, "creation_date": 1437567708, "score": 1, "owner": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}}, {"body": "@Rawling: But what would I specify for how to format it? The point of overriding ToString is that it&#39;s already providing the right format. It&#39;s not like I want to select a specific property...", "edited": false, "reply_to_user": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}, "comment_id": 51081712, "creation_date": 1437567845, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet Just wondered if pointing the attribute at <code>ToString</code> would trick it into waiting a little longer. (Or make it avoid the new &quot;fall back to default <code>ToString</code>&quot; behaviour and fail differently?)", "edited": false, "comment_id": 51081789, "creation_date": 1437567973, "score": 0, "owner": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}}, {"body": "@Rawling: Trying <code>[DebuggerDisplay(&quot;{ToString()}&quot;)]</code> with my sample code changes it to &quot;Evaluation timed out&quot; :0", "edited": false, "reply_to_user": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}, "comment_id": 51081798, "creation_date": 1437567987, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Well, that&#39;s possibly a bit of help :p", "edited": false, "comment_id": 51081815, "creation_date": 1437568025, "score": 2, "owner": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}}, {"body": "see it&#39;s 5th point <a href=\"https://neelbhatt40.wordpress.com/2015/07/13/c-6-0-something-new-on-its-way/\" rel=\"nofollow\">neelbhatt40.wordpress.com/2015/07/13/&hellip;</a> @3-14159265358979323846264 for new c# 6.0", "edited": false, "reply_to_user": {"display_name": "3-14159265358979323846264", "reputation": 1283, "user_id": 5040941, "user_type": "registered"}, "comment_id": 51081857, "creation_date": 1437568089, "score": 1, "owner": {"display_name": "Neel", "reputation": 7110, "user_id": 1997103, "user_type": "registered", "accept_rate": 83}}, {"body": "Same behaviour on VS2010 Professional", "edited": false, "comment_id": 51081912, "creation_date": 1437568157, "score": 0, "owner": {"display_name": "HimBromBeere", "reputation": 2620, "user_id": 2528063, "user_type": "registered", "accept_rate": 67}}, {"body": "@Rawling: Ooh - trying that in Noda Time <i>does</i> work, for some reason. Will update the post with that when I get a chance - thanks! Would still like to know why it&#39;s needed though - seems odd...", "edited": false, "reply_to_user": {"display_name": "Rawling", "reputation": 27168, "user_id": 215380, "user_type": "registered", "accept_rate": 58}, "comment_id": 51081983, "creation_date": 1437568253, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "You can change the timeout in the registry ... <a href=\"http://stackoverflow.com/a/1212068/5040941\">stackoverflow.com/a/1212068/5040941</a>. (And thanks @Neel)!", "edited": false, "reply_to_user": {"display_name": "Neel", "reputation": 7110, "user_id": 1997103, "user_type": "registered", "accept_rate": 83}, "comment_id": 51082278, "creation_date": 1437568647, "score": 1, "owner": {"display_name": "3-14159265358979323846264", "reputation": 1283, "user_id": 5040941, "user_type": "registered"}}, {"body": "I created &quot;NormalEvalTimeout&quot; and set it to 2000 (hex, became 8192), and it still times out as described in the question. The timeout value was not present in the registry so it may not apply to 2015.", "edited": false, "comment_id": 51082497, "creation_date": 1437568943, "score": 0, "owner": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}}, {"body": "I also noticed that if I create a timeout parameter to the struct, and construct first one with 900 and then one with 1000 (before and after breakpoint), the one with 1000 shows the type but the one with 900 shows the ToString value. <i>However</i>, if I switch them around, both will show the type. In other words it seems the locals window / evaulation engine remembers the previous problem with ToString and bumps back to the type when it thinks this is just too slow.", "edited": false, "comment_id": 51082544, "creation_date": 1437569033, "score": 1, "owner": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}}, {"body": "@LasseV.Karlsen: Right. That wouldn&#39;t surprise me - good to know though.", "edited": false, "reply_to_user": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}, "comment_id": 51082617, "creation_date": 1437569129, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I also noticed something else. I created three variables, one before breakpoint and two after. These had timeouts of 800, 1000, 800 respectively. When I step through this it shows Struct:Bar, null, null, then Struct:Bar, DemoStruct, null, then DemoStruct, DemoStruct, DemoStruct. It seems when it discovered that ToString took too much time, at some point it re-evaluates the contents and then just defaults back to the type.", "edited": false, "comment_id": 51082629, "creation_date": 1437569150, "score": 0, "owner": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}}, {"body": "Note that I see the exact same problems you have described and the ones I tested in my previous comments even if I switch to plain old String.Format. String interpolation is a red herring (or maybe I just didn&#39;t understand the bulletpoints at the bottom of your question)", "edited": false, "comment_id": 51082819, "creation_date": 1437569384, "score": 0, "owner": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}}, {"body": "If you mean whether DebuggerDisplay uses string interpolation, then no. This syntax has been allowed quite a while so it should work just fine on older .NET versions and Visual Studio versions. I tested this in 2012 and it actually works identical to 2015 in terms of how it displays just ToString (like I&#39;ve described in my comments as well). ToString works with the syntax you&#39;ve shown.", "edited": false, "comment_id": 51082868, "creation_date": 1437569433, "score": 0, "owner": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}}, {"body": "@LasseV.Karlsen: Thanks - have removed the bit around C# 6 as a red herring.", "edited": false, "reply_to_user": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}, "comment_id": 51083041, "creation_date": 1437569646, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "With my 3 structs and 800,1000,800 timeouts I got this using DebuggerDisplay in 2012: Struct:Bar, Function evaluation timed out, Function evaluation disabled because a previous function evaluation timed out. You must continue execution to reenable function evaluation.", "edited": false, "comment_id": 51083122, "creation_date": 1437569737, "score": 0, "owner": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}}, {"body": "2015 actually worked better with DebuggerDisplay. Where 2012 flagged the type as &quot;cannot use DebuggerDisplay, give &#39;has been disabled&#39; error message&quot;, 2015 did re-evaluate DebuggerDisplay for my 3rd instance. 2015 gave me Struct:Bar, Evaluation timed out, Struct:Bar.", "edited": false, "comment_id": 51083230, "creation_date": 1437569868, "score": 0, "owner": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}}, {"body": "The question I have is why Instance would trigger this. Surely the ToString method of that doesn&#39;t take long to evaluate. In other words, there must be other reasons than just &quot;1 second timeout&quot; that triggers this behavior of reverting to type. I guess that is why you posted this :) Could it be that the <i>sum</i> of all locals cannot exceed 1 second? Testing...", "edited": false, "comment_id": 51083295, "creation_date": 1437569961, "score": 0, "owner": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}}, {"body": "@LasseV.Karlsen: Exactly - it&#39;s definitely not just a timeout. (Note how the attribute makes the two behave differently.) I thought briefly that it might have been due to evaluation using a lock, but that doesn&#39;t seem to be it. (The sum of all locals would still be tiny in the case I&#39;m looking at.)", "edited": false, "reply_to_user": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}, "comment_id": 51083346, "creation_date": 1437570033, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Sum is not the case. 3 instances each with a timeout of 800 evaluated all just fine if I stepped past all of them (breakpoint before all and after all). Upping the timeout of the middle one to 1200 gave me Struct:Bar, DemoStruct, DemoStruct.", "edited": false, "comment_id": 51083445, "creation_date": 1437570165, "score": 0, "owner": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}}, {"body": "I tried allocating 86000 bytes a thousand times with and without a GC.Collect between each to see if it tracked memory usage or garbage collections but that did not change anything.", "edited": false, "comment_id": 51083630, "creation_date": 1437570405, "score": 0, "owner": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}}, {"body": "Hmm. I&#39;m quietly going insane on this one. I&#39;ve modified the <code>Thread.Sleep</code> to be 60000 and yet running the debugger, it hits the Break line far quicker than a minute and <i>always</i> shows the custom value that <code>ToString</code> should return.", "edited": false, "comment_id": 51083644, "creation_date": 1437570423, "score": 0, "owner": {"display_name": "Damien_The_Unbeliever", "reputation": 122457, "user_id": 15498, "user_type": "registered", "accept_rate": 75}}, {"body": "Hmm, discovered something. If an exception is thrown in ToString, the display in locals is the type, even without a sleep at all. Could this be it? Note that if you enable code analysis, it will explicitly call out exceptions being thrown in ToString as <i>DemoStruct.ToString()&#39; creates an exception of type &#39;Exception&#39;. Exceptions should not be raised in this type of method. If this exception instance might be raised, change this method&#39;s logic so it no longer raises an exception.</i> This is <a href=\"https://msdn.microsoft.com/en-us/library/bb386039.aspx\" rel=\"nofollow\">CA1065</a>.", "edited": false, "comment_id": 51083719, "creation_date": 1437570536, "score": 0, "owner": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}}, {"body": "Trying to debug the Visual Studio debugger as a black box is surely an interesting exercise, but is it really a productive use of your time? Anyone with the source code could quickly give you a definitive answer to your question, and maybe also fix the problem.  Consider giving up and using one of the workarounds suggested here, or (even) adding some logging code to accomplish the same goal.", "edited": false, "comment_id": 51083864, "creation_date": 1437570757, "score": 0, "owner": {"display_name": "Diomidis Spinellis", "reputation": 9966, "user_id": 20520, "user_type": "registered", "accept_rate": 93}}, {"body": "@LasseV.Karlsen: No exceptions - and it&#39;s just got odder. See my update (&quot;curiouser and curiouser&quot;).", "edited": false, "reply_to_user": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}, "comment_id": 51083912, "creation_date": 1437570825, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@DiomidisSpinellis: Well I&#39;ve asked it here so that a) someone who&#39;s either seen the same thing before or knows the inside of VS can answer; b) anyone running into the same issue in the future can get the answer quickly.", "edited": false, "reply_to_user": {"display_name": "Diomidis Spinellis", "reputation": 9966, "user_id": 20520, "user_type": "registered", "accept_rate": 93}, "comment_id": 51083947, "creation_date": 1437570867, "score": 4, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "With my 3 instances having a timeout of 800,1200,800 + 3 wrappers, one for each (using the exact same tostring with the exact same timeout) shows Struct:Bar, 2x type, 3x Struct:Bar. So yes, curiouser and curiouser.", "edited": false, "comment_id": 51084128, "creation_date": 1437571135, "score": 0, "owner": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}}, {"body": "@JonSkeet Good point!  Or even c) find out that this is a known bug with no good answer.", "edited": false, "comment_id": 51084510, "creation_date": 1437571633, "score": 0, "owner": {"display_name": "Diomidis Spinellis", "reputation": 9966, "user_id": 20520, "user_type": "registered", "accept_rate": 93}}, {"body": "@JonSkeet <code>InstantWrapper</code> is a class and <code>Instant</code> is a struct. Maybe it evaluates classes and structs differently?  You might try changing <code>InstanceWrapper</code> to be a struct as well.", "edited": false, "comment_id": 51087198, "creation_date": 1437574918, "score": 0, "owner": {"display_name": "Eren Ers\u00f6nmez", "reputation": 17424, "user_id": 201088, "user_type": "registered", "accept_rate": 94}}, {"body": "@ErenErs&#246;nmez: Ooh, well spotted. Yes, that changes things. Updating.", "edited": false, "reply_to_user": {"display_name": "Eren Ers\u00f6nmez", "reputation": 17424, "user_id": 201088, "user_type": "registered", "accept_rate": 94}, "comment_id": 51087349, "creation_date": 1437575089, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@jon So many comments I can&#39;t get through them all. Did you try to see if the limit on evaluation is actually method size? Similar to the limit imposed when method in-lining is being considered? Also, could the difference between a struct and class have to do with the method call IL? Not sure what it looks like off-hand, I&#39;d assume it&#39;s the same, but maybe the compiler is doing something extra to get the value type back into an <code>object</code>.", "edited": false, "comment_id": 51087698, "creation_date": 1437575513, "score": 0, "owner": {"display_name": "Adam Houldsworth", "reputation": 42850, "user_id": 358221, "user_type": "registered", "accept_rate": 100}}, {"body": "@AdamHouldsworth: I didn&#39;t look, but the body of the <code>Instant.ToString</code> method is just a single method call, so I very much doubt that that&#39;s relevant. (Good thought though.)", "edited": false, "reply_to_user": {"display_name": "Adam Houldsworth", "reputation": 42850, "user_id": 358221, "user_type": "registered", "accept_rate": 100}, "comment_id": 51087814, "creation_date": 1437575644, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Actually, my observations have all been done where DemoStruct is a class, since it was that in the first version of this question. I did at some point think it odd you named a class DemoStruct but thought it was just an artifact of heavy experimentation, did not notice that you edited the question and changed that. So my comments above about timeouts and 3 instances and wrappers and such, everything is classes.", "edited": false, "comment_id": 51087829, "creation_date": 1437575658, "score": 0, "owner": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}}, {"body": "@LasseV.Karlsen: Whoops - yes, I noticed and fixed that, but didn&#39;t raise it... are you easily able to check whether the observations do actually still hold?", "edited": false, "reply_to_user": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}, "comment_id": 51087862, "creation_date": 1437575702, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon Unless the compiled method features in-lined content from the method call? Maybe the IL is larger than the C# you can see. Clutching at straws really, can&#39;t wait to see a VS dev answer this one :-)", "edited": false, "comment_id": 51087903, "creation_date": 1437575754, "score": 0, "owner": {"display_name": "Adam Houldsworth", "reputation": 42850, "user_id": 358221, "user_type": "registered", "accept_rate": 100}}, {"body": "It changes. With classes, 3 instances + 3 wrappers (in that order), with timeouts 800, 1200, 800: tostring+2x type+3x tostring. Changing inner class to struct: 4x tostring + 2x type. Changing wrapper to struct as well: 6x tostring. This is code that just constructs all 6 instances (3 inner, then 3 wrappers) then hit a breakpoint. So it seems the rule is that if it&#39;s a struct, we&#39;re going to evaluate it no matter what, but for classes there is a timeout. Well, except for the wrapper, which behaves oddly :) I&#39;m voting on random. This is <code>new Random()</code> in a new disguise :)", "edited": false, "comment_id": 51088081, "creation_date": 1437575984, "score": 0, "owner": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}}, {"body": "@LasseV.Karlsen That rule sounds like it might be based on the predictable inheritance chain of <code>struct</code> types (ie none) vs classes, which could be very complicated and costly. I wonder if it relates to walking too much code, or code across libraries or something.", "edited": false, "reply_to_user": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}, "comment_id": 51088166, "creation_date": 1437576093, "score": 0, "owner": {"display_name": "Adam Houldsworth", "reputation": 42850, "user_id": 358221, "user_type": "registered", "accept_rate": 100}}, {"body": "There could also be an expectancy that structs are supposed to be light-weight values, whereas classes tend to be more complex.", "edited": false, "comment_id": 51088208, "creation_date": 1437576141, "score": 0, "owner": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}}, {"body": "@Jon On a more serious note, the SO devs need to fix the UI. Your badge counts are cropped on the user tile...", "edited": false, "comment_id": 51088282, "creation_date": 1437576224, "score": 0, "owner": {"display_name": "Adam Houldsworth", "reputation": 42850, "user_id": 358221, "user_type": "registered", "accept_rate": 100}}, {"body": "@LasseV.Karlsen: That&#39;s odd - and doesn&#39;t fit with Instant being a struct. I&#39;ve just found it getting even weirder though - if I have a 10 second sleep in ToString, it seems to be ignored while evaluating it. Do you think it&#39;s worth me changing this back to being a class, to make the question more consistent?", "edited": false, "reply_to_user": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}, "comment_id": 51088289, "creation_date": 1437576233, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@LasseV.Karlsen: Have updated the first repro app to have both a struct and a class. Annoyingly, this morning (when I first tried to repro this) I already had <code>DemoStruct</code> and <code>DemoClass</code>, but <code>DemoStruct</code> was always a class. Humbug. I suck.", "edited": false, "reply_to_user": {"display_name": "Lasse V. Karlsen", "reputation": 182016, "user_id": 267, "user_type": "registered", "accept_rate": 88}, "comment_id": 51088563, "creation_date": 1437576582, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet - the <code>Thread.Sleep</code> seeming to have no effect is what I was reporting, way up there ^^^^^^^.", "edited": false, "comment_id": 51088566, "creation_date": 1437576584, "score": 0, "owner": {"display_name": "Damien_The_Unbeliever", "reputation": 122457, "user_id": 15498, "user_type": "registered", "accept_rate": 75}}, {"body": "@Damien_The_Unbeliever: Right - and presumably you correctly had it as a struct? It does make a difference when it&#39;s a class.", "edited": false, "reply_to_user": {"display_name": "Damien_The_Unbeliever", "reputation": 122457, "user_id": 15498, "user_type": "registered", "accept_rate": 75}, "comment_id": 51088596, "creation_date": 1437576615, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I have the same in VS2012 and never found a solution.", "edited": false, "comment_id": 51092103, "creation_date": 1437581295, "score": 0, "owner": {"display_name": "magicandre1981", "reputation": 3045, "user_id": 1466046, "user_type": "registered", "accept_rate": 75}}], "comment_count": 48, "score": 145, "body": "<p>Environment: Visual Studio 2015 RTM. (I haven't tried older versions.)</p>\n\n<p>Recently, I've been debugging some of my <a href=\"http://nodatime.org\">Noda Time</a> code, and I've noticed that when I've got a local variable of type <code>NodaTime.Instant</code> (one of the central <code>struct</code> types in Noda Time), the \"Locals\" and \"Watch\" windows don't appear to call its <code>ToString()</code> override. If I call <code>ToString()</code> explicitly in the watch window, I see the appropriate representation, but otherwise I just see:</p>\n\n<pre><code>variableName       {NodaTime.Instant}\n</code></pre>\n\n<p>which isn't very useful.</p>\n\n<p>If I change the override to return a constant string, the string <em>is</em> displayed in the debugger, so it's clearly able to pick up that it's there - it just doesn't want to use it in its \"normal\" state.</p>\n\n<p>I decided to reproduce this locally in a little demo app, and here's what I've come up with. (Note that in an early version of this post, <code>DemoStruct</code> was a class and <code>DemoClass</code> didn't exist at all - my fault, but it explains some comments which look odd now...)</p>\n\n<pre><code>using System;\nusing System.Diagnostics;\nusing System.Threading;\n\npublic struct DemoStruct\n{\n    public string Name { get; }\n\n    public DemoStruct(string name)\n    {\n        Name = name;\n    }\n\n    public override string ToString()\n    {\n        Thread.Sleep(1000); // Vary this to see different results\n        return $\"Struct: {Name}\";\n    }\n}\n\npublic class DemoClass\n{\n    public string Name { get; }\n\n    public DemoClass(string name)\n    {\n        Name = name;\n    }\n\n    public override string ToString()\n    {\n        Thread.Sleep(1000); // Vary this to see different results\n        return $\"Class: {Name}\";\n    }\n}\n\npublic class Program\n{\n    static void Main()\n    {\n        var demoClass = new DemoClass(\"Foo\");\n        var demoStruct = new DemoStruct(\"Bar\");\n        Debugger.Break();\n    }\n}\n</code></pre>\n\n<p>In the debugger, I now see:</p>\n\n<pre><code>demoClass    {DemoClass}\ndemoStruct   {Struct: Bar}\n</code></pre>\n\n<p>However, if I reduce the <code>Thread.Sleep</code> call down from 1 second to 900ms, there's still a short pause, but then I see <code>Class: Foo</code> as the value. It doesn't seem to matter how long the <code>Thread.Sleep</code> call is in <code>DemoStruct.ToString()</code>, it's always displayed properly - and the debugger displays the value before the sleep would have completed. (It's as if <code>Thread.Sleep</code> is disabled.)</p>\n\n<p>Now <code>Instant.ToString()</code> in Noda Time does a fair amount of work, but it certainly doesn't take a whole second - so presumably there are more conditions that cause the debugger to give up evaluating a <code>ToString()</code> call. And of course it's a struct anyway.</p>\n\n<p>I've tried recursing to see whether it's a stack limit, but that appears not to be the case.</p>\n\n<p>So, how can I work out what's stopping VS from fully evaluating <code>Instant.ToString()</code>? As noted below, <code>DebuggerDisplayAttribute</code> appears to help, but without knowing <em>why</em>, I'm never going to be entirely confident in when I need it and when I don't.</p>\n\n<p><strong>Update</strong></p>\n\n<p>If I use <a href=\"https://msdn.microsoft.com/en-us/library/system.diagnostics.debuggerdisplayattribute.debuggerdisplayattribute\"><code>DebuggerDisplayAttribute</code></a>, things change:</p>\n\n<pre><code>// For the sample code in the question...\n[DebuggerDisplay(\"{ToString()}\")]\npublic class DemoClass\n</code></pre>\n\n<p>gives me:</p>\n\n<pre><code>demoClass      Evaluation timed out\n</code></pre>\n\n<p>Whereas when I apply it in Noda Time:</p>\n\n<pre><code>[DebuggerDisplay(\"{ToString()}\")]\npublic struct Instant\n</code></pre>\n\n<p>a simple test app shows me the right result:</p>\n\n<pre><code>instant    \"1970-01-01T00:00:00Z\"\n</code></pre>\n\n<p>So presumably the problem in Noda Time is some condition that <code>DebuggerDisplayAttribute</code> <em>does</em> force through - even though it doesn't force through timeouts. (This would be in line with my expectation that <code>Instant.ToString</code> is easily fast enough to avoid a timeout.)</p>\n\n<p>This <em>may</em> be a good enough solution - but I'd still like to know what's going on, and whether I can change the code simply to avoid having to put the attribute on all the various value types in Noda Time.</p>\n\n<p><strong>Curiouser and curiouser</strong></p>\n\n<p>Whatever is confusing the debugger only confuses it sometimes. Let's create a class which <em>holds</em> an <code>Instant</code> and uses it for its own <code>ToString()</code> method:</p>\n\n<pre><code>using NodaTime;\nusing System.Diagnostics;\n\npublic class InstantWrapper\n{\n    private readonly Instant instant;\n\n    public InstantWrapper(Instant instant)\n    {\n        this.instant = instant;\n    }\n\n    public override string ToString() =&gt; instant.ToString();\n}\n\npublic class Program\n{\n    static void Main()\n    {\n        var instant = NodaConstants.UnixEpoch;\n        var wrapper = new InstantWrapper(instant);\n\n        Debugger.Break();\n    }\n}\n</code></pre>\n\n<p>Now I end up seeing:</p>\n\n<pre><code>instant    {NodaTime.Instant}\nwrapper    {1970-01-01T00:00:00Z}\n</code></pre>\n\n<p>However, at the suggestion of Eren in comments, if I change <code>InstantWrapper</code> to be a struct, I get:</p>\n\n<pre><code>instant    {NodaTime.Instant}\nwrapper    {InstantWrapper}\n</code></pre>\n\n<p>So it <em>can</em> evaluate <code>Instant.ToString()</code> - so long as that's invoked by another <code>ToString</code> method... which is within a class. The class/struct part seems to be important based on the type of the variable being displayed, not what code needs \nto be executed in order to get the result.</p>\n\n<p>As another example of this, if we use:</p>\n\n<pre><code>object boxed = NodaConstants.UnixEpoch;\n</code></pre>\n\n<p>... then it works fine, displaying the right value. Colour me confused.</p>\n", "is_answered": true, "up_vote_count": 145, "tags": ["c#", "debugging", "visual-studio-2015"], "reopen_vote_count": 0, "answer_count": 1, "answers": [{"body": "<p>You are running into a known bug/design limitation with Visual Studio 2015 and calling ToString on struct types.  This can also be observed when dealing with <code>System.DateTimeSpan</code>.  <code>System.DateTimeSpan.ToString()</code> works in the evaluation windows with Visual Studio 2013, but does not always work in 2015.</p>\n\n<p>If you are interested in the low level details, here's what's going on:</p>\n\n<p>To evaluate <code>ToString</code>, the debugger does what's known as \"function evaluation\".  In greatly simplified terms, the debugger suspends all threads in the process except the current thread, changes the context of the current thread to the <code>ToString</code> function, sets a hidden guard breakpoint, then allows the process to continue.  When the guard breakpoint is hit, the debugger restores the process to its previous state and the return value of the function is used to populate the window.</p>\n\n<p>To support lambda expressions, we had to completely rewrite the CLR Expression Evaluator in Visual Studio 2015.  At a high level, the implementation is:</p>\n\n<ol>\n<li>Roslyn generates MSIL code for expressions/local variables to get the values to be displayed in the various inspection windows.</li>\n<li>The debugger interprets the IL to get the result.</li>\n<li>If there are any \"call\" instructions, the debugger executes a\nfunction evaluation as described above.</li>\n<li>The debugger/roslyn takes this result and formats it into the\ntree-like view that's shown to the user.</li>\n</ol>\n\n<p>Because of the execution of IL, the debugger is always dealing with a complicated mix of \"real\" and \"fake\" values.  Real values actually exist in the process being debugged.  Fake values only exist in the debugger process.  To implement proper struct semantics, the debugger always needs to make a copy of the value when pushing a struct value to the IL stack.  The copied value is no longer a \"real\" value and now only exists in the debugger process.  That means if we later need to perform function evaluation of <code>ToString</code>, we can't because the value doesn't exist in the process.  To try and get the value we need to emulate execution of the <code>ToString</code> method.  While we can emulate some things, there are many limitations.  For example, we can't emulate native code and we can't execute calls to \"real\" delegate values or calls on reflection values.</p>\n\n<p>With all of that in mind, here is what's causing the various behaviors you are seeing:</p>\n\n<ol>\n<li>The debugger isn't evaluating <code>NodaTime.Instant.ToString</code> -> This is\nbecause it is struct type and the implementation of ToString can't\nbe emulated by the debugger as described above.</li>\n<li><code>Thread.Sleep</code> seems to take zero time when called by <code>ToString</code> on a\nstruct -> This is because the emulator is executing <code>ToString</code>.\nThread.Sleep is a native method, but the emulator is aware\nof it and just ignores the call.  We do this to try and get a value\nto show to the user.  A delay wouldn't be helpful in this case.</li>\n<li><code>DisplayAttibute(\"ToString()\")</code> works. -> That is confusing.  The only\ndifference between the implicit calling of <code>ToString</code> and\n<code>DebuggerDisplay</code> is that any time-outs of the implicit <code>ToString</code>\nevaluation will disable all implicit <code>ToString</code> evaluations for that\ntype until the next debug session.  You may be observing that\nbehavior.</li>\n</ol>\n\n<p>In terms of the design problem/bug, this is something we are planning to address in a future release of Visual Studio.</p>\n\n<p>Hopefully that clears things up.  Let me know if you have more questions. :-)</p>\n", "is_accepted": true, "tags": [], "answer_id": 31569625, "down_vote_count": 0, "last_activity_date": 1437589995, "comments": [{"body": "Any idea how Instant.ToString works if the implementation is just &quot;return a string literal&quot;? It sounds like there are some complexities still unaccounted for :) I&#39;ll check that I really can reproduce that behaviour...", "edited": false, "comment_id": 51094609, "creation_date": 1437585473, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon, I&#39;m not sure what you&#39;re asking.  The debugger is agnostic of the implementation when doing real function evaluation and it always tries this first.  The debugger only cares about the implementation when it needs to emulate the call - Returning a string literal is the most simple case to emulate.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 51095342, "creation_date": 1437586707, "score": 1, "owner": {"display_name": "Patrick Nelson - MSFT", "reputation": 956, "user_id": 5144534, "user_type": "registered"}}, {"body": "I&#39;m way over my head, but aren&#39;t string literals set somewhere hard coded by the compiler? In which case maybe the debugging engine knows that there is no evaluation to be done, and just grabs the string from wherever it is stored", "edited": false, "comment_id": 51095472, "creation_date": 1437586909, "score": 1, "owner": {"display_name": "Max", "reputation": 82, "user_id": 2523942, "user_type": "registered"}}, {"body": "@PatrickNelson-MSFT: If I replace the implementation of <code>ToString()</code> with <code>return &quot;Hello&quot;;</code> then the debugger shows it. I thought it would be a case of the debugger emulating a call to <code>ToString()</code> - if it&#39;s actually emulating the <i>contents</i> of <code>ToString()</code>, I guess that could be different...", "edited": false, "comment_id": 51095579, "creation_date": 1437587077, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Ideally we want the CLR to execute everything.  This provides the most accurate and reliable results.  That&#39;s why we do real function evaluation for ToString calls.  When this isn&#39;t possible, we fall back to emulating the call.  That means the debugger pretends to be the CLR executing the method.  Clearly if the implementation is &lt;code&gt;return &quot;Hello&quot;&lt;/code&gt;, this is easy to do.  If the implementation does a P-Invoke it&#39;s more difficult or impossible.", "edited": false, "comment_id": 51096150, "creation_date": 1437588095, "score": 8, "owner": {"display_name": "Patrick Nelson - MSFT", "reputation": 956, "user_id": 5144534, "user_type": "registered"}}, {"body": "Hmmm, regarding Thread.Sleep: silly example maybe, but what about something like this- <code>while (innerResult == null) Thread.Sleep(10); return innerResult.ToString();</code>.  Does the emulator know that Thread.Sleep should not be ignored in that scenario?", "edited": false, "comment_id": 51141636, "creation_date": 1437674807, "score": 1, "owner": {"display_name": "tzachs", "reputation": 273, "user_id": 1087692, "user_type": "registered"}}, {"body": "@tzachs, The emulator is completely single threaded.  If <code>innerResult</code> starts off as null, the loop will never terminate and eventually the evaluation will time out.  In fact, evaluations only allow a single thread in the process to run by default, so you&#39;ll see the same behavior regardless of if the emulator is used or not.", "edited": false, "reply_to_user": {"display_name": "tzachs", "reputation": 273, "user_id": 1087692, "user_type": "registered"}, "comment_id": 51142263, "creation_date": 1437675767, "score": 2, "owner": {"display_name": "Patrick Nelson - MSFT", "reputation": 956, "user_id": 5144534, "user_type": "registered"}}, {"body": "BTW, if you know your evaluations require multiple threads, take a look at <a href=\"https://msdn.microsoft.com/en-us/library/system.diagnostics.debugger.notifyofcrossthreaddependency(v=vs.110).aspx\" rel=\"nofollow\">Debugger.NotifyOfCrossThreadDependency</a>.  Calling this method will abort the evaluation with a message stating the evaluation requires all threads to run and the debugger will provide a button the user can push to force the evaluation.  The disadvantage is any breakpoints hit on other threads during the evaluation will be ignored.", "edited": false, "comment_id": 51142486, "creation_date": 1437676171, "score": 1, "owner": {"display_name": "Patrick Nelson - MSFT", "reputation": 956, "user_id": 5144534, "user_type": "registered"}}, {"body": "@PatrickNelson-MSFT Could you please explain what you mean by  <code>&quot;real&quot; delegate values</code> and <code>calls on reflection values</code> mentioned above? Does the latter refer to objects created with Activator.CreateInstance?", "edited": false, "comment_id": 51194869, "creation_date": 1437801876, "score": 0, "owner": {"display_name": "Omer Raviv", "reputation": 4834, "user_id": 292555, "user_type": "registered", "accept_rate": 77}}, {"body": "Real values exist in the process being debugged.  Fake values do not.  For example, if you evaluate something like <code>F(() =&gt; new A()) + b</code>.  The result of <code>new A()</code> would be a fake value because the emulator creates it.  If &quot;b&quot; is a local variable, it&#39;s a real value.  Reflection values are objects of types that live in <code>System.Reflection</code> and the class <code>System.Type</code>.", "edited": false, "comment_id": 51262274, "creation_date": 1438015743, "score": 1, "owner": {"display_name": "Patrick Nelson - MSFT", "reputation": 956, "user_id": 5144534, "user_type": "registered"}}], "creation_date": 1437584726, "comment_count": 10, "score": 128, "owner": {"display_name": "Patrick Nelson - MSFT", "reputation": 956, "user_id": 5144534, "user_type": "registered"}, "last_editor": {"display_name": "Zach Saucier", "reputation": 12485, "user_id": 2065702, "user_type": "registered", "accept_rate": 90}, "last_edit_date": 1437589995, "up_vote_count": 128}], "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 31562791}, {"last_activity_date": 1437102715, "accepted_answer_id": 6271607, "creation_date": 1307387510, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1437102715, "favorite_count": 82, "view_count": 14429, "delete_vote_count": 0, "title": "Curious null-coalescing operator custom implicit conversion behaviour", "comments": [{"body": "I bet they thought &quot;nobody will ever use it in that way&quot; :)", "edited": false, "comment_id": 7297634, "creation_date": 1307387873, "score": 22, "owner": {"display_name": "cyberzed", "reputation": 1179, "user_id": 94302, "user_type": "registered"}}, {"body": "Call Anders Hejlsberg! Quick!", "edited": false, "comment_id": 7297735, "creation_date": 1307388198, "score": 2, "owner": {"display_name": "Swaranga Sarma", "reputation": 4792, "user_id": 583980, "user_type": "registered", "accept_rate": 82}}, {"body": "Just out of curiosity, when would you ever use anything like <code>(a ?? b) ?? c</code>?", "edited": false, "comment_id": 7297909, "creation_date": 1307388984, "score": 1, "owner": {"display_name": "Peter Olson", "reputation": 38174, "user_id": 546661, "user_type": "registered", "accept_rate": 97}}, {"body": "Want to see something worse? Try using this line with all the implicit conversions: <code>C? first = ((B?)(((B?)x) ?? ((B?)y))) ?? ((C?)z);</code>. You&#39;ll get: <code>Internal Compiler Error: likely culprit is &#39;CODEGEN&#39;</code>", "edited": false, "comment_id": 7298362, "creation_date": 1307390629, "score": 36, "owner": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}}, {"body": "Also note that this doesn&#39;t happen when using Linq expressions to compile the same code.", "edited": false, "comment_id": 7298454, "creation_date": 1307390942, "score": 4, "owner": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}}, {"body": "@configurator: I just noticed that expression trees end up with the right answer, as it appears it uses a much different approach to converting between the types.", "edited": false, "reply_to_user": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}, "comment_id": 7299311, "creation_date": 1307393928, "score": 0, "owner": {"display_name": "user7116", "reputation": 43448, "user_id": 7116, "user_type": "registered", "accept_rate": 100}}, {"body": "@Peter: I&#39;d normally rely on the right-associative behaviour, and wouldn&#39;t use different types with implicit conversions etc. However, I find corner-case behaviour interesting...", "edited": false, "reply_to_user": {"display_name": "Peter Olson", "reputation": 38174, "user_id": 546661, "user_type": "registered", "accept_rate": 97}, "comment_id": 7299476, "creation_date": 1307394555, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Peter unlikely pattern, but plausible for <code>((&quot;working value&quot; ?? &quot;user default&quot;) ?? &quot;system default&quot;)</code>", "edited": false, "reply_to_user": {"display_name": "Peter Olson", "reputation": 38174, "user_id": 546661, "user_type": "registered", "accept_rate": 97}, "comment_id": 7301692, "creation_date": 1307405868, "score": 6, "owner": {"display_name": "Factor Mystic", "reputation": 13147, "user_id": 1569, "user_type": "registered", "accept_rate": 77}}, {"body": "@Factor: But why would you need the parenthesis there?", "edited": false, "reply_to_user": {"display_name": "Factor Mystic", "reputation": 13147, "user_id": 1569, "user_type": "registered", "accept_rate": 77}, "comment_id": 7311945, "creation_date": 1307457350, "score": 1, "owner": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}}, {"body": "@sixlettervariables: The problem is almost certainly in the &quot;lowering&quot; pass that converts from the high-level analysis form to a lower form that can be given to the code generator. The expression tree layer uses a completely different algorithm for lowering, since clearly the code generated is going to be completely different.", "edited": false, "reply_to_user": {"display_name": "user7116", "reputation": 43448, "user_id": 7116, "user_type": "registered", "accept_rate": 100}, "comment_id": 7317891, "creation_date": 1307477045, "score": 3, "owner": {"display_name": "Eric Lippert", "reputation": 354565, "user_id": 88656, "user_type": "registered"}}, {"body": "@Eric: Gotcha, after noticing it is a regression from 2k5 to 2k8/2k10 I concluded it must be part of the representation given to the code generator. I couldn&#39;t quite pin down if part of the problem was the change in specs related to implicit nullable conversions between C# 2.0 and 3.0.", "edited": false, "reply_to_user": {"display_name": "Eric Lippert", "reputation": 354565, "user_id": 88656, "user_type": "registered"}, "comment_id": 7317939, "creation_date": 1307477277, "score": 0, "owner": {"display_name": "user7116", "reputation": 43448, "user_id": 7116, "user_type": "registered", "accept_rate": 100}}, {"body": "@sixlettervariables: We did a lot of reorganization of the nullable lowering code in C# 3.0 in order to make expression trees work, and apparently doing so introduced this bug.", "edited": false, "reply_to_user": {"display_name": "user7116", "reputation": 43448, "user_id": 7116, "user_type": "registered", "accept_rate": 100}, "comment_id": 7318842, "creation_date": 1307480594, "score": 2, "owner": {"display_name": "Eric Lippert", "reputation": 354565, "user_id": 88656, "user_type": "registered"}}, {"body": "@Eric, do I get some credit to find this bug:)", "edited": false, "reply_to_user": {"display_name": "Eric Lippert", "reputation": 354565, "user_id": 88656, "user_type": "registered"}, "comment_id": 7335819, "creation_date": 1307558269, "score": 0, "owner": {"display_name": "q0987", "reputation": 8823, "user_id": 391104, "user_type": "registered", "accept_rate": 72}}, {"body": "@q0987: Sure. Ten points to Gryffindor!", "edited": false, "reply_to_user": {"display_name": "q0987", "reputation": 8823, "user_id": 391104, "user_type": "registered", "accept_rate": 72}, "comment_id": 7337368, "creation_date": 1307563542, "score": 42, "owner": {"display_name": "Eric Lippert", "reputation": 354565, "user_id": 88656, "user_type": "registered"}}, {"body": "why didn&#39;t you cry for a compiler bug straightaway? I am sure you knew it was that", "edited": false, "comment_id": 7402120, "creation_date": 1307962390, "score": 0, "owner": {"display_name": "dynamic", "reputation": 21960, "user_id": 496223, "user_type": "registered", "accept_rate": 91}}, {"body": "@yes123: When it was dealing with just the conversion, I wasn&#39;t entirely convinced. Seeing it execute a method twice made it pretty obvious this was a bug. You&#39;d be amazed at some behaviour which <i>looks</i> incorrect but is actually completely correct. The C# team is smarter than me - I tend to assume I&#39;m being stupid until I&#39;ve proved that something is their fault.", "edited": false, "reply_to_user": {"display_name": "dynamic", "reputation": 21960, "user_id": 496223, "user_type": "registered", "accept_rate": 91}, "comment_id": 7402155, "creation_date": 1307962547, "score": 16, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "comment_count": 16, "score": 390, "body": "<p><strong>Note: this appears to have been fixed in <a href=\"https://github.com/dotnet/roslyn\">Roslyn</a></strong></p>\n\n<p>This question arose when writing my answer to <a href=\"http://stackoverflow.com/questions/6238074\">this one</a>, which talks about the associativity of the <a href=\"http://msdn.microsoft.com/en-us/library/ms173224.aspx\">null-coalescing operator</a>.</p>\n\n<p>Just as a reminder, the idea of the null-coalescing operator is that an expression of the form</p>\n\n<pre><code>x ?? y\n</code></pre>\n\n<p>first evaluates <code>x</code>, then:</p>\n\n<ul>\n<li>If the value of <code>x</code> is null, <code>y</code> is evaluated and that is the end result of the expression</li>\n<li>If the value of <code>x</code> is non-null, <code>y</code> is <em>not</em> evaluated, and the value of <code>x</code> is the end result of the expression, after a conversion to the compile-time type of <code>y</code> if necessary</li>\n</ul>\n\n<p>Now <em>usually</em> there's no need for a conversion, or it's just from a nullable type to a non-nullable one - usually the types are the same, or just from (say) <code>int?</code> to <code>int</code>. However, you <em>can</em> create your own implicit conversion operators, and those are used where necessary.</p>\n\n<p>For the simple case of <code>x ?? y</code>, I haven't seen any odd behaviour. However, with <code>(x ?? y) ?? z</code> I see some confusing behaviour.</p>\n\n<p>Here's a short but complete test program - the results are in the comments:</p>\n\n<pre><code>using System;\n\npublic struct A\n{\n    public static implicit operator B(A input)\n    {\n        Console.WriteLine(\"A to B\");\n        return new B();\n    }\n\n    public static implicit operator C(A input)\n    {\n        Console.WriteLine(\"A to C\");\n        return new C();\n    }\n}\n\npublic struct B\n{\n    public static implicit operator C(B input)\n    {\n        Console.WriteLine(\"B to C\");\n        return new C();\n    }\n}\n\npublic struct C {}\n\nclass Test\n{\n    static void Main()\n    {\n        A? x = new A();\n        B? y = new B();\n        C? z = new C();\n        C zNotNull = new C();\n\n        Console.WriteLine(\"First case\");\n        // This prints\n        // A to B\n        // A to B\n        // B to C\n        C? first = (x ?? y) ?? z;\n\n        Console.WriteLine(\"Second case\");\n        // This prints\n        // A to B\n        // B to C\n        var tmp = x ?? y;\n        C? second = tmp ?? z;\n\n        Console.WriteLine(\"Third case\");\n        // This prints\n        // A to B\n        // B to C\n        C? third = (x ?? y) ?? zNotNull;\n    }\n}\n</code></pre>\n\n<p>So we have three custom value types, <code>A</code>, <code>B</code> and <code>C</code>, with conversions from A to B, A to C, and B to C.</p>\n\n<p>I can understand both the second case and the third case... but <em>why</em> is there an extra A to B conversion in the first case? In particular, I'd <em>really</em> have expected the first case and second case to be the same thing - it's just extracting an expression into a local variable, after all.</p>\n\n<p>Any takers on what's going on? I'm extremely hesistant to cry \"bug\" when it comes to the C# compiler, but I'm stumped as to what's going on...</p>\n\n<p>EDIT: Okay, here's a nastier example of what's going on, thanks to configurator's answer, which gives me further reason to think it's a bug. EDIT: The sample doesn't even need two null-coalescing operators now...</p>\n\n<pre><code>using System;\n\npublic struct A\n{\n    public static implicit operator int(A input)\n    {\n        Console.WriteLine(\"A to int\");\n        return 10;\n    }\n}\n\nclass Test\n{\n    static A? Foo()\n    {\n        Console.WriteLine(\"Foo() called\");\n        return new A();\n    }\n\n    static void Main()\n    {\n        int? y = 10;\n\n        int? result = Foo() ?? y;\n    }\n}\n</code></pre>\n\n<p>The output of this is:</p>\n\n<pre><code>Foo() called\nFoo() called\nA to int\n</code></pre>\n\n<p>The fact that <code>Foo()</code> gets called twice here is hugely surprising to me - I can't see any reason for the expression to be <em>evaluated</em> twice.</p>\n", "is_answered": true, "up_vote_count": 391, "tags": ["c#", "null-coalescing-operator"], "reopen_vote_count": 0, "answer_count": 6, "answers": [{"body": "<p>If you take a look at the generated code for the Left-grouped case it actually does something like this (<code>csc /optimize-</code>):</p>\n\n<pre><code>C? first;\nA? atemp = a;\nB? btemp = (atemp.HasValue ? new B?(a.Value) : b);\nif (btemp.HasValue)\n{\n    first = new C?((atemp.HasValue ? new B?(a.Value) : b).Value);\n}\n</code></pre>\n\n<p>Another find, if you <em>use</em> <code>first</code> it will generate a shortcut if both <code>a</code> and <code>b</code> are null and return <code>c</code>. Yet if <code>a</code> or <code>b</code> is non-null it re-evaluates <code>a</code> as part of the implicit conversion to <code>B</code> before returning which of <code>a</code> or <code>b</code> is non-null.</p>\n\n<p>From the C# 4.0 Specification, \u00a76.1.4:</p>\n\n<blockquote>\n  <ul>\n  <li>If the nullable conversion is from <code>S?</code> to <code>T?</code>:\n  <ul>\n  <li>If the source value is <code>null</code> (<code>HasValue</code> property is <code>false</code>), the result is the <code>null</code> value of type <code>T?</code>.</li>\n  <li>Otherwise, the conversion is evaluated as an unwrapping from <code>S?</code> to <code>S</code>, followed by the underlying conversion from <code>S</code> to <code>T</code>, followed by a wrapping (\u00a74.1.10) from <code>T</code> to <code>T?</code>.</li>\n  </ul></li>\n  </ul>\n</blockquote>\n\n<p>This appears to explain the second unwrapping-wrapping combination.</p>\n\n<hr>\n\n<p>The C# 2008 and 2010 compiler produce very similar code, however this looks like a regression from the C# 2005 compiler (8.00.50727.4927) which generates the following code for the above:</p>\n\n<pre><code>A? a = x;\nB? b = a.HasValue ? new B?(a.GetValueOrDefault()) : y;\nC? first = b.HasValue ? new C?(b.GetValueOrDefault()) : z;\n</code></pre>\n\n<p>I wonder if this is not due to the additional <em>magic</em> given to the type inference system?</p>\n", "is_accepted": false, "tags": [], "answer_id": 6256874, "down_vote_count": 0, "last_activity_date": 1307453874, "comments": [{"body": "+1 for going to the spec.", "edited": false, "comment_id": 7298808, "creation_date": 1307392189, "score": 2, "owner": {"display_name": "Rusty", "reputation": 2227, "user_id": 326604, "user_type": "registered"}}, {"body": "+1, but I don&#39;t think it really explains why the conversion is performed twice. It should only be evaluating the expression once, IMO.", "edited": false, "comment_id": 7299523, "creation_date": 1307394725, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon: I&#39;ve been playing around and found (as @configurator did) that when done in an Expression Tree it works as expected. Working on cleaning up the expressions to add it to my post. I would have to posit then that this is a &quot;bug&quot;.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 7299592, "creation_date": 1307394954, "score": 0, "owner": {"display_name": "user7116", "reputation": 43448, "user_id": 7116, "user_type": "registered", "accept_rate": 100}}, {"body": "@Jon: ok when using Expression Trees it turns <code>(x ?? y) ?? z</code> into nested lambdas, which ensures in-order evaluation without double evaluation. This is obviously not the approach taken by the C# 4.0 compiler. From what I can tell, section 6.1.4 is approached in a very strict manner in this particular code path and the temporaries are not elided resulting in the double evaluation.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 7302644, "creation_date": 1307414234, "score": 0, "owner": {"display_name": "user7116", "reputation": 43448, "user_id": 7116, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1307387723, "comment_count": 4, "score": 43, "owner": {"display_name": "user7116", "reputation": 43448, "user_id": 7116, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "user7116", "reputation": 43448, "user_id": 7116, "user_type": "registered", "accept_rate": 100}, "last_edit_date": 1307453874, "up_vote_count": 43}, {"body": "<pre><code>Console.WriteLine(\"First case\");\n    A? a2 = a;\n    B? b2 = a2.HasValue ? new B?(a.Value) : b;\n    if (b2.HasValue)\n    {\n        a2 = a;\n        B? b3 = a2.HasValue ? new B?(a.Value) : b;\n        new C?(b3.Value);\n    }\n    Console.WriteLine(\"Second case\");\n    a2 = a;\n    B? b4 = a2.HasValue ? new B?(a.Value) : b;\n    b2 = b4;\n    C? arg_FB_0 = b2.HasValue ? new C?(b4.Value) : c;\n    Console.WriteLine(\"Third case\");\n    a2 = a;\n    b2 = (a2.HasValue ? new B?(a.Value) : b);\n    C? c3 = new C?(b2.HasValue ? b2.GetValueOrDefault() : c2);\n</code></pre>\n\n<p>Answer is in decompiled code.\nIt is evaluating first expression twice.\nI don't see any reason to re-evaluate the expression again.\nI'd call it a bug.</p>\n", "answer_id": 6256942, "tags": [], "down_vote_count": 0, "last_activity_date": 1307388184, "creation_date": 1307388184, "comment_count": 0, "score": 11, "owner": {"display_name": "Hasan Khan", "reputation": 22681, "user_id": 36464, "user_type": "registered", "accept_rate": 98}, "is_accepted": false, "up_vote_count": 11}, {"body": "<p>Actually, I'll call this a bug now, with the clearer example.  This still holds, but the double-evaluation is certainly not good.</p>\n\n<p>It seems as though <code>A ?? B</code> is implemented as <code>A.HasValue ? A : B</code>. In this case, there's a lot of casting too (following the regular casting for the ternary <code>?:</code> operator).  But if you ignore all that, then this makes sense based on how it's implemented:</p>\n\n<ol>\n<li><code>A ?? B</code>  expands to <code>A.HasValue ? A : B</code></li>\n<li><code>A</code> is our  <code>x ?? y</code>.  Expand to <code>x.HasValue : x ? y</code></li>\n<li>replace all occurrences of A ->  <code>(x.HasValue : x ? y).HasValue ? (x.HasValue : x ? y) : B</code></li>\n</ol>\n\n<p>Here you can see that <code>x.HasValue</code> is checked twice, and if <code>x ?? y</code> requires casting, <code>x</code> will be cast twice.</p>\n\n<p><strike>I'd put it down simply as an artifact of how <code>??</code> is implemented, rather than a compiler bug. </strike>   Take-Away: Don't create implicit casting operators with side effects. </p>\n\n<p>It seems to be a compiler bug revolving around how <code>??</code> is implemented.  Take-away: don't nest coalescing expressions with side-effects.</p>\n", "is_accepted": false, "tags": [], "answer_id": 6257101, "down_vote_count": 0, "last_activity_date": 1307404287, "comments": [{"body": "+1 for your take-away advice.", "edited": false, "comment_id": 7298242, "creation_date": 1307390228, "score": 2, "owner": {"display_name": "Daniel Pryden", "reputation": 26422, "user_id": 128397, "user_type": "registered", "accept_rate": 90}}, {"body": "Oh I definitely wouldn&#39;t want to use code like this normally, but I think it <i>could</i> still be classed as a compiler bug in that your first expansion should include &quot;but only evaluating A and B once&quot;. (Imagine if they were method calls.)", "edited": false, "comment_id": 7299536, "creation_date": 1307394782, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon I agree that it could be as well - but I wouldn&#39;t call it clear-cut.   Well, actually, I can see that <code>A() ? A() : B()</code> will possibly evaluate <code>A()</code> twice, but <code>A() ?? B()</code> not so much.  And since it only happens on casting...   Hmm.. I&#39;ve just talked myself into thinking it is certainly not behaving correctly.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 7300374, "creation_date": 1307398168, "score": 0, "owner": {"display_name": "Philip Rieck", "reputation": 24222, "user_id": 12643, "user_type": "registered"}}], "creation_date": 1307389228, "comment_count": 3, "score": 8, "owner": {"display_name": "Philip Rieck", "reputation": 24222, "user_id": 12643, "user_type": "registered"}, "last_editor": {"display_name": "Philip Rieck", "reputation": 24222, "user_id": 12643, "user_type": "registered"}, "last_edit_date": 1307404287, "up_vote_count": 8}, {"body": "<p>This is most definitely a bug.</p>\n\n<pre><code>public class Program {\n    static A? X() {\n        Console.WriteLine(\"X()\");\n        return new A();\n    }\n    static B? Y() {\n        Console.WriteLine(\"Y()\");\n        return new B();\n    }\n    static C? Z() {\n        Console.WriteLine(\"Z()\");\n        return new C();\n    }\n\n    public static void Main() {\n        C? test = (X() ?? Y()) ?? Z();\n    }\n}\n</code></pre>\n\n<p>This code will output:</p>\n\n<pre><code>X()\nX()\nA to B (0)\nX()\nX()\nA to B (0)\nB to C (0)\n</code></pre>\n\n<p>That made me think that the first part of each <code>??</code> coalesce expression is evaluated twice.\nThis code proved it:</p>\n\n<pre><code>B? test= (X() ?? Y());\n</code></pre>\n\n<p>outputs:</p>\n\n<pre><code>X()\nX()\nA to B (0)\n</code></pre>\n\n<p>This seems to happen only when the expression requires a conversion between two nullable types; I've tried various permutations with one of the sides being a string, and none of them caused this behaviour.</p>\n", "is_accepted": false, "tags": [], "answer_id": 6257523, "down_vote_count": 0, "last_activity_date": 1307457180, "comments": [{"body": "Wow - evaluating the expression twice seems very wrong indeed. Well spotted.", "edited": false, "comment_id": 7299566, "creation_date": 1307394862, "score": 9, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "It&#39;s slightly simpler to see if you only have <i>one</i> method call in the source - but that still demonstrates it very clearly.", "edited": false, "comment_id": 7299585, "creation_date": 1307394919, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I&#39;ve added a slightly simpler example of this &quot;double evaluation&quot; to my question.", "edited": false, "comment_id": 7300332, "creation_date": 1307397951, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Are all your methods supposed to be outputting &quot;X()&quot;? It makes it somewhat difficult to tell what method is actually outputting to the console.", "edited": false, "comment_id": 7300791, "creation_date": 1307400089, "score": 7, "owner": {"display_name": "jeffora", "reputation": 2196, "user_id": 172905, "user_type": "registered", "accept_rate": 87}}, {"body": "@jeffora: Whoops! Luckily my conclusions were right even though my experiment was wrong; I updatd the methods to output their names correctly (and checked that I still only get <code>X()</code>s in the output).", "edited": false, "reply_to_user": {"display_name": "jeffora", "reputation": 2196, "user_id": 172905, "user_type": "registered", "accept_rate": 87}, "comment_id": 7311914, "creation_date": 1307457229, "score": 0, "owner": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}}, {"body": "It would seem <code>X() ?? Y()</code> expands internally to <code>X() != null ? X() : Y()</code>, hence why it would be evaluated twice.", "edited": false, "comment_id": 18076014, "creation_date": 1352260206, "score": 1, "owner": {"display_name": "Cole Johnson", "reputation": 3933, "user_id": 1350209, "user_type": "registered", "accept_rate": 100}}, {"body": "@ColeJohnson: Yes, that&#39;s exactly what I meant.", "edited": false, "reply_to_user": {"display_name": "Cole Johnson", "reputation": 3933, "user_id": 1350209, "user_type": "registered", "accept_rate": 100}, "comment_id": 18086835, "creation_date": 1352291984, "score": 0, "owner": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}}], "creation_date": 1307391461, "comment_count": 7, "score": 59, "owner": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}, "last_editor": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}, "last_edit_date": 1307457180, "up_vote_count": 59}, {"body": "<p>I am not a C# expert at all as you can see from my question history, but, I tried this out and I think it is a bug.... but as a newbie, I have to say that I do not understand everything going on here so I will delete my answer if I am way off.</p>\n\n<p>I have come to this <code>bug</code> conclusion by making a different version of your program which deals with the same scenario, but much less complicated.</p>\n\n<p>I am using three null integer properties with backing stores. I set each to 4 and then run <code>int? something2 = (A ?? B) ?? C;</code></p>\n\n<p>(<a href=\"http://pastebin.com/5WxfHwYJ\" rel=\"nofollow\">Full code here</a>)</p>\n\n<p>This just reads the A and nothing else.</p>\n\n<p>This statement to me looks like to me it should:</p>\n\n<ol>\n<li>Start in the brackets, look at A, return A and finish if A is not null.</li>\n<li>If A was null, evaluate B, finish if B is not null</li>\n<li>If A and B were null, evaluate C.</li>\n</ol>\n\n<p>So, as A is not null, it only looks at A and finishes.</p>\n\n<p>In your example, putting a breakpoint at the First Case shows that x, y and z are all not null and therefore, I would expect them to be treated the same as my less complex example.... but I fear I am too much of a C# newbie and have missed the point of this question completely!</p>\n", "answer_id": 6257737, "tags": [], "down_vote_count": 1, "last_activity_date": 1307392485, "comments": [{"body": "Jon&#39;s example is somewhat of an obscure corner case in that he is using a nullable struct (a value-type which is &quot;similar&quot; to the built-in types like an <code>int</code>). He pushes the case further into an obscure corner by providing multiple implicit type conversions. This requires the compiler to change the <i>type</i> of the data while checking against <code>null</code>. It is because of these implicit type conversions that his example is different from yours.", "edited": false, "reply_to_user": {"display_name": "Wil", "reputation": 3212, "user_id": 1205001, "user_type": "registered", "accept_rate": 55}, "comment_id": 7299190, "creation_date": 1307393472, "score": 4, "owner": {"display_name": "user7116", "reputation": 43448, "user_id": 7116, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1307392485, "comment_count": 1, "score": 2, "owner": {"display_name": "Wil", "reputation": 3212, "user_id": 1205001, "user_type": "registered", "accept_rate": 55}, "is_accepted": false, "up_vote_count": 3}, {"body": "<p>Thanks to everyone who contributed to analyzing this issue. It is clearly a compiler bug. It appears to only happen when there is a lifted conversion involving two nullable types on the left-hand side of the coalescing operator.</p>\n\n<p>I have not yet identified where precisely things go wrong, but at some point during the \"nullable lowering\" phase of compilation -- after initial analysis but before code generation -- we reduce the expression</p>\n\n<pre><code>result = Foo() ?? y;\n</code></pre>\n\n<p>from the example above to the moral equivalent of:</p>\n\n<pre><code>A? temp = Foo();\nresult = temp.HasValue ? \n    new int?(A.op_implicit(Foo().Value)) : \n    y;\n</code></pre>\n\n<p>Clearly that is incorrect; the correct lowering is</p>\n\n<pre><code>result = temp.HasValue ? \n    new int?(A.op_implicit(temp.Value)) : \n    y;\n</code></pre>\n\n<p>My best guess based on my analysis so far is that the nullable optimizer is going off the rails here. We have a nullable optimizer that looks for situations where we know that a particular expression of nullable type cannot possibly be null. Consider the following naive analysis: we might first say that </p>\n\n<pre><code>result = Foo() ?? y;\n</code></pre>\n\n<p>is the same as</p>\n\n<pre><code>A? temp = Foo();\nresult = temp.HasValue ? \n    (int?) temp : \n    y;\n</code></pre>\n\n<p>and then we might say that</p>\n\n<pre><code>conversionResult = (int?) temp \n</code></pre>\n\n<p>is the same as</p>\n\n<pre><code>A? temp2 = temp;\nconversionResult = temp2.HasValue ? \n    new int?(op_Implicit(temp2.Value)) : \n    (int?) null\n</code></pre>\n\n<p>But the optimizer can step in and say \"whoa, wait a minute, we already checked that temp is not null; there's no need to check it for null a second time just because we are calling a lifted conversion operator\".  We'd them optimize it away to just</p>\n\n<pre><code>new int?(op_Implicit(temp2.Value)) \n</code></pre>\n\n<p>My guess is that we are somewhere caching the fact that the optimized form of <code>(int?)Foo()</code> is <code>new int?(op_implicit(Foo().Value))</code> but that is not actually the optimized form we want; we want the optimized form of Foo()-replaced-with-temporary-and-then-converted.</p>\n\n<p>Many bugs in the C# compiler are a result of bad caching decisions. A word to the wise: <strong>every time you cache a fact for use later, you are potentially creating an inconsistency should something relevant change</strong>. In this case the relevant thing that has changed post initial analysis is that the call to Foo() should always be realized as a fetch of a temporary.</p>\n\n<p>We did a lot of reorganization of the nullable rewriting pass in C# 3.0. The bug reproduces in C# 3.0 and 4.0 but not in C# 2.0, which means that the bug was probably my bad. Sorry!</p>\n\n<p>I'll get a bug entered into the database and we'll see if we can get this fixed up for a future version of the language. Thanks again everyone for your analysis; it was very helpful!</p>\n", "is_accepted": true, "tags": [], "answer_id": 6271607, "down_vote_count": 0, "last_activity_date": 1307484789, "comments": [{"body": "@Eric I wonder if this would also explain: <a href=\"http://connect.microsoft.com/VisualStudio/feedback/details/642227/\" rel=\"nofollow\">connect.microsoft.com/VisualStudio/feedback/details/642227</a>", "edited": false, "comment_id": 11457040, "creation_date": 1328209766, "score": 1, "owner": {"display_name": "Mark", "reputation": 9800, "user_id": 190371, "user_type": "registered", "accept_rate": 73}}, {"body": "Now that I have the End User Preview of Roslyn, I can confirm that it&#39;s fixed there. (It&#39;s still present in the native C# 5 compiler though.)", "edited": false, "comment_id": 35144728, "creation_date": 1397210372, "score": 5, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1307480469, "comment_count": 2, "score": 316, "owner": {"display_name": "Eric Lippert", "reputation": 354565, "user_id": 88656, "user_type": "registered"}, "last_editor": {"display_name": "Eric Lippert", "reputation": 354565, "user_id": 88656, "user_type": "registered"}, "last_edit_date": 1307484789, "up_vote_count": 316}], "last_editor": {"display_name": "royhowie", "reputation": 5432, "user_id": 2476755, "user_type": "registered", "accept_rate": 91}, "down_vote_count": 1, "close_vote_count": 0, "question_id": 6256847}, {"last_activity_date": 1437076348, "accepted_answer_id": 29161703, "creation_date": 1426158046, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1426166542, "favorite_count": 24, "view_count": 11623, "delete_vote_count": 0, "title": "How can I diagnose missing dependencies (or other loader failures) in dnx?", "comments": [{"body": "out of curiosity, did you mean to link to <a href=\"https://github.com/aspnet/Home/wiki/Assembly-Neutral-Interfaces\" rel=\"nofollow\">github.com/aspnet/Home/wiki/Assembly-Neutral-Interfaces</a> for your assembly neutral interfaces link or somewhere else? As it is currently broken", "edited": false, "comment_id": 46261753, "creation_date": 1426158775, "score": 0, "owner": {"display_name": "cgijbels", "reputation": 1899, "user_id": 942416, "user_type": "registered"}}, {"body": "@cgijbels: Thanks - I actually meant to link to <a href=\"http://davidfowl.com/assembly-neutral-interfaces/\" rel=\"nofollow\">davidfowl.com/assembly-neutral-interfaces</a> but your link it probably better...", "edited": false, "reply_to_user": {"display_name": "cgijbels", "reputation": 1899, "user_id": 942416, "user_type": "registered"}, "comment_id": 46261991, "creation_date": 1426159153, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet assembly neutral interfaces are now gone.", "edited": false, "comment_id": 46262189, "creation_date": 1426159473, "score": 0, "owner": {"display_name": "tugberk", "reputation": 22666, "user_id": 463785, "user_type": "registered", "accept_rate": 83}}, {"body": "@tugberk: Gosh, really? That&#39;s interesting - do you have a link I could include in an edit?", "edited": false, "reply_to_user": {"display_name": "tugberk", "reputation": 22666, "user_id": 463785, "user_type": "registered", "accept_rate": 83}, "comment_id": 46262275, "creation_date": 1426159638, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet <a href=\"https://github.com/aspnet/Configuration/commit/9c281f3c0953e4fad8456f5756b13a7f1a510b65\" rel=\"nofollow\">github.com/aspnet/Configuration/commit/&hellip;</a> maybe? :)", "edited": false, "comment_id": 46262324, "creation_date": 1426159726, "score": 0, "owner": {"display_name": "tugberk", "reputation": 22666, "user_id": 463785, "user_type": "registered", "accept_rate": 83}}, {"body": "@tugberk: Well that shows its <i>use</i> being removed in a few places - that&#39;s not the same thing as saying that the whole concept is gone. I believe you that it may well have gone, but it would be nice to see some documentation around that...", "edited": false, "reply_to_user": {"display_name": "tugberk", "reputation": 22666, "user_id": 463785, "user_type": "registered", "accept_rate": 83}, "comment_id": 46262577, "creation_date": 1426160122, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet I agree. I found a better one :) <a href=\"https://twitter.com/ameyergleaves/status/566176968962355200\" rel=\"nofollow\">twitter.com/ameyergleaves/status/566176968962355200</a> no docs that I am aware of.", "edited": false, "comment_id": 46266762, "creation_date": 1426166447, "score": 0, "owner": {"display_name": "tugberk", "reputation": 22666, "user_id": 463785, "user_type": "registered", "accept_rate": 83}}, {"body": "@tugberk: Thanks. Edited.", "edited": false, "reply_to_user": {"display_name": "tugberk", "reputation": 22666, "user_id": 463785, "user_type": "registered", "accept_rate": 83}, "comment_id": 46266833, "creation_date": 1426166548, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Assembly loading failures like you show in your question are in my experience usually due to your DNX and/or your packages being from different build versions. Verifying that the packages downloaded by kpm restore are all the same version, and that this version matches your DNX should be your first step towards debugging these. I&#39;m not sure what the dependency resolving mechanism does when it can&#39;t find the 1.0.0-beta4 package version. No package like that exists, so it should have failed. Sounds a bit like a bug to me?", "edited": false, "comment_id": 46269422, "creation_date": 1426169963, "score": 0, "owner": {"display_name": "AndersNS", "reputation": 1236, "user_id": 2528440, "user_type": "registered"}}, {"body": "@AndersNS: No, the packages <i>do</i> exist, in the nightly build repo. <a href=\"https://www.myget.org/gallery/aspnetvnext\" rel=\"nofollow\">myget.org/gallery/aspnetvnext</a>", "edited": false, "reply_to_user": {"display_name": "AndersNS", "reputation": 1236, "user_id": 2528440, "user_type": "registered"}, "comment_id": 46269451, "creation_date": 1426170006, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Packages versioned with &quot;1.0.0-beta4-<i>buildnumber</i>&quot; exists. I can&#39;t see &quot;1.0.0-beta4&quot; up there. Packages without a build number won&#39;t be released until beta4 is deemed &quot;stable-ish&quot; and merged into master, if they do it like they did for beta3, beta 2 and beta1.", "edited": false, "comment_id": 46270004, "creation_date": 1426170720, "score": 0, "owner": {"display_name": "AndersNS", "reputation": 1236, "user_id": 2528440, "user_type": "registered"}}, {"body": "@AndersNS: I see what you mean. As noted in my answer, I don&#39;t fully understand how the version number is resolved in that case, but it <i>is</i> resolved, e.g. as 1.0.0-beta4-11185", "edited": false, "reply_to_user": {"display_name": "AndersNS", "reputation": 1236, "user_id": 2528440, "user_type": "registered"}, "comment_id": 46270085, "creation_date": 1426170839, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "comment_count": 12, "score": 63, "body": "<p>I'm trying to run a modified version of the <a href=\"https://github.com/aspnet/Home/tree/master/samples/HelloWeb\">HelloWeb sample</a> for ASP.NET vNext on DNX using Kestrel. I understand that this is <em>very</em> much on the bleeding edge, but I would hope that the ASP.NET team would at least keep the simplest possible web app working :)</p>\n\n<p>Environment:</p>\n\n<ul>\n<li>Linux (Ubuntu, pretty much)</li>\n<li>Mono 3.12.1</li>\n<li>DNX 1.0.0-beta4-11257 (I have 11249 available too)</li>\n</ul>\n\n<p>\"Web app\" code, in <code>Startup.cs</code>:</p>\n\n<pre><code>using Microsoft.AspNet.Builder;\npublic class Startup\n{\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseWelcomePage();\n    }\n}\n</code></pre>\n\n<p>Project config, in <code>project.json</code>:</p>\n\n<pre><code>{\n  \"dependencies\": {\n    \"Kestrel\": \"1.0.0-beta4\",\n    \"Microsoft.AspNet.Diagnostics\": \"1.0.0-beta4\",\n    \"Microsoft.AspNet.Hosting\": \"1.0.0-beta4\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-beta4\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-beta4\",\n    \"Microsoft.Framework.Runtime\": \"1.0.0-beta4\",\n    \"Microsoft.Framework.Runtime.Common\": \"1.0.0-beta4\",\n    \"Microsoft.Framework.Runtime.Loader\": \"1.0.0-beta4\",\n    \"Microsoft.Framework.Runtime.Interfaces\": \"1.0.0-beta4\",\n  },\n  \"commands\": {\n    \"kestrel\": \"Microsoft.AspNet.Hosting --server Kestrel --server.urls http://localhost:5004\"\n  },\n  \"frameworks\": {\n    \"dnx451\": {}\n  }\n}\n</code></pre>\n\n<p><code>kpm restore</code> appears to work fine.</p>\n\n<p>When I try to run, however, I get an exception suggesting that <code>Microsoft.Framework.Runtime.IApplicationEnvironment</code> can't be found. Command line and error (somewhat reformatted)</p>\n\n<pre><code>.../HelloWeb$ dnx . kestrel\nSystem.IO.FileNotFoundException: Could not load file or assembly \n'Microsoft.Framework.Runtime.IApplicationEnvironment,\n  Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'\nor one of its dependencies.\nFile name: 'Microsoft.Framework.Runtime.IApplicationEnvironment,\n  Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'\n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke \n    (System.Reflection.MonoMethod,object,object[],System.Exception&amp;)\n  at System.Reflection.MonoMethod.Invoke \n    (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder,\n     System.Object[] parameters, System.Globalization.CultureInfo culture)\n    [0x00000] in &lt;filename unknown&gt;:0\n</code></pre>\n\n<p>While obviously my most pressing need is to fix this, I'd also appreciate advice on how to move diagnose what's going wrong so I can fix similar issues myself in the future. (That's also likely to make this question more useful to others, too.)</p>\n\n<p>I've found <code>Microsoft.Framework.Runtime.IApplicationEnvironment</code> in the <a href=\"https://github.com/aspnet/DNX/blob/dev/src/Microsoft.Framework.Runtime.Interfaces/IApplicationEnvironment.cs\"><code>Microsoft.Framework.Runtime.Interfaces</code> assembly source</a>, and that doesn't appear to have changed recently. It's not clear why the exception shows the name as if it's a whole assembly in itself, rather than just an interface within another assembly. <strike>I'm guessing this <em>may</em> be due to <a href=\"https://github.com/aspnet/Home/wiki/Assembly-Neutral-Interfaces\">assembly neutral interfaces</a>, but it's not clear from the error.</strike> (<a href=\"https://github.com/aspnet/DNX/commit/5f8bf5614d04b82dc69aedf48a5b2f832f00ca8f\"><code>[AssemblyNeutral]</code> is dead, so that's not it...</a>)</p>\n", "is_answered": true, "up_vote_count": 64, "tags": ["asp.net-5", "dnx"], "reopen_vote_count": 0, "answer_count": 5, "answers": [{"body": "<p>To get it to work I modified my <code>project.json</code> .. it now looks like:</p>\n\n<pre><code>{\n\"dependencies\": {\n    \"Kestrel\": \"1.0.0-*\",\n    \"Microsoft.AspNet.Diagnostics\": \"1.0.0-*\",\n    \"Microsoft.AspNet.Hosting\": \"1.0.0-*\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-*\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-*\"\n},\n\"commands\": {\n    \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5001\",\n    \"kestrel\": \"Microsoft.AspNet.Hosting --server Kestrel --server.urls http://localhost:5004\"\n},\n\"frameworks\": {\n    }\n}\n</code></pre>\n\n<p>The key seemed to be the frameworks section.</p>\n\n<p>Also the rename changed how <code>k web</code> works so that its now <code>dnx . web</code> or <code>dnx . kestrel</code></p>\n\n<p><strong>Update - bit more info</strong></p>\n\n<p>Oddly, after running with no frameworks defined it went and got a bunch of extra stuff when I did <code>kpm restore</code> :</p>\n\n<pre><code>...\nInstalling Microsoft.Framework.Logging 1.0.0-beta4-11001\nInstalling Microsoft.Framework.Logging.Interfaces 1.0.0-beta4-11001\nInstalling Microsoft.Framework.DependencyInjection.Interfaces 1.0.0-beta4-11010\nInstalling Microsoft.Framework.DependencyInjection 1.0.0-beta4-11010\nInstalling Microsoft.Framework.ConfigurationModel 1.0.0-beta4-10976\nInstalling Microsoft.Framework.ConfigurationModel.Interfaces 1.0.0-beta4-10976\nInstalling Microsoft.AspNet.Hosting.Interfaces 1.0.0-beta4-11328\nInstalling Microsoft.AspNet.FeatureModel 1.0.0-beta4-11104\nInstalling Microsoft.AspNet.Http 1.0.0-beta4-11104\nInstalling Microsoft.AspNet.FileProviders.Interfaces 1.0.0-beta4-11006\nInstalling Microsoft.Framework.Caching.Interfaces 1.0.0-beta4-10981\nInstalling Microsoft.AspNet.FileProviders 1.0.0-beta4-11006\nInstalling Microsoft.AspNet.Http.Core 1.0.0-beta4-11104\nInstalling Microsoft.AspNet.WebUtilities 1.0.0-beta4-11104\nInstalling Microsoft.Net.Http.Headers 1.0.0-beta4-11104\nInstalling Microsoft.AspNet.Http.Interfaces 1.0.0-beta4-11104\nInstalling Microsoft.Framework.Runtime.Interfaces 1.0.0-beta4-11257\nInstalling Microsoft.AspNet.Server.Kestrel 1.0.0-beta4-11262\nInstalling Microsoft.Net.Http.Server 1.0.0-beta4-11698\nInstalling Microsoft.Net.WebSockets 1.0.0-beta4-11698\nInstalling Microsoft.Net.WebSocketAbstractions 1.0.0-beta4-10915\nInstalling Microsoft.Framework.WebEncoders 1.0.0-beta4-11104\nInstalling Microsoft.Framework.OptionsModel 1.0.0-beta4-10984\nInstalling Microsoft.AspNet.Http.Extensions 1.0.0-beta4-11104\nInstalling Microsoft.AspNet.Diagnostics.Interfaces 1.0.0-beta4-12451\nInstalling Microsoft.AspNet.RequestContainer 1.0.0-beta4-11328\n</code></pre>\n\n<p>.. then it ran fine. Then I switched back in the framework section</p>\n\n<pre><code>\"frameworks\": {\n    \"dnx451\": {}\n}\n</code></pre>\n\n<p>.. and it still worked, whereas before it would throw up an error !</p>\n\n<p>Very odd!</p>\n\n<p>(Im running <code>1.0.0-beta4-11257</code>)</p>\n\n<p><strong>Further update</strong></p>\n\n<p>I spun up a new Ubuntu instance, and got the same error as you .. My thought was that the issue may be caused by it only trying to get packages from <code>nuget.org</code> and not <code>myget.org</code> (which has the newer things) so i dropped in a <code>NuGet.Config</code> into the root of the project..</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;configuration&gt;\n  &lt;packageSources&gt;\n    &lt;add key=\"AspNetVNext\" value=\"https://www.myget.org/F/aspnetvnext/\" /&gt;\n    &lt;add key=\"NuGet\" value=\"https://nuget.org/api/v2/\" /&gt;\n  &lt;/packageSources&gt;\n&lt;/configuration&gt;\n</code></pre>\n\n<p>.. this seems to have fixed it for me by getting the correct versions (after another <code>kpm restore</code>).</p>\n", "is_accepted": false, "tags": [], "answer_id": 29008409, "down_vote_count": 0, "last_activity_date": 1426163465, "comments": [{"body": "Re the &quot;dnx . kestrel&quot; part - indeed, hence the command I showed :) With that config, I get a different error: System.TypeLoadException: Could not load type &#39;Microsoft.Framework.DependencyInjection.LoggingServiceCollectionExtensions&#39; from assembly &#39;Microsoft.Framework.Logging, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&#39;. Which version of DNX are you using?", "edited": false, "comment_id": 46262223, "creation_date": 1426159527, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "When i did &quot;dnx . web&quot; the first time i got: `System.InvalidOperationException: Failed to resolve the following dependencies for target framework &#39;DNX,Version=v4.5.1&#39; and it suggested  a  list of the things it was missing.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 46262656, "creation_date": 1426160264, "score": 1, "owner": {"display_name": "Stephen Pope", "reputation": 2756, "user_id": 930716, "user_type": "registered"}}, {"body": "Interesting. What platform is this on, btw?", "edited": false, "comment_id": 46262703, "creation_date": 1426160333, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Did you do &#39;source ~/.bashrc&#39; to reload the environment variables after you upgraded DNX ? Also I had to do &quot;dnvm upgrade&quot; + &quot;dnvm use default&quot;", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 46262723, "creation_date": 1426160368, "score": 0, "owner": {"display_name": "Stephen Pope", "reputation": 2756, "user_id": 930716, "user_type": "registered"}}, {"body": "DNX hadn&#39;t updated by .bashrc... possibly because I built it manually yesterday. Will try using the updated instructions instead...", "edited": false, "comment_id": 46262754, "creation_date": 1426160429, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Hmm... from a fresher install, and after reconfiguring a bit, I&#39;m definitely making more progress - I&#39;m now down to the &quot;regular&quot; libuv issues. Looks like there are a bunch of things that can interact together.", "edited": false, "comment_id": 46263122, "creation_date": 1426160988, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I&#39;m going through a clean/test/tweak cycle at the moment - I believe it&#39;s removing the beta4 from your version numbers that actually makes the difference. Still testing though.", "edited": false, "comment_id": 46263328, "creation_date": 1426161306, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "See my self-answer for more details as to what I was doing wrong.", "edited": false, "comment_id": 46265150, "creation_date": 1426164086, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1426159243, "comment_count": 8, "score": 3, "owner": {"display_name": "Stephen Pope", "reputation": 2756, "user_id": 930716, "user_type": "registered"}, "last_editor": {"display_name": "Stephen Pope", "reputation": 2756, "user_id": 930716, "user_type": "registered"}, "last_edit_date": 1426163465, "up_vote_count": 3}, {"body": "<p>I still don't know <em>entirely</em> what was wrong, but I now have a series of steps to at least make it easier to try things:</p>\n\n<ul>\n<li>When in doubt, reinstall dnx\n<ul>\n<li>Blowing away the package cache can be helpful</li>\n</ul></li>\n<li>Check <code>~/.config/NuGet.config</code> to ensure you're using the right NuGet feeds</li>\n</ul>\n\n<p>I ended up using the following command line to test various options in a reasonably clean way:</p>\n\n<pre><code>rm -rf ~/.dnx/packages &amp;&amp; rm -rf ~/.dnx/runtimes &amp;&amp; dnvm upgrade &amp;&amp; kpm restore &amp;&amp; dnx . kestrel\n</code></pre>\n\n<p>It looks like my problem was really due to the wrong versions of the dependencies being installed. A version number of <code>\"1.0.0-beta4\"</code> is apparently quite different to <code>\"1.0.0-beta4-*\"</code>. For example, the <code>Kestrel</code> dependency installed version 1.0.0-beta4-11185 when just specified as <code>1.0.0-beta4</code>, but version 1.0.0-beta4-11262 with the <code>-*</code> at the end. I wanted to specify <code>beta4</code> explicitly to avoid accidentally using a beta3 build with the </p>\n\n<p>The following project config works fine:</p>\n\n<pre><code>{\n  \"dependencies\": {\n    \"Kestrel\": \"1.0.0-beta4-*\",\n    \"Microsoft.AspNet.Diagnostics\": \"1.0.0-beta4-*\",\n    \"Microsoft.AspNet.Hosting\": \"1.0.0-beta4-*\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-beta4-*\",\n  },\n  \"commands\": {\n    \"kestrel\": \"Microsoft.AspNet.Hosting --server Kestrel --server.urls http://localhost:5004\"\n  },\n  \"frameworks\": {\n    \"dnx451\": {}\n  }\n}\n</code></pre>\n", "answer_id": 29010036, "tags": [], "down_vote_count": 0, "last_activity_date": 1426164073, "comments": [{"body": "This is because <code>-*</code> always gives you the latest prerelease version, while without it you get the lowest version that satisfies all dependencies (as is usual with NuGet). <a href=\"https://github.com/aspnet/DNX/blob/1cd7c16acf86f202b260e3da5f200f43967a4be2/test/Microsoft.Framework.Runtime.Tests/ProjectFacts.cs#L57-L94\" rel=\"nofollow\">This test</a> has a few examples.", "edited": false, "comment_id": 46270442, "creation_date": 1426171296, "score": 5, "owner": {"display_name": "Alexander K\u00f6plinger", "reputation": 1756, "user_id": 1455833, "user_type": "registered"}}, {"body": "@AlexanderK&#246;plinger: Thanks, that makes sense. So ...beta4 is the earliest beta4, while ...beta4-* is the latest beta4, right?", "edited": false, "reply_to_user": {"display_name": "Alexander K\u00f6plinger", "reputation": 1756, "user_id": 1455833, "user_type": "registered"}, "comment_id": 46270531, "creation_date": 1426171405, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "yep, that&#39;s correct.", "edited": false, "comment_id": 46271236, "creation_date": 1426172328, "score": 2, "owner": {"display_name": "Alexander K\u00f6plinger", "reputation": 1756, "user_id": 1455833, "user_type": "registered"}}, {"body": "<code>&quot;frameworks&quot;: {&quot;dnx451&quot;: {}}</code> had it fixed for me, no need for <code>dnxcore50</code>", "edited": false, "comment_id": 49547634, "creation_date": 1433904601, "score": 1, "owner": {"display_name": "vicentedealencar", "reputation": 319, "user_id": 1206743, "user_type": "registered"}}], "creation_date": 1426164073, "comment_count": 4, "score": 12, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": false, "up_vote_count": 12}, {"body": "<p>You can set an env var named <code>DNX_TRACE</code> to <code>1</code> to see a TON more diagnostic info. Be warned, it's <em>a lot</em> more info!</p>\n", "answer_id": 29022824, "tags": [], "down_vote_count": 0, "last_activity_date": 1426206626, "comments": [{"body": "Thanks, that&#39;s really good to know.", "edited": false, "comment_id": 46294659, "creation_date": 1426229120, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet BTW the other answers (including your self-answer) contain great info about diagnosing and repairing the specific problem you encountered. I kept this answer super brief because it&#39;s just another different answer that could lead to more clues as to why the problem happened in the first place.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 46294840, "creation_date": 1426229683, "score": 0, "owner": {"display_name": "Eilon", "reputation": 18236, "user_id": 31668, "user_type": "registered"}}, {"body": "Absolutely - I appreciate that :)", "edited": false, "comment_id": 46294862, "creation_date": 1426229761, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1426206626, "comment_count": 3, "score": 7, "owner": {"display_name": "Eilon", "reputation": 18236, "user_id": 31668, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 7}, {"body": "<p>Good question. For your specific problem, it looks like you have a mismatch in your resolved dependencies. When things like this happen it's likely because you're running your application on an incompatible dnx. We're still making very big breaking changes so if you ever see method missing of type missing, chances are you ended up running <code>betaX</code> packages and <code>betaY</code> dnx or vice versa.</p>\n\n<p>Even more specifically, <a href=\"http://davidfowl.com/assembly-neutral-interfaces/\">Assembly Neutral Interfaces</a> were removed in beta4 but it looks like the application you are running is still using them.</p>\n\n<p>We have plans to make it so that packages can mark the minimum dnx that they require to run to make the error message more clear. Also as time goes by, the breaking changes will die down.</p>\n\n<p>In general though, I feel like it's time I wrote a guide on how to diagnose issues like this when using the dnx (since it's pretty different to existing .NET).</p>\n\n<p>Dependencies you put into <code>project.json</code> are top level only. Versions are also <strong>always minimums</strong> (it's just like a NuGet package). This means that when you specify <code>Foo 1.0.0-beta4</code> you're really specifying <code>Foo &gt;= 1.0.0-beta4</code>. This means if you ask for <code>MVC 0.0.1</code> and the minimum versions on your configured feed is <code>MVC 3.0.0</code>, you'll get that one. We also <em>NEVER</em> float your version unless you specify it. If you ask for 1.0.0 and it exists, you will get 1.0.0 even if newer versions exist. Specifying empty versions is <em>ALWAYS</em> bad and will be disallowed in later builds.</p>\n\n<p>There's a new feature we're introducing to nuget called floating versions. Today it only works on the prerelease tag, but in the next version it'll work on more parts of the version. This is similar to npm and gem syntax for specifying version ranges in the package specification file.</p>\n\n<p><code>1.0.0-*</code> - Means give me the HIGHEST version matching the prefix (according to <a href=\"http://semver.org/\">semantic versioning rules</a>) OR if there is no version matching that prefix, use normal behavior and get me the LOWEST version >= the specified version.</p>\n\n<p>When you run restore in the latest builds, it will write out a file called <code>project.lock.json</code>. This file will have the transitive closure of dependencies for all target frameworks defined in <code>project.json</code>.</p>\n\n<p>When something like this fails you can do the following:</p>\n\n<p>Take a look at the resolved dependencies using <code>kpm list</code>. This will show you the resolved versions of packages referenced by your project and what dependency pulled it in. e.g. if A -> B, it'll show:</p>\n\n<pre>\nA\n  -> B\nB\n ->\n</pre>\n\n<p>Actual KPM list output:</p>\n\n<p>Listing dependencies for ClassLibrary39 (C:\\Users\\davifowl\\Documents\\Visual Studio 14\\Projects\\ClassLibrary39\\src\\ClassLibrary39\\project.json)</p>\n\n<pre><code>[Target framework DNX,Version=v4.5.1 (dnx451)]\n\n framework/Microsoft.CSharp 4.0.0.0\n    -&gt; ClassLibrary39 1.0.0\n framework/mscorlib 4.0.0.0\n    -&gt; ClassLibrary39 1.0.0\n framework/System 4.0.0.0\n    -&gt; ClassLibrary39 1.0.0\n framework/System.Core 4.0.0.0\n    -&gt; ClassLibrary39 1.0.0\n*Newtonsoft.Json 6.0.1\n    -&gt; ClassLibrary39 1.0.0\n\n[Target framework DNXCore,Version=v5.0 (dnxcore50)]\n\n*Newtonsoft.Json 6.0.1\n    -&gt; ClassLibrary39 1.0.0\n System.Runtime 4.0.20-beta-22709\n    -&gt; ClassLibrary39 1.0.0\n</code></pre>\n\n<p>* means direct dependency.</p>\n\n<p>If you have a working visual studio (which breaks with DNX right now), you can look at the references node. It has the same data represented visually:</p>\n\n<p><img src=\"http://i.stack.imgur.com/0twmZ.png\" alt=\"References node\"></p>\n\n<p>Let's look at what a dependency failure looks like:</p>\n\n<p>Here's the project.json</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>{\n    \"version\": \"1.0.0-*\",\n    \"dependencies\": {\n        \"Newtonsoft.Json\": \"8.0.0\"\n    },\n\n    \"frameworks\" : {\n        \"dnx451\" : { \n            \"dependencies\": {\n            }\n        },\n        \"dnxcore50\" : { \n            \"dependencies\": {\n                \"System.Runtime\": \"4.0.20-beta-22709\"\n            }\n        }\n    }\n}\n</code></pre>\n\n<p><code>Newtonsoft.Json 8.0.0</code> doesn't exist. So running kpm restore shows the following:</p>\n\n<p><img src=\"http://i.stack.imgur.com/C9bUv.png\" alt=\"enter image description here\"></p>\n\n<p>When diagnosing when restore might have failed, look at the HTTP requests made, they tell you what configured package sources kpm looked in. Notice in the above image, there is a <code>CACHE</code> request. This is the built in caching based on the type of resource (nupkg or nuspec) and has a configurable TTL (look at <code>kpm restore --help</code>). If you want to force <code>kpm</code> to hit the remote NuGet sources, use the <code>--no-cache</code> flag:</p>\n\n<p><img src=\"http://i.stack.imgur.com/yRgef.png\" alt=\"KPM restore --no-cache\"></p>\n\n<p>These errors also show up in Visual Studio in the package manager log output window:</p>\n\n<p><img src=\"http://i.stack.imgur.com/pRwNh.png\" alt=\"enter image description here\"></p>\n\n<p>Side note!</p>\n\n<h2>Package Sources</h2>\n\n<p>I'll describe the way NuGet.config works right now (which will likely change in the future). By default you have a NuGet.config with the default NuGet.org source configured globally in <code>%appdata%\\NuGet\\NuGet.Config</code>. You can manage these global sources within visual studio or with the NuGet command line tool. You should always look at your effective sources (the ones listed in the kpm output) when trying to diagnose failures. </p>\n\n<p>Read more about NuGet.config <a href=\"http://docs.nuget.org/consume/nuget-config-file\">here</a></p>\n\n<p>Back to reality:</p>\n\n<p>When dependencies are unresolved, running the application will give you this:</p>\n\n<pre><code>&gt; dnx . run\nSystem.InvalidOperationException: Failed to resolve the following dependencies for target framework 'DNX,Version=v4.5.1':\n   Newtonsoft.Json 8.0.0\n\nSearched Locations:\n  C:\\Users\\davifowl\\Documents\\Visual Studio 14\\Projects\\ClassLibrary39\\src\\{name}\\project.json\n  C:\\Users\\davifowl\\Documents\\Visual Studio 14\\Projects\\ClassLibrary39\\test\\{name}\\project.json\n  C:\\Users\\davifowl\\.dnx\\packages\\{name}\\{version}\\{name}.nuspec\n  C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5.1\\{name}.dll\n  C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5.1\\Facades\\{name}.dll\n  C:\\WINDOWS\\Microsoft.NET\\assembly\\GAC_32\\{name}\\{version}\\{name}.dll\n  C:\\WINDOWS\\Microsoft.NET\\assembly\\GAC_64\\{name}\\{version}\\{name}.dll\n  C:\\WINDOWS\\Microsoft.NET\\assembly\\GAC_MSIL\\{name}\\{version}\\{name}.dll\n\nTry running 'kpm restore'.\n\n   at Microsoft.Framework.Runtime.DefaultHost.GetEntryPoint(String applicationName)\n   at Microsoft.Framework.ApplicationHost.Program.ExecuteMain(DefaultHost host, String applicationName, String[] args)\n   at Microsoft.Framework.ApplicationHost.Program.Main(String[] args)\n</code></pre>\n\n<p>The runtime basically tries to validate that the entire dependency graph is resolved before attempting to run. If it suggests running <code>kpm restore</code> it's because it can't find the dependencies listed.</p>\n\n<p>Another reason why you might get this error is if you're running the wrong dnx flavor. If your application only specifies dnx451 and you try to run the CoreCLR dnx, you might see a similar problem. Pay close attention to the target framework in the error message:</p>\n\n<p>For running:</p>\n\n<pre><code>dnx4x - runs on dnx-clr-{etc}\ndnxcore50 - runs on dnx-coreclr-{etc}\n</code></pre>\n\n<p>When you're trying to run, you should remember that mental mapping from clr to target framework defined in your <code>project.json</code>.</p>\n\n<p>This also shows up in Visual Studio under the references node:\n<img src=\"http://i.stack.imgur.com/owSbT.png\" alt=\"Unresolved dependencies\"></p>\n\n<p>The nodes marked as yellow are unresolved. </p>\n\n<p>These also show up in the error list:</p>\n\n<p><img src=\"http://i.stack.imgur.com/hhiy7.png\" alt=\"Error list unresolved dependencies\"></p>\n\n<h2>Building</h2>\n\n<p>These errors also show up when building. When building from the command line, the output is very verbose and can be extremely useful when diagnosing problems:</p>\n\n<pre><code>&gt; kpm build\n\nBuilding ClassLibrary39 for DNX,Version=v4.5.1\n  Using Project dependency ClassLibrary39 1.0.0\n    Source: C:\\Users\\davifowl\\Documents\\Visual Studio 14\\Projects\\ClassLibrary39\\src\\ClassLibrary39\\project.json\n\n  Using Assembly dependency framework/mscorlib 4.0.0.0\n    Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5.1\\mscorlib.dll\n\n  Using Assembly dependency framework/System 4.0.0.0\n    Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5.1\\System.dll\n\n  Using Assembly dependency framework/System.Core 4.0.0.0\n    Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5.1\\System.Core.dll\n\n  Using Assembly dependency framework/Microsoft.CSharp 4.0.0.0\n    Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5.1\\Microsoft.CSharp.dll\n\n\nBuilding ClassLibrary39 for DNXCore,Version=v5.0\n  Using Project dependency ClassLibrary39 1.0.0\n    Source: C:\\Users\\davifowl\\Documents\\Visual Studio 14\\Projects\\ClassLibrary39\\src\\ClassLibrary39\\project.json\n\n  Using Package dependency System.Console 4.0.0-beta-22709\n    Source: C:\\Users\\davifowl\\.dnx\\packages\\System.Console\\4.0.0-beta-22709\n    File: lib\\contract\\System.Console.dll\n\n  Using Package dependency System.IO 4.0.10-beta-22231\n    Source: C:\\Users\\davifowl\\.dnx\\packages\\System.IO\\4.0.10-beta-22231\n    File: lib\\contract\\System.IO.dll\n\n  Using Package dependency System.Runtime 4.0.20-beta-22231\n    Source: C:\\Users\\davifowl\\.dnx\\packages\\System.Runtime\\4.0.20-beta-22231\n    File: lib\\contract\\System.Runtime.dll\n\n  Using Package dependency System.Text.Encoding 4.0.10-beta-22231\n    Source: C:\\Users\\davifowl\\.dnx\\packages\\System.Text.Encoding\\4.0.10-beta-22231\n    File: lib\\contract\\System.Text.Encoding.dll\n\n  Using Package dependency System.Threading.Tasks 4.0.10-beta-22231\n    Source: C:\\Users\\davifowl\\.dnx\\packages\\System.Threading.Tasks\\4.0.10-beta-22231\n    File: lib\\contract\\System.Threading.Tasks.dll\n</code></pre>\n\n<p>The output shows all of the assemblies passed into the compiler from packages and project references. When you start getting build failures, it's useful to look here to make sure that the package you are using actually works on that target platform.</p>\n\n<p>Here's an example of a package that doesn't work on dnxcore50:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>{\n    \"version\": \"1.0.0-*\",\n    \"dependencies\": {\n        \"Microsoft.Owin.Host.SystemWeb\": \"3.0.0\"\n    },\n\n    \"frameworks\": {\n        \"dnx451\": {\n            \"dependencies\": {\n            }\n        },\n        \"dnxcore50\": {\n            \"dependencies\": {\n                \"System.Console\": \"4.0.0-beta-22709\"\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>Microsoft.Owin.Host.SystemWeb version 3.0.0 does not have any assemblies that run on dnxcore50 (take a look at the unzipped package's lib folder). When we run <code>kpm build</code>:</p>\n\n<p><img src=\"http://i.stack.imgur.com/SsAFK.png\" alt=\"Missing assemblies on dnxcore50\"></p>\n\n<p>Notice it says \"using Package Microsoft.Owin.Host.SystemWeb\" but there is not \"File:\". This could be the reason for a build failure.</p>\n\n<p>Here ends my brain dump</p>\n", "is_accepted": true, "tags": [], "answer_id": 29161703, "down_vote_count": 0, "last_activity_date": 1427038491, "comments": [{"body": "@RyanCrawCour-MSFT No, that would be a low quality answer and would be susceptible to link-rot.", "edited": false, "reply_to_user": {"display_name": "Ryan CrawCour - MSFT", "reputation": 790, "user_id": 3908590, "user_type": "registered"}, "comment_id": 46584470, "creation_date": 1426951161, "score": 5, "owner": {"display_name": "Nit", "reputation": 6821, "user_id": 1470607, "user_type": "registered", "accept_rate": 72}}, {"body": "I&#39;m trying to use dnu list as you suggest, to determine why dnx can&#39;t resolve a dependency. But I&#39;m getting a red &quot;Unable to locate project.json&quot;. The assembly is in the artifacts folder, generated by checking &quot;Produce outputs on build&quot;. Any suggestions on how to proceed?", "edited": false, "comment_id": 50129184, "creation_date": 1435244483, "score": 0, "owner": {"display_name": "Mike Scott", "reputation": 6658, "user_id": 43649, "user_type": "registered", "accept_rate": 54}}, {"body": "What does the artifacts folder have to do with anything? Did you reference the dependency in project.json? Is that package you&#39;re referencing available on a configured feed?", "edited": false, "comment_id": 50267580, "creation_date": 1435624085, "score": 0, "owner": {"display_name": "davidfowl", "reputation": 20559, "user_id": 45091, "user_type": "registered"}}], "awarded_bounty_users": [{"display_name": "vcsjones", "reputation": 62021, "user_id": 492405, "user_type": "registered", "accept_rate": 90}], "awarded_bounty_amount": 200, "comment_count": 3, "score": 97, "owner": {"display_name": "davidfowl", "reputation": 20559, "user_id": 45091, "user_type": "registered"}, "last_editor": {"display_name": "vcsjones", "reputation": 62021, "user_id": 492405, "user_type": "registered", "accept_rate": 90}, "last_edit_date": 1427038491, "creation_date": 1426837415, "up_vote_count": 97}, {"body": "<p>I was having dependency missing issues as well with trying to appease dnxcore50 and dnx451 references.</p>\n\n<p>If I understand this right \"dependencies\": {} are shared between the frameworks. </p>\n\n<p>Then \"dependencies\":{} within the \"frameworks\": are specific to that framework.</p>\n\n<p>dnxcore50 is a modular runtime (self contained) so it basically contains all the core runtimes need to run a program unlike classic .net framework where you have core dependencies scattered about elsewhere.</p>\n\n<p>So with that said I wanted to stick to the minimal approach incase I decided to host on mac or linux at some point.</p>\n\n<p><strong>Update</strong>\nRan into weird dependency issues with cshtml views, just went with dnx451 for now.</p>\n\n<p>This is my project.json</p>\n\n<pre><code>{\n\"webroot\": \"wwwroot\",\n\"version\": \"1.0.0-*\",\n\n\"dependencies\": {\n    \"System.Runtime\": \"4.0.10\",\n    \"Microsoft.AspNet.Hosting\": \"1.0.0-beta4\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-beta4\",\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-beta6-12075\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-beta6-12457\",\n    \"Microsoft.Framework.DependencyInjection\": \"1.0.0-beta4\",\n    \"Microsoft.Framework.DependencyInjection.Interfaces\": \"1.0.0-beta5\"\n },\n\n\"commands\": {\n\"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://admin.heartlegacylocal.com\"  },\n\n\"frameworks\": {\n\"dnx451\": { }\n }\n},\n\n\"publishExclude\": [\n\"node_modules\",\n\"bower_components\",\n\"**.xproj\",\n\"**.user\",\n\"**.vspscc\"\n],\n\"exclude\": [\n  \"wwwroot\",\n  \"node_modules\",\n  \"bower_components\"\n  ]\n}\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 31459781, "down_vote_count": 0, "last_activity_date": 1437076348, "creation_date": 1437064338, "comment_count": 0, "score": 0, "owner": {"display_name": "DynamicLynk", "reputation": 393, "user_id": 1427166, "user_type": "registered"}, "last_editor": {"display_name": "DynamicLynk", "reputation": 393, "user_id": 1427166, "user_type": "registered"}, "last_edit_date": 1437076348, "up_vote_count": 0}], "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "down_vote_count": 1, "close_vote_count": 0, "question_id": 29007962}, {"last_activity_date": 1425623794, "accepted_answer_id": 28887513, "creation_date": 1425585635, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1425623794, "favorite_count": 1, "view_count": 1213, "delete_vote_count": 0, "title": "Why does adding a dependency in my Web API (ASP.NET v5) project not work fully?", "comment_count": 0, "score": 21, "body": "<p>I'm using Visual Studio 2015 CTP 6 on Windows 8.1.</p>\n\n<p>I'm trying to write a Web API using ASP.NET v5, with its new project file format. I've added a reference to Noda Time v1.3.0 to my <code>project.json</code> file, and the editor in Visual Studio picks it up, but the build process fails.</p>\n\n<p>Repro recipe, right from scratch:</p>\n\n<ul>\n<li>Open VS 2015 CTP 6</li>\n<li>Create new project in a new solution:\n<ul>\n<li>Select ASP.NET Web Application project template</li>\n<li>Select \"ASP.NET 5 Preview Web API\" in the template dialog</li>\n</ul></li>\n<li>Build the project, just to confirm everything is correct</li>\n<li><p>Open <code>project.json</code>, and in the (badly formatted) \"dependencies\" section, add an extra line at the start (to avoid having to add a comma to another line):</p>\n\n<pre><code>\"NodaTime\": \"1.3.0\",\n</code></pre></li>\n<li>Open <code>Controllers\\ValuesController.cs</code></li>\n<li><p>Edit the parameterless <code>Get()</code> method so that the body is:</p>\n\n<pre><code>return DateTimeZoneProviders.Tzdb.Ids;\n</code></pre>\n\n<ul>\n<li><code>DateTimeZoneProviders</code> will have red squiggles, which is reasonable - we don't have a <code>using</code> directive yet.</li>\n</ul></li>\n<li>Put the cursor in <code>DateTimeZoneProviders</code> and hit <kbd>Ctrl</kbd>+<kbd>.</kbd> - you should be offered \"<code>using NodaTime;</code>\" as a potential fix... so Intellisense (and thus Roslyn) definitely knows about the dependency.</li>\n<li>Accept the fix. The squiggles will go away - all is well, right?</li>\n<li>Try to build the solution: you should get two errors, basically indicating that the dependency <em>hasn't</em> been resolved.</li>\n</ul>\n\n<p>In Explorer, if you look in the <code>BugDemo</code> solution directory, you'll find an <code>artifacts\\obj\\BugDemo\\Debug\\ProjectRawReferences</code> directory containing \"ASP.NET Core 5.0\" and \"ASP.NET 5.0\" directories, both of which have a lot of DLLs in... but not Noda Time.</p>\n\n<p>Right-clicking on the project and selecting \"Restore packages\" doesn't fix this.</p>\n\n<p>When I build the same project using Project K, a <code>kpm restore</code> <em>does</em> pick up Noda Time, and if you add a section to <code>project.json</code> as below, then <code>k web</code> works and visiting <a href=\"http://localhost:5001/api/values\">http://localhost:5001/api/values</a> will show you all the TZDB time zone IDs:</p>\n\n<pre><code>\"commands\": {\n  \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5001\"\n},\n</code></pre>\n\n<p>So, what am I doing wrong? Or is it just a bug?</p>\n", "is_answered": true, "up_vote_count": 21, "tags": ["c#", "asp.net-web-api", "asp.net-5", "visual-studio-2015"], "reopen_vote_count": 0, "answers": [{"body": "<p>When you build, check out the \"Project\" column - it notes that the build that is failing is \"ASP.NET Core 5.0\" (not \"ASP.NET 5.0\"). In the upper left dropdown of the code editor, you can choose different views - if you select the \"ASP.NET Core 5.0\" one, you'll see that the NodaTime namespace is undefined.</p>\n\n<p>It looks like the new ASP.NET project templates are creating multi-targeted apps, both aspnet50 and aspnetcore50.</p>\n\n<p>ASP.NET 5.0 is (currently) based on .NET 4.5.x, so the NodaTime portable (net4) satisfies that platform. ASP.NET Core 5.0 is based on the new CoreClr (aspnetcore50), and there's no binaries in the NodaTime library that support it.</p>\n\n<p>To resolve, you can just drop support for CoreClr in your application by removing the \"aspnetcore50\" entry in project.json under \"frameworks\":</p>\n\n<pre><code>\"frameworks\": {\n    \"aspnet50\": { }\n    //\"aspnetcore50\": { }\n},\n</code></pre>\n\n<p>Now your app should build just targeting ASP.NET 5.0 and not the CoreClr.</p>\n", "is_accepted": true, "tags": [], "answer_id": 28887513, "down_vote_count": 0, "last_activity_date": 1425589388, "comments": [{"body": "So are you saying that existing &quot;Portable&quot; libraries are not Core compatible and will need to be re-build for Core?", "edited": false, "comment_id": 46036311, "creation_date": 1425589051, "score": 0, "owner": {"display_name": "Nate", "reputation": 16240, "user_id": 86860, "user_type": "registered", "accept_rate": 96}}, {"body": "@Nate: The PCL/CoreClr dynamics are still being decided. So it&#39;s not possible to know that at this time. AFAIK. :) <i>Right now</i> it&#39;s not possible to build a CoreClr-compatible PCL in VS.", "edited": false, "reply_to_user": {"display_name": "Nate", "reputation": 16240, "user_id": 86860, "user_type": "registered", "accept_rate": 96}, "comment_id": 46036393, "creation_date": 1425589193, "score": 0, "owner": {"display_name": "Stephen Cleary", "reputation": 130012, "user_id": 263693, "user_type": "registered", "accept_rate": 83}}, {"body": "Fantastic, thanks. Will try as soon as I get home. Surprised I saw the same with Json.NET though - I&#39;d expect MS to ensure that works. Will double check that that wasn&#39;t just user error...", "edited": false, "comment_id": 46036420, "creation_date": 1425589230, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet: I just tried it with Newtonsoft.Json, and it did work (as in, &quot;compile&quot;) for both frameworks. Action body is <code>return new[] { new JObject().ToString() };</code>, package version 7.0.1-beta1.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 46036602, "creation_date": 1425589557, "score": 0, "owner": {"display_name": "Stephen Cleary", "reputation": 130012, "user_id": 263693, "user_type": "registered", "accept_rate": 83}}, {"body": "@StephenCleary: Yup - I think I must have misdiagnosed that. Have tried it with 6.0.8 as well, and that works too. Will delete that bit of the question.", "edited": false, "comment_id": 46036936, "creation_date": 1425590165, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "It&#39;s interesting that Noda Time 1.3.0 does get listed under the &quot;ASP.NET Core 5.0&quot; bit in references - no sign of an error or anything. VS could definitely do a better job helping to diagnose this one...", "edited": false, "comment_id": 46036967, "creation_date": 1425590235, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1425588828, "comment_count": 6, "score": 17, "owner": {"display_name": "Stephen Cleary", "reputation": 130012, "user_id": 263693, "user_type": "registered", "accept_rate": 83}, "last_editor": {"display_name": "Diego Mijelshon", "reputation": 42964, "user_id": 62024, "user_type": "registered", "accept_rate": 85}, "last_edit_date": 1425589388, "up_vote_count": 17}], "answer_count": 1, "last_editor": {"display_name": "Eilon", "reputation": 18236, "user_id": 31668, "user_type": "registered"}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 28886638}, {"last_activity_date": 1418071048, "accepted_answer_id": 27366450, "creation_date": 1418068697, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1418069522, "favorite_count": 9, "view_count": 2779, "delete_vote_count": 0, "title": "How can I make my code diagnostic syntax node action work on closed files?", "comments": [{"body": "From what I understood at a talk <code>RegisterCompilationEndAction</code> is indeed what you need and the fact it fires inconsistently is a bug. I&#39;ll email the speaker and ask.", "edited": false, "comment_id": 43184124, "creation_date": 1418069813, "score": 1, "owner": {"display_name": "Benjamin Gruenbaum", "reputation": 81507, "user_id": 1348195, "user_type": "registered", "accept_rate": 90}}], "comment_count": 1, "score": 63, "body": "<p>I'm building a set of code diagnostics using Roslyn (in VS2015 Preview). Ideally, I'd like any errors they produce to act as persistent errors, just as if I were violating a normal language rule.</p>\n\n<p>There are a bunch of options, but I'm having a hard time getting any of them to work consistently. I've managed to implement a rudimentary syntax node action, i.e. one registered with </p>\n\n<pre><code>context.RegisterSyntaxNodeAction(AnalyzeSyntaxNode, SyntaxKind.InvocationExpression);\n</code></pre>\n\n<p>in the <code>Initialize</code> method of my diagnostic class. Lo and behold, when I open up a file which violates this diagnostic (while running the VSIX project), VS2015 shows an error:</p>\n\n<ul>\n<li>Red squiggle under the right bit of code</li>\n<li>Red block in the margin</li>\n<li>Error in the error list</li>\n</ul>\n\n<p>However, the error goes away when I close the file.</p>\n\n<p>I've tried using <code>context.RegisterCompilationEndAction</code> as well, but this has two problems:</p>\n\n<ul>\n<li>It seems to fire inconsistently. <em>Usually</em> when I open the solution it fires, but not always. It doesn't fire on a clean/rebuild, which seems odd.</li>\n<li><p>Although diagnostics created <em>directly</em> in the analysis method fire, in order to implement the diagnostics I'm using a visitor, like this - which may be inept:</p>\n\n<pre><code>private static void AnalyzeEndCompilation(CompilationEndAnalysisContext context)\n{\n    foreach (var tree in context.Compilation.SyntaxTrees)\n    {\n        var visitor = new ReportingVisitor(context.Compilation.GetSemanticModel(tree));\n        visitor.Visit(tree.GetRoot());\n        foreach (var diagnostic in visitor.Diagnostics)\n        {\n            context.ReportDiagnostic(diagnostic);\n        }\n    }\n}\n</code></pre>\n\n<p>I know that the diagnostics are being created - a breakpoint on the <code>ReportDiagnostic</code> line is hit several times - but I'm not seeing anything in the error list. (Whereas a similar <code>ReportDiagnostic</code> call at the start of the method, or one per syntax tree with the file path, <em>does</em> get shown.)</p></li>\n</ul>\n\n<p>What am I doing wrong here? The first approach (a syntax node action) would be ideal if feasible - it gives me exactly the context I need. Is there some setting in the project properties that I need to make the compiler use that for \"full project\" compilation as well as just interactive \"in the IDE\" handling? Is this perhaps just a bit of Roslyn integration which isn't quite finished yet?</p>\n\n<p>(I can include the full code for the class if it would be useful - in this case I suspect it would be more noise than signal though.)</p>\n", "is_answered": true, "up_vote_count": 64, "tags": ["c#", "roslyn", "vs-2015-preview"], "reopen_vote_count": 0, "answer_count": 1, "answers": [{"body": "<p>For the closed file issues, it's our intent that all diagnostics will be reported, from either open or closed files.  There is a user option for it in the preview at Tools\\Options\\Text Editor\\C#\\Advanced that you can toggle to include diagnostics in closed files.  We hope to make this the default before VS 2015 is released.  However, note that the option only applies to analysis within VS.  If your analyzer is passed to the compiler (by adding an analyzer in Solution Explorer, or adding a NuGet package reference to a package with an analyzer, as opposed to installing a VSIX into Visual Studio), then the compiler will report <em>all</em> diagnostics when the user builds, regardless of whether the files are open or not.</p>\n\n<p>For the second issue with <code>RegisterCompilationEndedAnalyzer</code>, it isn't reliably called inside Visual Studio in the VS 2015 Preview.  This is because we do some optimizations to avoid re-analyzing everything for \"local\" changes inside method bodies.  For similar reasons, we currently don't report errors that are reported with locations <em>in</em> method bodies.  We've just recently changed that so that VS will kick off a full re-analysis after a longer delay and so <code>RegisterCompilationEndedAnalyzer</code> should be called reliably in future builds, and we will report errors regardless of location.</p>\n\n<p>However, for your case the correct thing to do is stay with a SyntaxNodeAnalyzer, switch the VS option to enable diagnostics in closed files, and attach your diagnostic to the project compilation options.</p>\n\n<p>Hope this helps!</p>\n", "answer_id": 27366450, "tags": [], "down_vote_count": 0, "last_activity_date": 1418071048, "comments": [{"body": "Aha - the location part would definitely explain the oddities I was seeing. My &quot;just check that I can get something working&quot; diagnostics didn&#39;t have a location, so those ones showed up... and the option for diagnostics in closed files worked perfectly. Thanks! Back to making the diagnostic itself do the right thing now :)", "edited": false, "comment_id": 43188359, "creation_date": 1418078059, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Did you see the note about using the project attached diagnostics to get them into command line build too?", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 43192218, "creation_date": 1418090508, "score": 0, "owner": {"display_name": "Kevin Pilch-Bisson", "reputation": 6821, "user_id": 678625, "user_type": "registered"}}, {"body": "Yep. So long as I&#39;m on the right track to do that later, I can punt on it for now :)", "edited": false, "comment_id": 43196741, "creation_date": 1418107767, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1418071048, "comment_count": 3, "score": 41, "owner": {"display_name": "Kevin Pilch-Bisson", "reputation": 6821, "user_id": 678625, "user_type": "registered"}, "is_accepted": true, "up_vote_count": 41}], "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "down_vote_count": 1, "close_vote_count": 0, "question_id": 27365841}, {"last_activity_date": 1413484223, "accepted_answer_id": 314918, "creation_date": 1227526223, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1320233895, "favorite_count": 45, "closed_date": 1432870255, "view_count": 20743, "delete_vote_count": 0, "closed_reason": "off-topic", "title": "Project management to go with GitHub", "comments": [{"body": "Are you close to releasing Protocol Buffers in C#?  I&#39;ve been dying to try it out.", "edited": false, "comment_id": 180064, "creation_date": 1228564639, "score": 0, "owner": {"display_name": "David Robbins", "reputation": 7053, "user_id": 19799, "user_type": "registered", "accept_rate": 86}}, {"body": "@David: It&#39;s in a usable state already, although it&#39;s a little bit &quot;manual&quot;. See <a href=\"http://code.google.com/p/protobuf-csharp-port/\" rel=\"nofollow\">code.google.com/p/protobuf-csharp-port</a> for some preliminary instructions.", "edited": false, "comment_id": 180067, "creation_date": 1228565586, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I&#39;m not sure if this was the case when you last edited this question, but GitHub automatically creates downloadable archives of your code at any tags.  You can also download the state of the code at any commit.", "edited": false, "comment_id": 1543307, "creation_date": 1257282132, "score": 0, "owner": {"display_name": "Xiong Chiamiov", "reputation": 2366, "user_id": 120999, "user_type": "registered", "accept_rate": 71}}, {"body": "You can also use mercurial on google code, mercurial is pretty simple and has almost the same feature as git", "edited": false, "comment_id": 2241813, "creation_date": 1266391168, "score": 11, "owner": {"display_name": "dzen", "reputation": 2991, "user_id": 221209, "user_type": "registered", "accept_rate": 75}}, {"body": "GoogleCode was added support for Git: <a href=\"http://code.google.com/p/support/wiki/GitFAQ\" rel=\"nofollow\">code.google.com/p/support/wiki/GitFAQ</a>", "edited": false, "comment_id": 9758422, "creation_date": 1320233798, "score": 0, "owner": {"display_name": "gavenkoa", "reputation": 10172, "user_id": 173149, "user_type": "registered", "accept_rate": 69}}, {"body": "@gavenkoa: Yup - fortunately I&#39;ve now moved to Mercurial anyway, and closed down the GitHub project :) Will edit this question.", "edited": false, "reply_to_user": {"display_name": "gavenkoa", "reputation": 10172, "user_id": 173149, "user_type": "registered", "accept_rate": 69}, "comment_id": 9758443, "creation_date": 1320233852, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon Skeet. Nice, I also prefer HG. You can try use SourceForge with <a href=\"http://sourceforge.net/apps/trac/sourceforge/wiki/Hosted%20Apps\" rel=\"nofollow\">sourceforge.net/apps/trac/sourceforge/wiki/Hosted%20Apps</a> for new project...", "edited": false, "comment_id": 9760217, "creation_date": 1320239604, "score": 0, "owner": {"display_name": "gavenkoa", "reputation": 10172, "user_id": 173149, "user_type": "registered", "accept_rate": 69}}, {"body": "You should accept the answer the suggests using Github Issues", "edited": false, "comment_id": 9905601, "creation_date": 1320940353, "score": 0, "owner": {"display_name": "Scott Schulthess", "reputation": 1519, "user_id": 68393, "user_type": "registered", "accept_rate": 85}}], "comment_count": 8, "score": 84, "body": "<p>(EDIT: This question is now outdated for my particular issue, as Google Code supports git now and I've converted Protocol Buffers to Mercurial anyway. However, it's still of general interest, IMO.)</p>\n\n<p>My <a href=\"http://github.com/jskeet/dotnet-protobufs/tree/master\">C# Protocol Buffers Port</a> uses github for its source control, and I'm beginning to really enjoy using git. However, as far as I can tell, github doesn't provide any project management tools: defect and feature tracking, discussions, feature requests, docs etc. Given my affiliations, <a href=\"http://code.google.com\">Google Code</a> would be a natural choice, but it would seem odd to create a project there but host the source on github.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/39186/should-i-use-githubfogbugz-or-assembla\">This question about Fogbugz/Assembla</a> seems to mostly focus on the defect tracking. I was wondering what experiences others have had when it comes to a more \"complete\" project management solution. Does Fogbugz actually do everything I need? (Using a wiki for docs has its advantages, although I also want to be able to distribute documentation with the code.) Beyond the explicit features mentioned in the first paragraph, are there other project aspects I <em>should</em> be considering which I may have missed?</p>\n\n<p>This will definitely stay an open source project, and although I'd rather not pay I don't mind if a small fee is required. Currently I'm the only developer, but that may change and there may very well be lots of people filing bugs and feature requests. (In other words, I  hope and expect it to be popular, but with me doing most of the work.)</p>\n\n<p>Previously I've <em>contributed</em> to various open source projects, but haven't done much in the way of running a very visible and active one. (<a href=\"http://pobox.com/~skeet/csharp/miscutil\">MiscUtil</a> is currently still \"hosted\" on my website, with occasional releases - the actual source control is on my local NAS.)</p>\n\n<p>Anyone care to share their experiences?</p>\n\n<p>EDIT: Another option I'm now considering is a Google Code project (I really would like to be loyal to my employer) and an occasional merge from git to svn (at the very least, every time I do a release). This would allow non-git users to get hold of the source easily too.</p>\n", "is_answered": true, "tags": ["git", "open-source", "project-management", "github", "fogbugz"], "reopen_vote_count": 0, "answer_count": 14, "answers": [{"body": "<p>Have you considered <a href=\"http://trac.edgewall.org/\" rel=\"nofollow\">Trac</a> ? </p>\n\n<p>There seems to be an \"enthusiastic\" review of a <a href=\"http://news.ycombinator.com/item?id=167887\" rel=\"nofollow\">git-Trac integration</a>.</p>\n\n<p>I have no personal experience with these tools but you may want to check out the integration.</p>\n", "is_accepted": false, "tags": [], "answer_id": 314007, "down_vote_count": 0, "last_activity_date": 1310241260, "comments": [{"body": "The Fogbugz/Assembla question I referenced seemed to imply that Trac was a bit behind FogBugz. I also like the idea of hosted project discussions (although I could certainly use Google Groups for that if necessary).", "edited": false, "comment_id": 156257, "creation_date": 1227529341, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1227528969, "comment_count": 1, "score": 8, "owner": {"display_name": "VonC", "reputation": 516882, "user_id": 6309, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "jlafay", "reputation": 5524, "user_id": 179386, "user_type": "registered", "accept_rate": 93}, "last_edit_date": 1310241260, "up_vote_count": 8}, {"body": "<p>We use <a href=\"http://bitbucket.org/\">bitbucket.org</a>, which is not GIT, it's Mercurial* , but it does have bug/issue tracking per branch etc.</p>\n\n<p>I think it can be very useful to integrate these things with the place you manage your source code for cross-referencing things like issue-number in a commit message. Or Fixed message for an issue containing the code revision number. You would lose this if you chose a separate BTS like Google code. As mentioned in other answer, Trac is really good at the integration thing.</p>\n\n<p>Edit: I should say that for my most widely used open source project, we do actually have it at:</p>\n\n<ol>\n<li>Bitbucket (source code management)</li>\n<li>Launchpad (user bug reporting, translations management)</li>\n<li>Self hosted Trac (wiki, project and developer issue tracking, source code mirror)</li>\n<li>Google code (file downloads)</li>\n</ol>\n\n<p>And I know this sounds insane, but we pick and choose the best bits out of each service. And surprisingly no one complains.</p>\n\n<p><code>*</code> which is better in my opinion anyway, but please don't flame me.</p>\n", "is_accepted": false, "tags": [], "answer_id": 314031, "down_vote_count": 0, "last_activity_date": 1227530606, "comments": [{"body": "No flaming here - I haven&#39;t used Mercurial, so can&#39;t comment. I think if I were going to actually <i>move</i> the source hosting, I&#39;d just go straight to Google Code and svn, which I&#39;m already comfortable with. I <i>think</i> I want to keep the github repository - but see my question edit...", "edited": false, "comment_id": 156277, "creation_date": 1227530307, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "In my opinion, SVN is the main weakness of Google code. But as you say, it&#39;s all about what you are comfortable with.", "edited": false, "comment_id": 156280, "creation_date": 1227530431, "score": 3, "owner": {"display_name": "Ali Afshar", "reputation": 25383, "user_id": 28380, "user_type": "registered", "accept_rate": 92}}, {"body": "Also edited to reflect my own personal usage.", "edited": false, "comment_id": 156283, "creation_date": 1227530625, "score": 0, "owner": {"display_name": "Ali Afshar", "reputation": 25383, "user_id": 28380, "user_type": "registered", "accept_rate": 92}}, {"body": "I know it&#39;s silly, but I&#39;d have trouble commiting any data I really want to save to a server named &quot;bitbucket&quot;.", "edited": false, "comment_id": 156495, "creation_date": 1227537480, "score": 0, "owner": {"display_name": "T.E.D.", "reputation": 28709, "user_id": 29639, "user_type": "registered", "accept_rate": 76}}, {"body": "bitbucket now does Git as well", "edited": false, "comment_id": 13622924, "creation_date": 1336643998, "score": 1, "owner": {"display_name": "Radek", "reputation": 2226, "user_id": 105707, "user_type": "registered", "accept_rate": 91}}], "creation_date": 1227529787, "comment_count": 5, "score": 9, "owner": {"display_name": "Ali Afshar", "reputation": 25383, "user_id": 28380, "user_type": "registered", "accept_rate": 92}, "last_editor": {"display_name": "Ali Afshar", "reputation": 25383, "user_id": 28380, "user_type": "registered", "accept_rate": 92}, "last_edit_date": 1227530606, "up_vote_count": 9}, {"body": "<p>I use GitHub along with <a href=\"http://lighthouseapp.com/\" rel=\"nofollow\">Lighthouse</a> for issue tracking. It's a little barebones compared to some of the other options, but at the same time it works very well if you just want a lightweight tool you don't have to worry too much about. It can integrate with GitHub if you want, and it's also free for open source projects.</p>\n", "answer_id": 314168, "tags": [], "down_vote_count": 0, "last_activity_date": 1227534666, "creation_date": 1227534666, "comment_count": 0, "score": 14, "owner": {"display_name": "Marc Charbonneau", "reputation": 33711, "user_id": 35136, "user_type": "registered", "accept_rate": 75}, "is_accepted": false, "up_vote_count": 14}, {"body": "<p>If you're thinking that you'll really be the <a href=\"http://stackoverflow.com/questions/3180/anyone-soloing-using-fogbugz#3274\">only developer</a>, Fogbugz will help you keep your sanity. Fogbugz is a great product, It builds focused communications and can turn anything into a case (issue). It does all that as well as any system I've seen. </p>\n\n<p>But its orientation is commercial -- efficient communication between users and tech support, improve reliability of schedules, focus &amp; prioritize what's being worked on, separate internal &amp; external discussions, some good reporting to track that things are getting handled. (About the only criticism I can think of is it doesn't do  case blocking and dependency tracking, which is really useful for those bugs buried deep.)  </p>\n\n<p>Little of this feature set will help you build an active open source project, with open lively communication and the need build a community and have users evolve into developers as the project grows. So if that's where you want to end up, you may really want the less focused communication channels of one of these lightweight tracking systems. </p>\n\n<p>I haven't used Google Code on a project yet, but in terms of transparent &amp; open  communication, it looks like a good support for an active open source project.  Plus you already know it. If you want to grow the involvement in your project, Google code looks like the way to go.</p>\n", "is_accepted": true, "tags": [], "answer_id": 314918, "down_vote_count": 1, "last_activity_date": 1227551110, "comments": [{"body": "Thanks for that - all useful stuff. There&#39;s an additional benefit to Google Code - if it&#39;s missing a feature, I&#39;m more likely to be able to make it happen :) (I&#39;m sure Fogbugz et al take feature requests seriously, but with Google Code I can work on the system itself in 20% time...)", "edited": false, "comment_id": 157116, "creation_date": 1227553899, "score": 6, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1227549773, "comment_count": 1, "score": 43, "owner": {"display_name": "Paul", "reputation": 13677, "user_id": 23356, "user_type": "registered"}, "last_editor": {"display_name": "Paul", "reputation": 13677, "user_id": 23356, "user_type": "registered"}, "last_edit_date": 1227551110, "up_vote_count": 44}, {"body": "<p>I use github and google code in some places.  Google code's issue tracker is decent enough, but I can't deal with subversion.</p>\n\n<p>Take a look at my <a href=\"http://code.google.com/p/spymemcached/\" rel=\"nofollow\">java memcached client</a> for an example of this -- particularly the source tab at the top.</p>\n", "answer_id": 322566, "tags": [], "down_vote_count": 0, "last_activity_date": 1227743522, "comments": [{"body": "Cool. That looks like a really good solution. I may still clone to subversion to make it easier for those who want to use that - I want to be as inclusive as possible.", "edited": false, "comment_id": 162779, "creation_date": 1227744687, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I&#39;d imagine github&#39;s download stuff is enough for anyone who&#39;d want subversion. Anyone who does stuff more advanced than download the latest version from your svn repo is probably already using git.  :)", "edited": false, "comment_id": 162869, "creation_date": 1227748726, "score": 2, "owner": {"display_name": "Dustin", "reputation": 42672, "user_id": 39975, "user_type": "registered", "accept_rate": 80}}], "creation_date": 1227743522, "comment_count": 2, "score": 1, "owner": {"display_name": "Dustin", "reputation": 42672, "user_id": 39975, "user_type": "registered", "accept_rate": 80}, "is_accepted": false, "up_vote_count": 1}, {"body": "<p>At work we use FogBugz and it's by far the best tool of its type in my opinion. I would use it for the non-profit projects I work on, except it's so expensive beyond 2 users. </p>\n\n<p>For the non-profit projects, we use <a href=\"http://lighthouseapp.com\" rel=\"nofollow\">Lighthouse</a> for issue tracking. It's alright for what it costs, and frankly I can't really find any suitable alternatives within its price range. Trac's issue tracking is little better than Bugzilla's...I know a lot of folks love Trac but I find it very inflexible. Trac's deficiencies led us to Lighthouse. </p>\n\n<p>My non-profit projects are looking possibly at moving to <a href=\"http://bitbucket.org\" rel=\"nofollow\">Bitbucket</a>. In addition to the issue tracking, it would let us consolidate our repositories over there from beanstalkapp.com, as well as, adding a wiki. </p>\n\n<p>That all being said, if FogBugz-on-Demand had pricing even remotely similar to Lighthouse.app for small user counts, I'd move us over there in a heartbeat. When you use FB at work and then Lighthouse.app at night...using Lighthouse feels like your arm has been chopped off.</p>\n", "answer_id": 471259, "tags": [], "down_vote_count": 0, "last_activity_date": 1232666231, "creation_date": 1232666231, "comment_count": 0, "score": 1, "owner": {"display_name": "jasonjwwilliams", "reputation": 1049, "user_id": 331, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 1}, {"body": "<p>As usual when someone ask this, I mention <a href=\"http://redmine.org/\" rel=\"nofollow\">Redmine</a> as I did in <a href=\"http://stackoverflow.com/questions/349605/what-is-a-good-project-management-software-for-many-small-projects\">this</a> question.  I know the question has already its \"best answer\" but I think it is worth mentioning.</p>\n", "answer_id": 471290, "tags": [], "down_vote_count": 0, "last_activity_date": 1232667062, "creation_date": 1232667062, "comment_count": 0, "score": 13, "owner": {"display_name": "Keltia", "reputation": 9316, "user_id": 16143, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 13}, {"body": "<p>Have you considered CodePlex?</p>\n", "answer_id": 527615, "tags": [], "down_vote_count": 2, "last_activity_date": 1234173877, "comments": [{"body": "I hadn&#39;t, but in the end I&#39;ve gone with Google Code <i>and</i> github, developing against github and pushing to svn when appropriate.", "edited": false, "comment_id": 340751, "creation_date": 1234174167, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "This does not provide an answer to the question. To critique or request clarification from an author, leave a comment below their post.", "edited": false, "comment_id": 26157226, "creation_date": 1375003355, "score": 0, "owner": {"display_name": "nathanchere", "reputation": 3717, "user_id": 243557, "user_type": "registered", "accept_rate": 95}}], "creation_date": 1234173877, "comment_count": 2, "score": -1, "owner": {"display_name": "Marcin Hoppe", "reputation": 477, "user_id": 28154, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 1}, {"body": "<p><a href=\"http://studios.thoughtworks.com/mingle-agile-project-management\" rel=\"nofollow\">Mingle</a> supports git via <a href=\"http://github.com/donmullen/mingle_git/\" rel=\"nofollow\">mingle_git</a> plugin. Mingle has a free <a href=\"http://studios.thoughtworks.com/mingle-agile-project-management/pricing-and-license\" rel=\"nofollow\">community license</a> for open source projects.</p>\n", "answer_id": 560199, "tags": [], "down_vote_count": 0, "last_activity_date": 1234943913, "creation_date": 1234943913, "comment_count": 0, "score": 1, "owner": {"display_name": "Antti Tarvainen", "reputation": 974, "user_id": 64979, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 1}, {"body": "<p>I too use github with Lighthouse. And if your commit message contains something like </p>\n\n<p>[#32 state:resolved]</p>\n\n<p>Lighthouse will resolve ticket #32 against the commit, which I find quick and useful. Other than that, Lighthouse is a bit, er, light on features.</p>\n", "answer_id": 695295, "tags": [], "down_vote_count": 0, "last_activity_date": 1238357913, "creation_date": 1238357913, "comment_count": 0, "score": 1, "owner": {"display_name": "kevinrutherford", "reputation": 379, "user_id": 83549, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 1}, {"body": "<p>GitHub recently introduced an <a href=\"http://github.com/blog/411-github-issue-tracker\">issue tracker</a> of their own; I haven't done a competitive analysis to determine how it measures up to other options mentioned on this thread, though.</p>\n", "answer_id": 758310, "tags": [], "down_vote_count": 0, "last_activity_date": 1239921297, "comments": [{"body": "GitHub has nowadays project-management built-in. It&#39;s pretty minimalist though (a la 37signals), but their prices are competitive if you use them for version control and project management. <a href=\"https://github.com/features/projects\" rel=\"nofollow\">github.com/features/projects</a>", "edited": false, "comment_id": 11463454, "creation_date": 1328231227, "score": 0, "owner": {"display_name": "m33lky", "reputation": 1961, "user_id": 130111, "user_type": "registered", "accept_rate": 73}}], "creation_date": 1239921297, "comment_count": 1, "score": 28, "owner": {"display_name": "Greg Campbell", "reputation": 11689, "user_id": 68054, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 28}, {"body": "<p>I'd suggest <a href=\"http://www.javaforge.com\" rel=\"nofollow\">JavaForge</a> as an alternative, since it has everything you look for:</p>\n\n<ul>\n<li>It offers <strong>free hosting with Mercurial and Git</strong> (or mixed). </li>\n<li>Its issue tracker is lightyears ahead of GitHub. It is extremely powerful and customizable, can track requirements, feature requests, bugs, tasks, etc.</li>\n<li>It provides Document Management, also with WebDAV access (sharing as easy as with shared folders).</li>\n<li>It has built-in wiki for collaborative authoring for documentation, requirements, etc.</li>\n<li>It has forums for discussions.</li>\n</ul>\n\n<p>Please note that the site is powered by <a href=\"http://www.intland.com/products/codebeamer/overview/\" rel=\"nofollow\">codeBeamer</a>, our commercial product battle-tested by global companies. </p>\n\n<p>(Disclaimer: we are a commercial provider of agile ALM solutions.)</p>\n", "answer_id": 6841242, "tags": [], "down_vote_count": 0, "last_activity_date": 1311754132, "creation_date": 1311754132, "comment_count": 0, "score": 0, "owner": {"display_name": "intland", "reputation": 556, "user_id": 249792, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 0}, {"body": "<p><code>&lt;plug&gt;</code>I'm building <a href=\"https://airport.runway7.net\" rel=\"nofollow\">Airport</a>.<code>&lt;/plug&gt;</code></p>\n", "answer_id": 11584054, "tags": [], "down_vote_count": 0, "last_activity_date": 1342804484, "comments": [{"body": "broken link for Airport, curious if the project still exists", "edited": false, "comment_id": 23384245, "creation_date": 1367451373, "score": 0, "owner": {"display_name": "Fabiano PS", "reputation": 1985, "user_id": 250019, "user_type": "registered", "accept_rate": 79}}, {"body": "Didn&#39;t see much interest, so I open sourced it a while ago: <a href=\"https://github.com/sudhirj/airport.rails/\" rel=\"nofollow\">github.com/sudhirj/airport.rails</a>", "edited": false, "reply_to_user": {"display_name": "Fabiano PS", "reputation": 1985, "user_id": 250019, "user_type": "registered", "accept_rate": 79}, "comment_id": 23392172, "creation_date": 1367480448, "score": 0, "owner": {"display_name": "Sudhir Jonathan", "reputation": 7753, "user_id": 73831, "user_type": "registered", "accept_rate": 96}}, {"body": "Just remember to change the Github keys at <a href=\"https://github.com/sudhirj/airport.rails/blob/master/config/application.rb\" rel=\"nofollow\">github.com/sudhirj/airport.rails/blob/master/config/&hellip;</a>", "edited": false, "reply_to_user": {"display_name": "Fabiano PS", "reputation": 1985, "user_id": 250019, "user_type": "registered", "accept_rate": 79}, "comment_id": 23392185, "creation_date": 1367480464, "score": 0, "owner": {"display_name": "Sudhir Jonathan", "reputation": 7753, "user_id": 73831, "user_type": "registered", "accept_rate": 96}}], "creation_date": 1342804484, "comment_count": 3, "score": 0, "owner": {"display_name": "Sudhir Jonathan", "reputation": 7753, "user_id": 73831, "user_type": "registered", "accept_rate": 96}, "is_accepted": false, "up_vote_count": 0}, {"body": "<p>You could also try using a tool like <a href=\"http://busyflow.com\" rel=\"nofollow\">BusyFlow</a>. There you can track GitHub commits and comment on them (the comments are synced with GitHub). For other project management facets BusyFlow integrates with Google Calendar, Trello, Basecamp, Pivotal Tracker etc. So you can see your GitHub items alongside with tasks, files and calendar events.</p>\n\n<p>(Disclaimer: I'm a co-founder of BusyFlow.)</p>\n", "answer_id": 14650039, "tags": [], "down_vote_count": 0, "last_activity_date": 1359733958, "creation_date": 1359733958, "comment_count": 0, "score": 0, "owner": {"display_name": "naktinis", "reputation": 1354, "user_id": 316723, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 0}], "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "closed_details": {"reason": "off-topic", "by_users": [{"display_name": "Carpetsmoker", "reputation": 7261, "user_id": 660921, "user_type": "registered", "accept_rate": 81}, {"display_name": "Jeffrey Bosboom", "reputation": 3537, "user_id": 3614835, "user_type": "registered", "accept_rate": 71}, {"display_name": "max", "reputation": 9598, "user_id": 544825, "user_type": "registered", "accept_rate": 97}, {"display_name": "karlphillip", "reputation": 56139, "user_id": 176769, "user_type": "registered", "accept_rate": 100}, {"display_name": "Shankar Damodaran", "reputation": 46147, "user_id": 1003917, "user_type": "registered"}], "description": "This question appears to be off-topic. The users who voted to close gave this specific reason:    <ul class=\"close-as-off-topic-status-list\">\r\n        <li>&quot;Questions asking us to <b>recommend or find a book, tool, software library, tutorial or other off-site resource</b> are off-topic for Stack Overflow as they tend to attract opinionated answers and spam. Instead, <a href=\"http://meta.stackoverflow.com/questions/254393\">describe the problem</a> and what has been done so far to solve it.&quot; &ndash; Carpetsmoker, Jeffrey Bosboom, max, karlphillip, Shankar Damodaran</li>\r\n    </ul>", "on_hold": false}, "down_vote_count": 3, "question_id": 313924, "close_vote_count": 0, "up_vote_count": 87}, {"body": "<p></p>\n\n<p>Sorry for the waffly title - if I could come up with a concise title, I wouldn't have to ask the question.</p>\n\n<p>Suppose I have an immutable list type. It has an operation <code>Foo(x)</code> which returns a new immutable list with the specified argument as an extra element at the end. So to build up a list of strings with values \"Hello\", \"immutable\", \"world\" you could write:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>var empty = new ImmutableList&lt;string&gt;();\nvar list1 = empty.Foo(\"Hello\");\nvar list2 = list1.Foo(\"immutable\");\nvar list3 = list2.Foo(\"word\");\n</code></pre>\n\n<p>(This is C# code, and I'm most interested in a C# suggestion if you feel the language is important. It's not fundamentally a language question, but the idioms of the language may be important.)</p>\n\n<p>The important thing is that the existing lists are <em>not</em> altered by <code>Foo</code> - so <code>empty.Count</code> would still return 0.</p>\n\n<p>Another (more idiomatic) way of getting to the end result would be:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>var list = new ImmutableList&lt;string&gt;().Foo(\"Hello\")\n                                      .Foo(\"immutable\")\n                                      .Foo(\"word\");\n</code></pre>\n\n<p>My question is: <strong>what's the best name for Foo?</strong></p>\n\n<p><strong>EDIT 3</strong>: As I reveal later on, the name of the type might not actually be <code>ImmutableList&lt;T&gt;</code>, which makes the position clear. Imagine instead that it's <code>TestSuite</code> and that it's immutable because the whole of the framework it's a part of is immutable...</p>\n\n<p>(End of edit 3)</p>\n\n<p>Options I've come up with so far:</p>\n\n<ul>\n<li><code>Add</code>: common in .NET, but implies mutation of the original list</li>\n<li><code>Cons</code>: I believe this is the normal name in functional languages, but meaningless to those without experience in such languages</li>\n<li><code>Plus</code>: my favourite so far, it doesn't imply mutation <em>to me</em>. Apparently this is also <a href=\"http://en.wikibooks.org/wiki/Haskell/MonadPlus\">used in Haskell</a> but with slightly different expectations (a Haskell programmer might expect it to add two lists together rather than adding a single value to the other list).</li>\n<li><code>With</code>: consistent with some other immutable conventions, but doesn't have quite the same \"additionness\" to it IMO.</li>\n<li><code>And</code>: not very descriptive.</li>\n<li>Operator overload for + : I really don't like this much; I generally think operators should only be applied to lower level types. I'm willing to be persuaded though!</li>\n</ul>\n\n<p>The criteria I'm using for choosing are:</p>\n\n<ul>\n<li>Gives the correct impression of the result of the method call (i.e. that it's the original list with an extra element)</li>\n<li>Makes it as clear as possible that it doesn't mutate the existing list</li>\n<li>Sounds reasonable when chained together as in the second example above</li>\n</ul>\n\n<p>Please ask for more details if I'm not making myself clear enough...</p>\n\n<p><strong>EDIT 1:</strong> Here's my reasoning for preferring <code>Plus</code> to <code>Add</code>. Consider these two lines of code:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>list.Add(foo);\nlist.Plus(foo);\n</code></pre>\n\n<p>In my view (and this <em>is</em> a personal thing) the latter is clearly buggy - it's like writing \"x + 5;\" as a statement on its own. The first line looks like it's okay, until you remember that it's immutable. In fact, the way that the plus operator on its own doesn't mutate its operands is another reason why <code>Plus</code> is my favourite. Without the slight ickiness of operator overloading, it still gives the same connotations, which include (for me) not mutating the operands (or method target in this case).</p>\n\n<p><strong>EDIT 2:</strong> Reasons for not liking Add.</p>\n\n<p>Various answers are effectively: \"Go with Add. That's what <code>DateTime</code> does, and <code>String</code> has <code>Replace</code> methods etc which don't make the immutability obvious.\" I agree - there's precedence here. However, I've seen plenty of people call <code>DateTime.Add</code> or <code>String.Replace</code> and <em>expect mutation</em>. There are loads of newsgroup questions (and probably SO ones if I dig around) which are answered by \"You're ignoring the return value of <code>String.Replace</code>; strings are immutable, a new string gets returned.\"</p>\n\n<p>Now, I should reveal a subtlety to the question - the type might <em>not</em> actually be an immutable list, but a different immutable type. In particular, I'm working on a benchmarking framework where you add tests to a suite, and that creates a new suite. It might be obvious that:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>var list = new ImmutableList&lt;string&gt;();\nlist.Add(\"foo\");\n</code></pre>\n\n<p>isn't going to accomplish anything, but it becomes a <em>lot</em> murkier when you change it to:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>var suite = new TestSuite&lt;string, int&gt;();\nsuite.Add(x =&gt; x.Length);\n</code></pre>\n\n<p>That looks like it should be okay. Whereas this, to me, makes the mistake clearer:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>var suite = new TestSuite&lt;string, int&gt;();\nsuite.Plus(x =&gt; x.Length);\n</code></pre>\n\n<p>That's just begging to be:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>var suite = new TestSuite&lt;string, int&gt;().Plus(x =&gt; x.Length);\n</code></pre>\n\n<p>Ideally, I would like my users not to have to be told that the test suite is immutable. I want them to fall into the pit of success. This <em>may</em> not be possible, but I'd like to try.</p>\n\n<p>I apologise for over-simplifying the original question by talking only about an immutable list type. Not all collections are quite as self-descriptive as <code>ImmutableList&lt;T&gt;</code> :)</p>\n", "last_activity_date": 1412785892, "creation_date": 1233949769, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1327718174, "favorite_count": 31, "view_count": 12160, "delete_vote_count": 0, "title": "What's the best name for a non-mutating \"add\" method on an immutable collection?", "comments": [{"body": "I think there would be no ambiguity to &quot;Add&quot; assuming the class doesn&#39;t support both mutating and non-mutating operations. If it did, I could see wanting to be more specific.", "edited": false, "comment_id": 335310, "creation_date": 1233950463, "score": 0, "owner": {"display_name": "J Cooper", "reputation": 8438, "user_id": 38803, "user_type": "registered", "accept_rate": 96}}, {"body": "The problem isn&#39;t the name, it&#39;s that C# automatically ignores the return value. So, coming up with creative names won&#39;t solve the underlying problem that most types in C# are mutable. Not to mention getting good names like Plus for other cases (Insert, Remove, Push, Pop, etc..)", "edited": false, "comment_id": 335363, "creation_date": 1233951219, "score": 0, "owner": {"display_name": "MichaelGG", "reputation": 8087, "user_id": 27012, "user_type": "registered", "accept_rate": 71}}, {"body": "also, you&#39;re not abusing type infererence enough.  From BclExtras.  var list = ImmutableList.CreateFromArguments(&quot;foo&quot;);", "edited": false, "comment_id": 335416, "creation_date": 1233952050, "score": 0, "owner": {"display_name": "JaredPar", "reputation": 389992, "user_id": 23283, "user_type": "registered", "accept_rate": 100}}, {"body": "At the beginning of Edit 1, do you mean &quot;the former is clearly buggy&quot;, meaning Add rather than Plus?", "edited": false, "comment_id": 335424, "creation_date": 1233952232, "score": 0, "owner": {"display_name": "Adam Bellaire", "reputation": 50568, "user_id": 21632, "user_type": "registered", "accept_rate": 100}}, {"body": "@Adam: No, the latter is clearly buggy. They&#39;re both <i>actually</i> buggy (as they&#39;re doing nothing with the result) - but the first doesn&#39;t <i>look</i> buggy to me.", "edited": false, "comment_id": 335449, "creation_date": 1233952535, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@litb: Interesting idea. Suffers from the abbreviation problem, but interesting, certainly...", "edited": false, "comment_id": 335524, "creation_date": 1233953580, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "i deleted what i suggested :) well it was &quot;Concat&quot;. but there is no &quot;Remove&quot; equivalent to it though :/", "edited": false, "comment_id": 335531, "creation_date": 1233953723, "score": 1, "owner": {"display_name": "Johannes Schaub - litb", "reputation": 296033, "user_id": 34509, "user_type": "registered", "accept_rate": 63}}, {"body": "@Jon, &quot;Uncat&quot; sounds let a pet problem ;)", "edited": false, "comment_id": 335595, "creation_date": 1233954605, "score": 1, "owner": {"display_name": "JaredPar", "reputation": 389992, "user_id": 23283, "user_type": "registered", "accept_rate": 100}}, {"body": "Is an uncat a dog?", "edited": false, "comment_id": 335612, "creation_date": 1233954916, "score": 29, "owner": {"display_name": "Michael Myers", "reputation": 100007, "user_id": 13531, "user_type": "moderator", "accept_rate": 75}}, {"body": "Concat/Condog... works for me! ;)", "edited": false, "comment_id": 335617, "creation_date": 1233954972, "score": 6, "owner": {"display_name": "gnovice", "reputation": 80456, "user_id": 52738, "user_type": "registered", "accept_rate": 50}}, {"body": "Uncat - that&#39;d be a zombie cat.", "edited": false, "comment_id": 336240, "creation_date": 1233966120, "score": 9, "owner": {"display_name": "Erik Forbes", "reputation": 16083, "user_id": 16942, "user_type": "registered", "accept_rate": 96}}, {"body": "I&#39;d suggest picking the top 5 (or fewer) options and creating individual posts that people can vote up / down.", "edited": false, "comment_id": 336263, "creation_date": 1233966789, "score": 0, "owner": {"display_name": "Wedge", "reputation": 13231, "user_id": 332, "user_type": "registered", "accept_rate": 100}}, {"body": "I would remove the bit its not obvious that the list is actually immutable. What ever happened to people actually reading the documentation to learn what a class actually does.", "edited": false, "comment_id": 336830, "creation_date": 1233992857, "score": 0, "owner": {"display_name": "mP.", "reputation": 8673, "user_id": 56524, "user_type": "registered", "accept_rate": 45}}, {"body": "@mP: In this case I have a strong motivation to make the barrier to entry as low as humanly possible. See <a href=\"http://msmvps.com/blogs/jon_skeet/archive/2009/02/02/benchmarking-designing-an-api-with-unusual-goals.aspx\" rel=\"nofollow\">msmvps.com/blogs/jon_skeet/archive/2009/02/02/&hellip;</a>", "edited": false, "comment_id": 336843, "creation_date": 1233994282, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I definitely like Plus over Add.", "edited": false, "comment_id": 339028, "creation_date": 1234104807, "score": 0, "owner": {"display_name": "Alex Baranosky", "reputation": 13127, "user_id": 47630, "user_type": "registered", "accept_rate": 80}}, {"body": "public <i>static</i> T Add( T a, T b )", "edited": false, "comment_id": 439067, "creation_date": 1236608833, "score": 0, "owner": {"display_name": "Trap", "reputation": 4569, "user_id": 7839, "user_type": "registered", "accept_rate": 96}}, {"body": "@Trap: That sucks in terms of making the API fluid though.", "edited": false, "comment_id": 439195, "creation_date": 1236610966, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "added answer - just in case you havent see it - thought would use the comments to hightlight this too you.", "edited": false, "comment_id": 455374, "creation_date": 1236936827, "score": 0, "owner": {"display_name": "littlegeek", "user_type": "does_not_exist"}}, {"body": "@littlegeek: I saw it. It&#39;s okay, but I think I prefer &quot;Plus&quot; at the moment.", "edited": false, "comment_id": 455392, "creation_date": 1236937306, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "&quot;cons&quot; is only familiar to Lisp people, not all functional programming people.", "edited": false, "comment_id": 565961, "creation_date": 1239849385, "score": 0, "owner": {"display_name": "ShreevatsaR", "reputation": 23734, "user_id": 4958, "user_type": "registered", "accept_rate": 75}}, {"body": "Did you ever arrive at a conclusion?", "edited": false, "comment_id": 792279, "creation_date": 1244759689, "score": 0, "owner": {"display_name": "Erik Forbes", "reputation": 16083, "user_id": 16942, "user_type": "registered", "accept_rate": 96}}, {"body": "@Erik: Not really. I think Plus is my favourite at the moment. Unfortunately I don&#39;t have time to work on the project at the moment :(", "edited": false, "comment_id": 792283, "creation_date": 1244759773, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "&quot;With: ... doesn&#39;t have quite the same &#39;additionness&#39; to it&quot; -- Isn&#39;t that a good thing?  You are specifically <i>not</i> adding an element to an existing collection, you are asking what the resulting collection would look like.", "edited": false, "comment_id": 860281, "creation_date": 1246020631, "score": 0, "owner": {"display_name": "finnw", "reputation": 27950, "user_id": 12048, "user_type": "registered", "accept_rate": 94}}, {"body": "@finnw: I expressed my point badly - &quot;with&quot; makes it sound (to me) like you&#39;re <i>replacing</i> a value rather than <i>adding</i> one (in the new object). &quot;WithExtraTest&quot; or something similar might work, but it&#39;s a bit wordy.", "edited": false, "comment_id": 860536, "creation_date": 1246023296, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "At the risk of a little verbosity, perhaps something like: RebuildWith(), RecreateWith() or RemakeWith()", "edited": false, "comment_id": 1544195, "creation_date": 1257292543, "score": 0, "owner": {"display_name": "steamer25", "reputation": 4751, "user_id": 93345, "user_type": "registered", "accept_rate": 83}}, {"body": "I&#39;m definately late to the party here... but how about .Include()?", "edited": false, "comment_id": 4626833, "creation_date": 1290612925, "score": 0, "owner": {"display_name": "Scott", "reputation": 7333, "user_id": 173289, "user_type": "registered", "accept_rate": 100}}, {"body": "When talking about not wanting to use the operator overload, you mention that it should be reserved for lower-level types.  Why is that true?  I think you like .Plus the best because EVERYONE knows that A+B doesn&#39;t mutate anything.", "edited": false, "comment_id": 5782782, "creation_date": 1298962436, "score": 0, "owner": {"display_name": "Neal Tibrewala", "reputation": 346, "user_id": 167575, "user_type": "registered"}}, {"body": "@Neal: It&#39;s more of a gut feeling than anything else, but it would just <i>feel</i> wrong somehow...", "edited": false, "reply_to_user": {"display_name": "Neal Tibrewala", "reputation": 346, "user_id": 167575, "user_type": "registered"}, "comment_id": 5782842, "creation_date": 1298962842, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "On the plus side, I abandoned Lists for Enumerables long ago, so now I&#39;m surprised when ANYTHING causes mutation.  Yay C# going functional!", "edited": false, "comment_id": 5783517, "creation_date": 1298967662, "score": 0, "owner": {"display_name": "Neal Tibrewala", "reputation": 346, "user_id": 167575, "user_type": "registered"}}, {"body": "Off topic, but have you done any blog posts about the advantages/disadvantages of immutable lists? I&#39;ve been reading Eric Lippert&#39;s series on immutability lately, but I haven&#39;t seen that particular topic addressed.", "edited": false, "comment_id": 9126858, "creation_date": 1316803825, "score": 0, "owner": {"display_name": "Justin Morgan", "reputation": 14971, "user_id": 399649, "user_type": "registered", "accept_rate": 90}}, {"body": "@JustinMorgan: Nope, I haven&#39;t I&#39;m afraid.", "edited": false, "reply_to_user": {"display_name": "Justin Morgan", "reputation": 14971, "user_id": 399649, "user_type": "registered", "accept_rate": 90}, "comment_id": 9126896, "creation_date": 1316803982, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Just out of curiosity, which method name did you choose? IMO Add is definitely a bad choice too since if <code>ImmutableClass : IEnumerable</code> <code>new ImmutableClass { someElement }</code> looks reasonable, but is even tougher to spot that the collection initialiser does nothing.", "edited": false, "comment_id": 11306483, "creation_date": 1327578901, "score": 0, "owner": {"display_name": "Rich O'Kelly", "reputation": 26243, "user_id": 930847, "user_type": "registered", "accept_rate": 83}}, {"body": "@rich.okelly: I can&#39;t remember - I haven&#39;t looked at that project for quite a while :) (I must get back to it some time...)", "edited": false, "reply_to_user": {"display_name": "Rich O'Kelly", "reputation": 26243, "user_id": 930847, "user_type": "registered", "accept_rate": 83}, "comment_id": 11306492, "creation_date": 1327578933, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "<code>plus</code> and <code>minus</code> I would expect to take the same type twice. After all you do <code>&quot;abc&quot;+&quot;d&quot;</code>, not <code>&quot;abc&quot;+&#39;d&#39;</code>.", "edited": false, "comment_id": 11685364, "creation_date": 1329179518, "score": 0, "owner": {"display_name": "Thomas Ahle", "reputation": 12966, "user_id": 205521, "user_type": "registered", "accept_rate": 89}}, {"body": "@ThomasAhle: Not sure what you mean there - in plenty of languages &quot;abc&quot; + &#39;d&#39; is absolutely valid; likewise <code>DateTime.Now + TimeSpan.FromMinutes(10)</code> is valid in C#...", "edited": false, "reply_to_user": {"display_name": "Thomas Ahle", "reputation": 12966, "user_id": 205521, "user_type": "registered", "accept_rate": 89}, "comment_id": 11688946, "creation_date": 1329200626, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet: Being a non C# person, that sort of makes sense from a timestamp perspective. Using plus with different types, makes you wonder which of the types are used for the result. At least a plus should be associative and have closure, imho.", "edited": false, "comment_id": 11736878, "creation_date": 1329362535, "score": 0, "owner": {"display_name": "Thomas Ahle", "reputation": 12966, "user_id": 205521, "user_type": "registered", "accept_rate": 89}}, {"body": "@ThomasAhle: But <code>TimeSpan</code> and <code>DateTime</code> are already different types... I use it in Noda Time as well for daylight saving offsets; it&#39;s really handy: Instant + Offset = LocalInstant; LocalInstant - Offset = Instant. It means you can&#39;t use it the wrong way round, which is lovely...", "edited": false, "reply_to_user": {"display_name": "Thomas Ahle", "reputation": 12966, "user_id": 205521, "user_type": "registered", "accept_rate": 89}, "comment_id": 11740141, "creation_date": 1329379261, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "This is already solved(sort of) by Enumerable.Concat&lt;TSource&gt;.  Create your own extension Concat&lt;T&gt;(this IEnumerable&lt;T&gt;, T second)", "edited": false, "comment_id": 14067694, "creation_date": 1338353308, "score": 0, "owner": {"display_name": "csauve", "reputation": 1112, "user_id": 65580, "user_type": "registered", "accept_rate": 87}}, {"body": "@csauve: Concat concatenates two <i>sequences</i>, not concatenating a single element onto a sequence. Additionally, even &quot;Concat&quot; is far from clear IMO. It&#39;s an abbreviation, and one from a word which is very rarely used in English.", "edited": false, "reply_to_user": {"display_name": "csauve", "reputation": 1112, "user_id": 65580, "user_type": "registered", "accept_rate": 87}, "comment_id": 14068422, "creation_date": 1338356564, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I see what you mean - intuitively I think of .Concat(t) as really just an abbr for .Concat(new[] {t}), which as you say is an abbr for .Concatenate(new[] {t}).  We still use it in our codebase, as well as a similar overload for .Union(T) (for enforcing uniqueness).  Alternatively if you don&#39;t mind writing out .Concat(new[] {t}) you can actually just use that extension method and you don&#39;t need to modify your class at all.", "edited": false, "comment_id": 14081628, "creation_date": 1338389961, "score": 0, "owner": {"display_name": "csauve", "reputation": 1112, "user_id": 65580, "user_type": "registered", "accept_rate": 87}}, {"body": "Clojure uses &#39;conj&#39; for conjoin.  Kinda like &#39;cons&#39; but the behavior is polymorphic to the collection.", "edited": false, "comment_id": 18748459, "creation_date": 1354380261, "score": 2, "owner": {"display_name": "gtrak", "reputation": 2996, "user_id": 2559313, "user_type": "registered", "accept_rate": 86}}, {"body": "Another reason to avoid <code>Add</code> is that it gives you collection initializer syntax. <code>new ImmutableCollection&lt;T&gt; { a, b, c }</code> is pointless and serves no purpose.", "edited": false, "comment_id": 29567965, "creation_date": 1384005820, "score": 0, "owner": {"display_name": "nawfal", "reputation": 20216, "user_id": 661933, "user_type": "registered", "accept_rate": 94}}, {"body": "@nawfal: Yes - it&#39;s a real shame that collection initializer syntax doesn&#39;t support immutable collections (via using the return value).", "edited": false, "reply_to_user": {"display_name": "nawfal", "reputation": 20216, "user_id": 661933, "user_type": "registered", "accept_rate": 94}, "comment_id": 29569600, "creation_date": 1384012200, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet Yes, I&#39;m with you on that part. The closest you get is with <code>params</code> keyword in the constructor for single values, like <code>new ImmutableCollection&lt;T&gt;(a, b, c)</code>...", "edited": false, "comment_id": 29572023, "creation_date": 1384017414, "score": 0, "owner": {"display_name": "nawfal", "reputation": 20216, "user_id": 661933, "user_type": "registered", "accept_rate": 94}}, {"body": "@JonSkeet is your <code>ImmutableList&lt;T&gt;</code> source available? Is it part of some library? Would love to see :)", "edited": false, "comment_id": 29648016, "creation_date": 1384246158, "score": 0, "owner": {"display_name": "nawfal", "reputation": 20216, "user_id": 661933, "user_type": "registered", "accept_rate": 94}}, {"body": "@nawfal: I don&#39;t actually have such a thing - but of course the Microsoft immutable collections are now available anyway :)", "edited": false, "reply_to_user": {"display_name": "nawfal", "reputation": 20216, "user_id": 661933, "user_type": "registered", "accept_rate": 94}, "comment_id": 29648203, "creation_date": 1384246525, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet oh yes I missed that!", "edited": false, "comment_id": 29650142, "creation_date": 1384249971, "score": 0, "owner": {"display_name": "nawfal", "reputation": 20216, "user_id": 661933, "user_type": "registered", "accept_rate": 94}}, {"body": "What about Append?", "edited": false, "comment_id": 32133603, "creation_date": 1390508909, "score": 0, "owner": {"display_name": "Rezo Megrelidze", "reputation": 955, "user_id": 2204040, "user_type": "registered"}}, {"body": "@rezomegreldize: That sounds like it&#39;s going to modify the original collection though :(", "edited": false, "reply_to_user": {"display_name": "Rezo Megrelidze", "reputation": 955, "user_id": 2204040, "user_type": "registered"}, "comment_id": 32137223, "creation_date": 1390515392, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Since nobody&#39;s mentioned Python: in Python, tuples are immutable, and they refer to this operation as &quot;concatenate&quot;, e.g. with <code>a=(1,2)</code> you can append an element with <code>a=a+(3,)</code>. The inverse (removing an item from a list) is called &quot;slicing&quot;, e.g <code>a=a[:-1]</code>. Even list concatenation returns a new list. So this is a language feature expected by experienced Python programmers. There are also <a href=\"http://docs.python.org/2/library/collections.html#collections.namedtuple\" rel=\"nofollow\">named tuples</a>, but these have no method naming conventions.", "edited": false, "comment_id": 32307091, "creation_date": 1390940215, "score": 0, "owner": {"display_name": "cod3monk3y", "reputation": 2245, "user_id": 1174169, "user_type": "registered", "accept_rate": 89}}], "comment_count": 50, "score": 197, "community_owned_date": 1233959055, "is_answered": true, "up_vote_count": 199, "tags": ["language-agnostic", "naming-conventions", "list", "immutability"], "reopen_vote_count": 0, "answer_count": 72, "answers": [{"community_owned_date": 1233959055, "body": "<p>I ended up going with Add for all of my Immutable Collections in <a href=\"http://code.msdn.microsoft.com/BclExtras\">BclExtras</a>.  The reason being is that it's an easy predictable name.  I'm not worried so much about people confusing Add with a mutating add since the name of the type is prefixed with Immutable.</p>\n\n<p>For awhile I considered Cons and other functional style names.  Eventually I discounted them because they're not nearly as well known.  Sure functional programmers will understand but they're not the majority of users.</p>\n\n<p>Other Names: you mentioned:</p>\n\n<ul>\n<li>Plus: I'm wishy/washing on this one.  For me this doesn't distinguish it as being a non-mutating operation anymore than Add does</li>\n<li>With: Will cause issues with VB (pun intended)</li>\n<li>Operator overloading: Discoverability would be an issue</li>\n</ul>\n\n<p>Options I considered:</p>\n\n<ul>\n<li>Concat: String's are Immutable and use this.  Unfortunately it's only really good for adding to the end</li>\n<li>CopyAdd: Copy what?  The source, the list?  </li>\n<li>AddToNewList: Maybe a good one for List.  But what about a Collection, Stack, Queue, etc ...</li>\n</ul>\n\n<p>Unfortunately there doesn't really seem to be a word that is </p>\n\n<ol>\n<li>Definitely an immutable operation</li>\n<li>Understandable to the majority of users</li>\n<li>Representable in less than 4 words </li>\n</ol>\n\n<p>It gets even more odd when you consider collections other than List.  Take for instance Stack.  Even first year programmers can tell you that Stacks have a Push/Pop pair of methods.  If you create an ImmutableStack and give it a completely different name, lets call it Foo/Fop, you've just added more work for them to use your collection.  </p>\n\n<p><strong>Edit:</strong> Response to Plus Edit</p>\n\n<p>I see where you're going with Plus.  I think a stronger case would actually be Minus for remove.  If I saw the following I would certainly wonder what in the world the programmer was thinking</p>\n\n<pre><code>list.Minus(obj);\n</code></pre>\n\n<p>The biggest problem I have with Plus/Minus or a new pairing is it feels like overkill.  The collection itself already has a distinguishing name, the Immutable prefix.  Why go further by adding vocabulary whose intent is to add the same distinction as the Immutable prefix already did.</p>\n\n<p>I can see the call site argument.  It makes it clearer from the standpoint of a single expression.  But in the context of the entire function it seems unnecessary.</p>\n\n<p><strong>Edit 2</strong></p>\n\n<p>Agree that people have definitely been confused by String.Concat and DateTime.Add.  I've seen several very bright programmers hit this problem.  </p>\n\n<p>However I think ImmutableList is a different argument.  There is nothing about String or DateTime that establishes it as Immutable to a programmer.  You must simply <em>know</em> that it's immutable via some other source.  So the confusion is not unexpected.  </p>\n\n<p>ImmutableList does not have that problem because the name defines it's behavior.  You could argue that people don't know what Immutable is and I think that's also valid.  I certainly didn't know it till about year 2 in college.  But you have the same issue with whatever name you choose instead of Add.  </p>\n\n<p><strong>Edit 3:</strong> What about types like TestSuite which are immutable but do not contain the word?</p>\n\n<p>I think this drives home the idea that you shouldn't be inventing new method names.  Namely because there is clearly a drive to make types immutable in order to facilitate parallel operations.  If you focus on changing the name of methods for collections, the next step will be the mutating method names on every type you use that is immutable. </p>\n\n<p>I think it would be a more valuable effort to instead focus on making types identifiable as Immutable.  That way you can solve the problem without rethinking every mutating method pattern out there.  </p>\n\n<p>Now how can you identify TestSuite as Immutable?  In todays environment I think there are a few ways</p>\n\n<ol>\n<li>Prefix with Immutable: ImmutableTestSuite</li>\n<li>Add an Attribute which describes the level of Immutablitiy.  This is certainly less discoverable</li>\n<li>Not much else.</li>\n</ol>\n\n<p>My guess/hope is development tools will start helping this problem by making it easy to identify immutable types simply by sight (different color, stronger font, etc ...).  But I think that's the answer though over changing all of the method names.  </p>\n", "is_accepted": false, "tags": [], "answer_id": 521911, "down_vote_count": 0, "last_activity_date": 1233954517, "comments": [{"body": "Have added reasons for my preference for Plus over Add to the question. Would welcome comments on that reasoning. I&#39;m <i>really</i> open to the idea that I&#39;m being silly.", "edited": false, "comment_id": 335321, "creation_date": 1233950562, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JaredPar: What about if the type is called TestSuite though?", "edited": false, "comment_id": 335469, "creation_date": 1233952748, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon, response in soon to come edit", "edited": false, "comment_id": 335495, "creation_date": 1233953011, "score": 0, "owner": {"display_name": "JaredPar", "reputation": 389992, "user_id": 23283, "user_type": "registered", "accept_rate": 100}}, {"body": "Would love to give another +1 for edit 3, but obviously can&#39;t. (In my case I&#39;m not trying to get parallelism - I believe that immutability leads to code which is easier to reason about.) I&#39;m still not <i>quite</i> convinced that Add is the way to go, but the support for in answers here is persuasive.", "edited": false, "comment_id": 335565, "creation_date": 1233954111, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "If you could happen to drop this question into conversation at work, that would be awesome too, btw. I started the discussion on a C# list, so some colleagues may already be involved. Might ask internally at Google too...", "edited": false, "comment_id": 335567, "creation_date": 1233954165, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon, I think I know a good place to drop this question at work :)", "edited": false, "comment_id": 335572, "creation_date": 1233954234, "score": 0, "owner": {"display_name": "JaredPar", "reputation": 389992, "user_id": 23283, "user_type": "registered", "accept_rate": 100}}, {"body": "ocaml does the same thing for it&#39;s immutable Set library. It&#39;s fine to call it add in my opinion.", "edited": false, "comment_id": 335696, "creation_date": 1233956320, "score": 0, "owner": {"display_name": "nlucaroni", "reputation": 26877, "user_id": 157, "user_type": "registered", "accept_rate": 95}}], "creation_date": 1233950043, "comment_count": 7, "score": 30, "owner": {"display_name": "JaredPar", "reputation": 389992, "user_id": 23283, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "JaredPar", "reputation": 389992, "user_id": 23283, "user_type": "registered", "accept_rate": 100}, "last_edit_date": 1233954517, "up_vote_count": 30}, {"community_owned_date": 1233959055, "body": "<p>To be as clear as possible, you might want to go with the wordier <code>CopyAndAdd</code>, or something similar.</p>\n", "answer_id": 521913, "tags": [], "down_vote_count": 0, "last_activity_date": 1233950103, "comments": [{"body": "Not all immutable collections require a copy to add though.  Think of immutable trees, they just need a new node and can use the existing tree as a leaf.", "edited": false, "comment_id": 335708, "creation_date": 1233956455, "score": 0, "owner": {"display_name": "JaredPar", "reputation": 389992, "user_id": 23283, "user_type": "registered", "accept_rate": 100}}, {"body": "BTW, I read your profile, then age in order and was briefly amazed at how old you were.  Sanity kicked in shortly thereafter.", "edited": false, "comment_id": 335718, "creation_date": 1233956565, "score": 0, "owner": {"display_name": "JaredPar", "reputation": 389992, "user_id": 23283, "user_type": "registered", "accept_rate": 100}}, {"body": "Re first comment: I use trees so rarely that that thought never occurred to me. That is a good point.", "edited": false, "comment_id": 335826, "creation_date": 1233957834, "score": 0, "owner": {"display_name": "Michael Myers", "reputation": 100007, "user_id": 13531, "user_type": "moderator", "accept_rate": 75}}, {"body": "Re second comment: I confess, I did it for the badge! I just don&#39;t like to give out my age. (I&#39;m actually younger than you, but I can play the crotchety old-timer pretty well if I need to. And I&#39;m not the only one whose age is listed as 89.)", "edited": false, "comment_id": 335849, "creation_date": 1233958072, "score": 0, "owner": {"display_name": "Michael Myers", "reputation": 100007, "user_id": 13531, "user_type": "moderator", "accept_rate": 75}}, {"body": "@mmyers, you&#39;re assuming that I didn&#39;t lie on my profile :)", "edited": false, "comment_id": 335933, "creation_date": 1233959038, "score": 0, "owner": {"display_name": "JaredPar", "reputation": 389992, "user_id": 23283, "user_type": "registered", "accept_rate": 100}}, {"body": "No, i didn&#39;t lie.  My age is correct", "edited": false, "comment_id": 335936, "creation_date": 1233959081, "score": 0, "owner": {"display_name": "JaredPar", "reputation": 389992, "user_id": 23283, "user_type": "registered", "accept_rate": 100}}, {"body": "The immutable trees argument is a strong one, good point. So then EquivalentReferenceWithAdded (x) would fight that argument, but sounds stupid, and hard to deduce.", "edited": false, "comment_id": 8382537, "creation_date": 1313016222, "score": 0, "owner": {"display_name": "TheBlastOne", "reputation": 2757, "user_id": 355294, "user_type": "registered", "accept_rate": 98}}], "creation_date": 1233950103, "comment_count": 7, "score": 21, "owner": {"display_name": "Michael Myers", "reputation": 100007, "user_id": 13531, "user_type": "moderator", "accept_rate": 75}, "is_accepted": false, "up_vote_count": 21}, {"community_owned_date": 1233958459, "body": "<p><strong>I Like And()</strong>.  I think it has the least potential for ambiguity. The only clash I can think of is with a logical And, I don't see that being a problem with a C# developer and even for VB I think the context makes it unlikely to cause a problem and any issue would be picked up quickly at compile time.  It also works well in in English \"Do something to These And That\" or \"Put These And That in the box\".</p>\n\n<p>I think <strong>.With() is OK</strong>.  My concern is it may look a little like a linq Where&lt;> method especially if there's a lambda as an argument.  The English in my head is also less clear especially \"Do something to These With That\".</p>\n\n<p><strong>I don't like .Plus()</strong>.  I can't get past it as a synonym for Add:  plus = plus sign = + = add.</p>\n", "is_accepted": false, "tags": [], "answer_id": 521915, "down_vote_count": 0, "last_activity_date": 1233958459, "creation_date": 1233950106, "comment_count": 0, "score": 0, "owner": {"display_name": "it depends", "reputation": 2820, "user_id": 53252, "user_type": "registered"}, "last_editor": {"display_name": "it depends", "reputation": 2820, "user_id": 53252, "user_type": "registered"}, "last_edit_date": 1233958459, "up_vote_count": 0}, {"community_owned_date": 1233959055, "body": "<p>DateTime in C# uses Add. So why not use the same name? As long the users of your class understand the class is immutable. </p>\n", "answer_id": 521916, "tags": [], "down_vote_count": 0, "last_activity_date": 1233950132, "comments": [{"body": "I&#39;d argue that DateTime.Add has been known to confuse people... but I agree it shows precedence.", "edited": false, "comment_id": 335294, "creation_date": 1233950298, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Just like methods to mutate a string are confusing to new developers. But soon enough everybody learns that &quot;strings are immutable&quot;", "edited": false, "comment_id": 335554, "creation_date": 1233953961, "score": 1, "owner": {"display_name": "Tundey", "reputation": 2243, "user_id": 1453, "user_type": "registered"}}], "creation_date": 1233950132, "comment_count": 2, "score": 10, "owner": {"display_name": "Tundey", "reputation": 2243, "user_id": 1453, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 10}, {"community_owned_date": 1233959055, "body": "<p>A few random thoughts:</p>\n\n<ul>\n<li>ImmutableAdd()</li>\n<li>Append()</li>\n<li>ImmutableList&lt;T>(ImmutableList&lt;T> originalList, T newItem) Constructor</li>\n</ul>\n", "answer_id": 521924, "tags": [], "down_vote_count": 0, "last_activity_date": 1233950204, "comments": [{"body": "+1 for ImmutableAdd; not keen on Append (too much like StringBuilder.Append which is mutating) and the constructor version is a pain in terms of chaining.", "edited": false, "comment_id": 335299, "creation_date": 1233950328, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1233950204, "comment_count": 1, "score": 11, "owner": {"display_name": "Chris Shaffer", "reputation": 20491, "user_id": 6744, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 11}, {"community_owned_date": 1233959055, "body": "<p>I think \"Add\" or \"Plus\" sounds fine.  The name of the list itself should be enough to convey the list's immutability. </p>\n", "answer_id": 521929, "tags": [], "down_vote_count": 2, "last_activity_date": 1233950235, "comments": [{"body": "It&#39;s no list, it&#39;s a test suite.", "edited": false, "comment_id": 2179196, "creation_date": 1265661997, "score": 0, "owner": {"display_name": "tstenner", "reputation": 4281, "user_id": 73299, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1233950235, "comment_count": 1, "score": 5, "owner": {"display_name": "David Morton", "reputation": 11590, "user_id": 45916, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1233959055, "body": "<p>\"Replace\"?  It doesn't add to the list, it replaces the list with a new one.</p>\n", "answer_id": 521942, "tags": [], "down_vote_count": 1, "last_activity_date": 1233950440, "comments": [{"body": "If I see foo.Replace(), I&#39;m going to think that foo is getting replaced.", "edited": false, "comment_id": 335505, "creation_date": 1233953223, "score": 0, "owner": {"display_name": "chaos", "reputation": 78028, "user_id": 47529, "user_type": "registered", "accept_rate": 100}}, {"body": "Yes, because it is.  Whereas when I see foo.add(), I&#39;m going to think that something is going to get added to foo, which it isn&#39;t in this case.", "edited": false, "comment_id": 335525, "creation_date": 1233953607, "score": 0, "owner": {"display_name": "Paul Tomblin", "reputation": 97228, "user_id": 3333, "user_type": "registered", "accept_rate": 83}}, {"body": "Usually, replace() takes 2 arguments, something to replace, and something to replace it with.  Not sure how clear it would be to see a replace method that does something different...", "edited": false, "comment_id": 335748, "creation_date": 1233956924, "score": 0, "owner": {"display_name": "Outlaw Programmer", "reputation": 7034, "user_id": 1471, "user_type": "registered", "accept_rate": 64}}], "creation_date": 1233950440, "comment_count": 3, "score": 0, "owner": {"display_name": "Paul Tomblin", "reputation": 97228, "user_id": 3333, "user_type": "registered", "accept_rate": 83}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1233959055, "body": "<p>I would call it <strong>Extend()</strong> or maybe <strong>ExtendWith()</strong> if you feel like really verbose.</p>\n\n<p>Extends means adding something to something else without changing it. I think this is very relevant terminology in C# since this is similar to the concept of extension methods - they \"add\" a new method to a class without \"touching\" the class itself.</p>\n\n<p>Otherwise, if you really want to emphasize that you don't modify the original object at all, using some prefix like Get- looks like unavoidable to me.</p>\n", "is_accepted": false, "tags": [], "answer_id": 521945, "down_vote_count": 1, "last_activity_date": 1233953668, "comments": [{"body": "Still kinda implies doing something to the base object.", "edited": false, "comment_id": 335501, "creation_date": 1233953161, "score": 1, "owner": {"display_name": "chaos", "reputation": 78028, "user_id": 47529, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1233950497, "comment_count": 1, "score": 19, "owner": {"display_name": "Tamas Czinege", "reputation": 58565, "user_id": 8954, "user_type": "registered", "accept_rate": 93}, "last_editor": {"display_name": "Tamas Czinege", "reputation": 58565, "user_id": 8954, "user_type": "registered", "accept_rate": 93}, "last_edit_date": 1233953668, "up_vote_count": 20}, {"community_owned_date": 1233959055, "body": "<p>I would go for the simple Add(). An alternative would be Append(), if you want to convey that this is really a collection operation.</p>\n\n<p>In addition to the explicit method, I'd still suggest implementing the obverloaded + operatr. It's a well known operation. Everybody knows String is immutable, yet everybody uses the '+' to build new instances of it.</p>\n", "answer_id": 521948, "tags": [], "down_vote_count": 0, "last_activity_date": 1233950546, "creation_date": 1233950546, "comment_count": 0, "score": 0, "owner": {"display_name": "Franci Penov", "reputation": 50415, "user_id": 17028, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1233959055, "body": "<p><code>Append</code> - because, note that names of the <code>System.String</code> methods suggest that they mutate the instance, but they don't.</p>\n\n<p>Or I quite like <code>AfterAppending</code>:</p>\n\n<pre><code>void test()\n{\n  Bar bar = new Bar();\n  List list = bar.AfterAppending(\"foo\");\n}\n</code></pre>\n", "answer_id": 521949, "tags": [], "down_vote_count": 0, "last_activity_date": 1233950557, "comments": [{"body": "Like the DateTime argument earlier, I&#39;d agree with the precedence if it weren&#39;t for the fact that so many programmers <i>do</i> expect string methods to do stuff. They have to be told (sometimes repeatedly) that strings are immutable. I&#39;d like to lure my client developers into the pit of success :)", "edited": false, "comment_id": 335324, "creation_date": 1233950632, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I like Append more and more. It distinguishes that you are not mutating the collection but joining to it.", "edited": false, "comment_id": 5457767, "creation_date": 1296853619, "score": 0, "owner": {"display_name": "user29439", "user_type": "does_not_exist"}}], "creation_date": 1233950557, "comment_count": 2, "score": 4, "owner": {"display_name": "ChrisW", "reputation": 39805, "user_id": 49942, "user_type": "registered", "accept_rate": 88}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1233959055, "body": "<p>I like mmyers suggestion of <strong>CopyAndAdd</strong>. In keeping with a \"mutation\" theme, maybe you could go with <strong>Bud</strong> (asexual reproduction), <strong>Grow</strong>, <strong>Replicate</strong>, or <strong>Evolve</strong>? =)</p>\n\n<p>EDIT: To continue with my genetic theme, how about <strong>Procreate</strong>, implying that a new object is made which is based on the previous one, but with something new added.</p>\n", "is_accepted": false, "tags": [], "answer_id": 521951, "down_vote_count": 0, "last_activity_date": 1233979996, "creation_date": 1233950592, "comment_count": 0, "score": 17, "owner": {"display_name": "gnovice", "reputation": 80456, "user_id": 52738, "user_type": "registered", "accept_rate": 50}, "last_editor": {"display_name": "gnovice", "reputation": 80456, "user_id": 52738, "user_type": "registered", "accept_rate": 50}, "last_edit_date": 1233979996, "up_vote_count": 17}, {"community_owned_date": 1233959055, "body": "<p>How about \"Augment\"?</p>\n\n<p>It's a different word from Add, but it's a close synonym.</p>\n", "answer_id": 521962, "tags": [], "down_vote_count": 0, "last_activity_date": 1233950753, "comments": [{"body": "It&#39;s still a verb which sounds like it&#39;s doing something <i>do</i> its target.", "edited": false, "comment_id": 335348, "creation_date": 1233951049, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1233950753, "comment_count": 1, "score": 0, "owner": {"display_name": "nsayer", "reputation": 6498, "user_id": 13757, "user_type": "registered", "accept_rate": 85}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1233959055, "body": "<p>I think the key thing you're trying to get at that's hard to express is the nonpermutation, so maybe something with a generative word in it, something like CopyWith() or InstancePlus().</p>\n", "answer_id": 521970, "tags": [], "down_vote_count": 0, "last_activity_date": 1233950831, "creation_date": 1233950831, "comment_count": 0, "score": 8, "owner": {"display_name": "chaos", "reputation": 78028, "user_id": 47529, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 8}, {"community_owned_date": 1233959055, "body": "<p>Actually I like <code>And</code>, especially in the idiomatic way.  I'd especially like it if you had a static readonly property for the Empty list, and perhaps make the constructor private so you always have to build from the empty list.</p>\n\n<pre><code>var list = ImmutableList&lt;string&gt;.Empty.And(\"Hello\")\n                                      .And(\"Immutable\")\n                                      .And(\"Word\");\n</code></pre>\n", "answer_id": 521992, "tags": [], "down_vote_count": 4, "last_activity_date": 1233951161, "comments": [{"body": "I like the Empty idea. Still not convinced about And though. It&#39;s just a bit blah.", "edited": false, "comment_id": 335374, "creation_date": 1233951345, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "It just seems more like how I would think about constructing a list of things in natural language. If you read it out loud it seems more intuitive than Add or Plus.  &quot;list&quot; is the empty list and &quot;Hello&quot; and &quot;Immutable&quot; and &quot;Word&quot;.  I would agree that it&#39;s less clear in isolation, though.", "edited": false, "comment_id": 335388, "creation_date": 1233951579, "score": 0, "owner": {"display_name": "tvanfosson", "reputation": 308606, "user_id": 12950, "user_type": "registered", "accept_rate": 95}}], "creation_date": 1233951161, "comment_count": 2, "score": 56, "owner": {"display_name": "tvanfosson", "reputation": 308606, "user_id": 12950, "user_type": "registered", "accept_rate": 95}, "is_accepted": false, "up_vote_count": 60}, {"community_owned_date": 1233959055, "body": "<p>Since the type name is ImmutableList thus specifying that it is infact immutable, I think that .Add() is fine.  However, If your really insistant on something else, I might go with something like .AddEx() where Ex means extended and implies that the user should determine what that Ex is (by reading docs) before using.  I also like the suggestion of Plus() and GetCopyWith()</p>\n", "answer_id": 522057, "tags": [], "down_vote_count": 0, "last_activity_date": 1233952490, "creation_date": 1233952490, "comment_count": 0, "score": 0, "owner": {"display_name": "shsteimer", "reputation": 10802, "user_id": 292, "user_type": "registered", "accept_rate": 73}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1233959055, "body": "<p>I don't think the English language will let you imply immutability in an unmistakable way while using a verb that means the same thing as \"Add\".  \"Plus\" almost does it, but people can still make the mistake.  </p>\n\n<p>The only way you're going to prevent your users from mistaking the object for something mutable is by making it explicit, either through the name of the object itself or through the name of the method (as with the verbose options like \"GetCopyWith\" or \"CopyAndAdd\").</p>\n\n<p>So just go with your favourite, \"Plus.\"</p>\n", "answer_id": 522063, "tags": [], "down_vote_count": 0, "last_activity_date": 1233952568, "creation_date": 1233952568, "comment_count": 0, "score": 9, "owner": {"display_name": "Adam Bellaire", "reputation": 50568, "user_id": 21632, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 9}, {"community_owned_date": 1233959055, "body": "<p>Whenever I'm in a jam with nomenclature, I hit up the interwebs.</p>\n\n<p><a href=\"http://www.thesaurus.com\">thesaurus.com</a> returns this for \"add\":</p>\n\n<blockquote>\n  <p><strong>Definition:</strong> adjoin, increase; make\n  further comment</p>\n  \n  <p><strong>Synonyms:</strong> affix,\n  annex, ante, append, augment, beef\n  up, boost, build up, charge up,\n  continue, cue in, figure in, flesh\n  out, heat up, hike, hike up, hitch on,\n  hook on, hook up with, include, jack\n  up, jazz up, join together, pad,\n  parlay, piggyback, plug into, pour it\n  on, reply, run up, say further, slap\n  on, snowball, soup up, speed up,\n  spike, step up, supplement, sweeten,\n  tack on, tag</p>\n</blockquote>\n\n<p>I like the sound of <code>Adjoin</code>, or more simply <code>Join</code>.  That is what you're doing, right?  The method could also apply to joining other <code>ImmutableList&lt;&gt;</code>'s.</p>\n", "answer_id": 522144, "tags": [], "down_vote_count": 1, "last_activity_date": 1233953876, "comments": [{"body": "I kind of like &#39;Join&#39; also but it, in most cases, when you join 2 objects, you end up with 1.  In this case, if you join 2 objects, you&#39;re actually creating a new object.", "edited": false, "comment_id": 335775, "creation_date": 1233957168, "score": 1, "owner": {"display_name": "Outlaw Programmer", "reputation": 7034, "user_id": 1471, "user_type": "registered", "accept_rate": 64}}, {"body": "I don&#39;t know of any cases in .NET, Perl, PHP, or even VBScript where Join implies mutation.  The design is such that A and B joins to make C, where C is always a new entity.", "edited": false, "comment_id": 335834, "creation_date": 1233957914, "score": 0, "owner": {"display_name": "spoulson", "reputation": 15267, "user_id": 3347, "user_type": "registered", "accept_rate": 51}}, {"body": "I like Join, and I totally agree with thesaurus.com :) Use it all the time when in doubt about a name.", "edited": false, "comment_id": 860283, "creation_date": 1246020645, "score": 0, "owner": {"display_name": "Skurmedel", "reputation": 10741, "user_id": 12183, "user_type": "registered", "accept_rate": 85}}, {"body": "var suite = new TestSuite&lt;string, int&gt;() .Join(x =&gt; x.Length);", "edited": false, "comment_id": 1110326, "creation_date": 1250308690, "score": 0, "owner": {"display_name": "Sly Gryphon", "reputation": 3102, "user_id": 99186, "user_type": "registered"}}, {"body": "I see your point, but be careful with this: <a href=\"http://mindprod.com/jgloss/unmainnaming.html\" rel=\"nofollow\">mindprod.com/jgloss/unmainnaming.html</a> (no. 6)", "edited": false, "comment_id": 1546516, "creation_date": 1257333861, "score": 0, "owner": {"display_name": "Marc Wittke", "reputation": 1279, "user_id": 164162, "user_type": "registered", "accept_rate": 78}}, {"body": "Go with Piggyback, imo.  Or HookUpWith.", "edited": false, "comment_id": 9206431, "creation_date": 1317247006, "score": 1, "owner": {"display_name": "Chris Marasti-Georg", "reputation": 20031, "user_id": 96, "user_type": "registered", "accept_rate": 69}}], "creation_date": 1233953876, "comment_count": 6, "score": 47, "owner": {"display_name": "spoulson", "reputation": 15267, "user_id": 3347, "user_type": "registered", "accept_rate": 51}, "is_accepted": false, "up_vote_count": 48}, {"community_owned_date": 1233959055, "body": "<p>Personally, I like .With().  If I was using the object, after reading the documentation or the code comments, it would be clear what it does, and it reads ok in the source code.</p>\n\n<pre><code>object.With(\"My new item as well\");\n</code></pre>\n\n<p>Or, you add \"Along\" with it..  :)</p>\n\n<pre><code>object.AlongWith(\"this new item\");\n</code></pre>\n", "answer_id": 522166, "tags": [], "down_vote_count": 0, "last_activity_date": 1233954158, "comments": [{"body": "+1. &quot;WITH&quot; is an infix operator in SETL that does the same thing.  If SETL uses it then it must be right :-)", "edited": false, "comment_id": 860291, "creation_date": 1246020718, "score": 0, "owner": {"display_name": "finnw", "reputation": 27950, "user_id": 12048, "user_type": "registered", "accept_rate": 94}}, {"body": "+1; this might be confusing in vb, though", "edited": false, "comment_id": 1348579, "creation_date": 1254283573, "score": 0, "owner": {"display_name": "Michael Haren", "reputation": 50635, "user_id": 29, "user_type": "registered", "accept_rate": 86}}, {"body": "Bah...  Who uses VB anymore?  :)  Uh..  Opps.. Was that out loud?  heh..  But, no, in all seriousness, that&#39;s why I considered the &quot;AlongWith&quot;, that would remove the VB issue.  There are only about a million different ways he could go with this one...  I mean, even insane ones like: object.Plus(), or Object.ExistingPlus()...  etc...  It&#39;s a damn good question he posted, however...  heh..", "edited": false, "comment_id": 1674567, "creation_date": 1259033097, "score": 0, "owner": {"display_name": "LarryF", "reputation": 3059, "user_id": 18518, "user_type": "registered", "accept_rate": 67}}], "creation_date": 1233954158, "comment_count": 3, "score": 44, "owner": {"display_name": "LarryF", "reputation": 3059, "user_id": 18518, "user_type": "registered", "accept_rate": 67}, "is_accepted": false, "up_vote_count": 44}, {"community_owned_date": 1233959055, "body": "<p>I'd go with Cons, for one simple reason: it means exactly what you want it to.</p>\n\n<ol>\n<li><p>I'm a huge fan of saying exactly what I mean, especially in source code.  A newbie will have to look up the definition of Cons only once, but then read and use that a thousand times.  I find that, in the long term, it's nicer to work with systems that make the common case easier, even if the up-front cost is a little bit higher.</p></li>\n<li><p>The fact that it would be \"meaningless\" to people with no FP experience is actually a big advantage.  As you pointed out, all of the other words you found already have some meaning, and that meaning is either slightly different or ambiguous.  A new concept <em>should</em> have a new word (or in this case, an old one).  I'd rather somebody have to look up the definition of Cons, than to assume incorrectly he knows what Add does.</p></li>\n<li><p>Other operations borrowed from functional languages often keep their original names, with no apparent catastrophes.  I haven't seen any push to come up with synonyms for \"map\" and \"reduce\" that sound more familiar to non-FPers, nor do I see any benefit from doing so.</p></li>\n</ol>\n\n<p>(Full disclosure: I'm a Lisp programmer, so I already know what Cons means.)</p>\n", "answer_id": 522168, "tags": [], "down_vote_count": 3, "last_activity_date": 1233954217, "comments": [{"body": "Don&#39;t forget that discoverability is important though - if I type &quot;testSuite.&quot; and look at the list of methods, I would like to see a method which suggests the right thing. I probably won&#39;t look up a nonsensical (to me) name on the offchance it&#39;s what I want.", "edited": false, "comment_id": 335592, "creation_date": 1233954580, "score": 15, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "+1 for nice explanation of your reasoning though.", "edited": false, "comment_id": 335597, "creation_date": 1233954617, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "If I was feeling snarky, I&#39;d make a method Add which simply threw an exception with message=&quot;Use Cons to prepend to an ImmutableList&quot;.  :-)", "edited": false, "comment_id": 342200, "creation_date": 1234203134, "score": 31, "owner": {"display_name": "Ken", "reputation": 2067, "user_id": 53607, "user_type": "unregistered", "accept_rate": 73}}, {"body": "It won&#39;t kill anyone to read a few lines of comments explaining why the name is what it is, and referring them to, say, Abelson &amp; Sussman&#39;s &quot;Structure and Interpretation of Computer Programs&quot;.", "edited": false, "comment_id": 2170510, "creation_date": 1265559927, "score": 2, "owner": {"display_name": "John R. Strohm", "reputation": 5746, "user_id": 157168, "user_type": "registered", "accept_rate": 80}}, {"body": "Traditionally, cons adds at the beginning rather than the end. So it is a potentially misleading name for the method described.", "edited": false, "comment_id": 2722121, "creation_date": 1272034968, "score": 12, "owner": {"display_name": "walkytalky", "reputation": 7610, "user_id": 198501, "user_type": "registered"}}, {"body": "Just to save the the next non-functional programmer a click or 3... <a href=\"http://en.wikipedia.org/wiki/Cons\" rel=\"nofollow\">en.wikipedia.org/wiki/Cons</a> from the word &quot;construct&quot;, the expression &quot;to cons x onto y&quot; means to construct a new object with (cons x y)", "edited": false, "comment_id": 2969559, "creation_date": 1274915830, "score": 13, "owner": {"display_name": "Myster", "reputation": 5681, "user_id": 74449, "user_type": "registered", "accept_rate": 70}}, {"body": "Seeing as Cons means Construct, and the implementation is just going to directly call a constructor in 99% of cases, I&#39;d skip the Cons method entirely and just use the constructor.", "edited": false, "comment_id": 3941949, "creation_date": 1284688403, "score": 0, "owner": {"display_name": "Joren", "reputation": 8973, "user_id": 174335, "user_type": "registered"}}, {"body": "@Joren that&#39;s not going to give the user a defined behavior though. <code>MyImmutableThing(oldThing,smallAddition)</code> doesn&#39;t make for a very intuitive constructor.", "edited": false, "reply_to_user": {"display_name": "Joren", "reputation": 8973, "user_id": 174335, "user_type": "registered"}, "comment_id": 7568327, "creation_date": 1308774123, "score": 1, "owner": {"display_name": "corsiKa", "reputation": 45287, "user_id": 330057, "user_type": "registered", "accept_rate": 79}}, {"body": "Cons is most often used for lists. As I read OP, the name should also work for trees and sets.", "edited": false, "comment_id": 10703281, "creation_date": 1324680841, "score": 0, "owner": {"display_name": "Thomas Ahle", "reputation": 12966, "user_id": 205521, "user_type": "registered", "accept_rate": 89}}, {"body": "@walkytalky I&#39;ve seen snoc used for appending (eg that&#39;s what Okasaki does)", "edited": false, "reply_to_user": {"display_name": "walkytalky", "reputation": 7610, "user_id": 198501, "user_type": "registered"}, "comment_id": 14106163, "creation_date": 1338470782, "score": 0, "owner": {"display_name": "dubiousjim", "reputation": 2624, "user_id": 272427, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1233954217, "comment_count": 10, "score": 118, "owner": {"display_name": "Ken", "reputation": 2067, "user_id": 53607, "user_type": "unregistered", "accept_rate": 73}, "is_accepted": false, "up_vote_count": 121}, {"community_owned_date": 1233959055, "body": "<p>.Trail implies a very strong understanding of the list has not changed, this object is trailing behind the list, it has not been added to it.</p>\n\n<pre><code>var list = new ImmutableList&lt;string&gt;().Trail(\"Hello\");\n                                      .Trail(\"immutable\");\n                                      .Trail(\"word\");\n</code></pre>\n", "answer_id": 522188, "tags": [], "down_vote_count": 1, "last_activity_date": 1233954597, "creation_date": 1233954597, "comment_count": 0, "score": 0, "owner": {"display_name": "Chris Marisic", "reputation": 13856, "user_id": 37055, "user_type": "registered", "accept_rate": 84}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1233959055, "body": "<p>Maybe there are some words which remember me more of making a copy and add stuff to that instead of mutating the instance (like \"Concatenate\"). But i think having some symmetry for those words for other actions would be good to have too. I don't know of a similar word for \"Remove\" that i think of the same kind like \"Concatenate\". \"Plus\" sounds little strange to me. I wouldn't expect it being used in a non-numerical context. But that could aswell come from my non-english background.</p>\n\n<p>Maybe i would use this scheme</p>\n\n<pre><code>AddToCopy\nRemoveFromCopy\nInsertIntoCopy\n</code></pre>\n\n<p>These have their own problems though, when i think about it. One could think they remove something or add something to an argument given. Not sure about it at all. Those words do not play nice in chaining either, i think. Too wordy to type. </p>\n\n<p>Maybe i would just use plain \"Add\" and friends too. I like how it is used in math</p>\n\n<pre><code>Add 1 to 2 and you get 3\n</code></pre>\n\n<p>Well, certainly, a 2 remains a 2 and you get a new number. This is about two numbers and not about a list and an element, but i think it has some analogy. In my opinion, <code>add</code> does not necessarily mean you mutate something. I certainly see your point that having a lonely statement containing just an <code>add</code> and not using the returned new object does not look buggy. But I've now also thought some time about that idea of using another name than \"add\" but i just can't come up with another name, without making me think \"hmm, i would need to look at the documentation to know what it is about\" because its name differs from what I would expect to be called \"add\". Just some weird thought about this from litb, not sure it makes sense at all :)</p>\n", "is_accepted": false, "tags": [], "answer_id": 522194, "down_vote_count": 0, "last_activity_date": 1233959616, "comments": [{"body": "But a copy is not always necessary in an immutable collection.  Take a binary tree for instance.  Adding a new root requires no copying, just a new value where one of the leafs is the old tree", "edited": false, "comment_id": 335632, "creation_date": 1233955302, "score": 0, "owner": {"display_name": "JaredPar", "reputation": 389992, "user_id": 23283, "user_type": "registered", "accept_rate": 100}}, {"body": "KISS - If naming started to include implementation details all method names would become overly long. &quot;add&quot; is simple enough and does the job.", "edited": false, "comment_id": 336820, "creation_date": 1233992529, "score": 0, "owner": {"display_name": "mP.", "reputation": 8673, "user_id": 56524, "user_type": "registered", "accept_rate": 45}}, {"body": "@mP: Again you use the phrase &quot;implementation detail&quot; in a way which I believe is unsuitable. Whether it&#39;s a linked list or an array under the hood is an <i>implementation</i> detail. I could change the <i>implementation</i> without changing the API. The immutable aspect is <i>not</i> an implementation detail.", "edited": false, "comment_id": 339389, "creation_date": 1234124547, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "right. JaredPar, but i think it&#39;s also not important whether it <i>actually</i> copies the tree or just uses the existing tree and use it as a leaf for the new tree returned. i mean, <i>that</i> is just an implementation detail. it&#39;s the same for (i believe) the substring operation for java&#39;s string class.", "edited": false, "comment_id": 339433, "creation_date": 1234126216, "score": 1, "owner": {"display_name": "Johannes Schaub - litb", "reputation": 296033, "user_id": 34509, "user_type": "registered", "accept_rate": 63}}], "creation_date": 1233954689, "comment_count": 4, "score": 5, "owner": {"display_name": "Johannes Schaub - litb", "reputation": 296033, "user_id": 34509, "user_type": "registered", "accept_rate": 63}, "last_editor": {"display_name": "Johannes Schaub - litb", "reputation": 296033, "user_id": 34509, "user_type": "registered", "accept_rate": 63}, "last_edit_date": 1233959616, "up_vote_count": 5}, {"community_owned_date": 1233959055, "body": "<p>\"add()\" </p>\n\n<p>The fact it returns a new list is immaterial thats an implementation detail revealed by the signature. The main action that the method accomplishes is \"adding\" a new element to a list. How or what it deos or returns should not be part of the method name. If a method was synchronized would that affect the method name -\"synchronizedAdd()\" ??? - of course not.</p>\n\n<p>Classes like String which follow the would-be-mutator pattern still have really simple method names - none are compounded words.</p>\n", "answer_id": 522204, "tags": [], "down_vote_count": 0, "last_activity_date": 1233954888, "comments": [{"body": "a) String confuses people; b) the signature doesn&#39;t reveal the non-mutation: see StringBuilder.Append. The point is that the method <i>doesn&#39;t</i> add a new element to <i>this</i> list; it creates a <i>new</i> list with the extra element. I don&#39;t believe that &quot;Add&quot; makes that clear.", "edited": false, "comment_id": 335635, "creation_date": 1233955335, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I also dispute the idea that it&#39;s an &quot;implementation detail&quot;. To me, an implementation detail is something one can largely ignore - here, if you ignore it and assume it works like a mutable list, you&#39;ll almost certainly get it wrong.", "edited": false, "comment_id": 335638, "creation_date": 1233955375, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "(I don&#39;t want to sound ungrateful just because I disagree, btw - thanks very much for the answer!)", "edited": false, "comment_id": 335659, "creation_date": 1233955641, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "The fact that it returns a new list is the entire point. If you mutate, then &quot;b = a.Add(x);&quot; may not even compile, and the correct code is just &quot;a.Add(x);&quot;. If you don&#39;t mutate then &quot;a.Add(x);&quot; will still compile, but in fact is just a no-op.", "edited": false, "comment_id": 336254, "creation_date": 1233966534, "score": 0, "owner": {"display_name": "Wedge", "reputation": 13231, "user_id": 332, "user_type": "registered", "accept_rate": 100}}, {"body": "@Jon Developers need to have some level of competance and <i>understand</i> what happens for so called mutator methods on immutable classes. Given that we know String is immutable then it becomes obvious that any mutator methods return new Strings ...", "edited": false, "comment_id": 336753, "creation_date": 1233988589, "score": 0, "owner": {"display_name": "mP.", "reputation": 8673, "user_id": 56524, "user_type": "registered", "accept_rate": 45}}, {"body": "@Jon Are you saying the Dot.net + Java lib designers gave bad names ?  Are you saying the Dot.net guys made the same mistake as the Java guys - i dont think so.  I would disagree the names are concise and anyone with some level of competance understands what happens.", "edited": false, "comment_id": 336755, "creation_date": 1233988644, "score": 0, "owner": {"display_name": "mP.", "reputation": 8673, "user_id": 56524, "user_type": "registered", "accept_rate": 45}}, {"body": "@Wedge Its not a nop - something does happen - the new list is still created - the problem is your code doesnt use the new list.  Method names should describe what they generally do. You cant put the entire lifes story in the method name - eg StringBuilder.append() its not appendReturnsNewSB.", "edited": false, "comment_id": 336756, "creation_date": 1233988733, "score": 0, "owner": {"display_name": "mP.", "reputation": 8673, "user_id": 56524, "user_type": "registered", "accept_rate": 45}}, {"body": "Sorry with the last line - its a bit mixed up - should say String.appendReturnsSameStringBuilderNotANewCopy().", "edited": false, "comment_id": 336821, "creation_date": 1233992634, "score": 0, "owner": {"display_name": "mP.", "reputation": 8673, "user_id": 56524, "user_type": "registered", "accept_rate": 45}}, {"body": "@Wedge Go scan/read the javadoc apis (im sure the same will be true of dotnet) and you will notice that they never include &quot;immutable&quot; in any method name - even for immutable classes.  Method names should be simple words or identifiers of the action.", "edited": false, "comment_id": 338102, "creation_date": 1234053791, "score": 0, "owner": {"display_name": "mP.", "reputation": 8673, "user_id": 56524, "user_type": "registered", "accept_rate": 45}}, {"body": "@Wedge It would be impractical for methods to have all the important details of what happens. There are many examples in java/dotnet that illustrate this.", "edited": false, "comment_id": 338106, "creation_date": 1234053888, "score": 0, "owner": {"display_name": "mP.", "reputation": 8673, "user_id": 56524, "user_type": "registered", "accept_rate": 45}}, {"body": "@mP: I&#39;m saying that lots of people are thrown by the fact that strings are immutable. For core types that&#39;s not too bad - anyone with a question will get an answer very quickly. For my framework, I doubt there&#39;ll be as many people ready to help :) I want to make the barrier to entry <i>very</i> low.", "edited": false, "comment_id": 339386, "creation_date": 1234124455, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon: Ultimately any users of any framework needs to spend a minute or two when using any class for the first time. The preamble dutifully should describe how and what the class does. Otherwise how will discover your class to begin with. Whilst they are add it they may as well read the doco.", "edited": false, "comment_id": 339703, "creation_date": 1234133757, "score": 0, "owner": {"display_name": "mP.", "reputation": 8673, "user_id": 56524, "user_type": "registered", "accept_rate": 45}}], "creation_date": 1233954888, "comment_count": 12, "score": 0, "owner": {"display_name": "mP.", "reputation": 8673, "user_id": 56524, "user_type": "registered", "accept_rate": 45}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1233959055, "body": "<p>In situations like that, I usually go with <code>Concat</code>.  That usually implies to me that a new object is being created.</p>\n\n<pre><code>var p = listA.Concat(listB);\nvar k = listA.Concat(item);\n</code></pre>\n", "answer_id": 522226, "tags": [], "down_vote_count": 0, "last_activity_date": 1233955352, "comments": [{"body": "This is what I use, because it&#39;s what System.Linq.Enumerable uses - the decision is already made. :) I can&#39;t be the only person who has defined his own overload of the Concat extension on IEnumerable to accept a single value to be appended.", "edited": false, "comment_id": 845332, "creation_date": 1245787471, "score": 3, "owner": {"display_name": "Daniel Earwicker", "reputation": 71665, "user_id": 27423, "user_type": "registered", "accept_rate": 84}}, {"body": "+1 This is <i>the</i> correct answer for maintaining naming consistency within the framework.", "edited": false, "comment_id": 2170935, "creation_date": 1265566982, "score": 9, "owner": {"display_name": "Sam Harwell", "reputation": 60675, "user_id": 138304, "user_type": "registered", "accept_rate": 67}}, {"body": "+1 Sounds consistent, but let&#180;s see if CopyWithAdded has been suggested yet...", "edited": false, "comment_id": 8382491, "creation_date": 1313015933, "score": 0, "owner": {"display_name": "TheBlastOne", "reputation": 2757, "user_id": 355294, "user_type": "registered", "accept_rate": 98}}, {"body": "+1.  Only answer that is formal and consistent", "edited": false, "comment_id": 14067740, "creation_date": 1338353506, "score": 1, "owner": {"display_name": "csauve", "reputation": 1112, "user_id": 65580, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1233955352, "comment_count": 4, "score": 118, "owner": {"display_name": "MojoFilter", "reputation": 4487, "user_id": 93, "user_type": "registered", "accept_rate": 94}, "is_accepted": false, "up_vote_count": 118}, {"community_owned_date": 1233959055, "body": "<p>I think this may be one of those rare situations where it's acceptable to overload the <code>+</code> operator.  In math terminology, we know that <code>+</code> doesn't append something to the end of something else.  It always combines two values together and returns a new resulting value.</p>\n\n<p>For example, it's intuitively obvious that when you say</p>\n\n<pre><code>x = 2 + 2;\n</code></pre>\n\n<p>the resulting value of x is 4, not 22.</p>\n\n<p>Similarly,</p>\n\n<pre><code>var empty = new ImmutableList&lt;string&gt;();\nvar list1 = empty + \"Hello\";\nvar list2 = list1 + \"immutable\";\nvar list3 = list2 + \"word\";\n</code></pre>\n\n<p>should make clear what each variable is going to hold.  It should be clear that <code>list2</code> is not <em>changed</em> in the last line, but instead that <code>list3</code> is assigned the result of appending \"word\" to <code>list2</code>.</p>\n\n<p>Otherwise, I would just name the function Plus().</p>\n", "is_accepted": false, "tags": [], "answer_id": 522243, "down_vote_count": 0, "last_activity_date": 1233956124, "comments": [{"body": "What if you have a generic list, to which you could legitimately add an integer (say) <i>or</i> another list of integers?  Then this use of + will conflict with concatenation.", "edited": false, "comment_id": 860303, "creation_date": 1246020823, "score": 0, "owner": {"display_name": "finnw", "reputation": 27950, "user_id": 12048, "user_type": "registered", "accept_rate": 94}}, {"body": "@finnw: I don&#39;t see your point.  With a list I would always expect + to mean append, whether you&#39;re adding one element or many.", "edited": false, "comment_id": 860341, "creation_date": 1246021156, "score": 0, "owner": {"display_name": "Bill the Lizard", "reputation": 182561, "user_id": 1288, "user_type": "registered", "accept_rate": 94}}, {"body": "For a reusable API, it&#39;s a good idea to also have a named method, in case someone is using your class from a language without operator overloading.", "edited": false, "comment_id": 1860050, "creation_date": 1261515030, "score": 4, "owner": {"display_name": "Neil Whitaker", "reputation": 3378, "user_id": 24315, "user_type": "registered"}}, {"body": "&quot;whether you&#39;re adding one element or many&quot; -- what if you want to add the list as a single element? i.e., <code>[1] + 2 = [1,2]</code> but <code>[1] + [2] = [1,[2]]</code>. What you&#39;re suggesting is inconsistent behavior. This is probably why Python doesn&#39;t allow you to add <i>one</i> element in this fashion.", "edited": false, "reply_to_user": {"display_name": "Bill the Lizard", "reputation": 182561, "user_id": 1288, "user_type": "registered", "accept_rate": 94}, "comment_id": 3570188, "creation_date": 1281144553, "score": 0, "owner": {"display_name": "Mark", "reputation": 66066, "user_id": 65387, "user_type": "registered", "accept_rate": 67}}, {"body": "Well, in a statically typed language like C# you can tell what the type of list elements is, whether a list of lists or a list of elements, so you can use the type to decide whether to add one element that is a list or concatenate the two lists.", "edited": false, "comment_id": 36454246, "creation_date": 1400390922, "score": 0, "owner": {"display_name": "Dobes Vandermeer", "reputation": 2616, "user_id": 399738, "user_type": "registered", "accept_rate": 72}}], "creation_date": 1233955671, "comment_count": 5, "score": 26, "owner": {"display_name": "Bill the Lizard", "reputation": 182561, "user_id": 1288, "user_type": "registered", "accept_rate": 94}, "last_editor": {"display_name": "Bill the Lizard", "reputation": 182561, "user_id": 1288, "user_type": "registered", "accept_rate": 94}, "last_edit_date": 1233956124, "up_vote_count": 26}, {"community_owned_date": 1233959055, "body": "<p>First, an interesting starting point:\n<a href=\"http://en.wikipedia.org/wiki/Naming_conventions_(programming)\">http://en.wikipedia.org/wiki/Naming_conventions_(programming)</a>  ...In particular, check the \"See Also\" links at the bottom.</p>\n\n<p>I'm in favor of either Plus or And, effectively equally.</p>\n\n<p>Plus and And are both math-based in etymology.  As such, both connote mathematical operation; both yield an expression which reads naturally as expressions which may resolve into a value, which fits with the method having a return value.  <code>And</code> bears additional logic connotation, but both words apply intuitively to lists.  <code>Add</code> connotes action performed on an object, which conflicts with the method's immutable semantics.</p>\n\n<p>Both are short, which is especially important given the primitiveness of the operation.  Simple, frequently-performed operations deserve shorter names.</p>\n\n<p>Expressing immutable semantics is something I prefer to do via context.  That is, I'd rather simply imply that this entire block of code has a functional feel; assume everything is immutable.  That might just be me, however.  I prefer immutability to be the rule; if it's done, it's done a lot in the same place; <em>mutability</em> is the exception.</p>\n", "answer_id": 522259, "tags": [], "down_vote_count": 0, "last_activity_date": 1233955817, "creation_date": 1233955817, "comment_count": 0, "score": 8, "owner": {"display_name": "Paul Brinkley", "reputation": 3096, "user_id": 18160, "user_type": "registered", "accept_rate": 60}, "is_accepted": false, "up_vote_count": 8}, {"community_owned_date": 1233959055, "body": "<p>Added(), Appended()</p>\n\n<p>I like to use the past tense for operations on immutable objects. It conveys the idea that you aren't changing the original object, and it's easy to recognize when you see it.</p>\n\n<p>Also, because mutating method names are often present-tense verbs, it applies to most of the immutable-method-name-needed cases you run into. For example an immutable stack has the methods \"pushed\" and \"popped\".</p>\n", "is_accepted": false, "tags": [], "answer_id": 522272, "down_vote_count": 0, "last_activity_date": 1233956791, "comments": [{"body": "Python also uses this convention. E.g. built-in functions reversed() and sorted().", "edited": false, "comment_id": 4971186, "creation_date": 1293423467, "score": 1, "owner": {"display_name": "Joe", "reputation": 4622, "user_id": 233098, "user_type": "registered", "accept_rate": 85}}], "creation_date": 1233956055, "comment_count": 1, "score": 15, "owner": {"display_name": "Strilanc", "reputation": 8556, "user_id": 52239, "user_type": "registered", "accept_rate": 82}, "last_editor": {"display_name": "Strilanc", "reputation": 8556, "user_id": 52239, "user_type": "registered", "accept_rate": 82}, "last_edit_date": 1233956791, "up_vote_count": 15}, {"community_owned_date": 1233959055, "body": "<p>How about Chain() or Attach()?</p>\n", "answer_id": 522330, "tags": [], "down_vote_count": 0, "last_activity_date": 1233956912, "comments": [{"body": "Attach surely sounds like being mutating. Maybe WithAttached would be wiser, but is very close to WithAdded, which has been discussed above.", "edited": false, "comment_id": 8382576, "creation_date": 1313016409, "score": 1, "owner": {"display_name": "TheBlastOne", "reputation": 2757, "user_id": 355294, "user_type": "registered", "accept_rate": 98}}, {"body": "It&#39;s funny how many times &quot;chaining&quot; is mentioned in describing what is trying to be done with this. (5 times), but not offered as a suggestion! It&#39;s the first thing that came up on <code>visualthesaurus.com</code> (no affiliation) when I searched for <code>concatenate</code>.", "edited": false, "comment_id": 32307437, "creation_date": 1390940854, "score": 0, "owner": {"display_name": "cod3monk3y", "reputation": 2245, "user_id": 1174169, "user_type": "registered", "accept_rate": 89}}], "creation_date": 1233956912, "comment_count": 2, "score": 8, "owner": {"display_name": "Webjedi", "reputation": 2828, "user_id": 1975, "user_type": "registered", "accept_rate": 87}, "is_accepted": false, "up_vote_count": 8}, {"community_owned_date": 1233959055, "body": "<p>2 suggestions:</p>\n\n<p>A \"free\" function:</p>\n\n<pre><code>Foo f = new Foo(whatever);\nFoo fPlusSomething = Foo.Concat(f, something);\n</code></pre>\n\n<p>A constructor overload (which is, in a way, a variation on the \"free function\" theme):</p>\n\n<pre><code>Foo f = new Foo(whatever);\nFoo fPlusSomething = new Foo(f, something);\n</code></pre>\n", "answer_id": 522447, "tags": [], "down_vote_count": 0, "last_activity_date": 1233958725, "creation_date": 1233958725, "comment_count": 0, "score": 1, "owner": {"display_name": "\u00c9ric Malenfant", "reputation": 10732, "user_id": 59781, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1233959055, "body": "<p>How about <strong>mate</strong>, <strong>mateWith</strong>, or <strong>coitus</strong>, for those who abide.  In terms of reproducing mammals are generally considered immutable.</p>\n\n<p>Going to throw <strong>Union</strong> out there too.  Borrowed from SQL.</p>\n", "is_accepted": false, "tags": [], "answer_id": 522473, "down_vote_count": 1, "last_activity_date": 1233960724, "comments": [{"body": "+1 for Union. I, however, borrow it directly from set theory. :-)", "edited": false, "comment_id": 1475376, "creation_date": 1256242484, "score": 2, "owner": {"display_name": "Christoffer Lette", "reputation": 6087, "user_id": 11808, "user_type": "registered", "accept_rate": 100}}, {"body": "Doesn&#39;t SQL get much of its terminology from set theory?", "edited": false, "comment_id": 1695219, "creation_date": 1259296428, "score": 0, "owner": {"display_name": "Jason D", "reputation": 2028, "user_id": 215962, "user_type": "registered"}}, {"body": "Also, Union implies distinction .. If you want to include duplicates (at least in TSQL), you have to use Union All explicitly.", "edited": false, "comment_id": 3037143, "creation_date": 1275674774, "score": 1, "owner": {"display_name": "hemp", "reputation": 3518, "user_id": 51055, "user_type": "registered"}}], "creation_date": 1233959055, "comment_count": 3, "score": 6, "owner": {"display_name": "jason saldo", "reputation": 5492, "user_id": 1293, "user_type": "registered", "accept_rate": 92}, "last_editor": {"display_name": "jason saldo", "reputation": 5492, "user_id": 1293, "user_type": "registered", "accept_rate": 92}, "last_edit_date": 1233960724, "up_vote_count": 7}, {"community_owned_date": 1233960137, "body": "<p><code>Join</code> seems appropriate.</p>\n", "answer_id": 522549, "tags": [], "down_vote_count": 0, "last_activity_date": 1233960137, "creation_date": 1233960137, "comment_count": 0, "score": 12, "owner": {"display_name": "ykaganovich", "reputation": 9480, "user_id": 10026, "user_type": "registered", "accept_rate": 64}, "is_accepted": false, "up_vote_count": 12}, {"community_owned_date": 1233960508, "body": "<p>This is probably a stretch, but in Ruby there is a commonly used notation for the distinction: <code>add</code> doesn't mutate; <code>add!</code> mutates. If this is an pervasive problem in your project, you could do that too (not necessarily with non-alphabetic characters, but consistently using a notation to indicate mutating/non-mutating methods).</p>\n", "answer_id": 522564, "tags": [], "down_vote_count": 0, "last_activity_date": 1233960508, "comments": [{"body": "+1. this is not enforced by the language, but agreed upon as a convention. I like that.", "edited": false, "comment_id": 6979776, "creation_date": 1305656835, "score": 0, "owner": {"display_name": "oma", "reputation": 6864, "user_id": 252799, "user_type": "registered", "accept_rate": 69}}], "creation_date": 1233960508, "comment_count": 1, "score": 13, "owner": {"display_name": "ykaganovich", "reputation": 9480, "user_id": 10026, "user_type": "registered", "accept_rate": 64}, "is_accepted": false, "up_vote_count": 13}, {"community_owned_date": 1233963889, "body": "<p>So I guess a method named \"ImmutableAdd()\" is entirely too simplistic?</p>\n", "answer_id": 522689, "tags": [], "down_vote_count": 1, "last_activity_date": 1233963889, "comments": [{"body": "So you suggest prefixing all other methods from the List which return a new list with &quot;immutable&quot; ?  So we have immutableAdd(), immutableGet(), immutableIterator() etc ?", "edited": false, "comment_id": 336825, "creation_date": 1233992729, "score": 0, "owner": {"display_name": "mP.", "reputation": 8673, "user_id": 56524, "user_type": "registered", "accept_rate": 45}}, {"body": "I&#39;d argue that ImmutableAdd isn&#39;t simple <i>enough</i> - in that when you&#39;ve got a bunch of calls to it, it clutters things up too much. I&#39;d prefer a single word. Yes, I know I&#39;m being very picky :)", "edited": false, "comment_id": 336847, "creation_date": 1233994552, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "just a suggestion :)", "edited": false, "comment_id": 337809, "creation_date": 1234040426, "score": 0, "owner": {"display_name": "Alex Baranosky", "reputation": 13127, "user_id": 47630, "user_type": "registered", "accept_rate": 80}}], "creation_date": 1233963889, "comment_count": 3, "score": 0, "owner": {"display_name": "Alex Baranosky", "reputation": 13127, "user_id": 47630, "user_type": "registered", "accept_rate": 80}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1233965936, "body": "<p>I prefer Plus (and Minus). They are easily understandable and map directly to operations involving well known immutable types (the numbers). 2+2 doesn't change the value of 2, it returns a new, equally immutable, value.</p>\n\n<p>Some other possibilities:</p>\n\n<p>Splice()</p>\n\n<p>Graft()</p>\n\n<p>Accrete()</p>\n", "is_accepted": false, "tags": [], "answer_id": 522758, "down_vote_count": 0, "last_activity_date": 1233967390, "creation_date": 1233965936, "comment_count": 0, "score": 7, "owner": {"display_name": "Wedge", "reputation": 13231, "user_id": 332, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "Wedge", "reputation": 13231, "user_id": 332, "user_type": "registered", "accept_rate": 100}, "last_edit_date": 1233967390, "up_vote_count": 7}, {"community_owned_date": 1234018686, "body": "<p>Looking at <a href=\"http://thesaurus.reference.com/browse/add\">http://thesaurus.reference.com/browse/add</a> and <a href=\"http://thesaurus.reference.com/browse/plus\">http://thesaurus.reference.com/browse/plus</a> I found <strong>gain</strong> and <strong>affix</strong> but I'm not sure how much they imply non-mutation.</p>\n", "answer_id": 523888, "tags": [], "down_vote_count": 0, "last_activity_date": 1234018686, "creation_date": 1234018686, "comment_count": 0, "score": 5, "owner": {"display_name": "Sam Hasler", "reputation": 9981, "user_id": 2541, "user_type": "registered", "accept_rate": 64}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1234103883, "body": "<p>How about \"Stick\" or \"StickTo\", it sticks an element on the end.</p>\n\n<p>Or \"Attach\" or \"AttachTo\".</p>\n", "is_accepted": false, "tags": [], "answer_id": 525825, "down_vote_count": 0, "last_activity_date": 1234104704, "creation_date": 1234103883, "comment_count": 0, "score": 0, "owner": {"display_name": "Alex Baranosky", "reputation": 13127, "user_id": 47630, "user_type": "registered", "accept_rate": 80}, "last_editor": {"display_name": "Alex Baranosky", "reputation": 13127, "user_id": 47630, "user_type": "registered", "accept_rate": 80}, "last_edit_date": 1234104704, "up_vote_count": 0}, {"community_owned_date": 1234106171, "body": "<p>I would use a constructor.</p>\n\n<pre><code>Foo f1 = new Foo(\"one\");\nFoo f2 = new Foo(f1, \"two\");\nFoo f3 = new Foo(f2, \"three\");\n</code></pre>\n\n<p>f1 contains \"one\".\nf2 contains \"one\", \"two\".\nf3 contains \"one\", \"two\", \"three\".</p>\n", "answer_id": 525885, "tags": [], "down_vote_count": 0, "last_activity_date": 1234106171, "comments": [{"body": "As I commented elsewhere, that sucks in terms of chaining calls together unfortunately :( I&#39;ll definitely include a constructor form which takes an IEnumerable&lt;...&gt; though.", "edited": false, "comment_id": 339382, "creation_date": 1234124298, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1234106171, "comment_count": 1, "score": 0, "owner": {"display_name": "Skip Head", "reputation": 4544, "user_id": 23271, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1235836900, "body": "<p><code>list.CopyWith(element)</code> </p>\n\n<p>As does Smalltalk :)</p>\n\n<p>And also <code>list.copyWithout(element)</code> that removes all occurrences of an element, which is most useful when used as <code>list.copyWithout(null)</code> to remove unset elements.</p>\n", "answer_id": 598214, "tags": [], "down_vote_count": 1, "last_activity_date": 1235836900, "creation_date": 1235836900, "comment_count": 0, "score": 4, "owner": {"display_name": "akuhn", "reputation": 13427, "user_id": 24468, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1236335773, "body": "<p>I'm arriving a bit late here, how about NewWith?</p>\n", "answer_id": 618385, "tags": [], "down_vote_count": 0, "last_activity_date": 1236335773, "creation_date": 1236335773, "comment_count": 0, "score": 0, "owner": {"display_name": "Benjol", "reputation": 19174, "user_id": 11410, "user_type": "registered", "accept_rate": 68}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1236783657, "body": "<p>I would call it ToInclude</p>\n\n<pre><code>var empty = new ImmutableList&lt;string&gt;();\nvar list1 = empty.ToInclude(\"Hello\");\nvar list2 = list1.ToInclude(\"immutable\");\nvar list3 = list2.ToInclude(\"word\");\n</code></pre>\n\n<p>idiomatically (?)</p>\n\n<pre><code>var list = new ImmutableList&lt;string&gt;().ToInclude(\"Hello\");\n                                      .ToInclude(\"immutable\");\n                                      .ToInclude(\"word\");\n</code></pre>\n\n<p>Works for the case you mentioned too.</p>\n\n<pre><code>var list = new ImmutableList&lt;string&gt;();list.ToInclude(\"foo\");\n\nvar suite = new TestSuite&lt;string, int&gt;();suite.ToInclude(x =&gt; x.Length);\n</code></pre>\n", "answer_id": 634924, "tags": [], "down_vote_count": 0, "last_activity_date": 1236784040, "creation_date": 1236783657, "comment_count": 0, "score": 0, "owner": {"display_name": "littlegeek", "user_type": "does_not_exist"}, "is_accepted": false, "last_edit_date": 1236784040, "up_vote_count": 0}, {"community_owned_date": 1238828495, "body": "<p>Any name that implies that an object of the same type will be returned should be fine to use. Plus is a good name for this, as if you plus two objects you expect the result to be returned.</p>\n\n<p>Plus just doesn't sound like the correct name to use in this instance though, since you're 'Plus'ing a test into a test suite.</p>\n\n<p>GetWith() sounds like an option to me. Or ever GetTypeWith() where type is obviously the type your using. So for example:</p>\n\n<pre><code>var list = new ImmutableList&lt;String&gt;();\nvar list2 = list.GetWith(\"First\");\nvar list3 = list2.GetWith(\"Second\");\n\n// OR\n\nvar list2 = list.GetListWith(\"First\");\n</code></pre>\n\n<p>The Get implies you're getting the list that's already contained, and the With implies you want another object along with it. CopyWith() would also meet this criteria. </p>\n\n<p>The immediate problem I see with GetWith is that it's not easily guessable. A developer wants to add a suite, not get the current suite. I'd immediately type .Add and hope intellisence showed something very close to what I'd expect. </p>\n", "answer_id": 716677, "tags": [], "down_vote_count": 0, "last_activity_date": 1238828495, "comments": [{"body": "Hmmm... I don&#39;t think that if I saw &quot;GetWith&quot; I&#39;d know what it meant without looking it up (let alone being discoverable). Your reasoning about Plus is interesting, although there&#39;s precedent with things like DateTime + TimeSpan which I&#39;ve never had any trouble with.", "edited": false, "comment_id": 528739, "creation_date": 1238829457, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1238828495, "comment_count": 1, "score": 1, "owner": {"display_name": "Josh Smeaton", "reputation": 21179, "user_id": 10583, "user_type": "registered", "accept_rate": 91}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1239830680, "body": "<p>Very late to the game, but how about <code>Freeze</code>.  There is precedence in WPF for using <code>Freeze</code> and <code>IsFrozen</code> to test if an object is mutable.  Granted, this skews the meaning a little in that typically <code>Freeze()</code> is meant as a way to make the current object immutable, but if it has a parameter to it, you could see that you are getting something that is immutable.</p>\n\n<pre><code>var list = new ImmutableList&lt;string&gt;().Freeze(\"Hello\")\n                                      .Freeze(\"Fridgid\")\n                                      .Freeze(\"World\");\n</code></pre>\n\n<p>Basically:</p>\n\n<ol>\n<li>It is one word</li>\n<li>The connotation revolves around immutability.</li>\n<li>Precendence in WPF for \"similar\" syntax.</li>\n</ol>\n", "is_accepted": false, "tags": [], "answer_id": 753794, "down_vote_count": 0, "last_activity_date": 1239846800, "comments": [{"body": "oh no..........", "edited": false, "comment_id": 23606451, "creation_date": 1368081667, "score": 0, "owner": {"display_name": "nawfal", "reputation": 20216, "user_id": 661933, "user_type": "registered", "accept_rate": 94}}], "creation_date": 1239830680, "comment_count": 1, "score": 0, "owner": {"display_name": "Erich Mirabal", "reputation": 6507, "user_id": 79294, "user_type": "registered", "accept_rate": 80}, "last_editor": {"display_name": "Erich Mirabal", "reputation": 6507, "user_id": 79294, "user_type": "registered", "accept_rate": 80}, "last_edit_date": 1239846800, "up_vote_count": 0}, {"community_owned_date": 1239848560, "body": "<p>How about an Extension method?  You could call it <code>Join</code> in this case.  Being an extension method, users should know that it is a static method and might therefore give them a little pause and encourage them to look at the return value.  At the same time, you have the usability of an \"instance\" method.</p>\n\n<pre><code>public static ImmutableList&lt;T&gt; Join(this ImmutableList&lt;T&gt; body, T tail)\n{\n    // add robust error checking in case either is null...\n    return new ImmutableList&lt;T&gt;(body, tail);\n}\n</code></pre>\n\n<p>and then later on...</p>\n\n<pre><code>var list = new ImmutableList&lt;string&gt;().Join(\"Hello\")\n                                      .Join(\"Extensible\")\n                                      .Join(\"World\");\n</code></pre>\n\n<p>I don't quite know the accepted behavior on posting multiple answers, but this is an interesting question since I think that nomenclature is a critical step in design and my brain keeps pondering on this one.</p>\n", "answer_id": 754518, "tags": [], "down_vote_count": 0, "last_activity_date": 1239848560, "comments": [{"body": "Multiple answers is fine by me :) I&#39;m not sure that extension methods are sufficiently obviously extension methods to give the right impression though.", "edited": false, "comment_id": 566265, "creation_date": 1239859457, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Just throwing some ideas out there that haven&#39;t been expressed. I still prefer <code>Freeze</code> (or some variation of that).  Is <code>Plus</code> still your current choice?", "edited": false, "comment_id": 566914, "creation_date": 1239879395, "score": 0, "owner": {"display_name": "Erich Mirabal", "reputation": 6507, "user_id": 79294, "user_type": "registered", "accept_rate": 80}}], "creation_date": 1239848560, "comment_count": 2, "score": 0, "owner": {"display_name": "Erich Mirabal", "reputation": 6507, "user_id": 79294, "user_type": "registered", "accept_rate": 80}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1239993555, "body": "<p>I would go for Add, because I can see the benefit of a better name, but the problem would be to find different names for every other immutable operation which might make the class quite unfamiliar if that makes sense.</p>\n", "answer_id": 761678, "tags": [], "down_vote_count": 1, "last_activity_date": 1239993555, "comments": [{"body": "Yes, I see your point. I think I still prefer Plus, but it&#39;s a point worth considering.", "edited": false, "comment_id": 573579, "creation_date": 1239994614, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Thanks Jon. I am looking forward to using your framework. I just read about it and it looks very good. Thanks again.", "edited": false, "comment_id": 573701, "creation_date": 1239997088, "score": 0, "owner": {"display_name": "Joan Venge", "reputation": 45346, "user_id": 51816, "user_type": "registered", "accept_rate": 82}}], "creation_date": 1239993555, "comment_count": 2, "score": 3, "owner": {"display_name": "Joan Venge", "reputation": 45346, "user_id": 51816, "user_type": "registered", "accept_rate": 82}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1244759129, "body": "<p>I think that <code>Plus()</code> and <code>Minus()</code> or, alternatively, <code>Including()</code>, <code>Excluding()</code> are reasonable at <em>implying</em> immutable behavior. </p>\n\n<p>However, no naming choice will ever make it perfectly clear to everyone, so I personally believe that a good xml doc comment would go a very long way here. VS throws these right in your face when you write code in the IDE - they're hard to ignore.</p>\n", "answer_id": 984094, "tags": [], "down_vote_count": 1, "last_activity_date": 1244759129, "creation_date": 1244759129, "comment_count": 0, "score": 5, "owner": {"display_name": "LBushkin", "reputation": 70691, "user_id": 91671, "user_type": "registered", "accept_rate": 85}, "is_accepted": false, "up_vote_count": 6}, {"community_owned_date": 1246020220, "body": "<p>C#-ish pseudo code follows:</p>\n\n<pre><code>interface Foo\n{\n    // Constructors\n    Foo();\n    Foo(params Foo[] foos);\n\n    // Instance method\n    Foo Join(params Foo[] foos);\n\n    // Class method\n    static Foo Join(params Foo[] foos);\n}\n</code></pre>\n\n<p>So you could call things like this:</p>\n\n<pre><code>var f0 = new Foo();\nvar f1 = new Foo(new Foo(), new Foo(), new Foo());\nvar f2 = Foo.Join(new Foo(), new Foo(), new Foo());\nvar f3 = f0.Join(new Foo(), new Foo(), new Foo());\nvar f4 = new Foo(new Foo(new Foo()), new Foo(), new Foo(new Foo()));\n</code></pre>\n\n<p>Etc....</p>\n", "answer_id": 1048932, "tags": [], "down_vote_count": 0, "last_activity_date": 1246020220, "creation_date": 1246020220, "comment_count": 0, "score": 0, "owner": {"display_name": "orj", "reputation": 5438, "user_id": 20480, "user_type": "registered", "accept_rate": 56}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1249300158, "body": "<p>How about creating a wrapper class with an <code>Augment</code> (or <code>AugmentWith</code>) method? </p>\n", "answer_id": 1221901, "tags": [], "down_vote_count": 0, "last_activity_date": 1249300158, "comments": [{"body": "Maybe... not terribly convinced.", "edited": false, "comment_id": 1047205, "creation_date": 1249305244, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "augment sounds cool, it accents the immutability", "edited": false, "comment_id": 2349975, "creation_date": 1267640855, "score": 0, "owner": {"display_name": "Bubba88", "reputation": 593, "user_id": 185430, "user_type": "registered", "accept_rate": 73}}], "creation_date": 1249300158, "comment_count": 2, "score": 0, "owner": {"display_name": "jeyoung", "reputation": 478, "user_id": 1342582, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1254977909, "body": "<p>Since this question is now basically a thesaurus: How about <code>.Bring()</code>. As in, give me this list and bring this element with it?</p>\n\n<pre><code>Foo = List.Bring('short');\n          .Bring('longer');\n          .Bring('woah');\n</code></pre>\n\n<p>It doesn't roll off the tongue, but it <em>means</em> it, to me.</p>\n\n<p>Actually, <code>AndBring()</code> might be even better.</p>\n", "answer_id": 1535716, "tags": [], "down_vote_count": 0, "last_activity_date": 1254977909, "comments": [{"body": "I can&#39;t say I&#39;m a big fan - I don&#39;t think I&#39;d really know what it was meant to do without looking it up. Keep &#39;em coming though :)", "edited": false, "comment_id": 1391941, "creation_date": 1254982512, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "huh, I&#39;ve liked this one... for first 15 seconds)", "edited": false, "comment_id": 2349972, "creation_date": 1267640819, "score": 0, "owner": {"display_name": "Bubba88", "reputation": 593, "user_id": 185430, "user_type": "registered", "accept_rate": 73}}], "creation_date": 1254977909, "comment_count": 2, "score": 0, "owner": {"display_name": "quodlibetor", "reputation": 3048, "user_id": 25616, "user_type": "registered", "accept_rate": 84}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1265520684, "body": "<p>Maybe the confusion stems from the fact that you want two operations in one. Why not separate them? DSL style:</p>\n\n<pre><code>var list = new ImmutableList&lt;string&gt;(\"Hello\");\nvar list2 = list.Copy().With(\"World!\");\n</code></pre>\n\n<p><code>Copy</code> would return an intermediate object, that's a mutable copy of the original list. <code>With</code> would return a new immutable list.</p>\n\n<p><b>Update:</b></p>\n\n<p>But, having an intermediate, mutable collection around is not a good approach. The intermediate object should be contained in the <code>Copy</code> operation:</p>\n\n<pre><code>var list1 = new ImmutableList&lt;string&gt;(\"Hello\");\nvar list2 = list1.Copy(list =&gt; list.Add(\"World!\"));\n</code></pre>\n\n<p>Now, the <code>Copy</code> operation takes a delegate, which receives a mutable list, so that it can control the copy outcome. It can do much more than appending an element, like removing elements or sorting the list. It can also be used in the <code>ImmutableList</code> constructor to assemble the initial list without intermediary immutable lists.</p>\n\n<pre><code>public ImmutableList&lt;T&gt; Copy(Action&lt;IList&lt;T&gt;&gt; mutate) {\n  if (mutate == null) return this;\n  var list = new List&lt;T&gt;(this);\n  mutate(list);\n  return new ImmutableList&lt;T&gt;(list);\n}\n</code></pre>\n\n<p>Now there's no possibility of misinterpretation by the users, they will <b>naturally fall into the pit of success</b>.</p>\n\n<p><b>Yet another update:</b></p>\n\n<p>If you still don't like the mutable list mention, even now that it's contained, you can design a specification object, that will <em>specify</em>, or <em>script</em>, how the copy operation will transform its list. The usage will be the same:</p>\n\n<pre><code>var list1 = new ImmutableList&lt;string&gt;(\"Hello\");\n// rules is a specification object, that takes commands to run in the copied collection\nvar list2 = list1.Copy(rules =&gt; rules.Append(\"World!\"));\n</code></pre>\n\n<p>Now you can be creative with the rules names and you can only expose the functionality that you want <code>Copy</code> to support, not the entire capabilities of an <code>IList</code>.</p>\n\n<p>For the chaining usage, you can create a reasonable constructor (which will not use chaining, of course):</p>\n\n<pre><code>public ImmutableList(params T[] elements) ...\n\n...\n\nvar list = new ImmutableList&lt;string&gt;(\"Hello\", \"immutable\", \"World\");\n</code></pre>\n\n<p>Or use the same delegate in another constructor:</p>\n\n<pre><code>var list = new ImmutableList&lt;string&gt;(rules =&gt; \n  rules\n    .Append(\"Hello\")\n    .Append(\"immutable\")\n    .Append(\"World\")\n);\n</code></pre>\n\n<p>This assumes that the <code>rules.Append</code> method returns <code>this</code>.</p>\n\n<p>This is what it would look like with your latest example:</p>\n\n<pre><code>var suite = new TestSuite&lt;string, int&gt;(x =&gt; x.Length);\nvar otherSuite = suite.Copy(rules =&gt; \n  rules\n    .Append(x =&gt; Int32.Parse(x))\n    .Append(x =&gt; x.GetHashCode())\n);\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 2216058, "down_vote_count": 0, "last_activity_date": 1265723374, "comments": [{"body": "@Jordao: Because this sort of composition leads to a much simpler initalization form. Why have two separate variables when I only want one? Likewise I don&#39;t want to create a mutable copy - I want everything to be immutable throughout, as that leads to code which is easier to reason about, IMO.", "edited": false, "comment_id": 2169443, "creation_date": 1265531470, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I&#39;ve changed my answer accordingly...", "edited": false, "comment_id": 2171181, "creation_date": 1265571050, "score": 0, "owner": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}}, {"body": "All of these are still rather more unwieldy than &quot;Plus&quot; etc. Thanks for the ideas involving mutation, but I definitely prefer the &quot;keeping it immutable&quot; approach.", "edited": false, "comment_id": 2184537, "creation_date": 1265724854, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Maybe then there&#39;ll always be misinterpretations on what the real semantics of the operation are. If you follow the specification object route, there&#39;s no mutation going on (at least not externally), the object only specifies what the new immutable object will look like. What you have is an operation that goes from one immutable object to another, and since it&#39;s called Copy, there&#39;s no room to misunderstandings.", "edited": false, "comment_id": 2185137, "creation_date": 1265728984, "score": 0, "owner": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}}, {"body": "The only names that would work for you seem to be compound names, like CopyAndAppend, CopyAndAdd, etc.", "edited": false, "comment_id": 2185202, "creation_date": 1265729521, "score": 0, "owner": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}}, {"body": "I actually am growing fonder of this approach (with all the edits) as an API for immutable collections. However, I would argue that combining this approach with <i>helper</i> methods for default specifications, such as Concat, offers the best of both worlds.", "edited": false, "comment_id": 3037190, "creation_date": 1275675114, "score": 1, "owner": {"display_name": "hemp", "reputation": 3518, "user_id": 51055, "user_type": "registered"}}, {"body": "I guess this specification object is a specialized form of the builder pattern. I&#39;ve also got many of these ideas from the StructureMap DI container design. It tries to drive the API user to do the right thing, without the possibility of misinterpretation. And yes, helper methods are essential to accomplish common tasks effortlessly.", "edited": false, "comment_id": 3037438, "creation_date": 1275677203, "score": 0, "owner": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}}], "creation_date": 1265520684, "comment_count": 7, "score": 12, "owner": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}, "last_editor": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}, "last_edit_date": 1265723374, "up_vote_count": 12}, {"community_owned_date": 1265567341, "body": "<p>I'd go with operator overloading <code>+</code>. The reason is that that's the way it works in Python - <code>.append()</code> on a list mutates the list, while doing <code>+</code> with another list creates a new list. <code>+</code> also definitely does not imply mutation. I think that's why you like <code>.Plus()</code> so much, so if you don't want to operator overload, then you can go with <code>.Plus()</code>. </p>\n", "answer_id": 2217761, "tags": [], "down_vote_count": 0, "last_activity_date": 1265567341, "creation_date": 1265567341, "comment_count": 0, "score": 0, "owner": {"display_name": "Claudiu", "reputation": 73067, "user_id": 15055, "user_type": "registered", "accept_rate": 81}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1265724708, "body": "<p>Apparently I'm the first Obj-C/Cocoa person to answer this question.</p>\n\n<pre><code>NNString *empty = [[NSString alloc] init];\nNSString *list1 = [empty stringByAppendingString:@\"Hello\"];\nNSString *list2 = [list1 stringByAppendingString:@\"immutable\"];\nNSString *list3 = [list2 stringByAppendingString:@\"word\"];\n</code></pre>\n\n<p>Not going to win any code golf games with this.</p>\n", "answer_id": 2229627, "tags": [], "down_vote_count": 0, "last_activity_date": 1265724708, "comments": [{"body": "+1 the <code>[object]By[Verb]ing[Object]:</code> prefix to the method implies that a new string will be returned as opposed to simply <code>[verb][Object]:</code>, which would mutate the object in-place.", "edited": false, "comment_id": 6159814, "creation_date": 1301096139, "score": 0, "owner": {"display_name": "Dave DeLong", "reputation": 187790, "user_id": 115730, "user_type": "registered", "accept_rate": 88}}, {"body": "+1. I don&#39;t understand people&#39;s aversion to verbosity (aka self-documentation).", "edited": false, "comment_id": 8008305, "creation_date": 1311116421, "score": 3, "owner": {"display_name": "hatfinch", "reputation": 2497, "user_id": 107392, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1265724708, "comment_count": 2, "score": 7, "owner": {"display_name": "kubi", "reputation": 23870, "user_id": 28422, "user_type": "registered", "accept_rate": 76}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1267126542, "body": "<p>As a c++ programmer and fan of the STL I put forth <code>add_copy</code>. (this would also suggest <code>remove_copy</code>, <code>replace_copy</code> and so on)</p>\n", "answer_id": 2337004, "tags": [], "down_vote_count": 0, "last_activity_date": 1267126542, "creation_date": 1267126542, "comment_count": 0, "score": 1, "owner": {"display_name": "KitsuneYMG", "reputation": 8382, "user_id": 86515, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1267640728, "body": "<p>list.copyAndAppend(elt)</p>\n\n<p>How does that sound?)</p>\n", "answer_id": 2373877, "tags": [], "down_vote_count": 0, "last_activity_date": 1267640728, "creation_date": 1267640728, "comment_count": 0, "score": 0, "owner": {"display_name": "Bubba88", "reputation": 593, "user_id": 185430, "user_type": "registered", "accept_rate": 73}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1272149962, "body": "<p>As was previously mentioned, you're trying to do 2 things at once and micro-optimizing just for that purpose. If copying occurs away from original collection definition, names like \"Add\",\"Append\" will only confuse.</p>\n\n<p>\"<strong>CloneAppend</strong>\" is what I might use in this situation. Something tells me I wouldn't be in this situation. I believe that soon you'll find yourself in need of other kinds of similar operations like \"<strong>CloneFirstN</strong>\" or \"<strong>CloneRemoveLast</strong>\". And soon you'll realize that it's much better to chain the clone/copy method, append/remove whatever you need, then convert the collection back to immutable even if it takes an extra line of code.</p>\n", "answer_id": 2706477, "tags": [], "down_vote_count": 0, "last_activity_date": 1272149962, "comments": [{"body": "@Andrei: No, I&#39;m afraid I disagree. Switching between mutable and immutable states ends up being much harder to understand. Operations like this are a core part of functional programming - the idea of &quot;create a new list which has the contents of the old list but with this new item as well&quot; isn&#39;t really &quot;two things at once&quot; IMO.", "edited": false, "comment_id": 2731456, "creation_date": 1272182462, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1272149962, "comment_count": 1, "score": 0, "owner": {"display_name": "Andrei R", "reputation": 434, "user_id": 68672, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1274695665, "body": "<p>Personally I would call the method <code>Clone</code> and call the parameter <code>AdditionalValue</code> as that is essentially what it <em>appears</em> to be doing and would be easily understandable e.g.</p>\n\n<pre><code>var empty = new ImmutableList&lt;string&gt;(); \nvar list1 = empty.Clone(\"Hello\"); \nvar list2 = list1.Clone(\"immutable\"); \nvar list3 = list2.Clone(\"word\");\n</code></pre>\n", "answer_id": 2896128, "tags": [], "down_vote_count": 0, "last_activity_date": 1274695665, "comments": [{"body": "Passing an argument to a clone method looks pretty odd to me.", "edited": false, "comment_id": 2945331, "creation_date": 1274696221, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Better to name it <code>CloneWith</code> in that case.", "edited": false, "comment_id": 23608475, "creation_date": 1368086568, "score": 0, "owner": {"display_name": "nawfal", "reputation": 20216, "user_id": 661933, "user_type": "registered", "accept_rate": 94}}], "creation_date": 1274695665, "comment_count": 2, "score": 0, "owner": {"display_name": "James", "reputation": 46308, "user_id": 82586, "user_type": "registered", "accept_rate": 88}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1275680581, "body": "<p>Maybe a static method or an operator (which is static) would be best. It would take responsibility away from the instances, and users will know right away that the operation doesn't belong to any of the instances. It's specially important NOT to use extension methods, since their resemblance to instance methods upon usage defeats the purpose.</p>\n\n<p>The static method could be called <code>Join</code>:</p>\n\n<pre><code>public static class ListOperations {\n  public static ImmutableList&lt;T&gt; Join&lt;T&gt;(ImmutableList&lt;T&gt; list, T tail) {\n    // ...\n  }\n  public static ImmutableList&lt;T&gt; Join&lt;T&gt;(T head, ImmutableList&lt;T&gt; list) {\n    // ...\n  }\n  public static ImmutableList&lt;T&gt; Join&lt;T&gt;(ImmutableList&lt;T&gt; list1, ImmutableList&lt;T&gt; list2) {\n    // ...\n  }\n  // substitutes chaining:\n  public static ImmutableList&lt;T&gt; Join&lt;T&gt;(ImmutableList&lt;T&gt; list, params T[] tail) {\n    // ...\n  }\n}\n\n// ....\n\nvar list = new ImmutableList&lt;string&gt;(\"Hello\");\nvar list2 = ListOperations.Join(list, \"immutable\"); // inferred type parameter\nvar list3 = ListOperations.Join(list2, \"world!\");\n</code></pre>\n\n<p>But I'd prefer that C# had <a href=\"http://codecrafter.blogspot.com/2009/09/c-static-classes-are-not-real-classes.html\" rel=\"nofollow\">class-free functions</a> here. Or at least something like Java's static import facility.</p>\n\n<p>The operator could be <code>+</code>:</p>\n\n<pre><code>var list = new ImmutableList&lt;string&gt;(\"Hello\");\nvar list2 = list + \"immutable\";\nvar list3 = list2 + \"world!\";\n</code></pre>\n\n<p>But I'd rather be able to use something else like <code>&lt;&lt;</code>, <code>::</code> or <code>.</code>, which are not possible in C#.</p>\n\n<p>Also, static members look more functional and I think lend themselves better to this immutable view.</p>\n", "is_accepted": false, "tags": [], "answer_id": 2977253, "down_vote_count": 0, "last_activity_date": 1275696070, "creation_date": 1275680581, "comment_count": 0, "score": 2, "owner": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}, "last_editor": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}, "last_edit_date": 1275696070, "up_vote_count": 2}, {"community_owned_date": 1285852476, "body": "<p>I personally like <code>unite()</code>, as when you unite objects you still preserve their individuality, but the union of them is a separate new entity. <code>Union</code> is similar as suggested but is already well defined in set theory and <code>unite</code> is more verby and says to me that following the method I have a new enitity. I know its late but hey couldn't find the suggestion on the list. Plus the word reminds me of the days of old and uniting people to go to war.. hehe</p>\n", "is_accepted": false, "tags": [], "answer_id": 3830832, "down_vote_count": 0, "last_activity_date": 1322168881, "creation_date": 1285852476, "comment_count": 0, "score": 2, "owner": {"display_name": "Thomas Wilczynski", "reputation": 3, "user_id": 462470, "user_type": "registered"}, "last_editor": {"display_name": "Christian Specht", "reputation": 19214, "user_id": 6884, "user_type": "registered", "accept_rate": 95}, "last_edit_date": 1322168881, "up_vote_count": 2}, {"community_owned_date": 1290430355, "body": "<p>For this kind of functions I usually use the verb at the second form, <code>Added</code> in this case.</p>\n\n<p>This convention is used by Qt, for example <a href=\"http://doc.qt.nokia.com/4.7/qvector2d.html#normalized\" rel=\"nofollow\"><code>QVector2D::normalized</code></a> returns a normalized vector, while <code>QVector2D::normalize</code> normalizes a vector.</p>\n\n<p>In the same way <code>Added</code> would return the object with a new added item.</p>\n", "answer_id": 4245569, "tags": [], "down_vote_count": 0, "last_activity_date": 1290430355, "comments": [{"body": "I can see the verb working when there are no parameters, but using <code>Added(extraTest)</code> sounds odd to me. But this question shows just how subjective it all is :)", "edited": false, "comment_id": 4598682, "creation_date": 1290434360, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "How about &quot;WithAdded&quot;?", "edited": false, "comment_id": 11345345, "creation_date": 1327734035, "score": 0, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}], "creation_date": 1290430355, "comment_count": 2, "score": 0, "owner": {"display_name": "peoro", "reputation": 13915, "user_id": 300805, "user_type": "registered", "accept_rate": 87}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1290531778, "body": "<p>I would go with \"CreateNewListWithAdditionalItems\"</p>\n\n<p>I dont mind long names, but this one is telling you what it will actually do. Also I would throw an exception if you use Add or any other altering methods.</p>\n", "answer_id": 4258693, "tags": [], "down_vote_count": 0, "last_activity_date": 1290531778, "creation_date": 1290531778, "comment_count": 0, "score": 0, "owner": {"display_name": "Heiko Hatzfeld", "reputation": 2987, "user_id": 171613, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1294426531, "body": "<p>Borrowing from C, how about <code>Concat</code></p>\n", "answer_id": 4629156, "tags": [], "down_vote_count": 1, "last_activity_date": 1294426531, "creation_date": 1294426531, "comment_count": 0, "score": 0, "owner": {"display_name": "k rey", "reputation": 345, "user_id": 548938, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1296771770, "body": "<p>I would personally go with <code>AddVoid</code> or the other way around of <code>VoidAdd</code></p>\n", "answer_id": 4892430, "tags": [], "down_vote_count": 0, "last_activity_date": 1296771770, "creation_date": 1296771770, "comment_count": 0, "score": 1, "owner": {"display_name": "Woot4Moo", "reputation": 15203, "user_id": 205426, "user_type": "registered", "accept_rate": 61}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1299163521, "body": "<p>The problem with methods like <code>String.Replace</code> is that the user can mistakenly think that there's mutation going on because he can ignore the return value. So use an <code>out</code> parameter for the \"return\" value. The user can't ignore <em>that</em>:</p>\n\n<pre><code>public class ImmutableList&lt;T&gt; {\n  public ImmutableList(params T[] items) { \n    // ...\n  }\n  /// &lt;summary&gt;\n  /// Creates a new list with the items in this list plus the supplied items.\n  /// &lt;/summary&gt;\n  /// &lt;param name=\"newList\"&gt;\n  /// The new list created for the operation.\n  /// This is also the return value of this method.\n  /// &lt;/param&gt;\n  /// &lt;param name=\"items\"&gt;Items to add to the new list.&lt;/param&gt;\n  /// &lt;returns&gt;The new list.&lt;/returns&gt;\n  public ImmutableList&lt;T&gt; Add(out ImmutableList&lt;T&gt; newList, params T[] items) {\n    // ...\n  }\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>var list = new ImmutableList&lt;string&gt;(\"Hello\", \"Immutable\");\nImmutableList&lt;string&gt; newList;\nlist.Add(out newList, \"World\");\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 5182223, "down_vote_count": 1, "last_activity_date": 1299166864, "comments": [{"body": "Unfortunately that makes it a complete pain to use in a fluent way :(", "edited": false, "comment_id": 5822888, "creation_date": 1299164990, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I agree, that&#39;s why I&#39;ve added the <code>params</code> parameter as a mitigation strategy for the &quot;chaining&quot; usage. But that only works if you&#39;re &quot;chaining&quot; <code>Add</code>s :-(", "edited": false, "comment_id": 5822905, "creation_date": 1299165072, "score": 0, "owner": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}}, {"body": "You can also return the newList as well, ala <a href=\"http://www.cplusplus.com/reference/clibrary/cstring/strcpy/\" rel=\"nofollow\"><code>strcpy</code></a>.", "edited": false, "comment_id": 5823233, "creation_date": 1299166432, "score": 0, "owner": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}}, {"body": "Updated to account for that...", "edited": false, "comment_id": 5823387, "creation_date": 1299166914, "score": 0, "owner": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}}, {"body": "I think the <code>ref</code> approach is sometimes under-appreciated.  While it is often useful to have a function-style alternative to allow for cases where one may not wish to modify the storage location which holds the original reference, I think the <code>ref</code> approach is clearer in cases where the same storage location will be source and destination.", "edited": false, "comment_id": 14315265, "creation_date": 1339274514, "score": 0, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}], "creation_date": 1299163521, "comment_count": 5, "score": 0, "owner": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}, "last_editor": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}, "last_edit_date": 1299166864, "up_vote_count": 1}, {"community_owned_date": 1305650543, "body": "<p>How about <code>cloneWith</code>?</p>\n\n<p><strong>Reasons:</strong><br>\n 1. For the single word names suggested, I would not know for sure what they do until I checked the documentation.<br>\n 2. For the compound names suggested thus far, I like <code>cloneWith</code> better.  I would know exactly what I was getting with this method name, it is relatively concise, it is easy to remember, and it just \"feels\" right :)<br>\n 3. With modern code-completion in most programming tools, longer names are easier to work with than ever before.  </p>\n\n<p>Though many times conciseness adds to clarity, take clarity over conciseness if you have to choose...</p>\n\n<p><strong>In Action:</strong></p>\n\n<pre><code>var empty = new ImmutableList&lt;string&gt;();\nvar list1 = empty.cloneWith(\"Hello\");\nvar list2 = list1.cloneWith(\"immutable\");\nvar list3 = list2.cloneWith(\"word\");\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 6034197, "down_vote_count": 0, "last_activity_date": 1314368895, "comments": [{"body": "I like the notion of &quot;clone&quot; to express the idea of the immutability conservation but &quot;with&quot; is a bit ambiguous in this current context.", "edited": false, "comment_id": 8650679, "creation_date": 1314345511, "score": 0, "owner": {"display_name": "Emmanuel Devaux", "reputation": 1162, "user_id": 574131, "user_type": "registered"}}, {"body": "@Emmanuel Devaux:  Thanks for the input, but will you please clarify what you mean when you say &quot;&#39;with&#39; is a bit ambiguous in this current context&quot;?  For example, what else would <code>[1,2].cloneWith(3)</code> logically be other than the new array <code>[1,2,3]</code>?", "edited": false, "reply_to_user": {"display_name": "Emmanuel Devaux", "reputation": 1162, "user_id": 574131, "user_type": "registered"}, "comment_id": 8657032, "creation_date": 1314368688, "score": 0, "owner": {"display_name": "Briguy37", "reputation": 5358, "user_id": 508537, "user_type": "registered", "accept_rate": 64}}, {"body": "&quot;With&quot; do not express what is the final action (add , remove etc...) &quot;With&quot; suggest that parameter is self explanatory to know the final action ...ex: cloneWith(&quot;Hello&quot;) ... will it be add or just taken as a filter like &quot;clone this object with hello as filter&quot;... &quot;With&quot; synonym of &quot;tied to&quot; / &quot;has&quot; / &quot;match&quot;...", "edited": false, "comment_id": 8657356, "creation_date": 1314369496, "score": 0, "owner": {"display_name": "Emmanuel Devaux", "reputation": 1162, "user_id": 574131, "user_type": "registered"}}, {"body": "@Emmanuel Defaux:  Thanks for the clarification.  I would not normally think of <code>cloneWith(x)</code> as applying a filter unless it was <code>cloneWithFilter(x)</code>, so thank you for the different point of view.", "edited": false, "reply_to_user": {"display_name": "Emmanuel Devaux", "reputation": 1162, "user_id": 574131, "user_type": "registered"}, "comment_id": 8658337, "creation_date": 1314372353, "score": 0, "owner": {"display_name": "Briguy37", "reputation": 5358, "user_id": 508537, "user_type": "registered", "accept_rate": 64}}, {"body": "How about &quot;ClonePlus&quot;?", "edited": false, "comment_id": 11345320, "creation_date": 1327733846, "score": 1, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}], "creation_date": 1305650543, "comment_count": 5, "score": 2, "owner": {"display_name": "Briguy37", "reputation": 5358, "user_id": 508537, "user_type": "registered", "accept_rate": 64}, "last_editor": {"display_name": "Briguy37", "reputation": 5358, "user_id": 508537, "user_type": "registered", "accept_rate": 64}, "last_edit_date": 1314368895, "up_vote_count": 2}, {"community_owned_date": 1305874950, "body": "<p>If you're a functional programmer, this has a few names:</p>\n\n<pre><code>(++)\n</code></pre>\n\n<p>pronounced \"append\". Or it could be <code>concat</code>, depending on your types:</p>\n\n<pre><code>-- join two things into one thing:\nappend :: a -&gt; a -&gt; a    \n\n-- join many things into one thing\nconcat :: [a] -&gt; a\n</code></pre>\n\n<p>Or you might mean <code>(:)</code>, AKA <code>cons</code>:</p>\n\n<pre><code>(:) :: a -&gt; [a] -&gt; [a]    \n</code></pre>\n\n<p>if you're joining things onto the front of the  list, <code>snoc</code> if it goes on the end.</p>\n\n<p>At least that's what we've been calling appending things onto lists in Haskell-land for the last 20 years.</p>\n\n<hr>\n\n<p>Note, this is not arithmetic <code>(+)</code>, since it is monoidal, not a ring.</p>\n", "answer_id": 6068553, "tags": [], "down_vote_count": 0, "last_activity_date": 1305874950, "comments": [{"body": "Concat works for me, but for some reason Append sounds more like a mutating operation. (Obviously not a problem in a functional environment where nothing mutates.)", "edited": false, "comment_id": 7027122, "creation_date": 1305875050, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1305874950, "comment_count": 1, "score": 1, "owner": {"display_name": "Don Stewart", "reputation": 108306, "user_id": 83805, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1305932074, "body": "<p>The name WithAdded reads nicely and is IMHO better than Added which can be read as an adjective.</p>\n\n<pre><code>var list2 = list1.WithAdded(\"immutable\");\n</code></pre>\n\n<p>Or for a slightly more verbose version:</p>\n\n<pre><code>var list2 = list1.WithAddedElement(\"immutable\");\n</code></pre>\n", "answer_id": 6078346, "tags": [], "down_vote_count": 0, "last_activity_date": 1305932074, "comments": [{"body": "What&#39;s nice about this approach is that it generalizes to other methods, like <code>Replace</code>, <code>Remove</code>", "edited": false, "comment_id": 30637183, "creation_date": 1386685952, "score": 0, "owner": {"display_name": "CodesInChaos", "reputation": 67151, "user_id": 445517, "user_type": "registered", "accept_rate": 50}}], "creation_date": 1305932074, "comment_count": 1, "score": 2, "owner": {"display_name": "August Karlstrom", "reputation": 2308, "user_id": 337149, "user_type": "registered", "accept_rate": 80}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1308774843, "body": "<p>I'm a little late to the party, but I didn't see an answer that suggested simply not doing it at all! Let it stay immutable. Any method you put is going to open to abuse when they put it into a loop, which ~will~ happen eventually. Instead, I'd advise using a builder instead.</p>\n\n<pre><code>MyImmutableBuilder builder = new MyImmutableBuilder(someImmutable);\nMyImmutable modifiedImmultable = builder.add(element1).add(element2).build();\n</code></pre>\n\n<p>Now in the case of an ImmutableList, your builder would really just be a List, most likely.</p>\n\n<p>I guess it all boils down to... to you really want an easy way to add just a single element to your immutable collection? If it's a common occurrence, you probably don't want to be using an immutable object (you can always call <code>build()</code> any time you want to send a snapshot of the object at it's present state...) If it's not a common occurrence, then having a builder as a requirement to do it wouldn't be a significant impediment, especially if it were documented that this is how you want to build them.</p>\n\n<p>@supercat - consider the following scenario you describe:</p>\n\n<pre><code>Stack a = someImmutableStackOfSize(10);\nStack b = a.popAndCopy(); // size 9\nStack c = a.popAndCopy(); // also size 9\n// a b and c have the same backing list\nStack d = b.pushAndCopy(\"node1\");\nStack e = c.pushAndCopy(\"node2\");\n// because d and e had the same backing list, how will it \n// know that d's last element is node1, but e's last\n// element is node2?\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 6446231, "down_vote_count": 0, "last_activity_date": 1327782714, "comments": [{"body": "Some types of immutable collection support reasonably-efficient means of appending items.", "edited": false, "comment_id": 11345337, "creation_date": 1327733964, "score": 0, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}, {"body": "@supercat Perhaps you could elaborate on what you mean by reasonably efficient. Typically an immutable collection has to make a copy of the backing data.", "edited": false, "reply_to_user": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}, "comment_id": 11345449, "creation_date": 1327734882, "score": 0, "owner": {"display_name": "corsiKa", "reputation": 45287, "user_id": 330057, "user_type": "registered", "accept_rate": 79}}, {"body": "As a best-case example, consider an immutable stack type implemented as a linked list.  Given an existing stack, one can make a stack with one more element pushed on by creating a new element linked to the old stack and then returning that element.  One can make a stack with one fewer element pushed on by simply returning the &#39;next&#39; pointer of the first element.", "edited": false, "comment_id": 11349443, "creation_date": 1327764735, "score": 0, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}, {"body": "@supercat I edited my answer to illustrate an example of why that wouldn&#39;t work.", "edited": false, "reply_to_user": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}, "comment_id": 11352401, "creation_date": 1327782732, "score": 0, "owner": {"display_name": "corsiKa", "reputation": 45287, "user_id": 330057, "user_type": "registered", "accept_rate": 79}}, {"body": "This is exactly what I suggested one down from you.", "edited": false, "comment_id": 13957284, "creation_date": 1337879048, "score": 0, "owner": {"display_name": "Justin Breitfeller", "reputation": 7813, "user_id": 413379, "user_type": "registered", "accept_rate": 83}}], "creation_date": 1308774843, "comment_count": 5, "score": 2, "owner": {"display_name": "corsiKa", "reputation": 45287, "user_id": 330057, "user_type": "registered", "accept_rate": 79}, "last_editor": {"display_name": "corsiKa", "reputation": 45287, "user_id": 330057, "user_type": "registered", "accept_rate": 79}, "last_edit_date": 1327782714, "up_vote_count": 2}, {"community_owned_date": 1309512907, "body": "<p>This seems to come down to finding a word that expresses that the object is not modified. Also, that it is cloned and the element passed as a parameter is added to the end of the cloned list. Standard names like <code>add</code> and <code>clone</code> are never going to cover it. Perhaps <code>clone_and_append</code> which is also rather ambiguous, since the <code>append</code> part might imply that the parameter is appended to the original list. So it should probably be something like <code>clone_and_append_to_clone</code> or better yet <code>append_to_clone</code>, although this one does not really imply that the clone is going to be returned by this method, but rather that the clone already exists as part of the origina list.</p>\n\n<p>So thinking more along the lines of finding a name that does not imply a modification to the original list and also suggest that a new list is created, consider the following:</p>\n\n<ol>\n<li><strong>Offshoot</strong> -- <code>var list1 = list.Offshoot(\"tail\")</code> - in the strictest sense, <em>offshoot</em> refers here to the new element and not the entire new list. Another apparent disadvantage is that it is not an action, the more correct name being <code>list.CreateOffshoot</code>. However, I find it gives a clear indication of the fact that the new list will contain the original list and that the new element will come at the end of the list.</li>\n<li><strong>Spawn</strong> -- <code>var list1 = list.Spawn(\"tail\")</code> - similar to the previous. The advantage is that it is an action, but there is a weaker implication that the new list will contain the original list.</li>\n<li><strong>BranchOff</strong> --  <code>var list1 = list.BranchOff(\"tail\")</code> - an action that suggests the original list will be cloned. One potential ambiguity is that it is not very clear how the parameter element will be used.</li>\n</ol>\n", "answer_id": 6546171, "tags": [], "down_vote_count": 0, "last_activity_date": 1309512907, "creation_date": 1309512907, "comment_count": 0, "score": 1, "owner": {"display_name": "Nick", "reputation": 2712, "user_id": 731262, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1312332975, "body": "<p><code>copyWithSuffix:</code> would be a custom method name in a similar vein to the Objective-C immutable string copy method <code>stringByAppendingString:</code>.</p>\n\n<pre><code>var suite = new TestSuite&lt;string&gt;();\nsuite = suite.CopyWithSuffix(\"Str1\")\n             .CopyWithSuffix(\"Str2\")\n             .CopyWithSuffix(\"Str3\");\n</code></pre>\n\n<p><code>Suffix</code> communicates the addition-ness of it and <code>Copy</code> makes the immutability clear. Feel free to replace <code>Suffix</code> with something more logical for the sort of test suite it actually is (maybe you're not suffix-ing these to one big internal string, you could be providing test case names/parameters for all I know).</p>\n", "answer_id": 6920531, "tags": [], "down_vote_count": 0, "last_activity_date": 1312332975, "comments": [{"body": "I like this, especially in cases where there might also be a <code>CopyWithPrefix</code> method.", "edited": false, "comment_id": 14315240, "creation_date": 1339274368, "score": 0, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}], "creation_date": 1312332975, "comment_count": 1, "score": 1, "owner": {"display_name": "darvids0n", "reputation": 8802, "user_id": 244343, "user_type": "registered", "accept_rate": 91}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1314348440, "body": "<p><strong>1) Question analysis<br></strong>\nabstract of the question can be :<br/>\nFrom an immutable ... get a new immutable but different from the original one ..<br/>\nIn this current question context : <br/>\nFrom an immutable List get a new immutable list having a difference of a new element in addition in the end.<br/><br/>\nCan you give a effective \"verb\" (\"method\" in programming language) that express the action in a concise way without using the simple \"Add\" verb.</p>\n\n<p><strong>2) Proposal analysis</strong><br/>\n<strong>First concept</strong> : Immutable give a similar immutable , <br/>\n<strong>>>\"copy\"</strong> <em>verb</em> express conservation in \"content\" but less for it defined constraints (immutable)<br/>\n<strong>>>\"clone\"</strong> <em>verb</em> express conservative in \"content\" but also for its defined constraints.<br/>\n<strong>>>\"twin\"</strong> <em>verb</em> is similar to clone but not common in software , but it's short and sound good.<br/><br/>\n<strong>Second concept</strong> : the result give something different from the original<br/>\n<strong>>>\"add\"</strong> express an <strong>action</strong> to make the difference between original and the new object but by definition we do not act (mutate) an immutable.<br/>\n<strong>>>\"plus\"</strong> express the fact that verb result will be augmented without disturbing the original object ... \"adverb\" approach is more \"immutable\" friendly<br/>\n<strong>>>\"with\"</strong> as before it express the fact that \"verb\" will do something more but may be ambigous of what it will doing more. Can also express the fact the \"verb parameter\" is the \"more\" of the \"verb\"<br/><br/>\n<strong>3) Answers</strong><br/>\nWith verb \"clone\"<br/>\n<strong>>> augmentClone</strong><br/>\n<strong>>> growClone</strong><br/>\n<strong>>> extendClone</strong><br/>\nwith \"with\" <br/>\n<strong>>> cloneWith</strong><br/>\n<strong>>> augmentCloneWith</strong><br/>\n<strong>>> growCloneWith</strong><br/>\n<strong>>> extendCloneWith</strong><br/><br/>\nWith verb \"twin\"<br/>\n<strong>>> augmentTwin</strong><br/>\n<strong>>> growTwin</strong><br/>\n<strong>>> extendTwin</strong><br/>\nwith \"with\" <br/>\n<strong>>> twinWith</strong><br/>\n<strong>>> augmentTwinWith</strong><br/>\n<strong>>> growTwinWith</strong><br/>\n<strong>>> extendTwinWith</strong><br/><br/></p>\n", "answer_id": 7202170, "tags": [], "down_vote_count": 0, "last_activity_date": 1314348440, "creation_date": 1314348440, "comment_count": 0, "score": 1, "owner": {"display_name": "Emmanuel Devaux", "reputation": 1162, "user_id": 574131, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1316632949, "body": "<p>I would go with <code>list.NewList(\"word\")</code> because it describes what you are doing (creating a new list).</p>\n\n<p>I must agree it doesn't imply that the argument is added to the end of the list, but personally I belong to the <em>succinct-if-possible camp</em>, so I'd favour <code>list.NewList(\"word\")</code> over <code>list.NewListAfterAppend(\"word\")</code>.</p>\n", "answer_id": 7505433, "tags": [], "down_vote_count": 0, "last_activity_date": 1316632949, "creation_date": 1316632949, "comment_count": 0, "score": 2, "owner": {"display_name": "Pacerier", "reputation": 22775, "user_id": 632951, "user_type": "registered", "accept_rate": 84}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1321481091, "body": "<p>Personally I'd go with Pad(..) perhaps if you're after a fluent style, also with an extension method of AndWith(..)</p>\n\n<pre><code>var list = new ImmutableList&lt;string&gt;().Pad(\"Hello\")\n                                      .AndWith(\"immutable\")\n                                      .AndWith(\"word\");\n</code></pre>\n", "answer_id": 8159389, "tags": [], "down_vote_count": 0, "last_activity_date": 1321481091, "creation_date": 1321481091, "comment_count": 0, "score": 1, "owner": {"display_name": "Alex Norcliffe", "reputation": 1622, "user_id": 310487, "user_type": "registered", "accept_rate": 71}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1326221302, "body": "<p>I know this is beating a seemingly dead horse, but I think you may be approaching this in an odd way (hence the naming difficulty). When I have an immutable object, I don't often expect that the object will have functions that imply mutability (like Add or AddAll). I know that String &amp; DateTime do this, but even I have fallen victim to forgetting to use the results from DateTime / String functions so I would avoid those pitfalls if possible.</p>\n\n<p>If I were you, I would follow the Builder pattern similar to what Guava uses. See <a href=\"http://code.google.com/p/guava-libraries/wiki/ImmutableCollectionsExplained\" rel=\"nofollow\">immutable collections in Guava</a>. Basically the concept is that you construct the immutable object with everything it is ever going to contain. If you want to make a new immutable object, you need to use a new builder. </p>\n\n<pre><code>var suite = new TestSuite.Builder&lt;string, int&gt;().add(newTest).build();\n</code></pre>\n\n<p>You can expand upon the builder to allow a variety of modifications to the test suite (using standard list naming conventions like add / remove if you wish) before the user calls build.</p>\n", "answer_id": 8808764, "tags": [], "down_vote_count": 0, "last_activity_date": 1326221302, "creation_date": 1326221302, "comment_count": 0, "score": 0, "owner": {"display_name": "Justin Breitfeller", "reputation": 7813, "user_id": 413379, "user_type": "registered", "accept_rate": 83}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1412785892, "body": "<p>A very late answer, but I wanted to add my two cents: I think the point here could be the verb tense more than the verb itself:</p>\n\n<pre><code>var output= myList.joinedWith(\"Element\"); //or AddedTo, ConcatenatedTo...\n</code></pre>\n\n<p>The participle changes the meaning, in my opinion: we are no adding anything to myList, but returning the result of the operation.</p>\n", "answer_id": 26261898, "tags": [], "down_vote_count": 0, "last_activity_date": 1412785892, "creation_date": 1412785892, "comment_count": 0, "score": 0, "owner": {"display_name": "Pablo", "reputation": 3592, "user_id": 1919228, "user_type": "registered", "accept_rate": 75}, "is_accepted": false, "up_vote_count": 0}], "last_editor": {"display_name": "BoltClock", "reputation": 311199, "user_id": 106224, "user_type": "moderator", "accept_rate": 95}, "down_vote_count": 2, "close_vote_count": 0, "question_id": 521893}, {"last_activity_date": 1412346097, "accepted_answer_id": 1093623, "creation_date": 1246986110, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1412346097, "favorite_count": 43, "view_count": 11836, "delete_vote_count": 0, "title": "How does the C# compiler detect COM types?", "comments": [{"body": "You&#39;re way ahead of me on this stuff (most stuff), but just for clairification, it sounds like what you are after is dependency injection functionality with a more normalized syntax--would that be accurate?", "edited": false, "comment_id": 907509, "creation_date": 1246986327, "score": 0, "owner": {"display_name": "Bill K", "reputation": 37999, "user_id": 12943, "user_type": "registered", "accept_rate": 90}}, {"body": "Aren&#39;t optional parameters nice? IMO, No they are not nice. Microsoft is trying to fix the flaw in Office COM interfaces by adding bloat to C#.", "edited": false, "comment_id": 907552, "creation_date": 1246986799, "score": 11, "owner": {"display_name": "Mehrdad Afshari", "reputation": 239800, "user_id": 33708, "user_type": "registered", "accept_rate": 83}}, {"body": "Nice question (+1). I&#39;ve noticed the same thing about calling a constructor on an interface.  It looks horrendous in code because it&#39;ll really confuse any developers not familiar with what&#39;s going on.  I always wondered what was going on behind the scenes to make it work.  Looks like I&#39;ll be buying your new book ;-)", "edited": false, "comment_id": 907564, "creation_date": 1246986950, "score": 0, "owner": {"display_name": "Doctor Jones", "reputation": 13005, "user_id": 39277, "user_type": "registered", "accept_rate": 94}}, {"body": "Are you creating a type library for your interface?  I suspect you need to declare the interface using IDL and then register the resulting type library MIDL outputs in the registry.  I also suspect this is just one step on the way to your goal.", "edited": false, "comment_id": 907639, "creation_date": 1246987619, "score": 0, "owner": {"display_name": "i_am_jorf", "reputation": 35284, "user_id": 74815, "user_type": "registered", "accept_rate": 97}}, {"body": "@Mehrdad: Optional parameters are useful beyond COM, of course. You need to be careful with the default values, but between them and named arguments, it&#39;s a lot easier to build a usable immutable type.", "edited": false, "comment_id": 907644, "creation_date": 1246987653, "score": 16, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@jeffamaphone: Nope, I&#39;m not trying to create a type library at all. I&#39;m trying to fake up a COM type so I can see what the C# compiler does without actually having to build any COM types :)", "edited": false, "comment_id": 907663, "creation_date": 1246987898, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "True. Specifically, named parameters can be <b>practically required</b> for interop with some dynamic environments. Sure, without a doubt, it&#39;s a useful feature but that doesn&#39;t mean it comes for free. It costs simplicity (an explicitly stated design goal). Personally, I think C# is amazing for features the team left off (otherwise, it could have been a C++ clone). C# team is great but a corporate environment can hardly be politics-free. I <i>guess</i> Anders himself wasn&#39;t very happy about this as he stated in his PDC&#39;08 talk: &quot;took us ten years to get back to where we were.&quot;", "edited": false, "comment_id": 908714, "creation_date": 1246997325, "score": 1, "owner": {"display_name": "Mehrdad Afshari", "reputation": 239800, "user_id": 33708, "user_type": "registered", "accept_rate": 83}}, {"body": "I agree that the team will need to keep a close eye on complexity. The dynamic stuff adds a lot of complexity for little value for <i>most</i> developers, but high value for <i>some</i> developers.", "edited": false, "comment_id": 908728, "creation_date": 1246997416, "score": 6, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I&#39;ve seen framework developers beginning to discuss its uses in many places. IMO it&#39;s just time until we find a good use for <code>dynamic</code> ... we&#39;re just too used to static/strong typing to see why it&#39;d matter outside of COM.", "edited": false, "comment_id": 5042859, "creation_date": 1294117783, "score": 0, "owner": {"display_name": "chakrit", "reputation": 35169, "user_id": 3055, "user_type": "registered", "accept_rate": 74}}], "comment_count": 9, "score": 140, "body": "<p><strong>EDIT:</strong> I've written the results up as a <a href=\"http://codeblog.jonskeet.uk/2009/07/07/faking-com-to-fool-the-c-compiler.aspx\">blog post</a>.</p>\n\n<hr>\n\n<p>The C# compiler treats COM types somewhat magically. For instance, this statement looks normal...</p>\n\n<pre><code>Word.Application app = new Word.Application();\n</code></pre>\n\n<p>... until you realise that <code>Application</code> is an interface. Calling a constructor on an interface? Yoiks! This actually gets translated into a call to <a href=\"http://msdn.microsoft.com/en-us/library/system.type.gettypefromclsid.aspx\"><code>Type.GetTypeFromCLSID()</code></a> and another to <a href=\"http://msdn.microsoft.com/en-us/library/system.activator.createinstance.aspx\"><code>Activator.CreateInstance</code></a>.</p>\n\n<p>Additionally, in C# 4, you can use non-ref arguments for <code>ref</code> parameters, and the compiler just adds a local variable to pass by reference, discarding the results:</p>\n\n<pre><code>// FileName parameter is *really* a ref parameter\napp.ActiveDocument.SaveAs(FileName: \"test.doc\");\n</code></pre>\n\n<p>(Yeah, there are a bunch of arguments missing. Aren't optional parameters nice? :)</p>\n\n<p>I'm trying to investigate the compiler behaviour, and I'm failing to fake the first part. I can do the second part with no problem:</p>\n\n<pre><code>using System;\nusing System.Runtime.InteropServices;\nusing System.Runtime.CompilerServices;\n\n[ComImport, GuidAttribute(\"00012345-0000-0000-0000-000000000011\")]\npublic interface Dummy\n{\n    void Foo(ref int x);\n}\n\nclass Test\n{\n    static void Main()\n    {\n        Dummy dummy = null;\n        dummy.Foo(10);\n    }\n}\n</code></pre>\n\n<p>I'd like to be able to write:</p>\n\n<pre><code>Dummy dummy = new Dummy();\n</code></pre>\n\n<p>though. Obviously it'll go bang at execution time, but that's okay. I'm just experimenting.</p>\n\n<p>The other attributes added by the compiler for linked COM PIAs (<code>CompilerGenerated</code> and <code>TypeIdentifier</code>) don't seem to do the trick... what's the magic sauce?</p>\n", "is_answered": true, "up_vote_count": 141, "tags": ["c#", "com", "compiler-construction", "c#-4.0"], "reopen_vote_count": 0, "answer_count": 4, "answers": [{"body": "<p>By no means am I an expert in this, but I stumbled recently on what I think you want: the <a href=\"http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.coclassattribute.aspx\">CoClass</a> attribute class.</p>\n\n<pre><code>[System.Runtime.InteropServices.CoClass(typeof(Test))]\npublic interface Dummy { }\n</code></pre>\n\n<blockquote>\n  <p>A coclass supplies concrete\n  implementation(s) of one or more\n  interfaces. In COM, such concrete\n  implementations can be written in any\n  programming language that supports COM\n  component development, e.g. Delphi,\n  C++, Visual Basic, etc.</p>\n</blockquote>\n\n<p>See <a href=\"http://stackoverflow.com/questions/958932/it-looks-like-im-instantiating-this-speechapi-interface-how-is-that-possible/958952#958952\">my answer to a similar question about the Microsoft Speech API</a>, where you're able to \"instantiate\" the interface <code>SpVoice</code> (but really, you're instantiating <code>SPVoiceClass</code>).</p>\n\n<pre><code>[CoClass(typeof(SpVoiceClass))]\npublic interface SpVoice : ISpeechVoice, _ISpeechVoiceEvents_Event { }\n</code></pre>\n", "is_accepted": true, "tags": [], "answer_id": 1093623, "down_vote_count": 1, "last_activity_date": 1278926695, "comments": [{"body": "Very interesting - will try it later. The linked PIA types don&#39;t have CoClass though. Maybe it&#39;s something to do with the linking process - I&#39;ll have a look in the original PIA...", "edited": false, "comment_id": 907658, "creation_date": 1246987839, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "+1 for being awesome by writing the accepted answer when Eric Lippert and Jon Skeet also answered ;) No, really, +1 for mentioning CoClass.", "edited": false, "comment_id": 925701, "creation_date": 1247242607, "score": 57, "owner": {"display_name": "OregonGhost", "reputation": 17700, "user_id": 20363, "user_type": "registered", "accept_rate": 38}}], "creation_date": 1246987340, "comment_count": 2, "score": 125, "owner": {"display_name": "Michael Petrotta", "reputation": 39945, "user_id": 23897, "user_type": "registered"}, "last_editor": {"display_name": "Shimmy", "reputation": 29460, "user_id": 75500, "user_type": "registered", "accept_rate": 93}, "last_edit_date": 1278926695, "up_vote_count": 126}, {"body": "<p>Between you and Michael you've almost got the pieces put together.  I think this is how it works. (I didn't write the code, so I might be slightly mis-stating it, but I'm pretty sure this is how it goes.)</p>\n\n<p>If:</p>\n\n<ul>\n<li>you are \"new\"ing an interface type, and</li>\n<li>the interface type has a known coclass, and</li>\n<li>you ARE using the \"no pia\" feature for this interface</li>\n</ul>\n\n<p>then the code is generated as (IPIAINTERFACE)Activator.CreateInstance(Type.GetTypeFromClsid(GUID OF COCLASSTYPE))</p>\n\n<p>If:</p>\n\n<ul>\n<li>you are \"new\"ing an interface type, and</li>\n<li>the interface type has a known coclass, and</li>\n<li>you ARE NOT using the \"no pia\" feature for this interface</li>\n</ul>\n\n<p>then the code is generated as if you'd said \"new COCLASSTYPE()\".</p>\n\n<p>Jon, feel free to bug me or Sam directly if you have questions about this stuff. FYI, Sam is the expert on this feature.</p>\n", "answer_id": 1094065, "tags": [], "down_vote_count": 0, "last_activity_date": 1246992166, "creation_date": 1246992166, "comment_count": 0, "score": 56, "owner": {"display_name": "Eric Lippert", "reputation": 354565, "user_id": 88656, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 56}, {"body": "<p>Okay, this is just to put a bit more flesh on Michael's answer (he's welcome to add it in if he wants to, in which case I'll remove this one).</p>\n\n<p>Looking at the original PIA for Word.Application, there are three types involved (ignoring the events):</p>\n\n<pre><code>[ComImport, TypeLibType(...), Guid(\"...\"), DefaultMember(\"Name\")]\npublic interface _Application\n{\n     ...\n}\n\n[ComImport, Guid(\"...\"), CoClass(typeof(ApplicationClass))]\npublic interface Application : _Application\n{\n}\n\n[ComImport, ClassInterface(...), ComSourceInterfaces(\"...\"), Guid(\"...\"), \n TypeLibType((short) 2), DefaultMember(\"Name\")]\npublic class ApplicationClass : _Application, Application\n{\n}\n</code></pre>\n\n<p>There are two interfaces for reasons that Eric Lippert talks about in <a href=\"http://stackoverflow.com/questions/1051464/excel-interop-worksheet-or-worksheet/1051546#1051546\">another answer</a>. And there, as you said, is the <code>CoClass</code> - both in terms of the class itself and the attribute on the <code>Application</code> interface.</p>\n\n<p>Now if we use PIA linking in C# 4, <em>some</em> of this is embedded in the resulting binary... but not all of it. An application which <em>just</em> creates an instance of <code>Application</code> ends up with these types:</p>\n\n<pre><code>[ComImport, TypeIdentifier, Guid(\"...\"), CompilerGenerated]\npublic interface _Application\n\n[ComImport, Guid(\"...\"), CompilerGenerated, TypeIdentifier]\npublic interface Application : _Application\n</code></pre>\n\n<p>No <code>ApplicationClass</code> - presumably because that will be loaded dynamically from the <em>real</em> COM type at execution time.</p>\n\n<p>Another interesting thing is the difference in the code between the linked version and the non-linked version. If you decompile the line</p>\n\n<pre><code>Word.Application application = new Word.Application();\n</code></pre>\n\n<p>in the <em>referenced</em> version it ends up as:</p>\n\n<pre><code>Application application = new ApplicationClass();\n</code></pre>\n\n<p>whereas in the <em>linked</em> version it ends up as</p>\n\n<pre><code>Application application = (Application) \n    Activator.CreateInstance(Type.GetTypeFromCLSID(new Guid(\"...\")));\n</code></pre>\n\n<p>So it looks like the \"real\" PIA needs the <code>CoClass</code> attribute, but the linked version doesn't because there <em>isn't</em> a <code>CoClass</code> the compiler can actually reference. It has to do it dynamically.</p>\n\n<p>I might try to fake up a COM interface using this information and see if I can get the compiler to link it...</p>\n", "answer_id": 1094138, "tags": [], "down_vote_count": 0, "last_activity_date": 1246992958, "creation_date": 1246992958, "comment_count": 0, "score": 30, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": false, "up_vote_count": 30}, {"body": "<p>Just to add a bit of confirmation to Michael's answer:</p>\n\n<p>The following code compiles and runs:</p>\n\n<pre><code>public class Program\n{\n    public class Foo : IFoo\n    {\n    }\n\n    [Guid(\"00000000-0000-0000-0000-000000000000\")]\n    [CoClass(typeof(Foo))]\n    [ComImport]\n    public interface IFoo\n    {\n    }\n\n    static void Main(string[] args)\n    {\n        IFoo foo = new IFoo();\n    }\n}\n</code></pre>\n\n<p>You need both the <code>ComImportAttribute</code> and the <code>GuidAttribute</code> for it to work.</p>\n\n<p>Also note the information when you hover the mouse over the <code>new IFoo()</code>: Intellisense properly picks up on the information: Nice!</p>\n", "answer_id": 1094140, "tags": [], "down_vote_count": 0, "last_activity_date": 1246992976, "creation_date": 1246992976, "comment_count": 0, "score": 23, "owner": {"display_name": "Rasmus Faber", "reputation": 28012, "user_id": 5542, "user_type": "registered", "accept_rate": 60}, "is_accepted": false, "up_vote_count": 23}], "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "down_vote_count": 1, "close_vote_count": 0, "question_id": 1093536}, {"body": "<p>I collect a few corner cases and <a href=\"http://www.yoda.arachsys.com/csharp/teasers.html\" rel=\"nofollow\">brain teasers</a> and would always like to hear more. The page only really covers C# language bits and bobs, but I also find core .NET things interesting too. For example, here's one which isn't on the page, but which I find incredible:</p>\n\n<pre><code>string x = new string(new char[0]);\nstring y = new string(new char[0]);\nConsole.WriteLine(object.ReferenceEquals(x, y));\n</code></pre>\n\n<p>I'd expect that to print False - after all, \"new\" (with a reference type) <em>always</em> creates a new object, doesn't it? The specs for both C# and the CLI indicate that it should.  Well, not in this particular case. It prints True, and has done on every version of the framework I've tested it with. (I haven't tried it on Mono, admittedly...)</p>\n\n<p>Just to be clear, this is only an example of the kind of thing I'm looking for - I wasn't particularly looking for discussion/explanation of this oddity. (It's not the same as normal string interning; in particular, string interning doesn't normally happen when a constructor is called.) I was really asking for similar odd behaviour.</p>\n\n<p>Any other gems lurking out there?</p>\n", "last_activity_date": 1411679559, "accepted_answer_id": 194671, "creation_date": 1223753445, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1265324005, "favorite_count": 560, "closed_date": 1304311167, "view_count": 95818, "delete_vote_count": 0, "closed_reason": "not constructive", "title": "What's the strangest corner case you've seen in C# or .NET?", "comments": [{"body": "I like those brain teasers.  I think most of them are just interesting and weird edge cases, but the one on capturing variables in anonymous methods is more on the order of Something Everyone Needs To Understand.", "edited": false, "comment_id": 72184, "creation_date": 1223756075, "score": 0, "owner": {"display_name": "Robert Rossney", "reputation": 50122, "user_id": 19403, "user_type": "registered", "accept_rate": 59}}, {"body": "Tested on Mono 2.0 rc; returns True", "edited": false, "comment_id": 72256, "creation_date": 1223760906, "score": 64, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "Edited to explain that the string example was just that - an example.", "edited": false, "comment_id": 72948, "creation_date": 1223834824, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "i thought .net strings were immutable, and unique by content; did you check object.ReferenceEquals(x,string.Empty)?", "edited": false, "comment_id": 141343, "creation_date": 1226813648, "score": 0, "owner": {"display_name": "Steven A. Lowe", "reputation": 43916, "user_id": 9345, "user_type": "registered", "accept_rate": 83}}, {"body": "They&#39;re immutable, but not necessarily unique. If you change &quot;new char[0]&quot; to &quot;new char[]{&#39;x&#39;}&quot; in both lines, you end up with references to separate but equal objects.", "edited": false, "comment_id": 141412, "creation_date": 1226819758, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "There must be some funky optimization at work there...", "edited": false, "comment_id": 164014, "creation_date": 1227812783, "score": 1, "owner": {"display_name": "Doctor Jones", "reputation": 13005, "user_id": 39277, "user_type": "registered", "accept_rate": 94}}, {"body": "Yup - optimisation which breaks the specs which say a new object will be allocated.", "edited": false, "comment_id": 164062, "creation_date": 1227815151, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "both strings end up being string.Empty and it appears that the framework keeps only one reference to that", "edited": false, "comment_id": 265134, "creation_date": 1231948164, "score": 10, "owner": {"display_name": "AZ.", "reputation": 4258, "user_id": 35128, "user_type": "registered", "accept_rate": 88}}, {"body": "Is there an answer somewhere?", "edited": false, "comment_id": 317835, "creation_date": 1233572643, "score": 0, "owner": {"display_name": "Fowl", "reputation": 2030, "user_id": 45583, "user_type": "registered", "accept_rate": 67}}, {"body": "@Fowl: An answer to why the string constructor behaves this way? No, not really.", "edited": false, "comment_id": 317955, "creation_date": 1233576829, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "It&#39;s a memory conservation thing. Look up the MSDN documentation for the static method string.Intern. The CLR maintains a string pool. That&#39;s why strings with identical content shows up as references to the same memory i.e. object.", "edited": false, "comment_id": 389354, "creation_date": 1235393326, "score": 34, "owner": {"display_name": "John Leidegren", "reputation": 26097, "user_id": 58961, "user_type": "registered", "accept_rate": 88}}, {"body": "I&#39;ve heard that it is one of the cornerstones of making Strings immutable.", "edited": false, "comment_id": 495346, "creation_date": 1237994342, "score": 0, "owner": {"display_name": "Daniel W", "reputation": 1460, "user_id": 17500, "user_type": "registered", "accept_rate": 88}}, {"body": "@John: String interning only happens automatically for <i>literals</i>. That&#39;s not the case here. @DanielSwe: Interning isn&#39;t <i>required</i> for making strings immutable. The fact that it&#39;s possible is a nice corollary of immutability, but normal interning isn&#39;t happening here anyway.", "edited": false, "comment_id": 495380, "creation_date": 1237994836, "score": 12, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Well, an empty string is a literal maybe. It is in Delphi", "edited": false, "comment_id": 628492, "creation_date": 1241427785, "score": 0, "owner": {"display_name": "Marco van de Voort", "reputation": 17263, "user_id": 99354, "user_type": "registered", "accept_rate": 83}}, {"body": "@Marco: &quot;&quot; is a string literal. Just creating an empty string in a different way isn&#39;t the same thing as a string literal.", "edited": false, "comment_id": 628549, "creation_date": 1241429143, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "You should add the one from here: <a href=\"http://groups.google.com/group/microsoft.public.dotnet.languages.csharp/browse_thread/thread/1f799cf8d94d1b59/800e2e35ebe3d883\" rel=\"nofollow\">groups.google.com/group/&hellip;</a>", "edited": false, "comment_id": 760903, "creation_date": 1244144939, "score": 0, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "@Downvoter: Care to comment on why you&#39;ve downvoted this?", "edited": false, "comment_id": 999153, "creation_date": 1248448451, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "It might be a bit late now but... Should be community wiki.", "edited": false, "comment_id": 2153834, "creation_date": 1265318758, "score": 1, "owner": {"display_name": "finnw", "reputation": 27950, "user_id": 12048, "user_type": "registered", "accept_rate": 94}}, {"body": "@finnw: Done. Not sure why it wasn&#39;t before...", "edited": false, "reply_to_user": {"display_name": "finnw", "reputation": 27950, "user_id": 12048, "user_type": "registered", "accept_rate": 94}, "comment_id": 2154552, "creation_date": 1265324027, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@opc: I&#39;m getting a dead page for that link :(", "edited": false, "comment_id": 2154557, "creation_date": 1265324058, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "The implementation detail that causes this behavior is explained here: <a href=\"http://blog.liranchen.com/2010/08/brain-teasing-with-strings.html\" rel=\"nofollow\">blog.liranchen.com/2010/08/brain-teasing-with-strings.html</a>", "edited": false, "comment_id": 3915693, "creation_date": 1284487238, "score": 3, "owner": {"display_name": "Liran", "reputation": 1083, "user_id": 2164233, "user_type": "registered"}}, {"body": "Almost intersting that people don&#39;t expect reference to equal, but they expect == to work between two strings. It has to do with Intern and how .Net stores strings. Any string containing the same data is the same object.", "edited": false, "comment_id": 5292904, "creation_date": 1295856206, "score": 0, "owner": {"display_name": "Tedd Hansen", "reputation": 5255, "user_id": 313088, "user_type": "registered", "accept_rate": 77}}, {"body": "@Tedd: That&#39;s simply not true. String <i>literals</i> end up in the same object, but you can easily create two distinct string objects with the same textual data. They will still compare as equal using the overloaded == operator so long as both expressions are of type string at compile time, as then the compiler knows to call the overloaded operator.", "edited": false, "reply_to_user": {"display_name": "Tedd Hansen", "reputation": 5255, "user_id": 313088, "user_type": "registered", "accept_rate": 77}, "comment_id": 5292923, "creation_date": 1295856313, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "string a = &quot;Test&quot;; string b = String.IsInterned(&quot;Te&quot; + &quot;st&quot;); Debug.WriteLine(object.ReferenceEquals(a, b)); // True", "edited": false, "comment_id": 5293087, "creation_date": 1295857659, "score": 0, "owner": {"display_name": "Tedd Hansen", "reputation": 5255, "user_id": 313088, "user_type": "registered", "accept_rate": 77}}, {"body": "@Jon - True, you can. But .Net tries to keep one string stored only once - hence the result. String.Intern and String.IsInterned are methods used to located existing strings.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 5293108, "creation_date": 1295857823, "score": 0, "owner": {"display_name": "Tedd Hansen", "reputation": 5255, "user_id": 313088, "user_type": "registered", "accept_rate": 77}}, {"body": "@Tedd: I&#39;m not sure what that code is supposed to show. We know that literals are interned, so the unnamed temporary that&#39;s passed to IsInterned looks up the previously interned value. However, if it hadn&#39;t been in a literal or interned by a call to Intern, the result would have been null. In practice, people rarely call either method, so strings that are generated on the fly (as opposed to literals) are compared character-by-character, not reference-to-reference.", "edited": false, "reply_to_user": {"display_name": "Tedd Hansen", "reputation": 5255, "user_id": 313088, "user_type": "registered", "accept_rate": 77}, "comment_id": 5300378, "creation_date": 1295894095, "score": 1, "owner": {"display_name": "Steven Sudit", "reputation": 14752, "user_id": 131926, "user_type": "registered"}}, {"body": "@Tedd: It doesn&#39;t &quot;try&quot; to keep one string stored only once. Yes, you <i>can</i> call Intern and IsInterned, but they&#39;re rarely encountered.", "edited": false, "reply_to_user": {"display_name": "Tedd Hansen", "reputation": 5255, "user_id": 313088, "user_type": "registered", "accept_rate": 77}, "comment_id": 5300507, "creation_date": 1295894579, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "comment_count": 27, "score": 322, "community_owned_date": 1265324005, "is_answered": true, "notice": {"body": "<p>This question exists because it has historical significance, but <b>it is not considered a good, on-topic question for this site</b>,   so please do not use it as evidence that you can ask similar questions here.  This question and its answers are frozen and cannot be changed.  More info: <a href=\"http://stackoverflow.com/help\">help center</a>.</p>", "owner_user_id": 102937, "creation_date": 1317794127}, "tags": ["c#", ".net"], "reopen_vote_count": 0, "answer_count": 37, "answers": [{"body": "<p>I think I showed you this one before, but I like the fun here - this took some debugging to track down! (the original code was obviously more complex and subtle...)</p>\n\n<pre><code>    static void Foo&lt;T&gt;() where T : new()\n    {\n        T t = new T();\n        Console.WriteLine(t.ToString()); // works fine\n        Console.WriteLine(t.GetHashCode()); // works fine\n        Console.WriteLine(t.Equals(t)); // works fine\n\n        // so it looks like an object and smells like an object...\n\n        // but this throws a NullReferenceException...\n        Console.WriteLine(t.GetType());\n    }\n</code></pre>\n\n<p>So what was T...</p>\n\n<p>Answer: any <code>Nullable&lt;T&gt;</code> - such as <code>int?</code>. All the methods are overridden, except GetType() which can't be; so it is cast (boxed) to object (and hence to null) to call object.GetType()... which calls on null ;-p</p>\n\n<p><hr></p>\n\n<p>Update: the plot thickens... Ayende Rahien threw down a <a href=\"http://ayende.com/Blog/archive/2009/11/25/can-you-hack-this-out-hint-1.aspx\" rel=\"nofollow\">similar challenge on his blog</a>, but with a <code>where T : class, new()</code>:</p>\n\n<pre><code>private static void Main() {\n    CanThisHappen&lt;MyFunnyType&gt;();\n}\n\npublic static void CanThisHappen&lt;T&gt;() where T : class, new() {\n    var instance = new T(); // new() on a ref-type; should be non-null, then\n    Debug.Assert(instance != null, \"How did we break the CLR?\");\n}\n</code></pre>\n\n<p>But it can be defeated! Using the same indirection used by things like remoting; warning - the following is <strong>pure evil</strong>:</p>\n\n<pre><code>class MyFunnyProxyAttribute : ProxyAttribute {\n    public override MarshalByRefObject CreateInstance(Type serverType) {\n        return null;\n    }\n}\n[MyFunnyProxy]\nclass MyFunnyType : ContextBoundObject { }\n</code></pre>\n\n<p>With this in place, the <code>new()</code> call is redirected to the proxy (<code>MyFunnyProxyAttribute</code>), which returns <code>null</code>. Now go and wash your eyes!</p>\n", "is_accepted": true, "tags": [], "answer_id": 194671, "down_vote_count": 1, "last_activity_date": 1259150639, "comments": [{"body": "Why can&#39;t Nullable&lt;T&gt;.GetType() be defined?  Shouldn&#39;t the result be typeof(Nullable&lt;T&gt;)?", "edited": false, "comment_id": 95412, "creation_date": 1224751077, "score": 9, "owner": {"display_name": "Drew Noakes", "reputation": 95521, "user_id": 24874, "user_type": "registered", "accept_rate": 79}}, {"body": "Drew: the problem is that GetType() isn&#39;t virtual, so it&#39;s not overridden - which means that the value is boxed for the method call. The box becomes a null reference, hence the NRE.", "edited": false, "comment_id": 101208, "creation_date": 1224964366, "score": 69, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Drew; additionally, there are special boxing rules for Nullable&lt;T&gt;, which means that an empty Nullable&lt;T&gt; boxes to null, not a box that contains an empty Nullable&lt;T&gt; (and a null un-boxes to an empty Nullable&lt;T&gt;)", "edited": false, "comment_id": 101741, "creation_date": 1225010069, "score": 10, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "Very, very cool. In an uncool kind of way. ;-)", "edited": false, "comment_id": 104459, "creation_date": 1225143229, "score": 29, "owner": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}}, {"body": "Wow, thats pretty surprising to me.  Had to play around in a test app to see it for myself.", "edited": false, "comment_id": 877150, "creation_date": 1246384333, "score": 0, "owner": {"display_name": "Frank Schwieterman", "reputation": 15387, "user_id": 32203, "user_type": "registered", "accept_rate": 65}}, {"body": "Could you provide a link to the part of the language documentation that explains what &quot;<code>where T : new()</code>&quot; means?", "edited": false, "comment_id": 1548576, "creation_date": 1257352238, "score": 0, "owner": {"display_name": "finnw", "reputation": 27950, "user_id": 12048, "user_type": "registered", "accept_rate": 94}}, {"body": "Constructor-constraint, 10.1.5 in the C# 3.0 langauge spec", "edited": false, "comment_id": 1548652, "creation_date": 1257352777, "score": 6, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "Wow, thanks for info on <code>ProxyAttribute</code>!", "edited": false, "comment_id": 1771612, "creation_date": 1260360055, "score": 1, "owner": {"display_name": "Anton Tykhyy", "reputation": 13784, "user_id": 77724, "user_type": "registered"}}, {"body": "Maybe Java&#39;s type erasure wasn&#39;t such a bad idea after all.", "edited": false, "comment_id": 2153876, "creation_date": 1265319049, "score": 3, "owner": {"display_name": "finnw", "reputation": 27950, "user_id": 12048, "user_type": "registered", "accept_rate": 94}}, {"body": "@finnw: I really hope that was sarcastic. &quot;Yeah, let&#39;s make programmer&#39;s lives living hell because nullable types would be boxed to null when calling GetType() on an instance using generics.&quot;", "edited": false, "reply_to_user": {"display_name": "finnw", "reputation": 27950, "user_id": 12048, "user_type": "registered", "accept_rate": 94}, "comment_id": 3877369, "creation_date": 1284076061, "score": 0, "owner": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}}, {"body": "@John Skeet: Would it be correct to say that GetType wouldn&#39;t have had to require boxing if Microsoft had every struct automatically shadow Object.GetType with its own implementation, but Microsoft didn&#39;t do that, boxing is required to invoke Object.GetType?  Would it break anything if in .Net 5.0, Microsoft had structure (or at least nullable types) include such a shadowed implementation?", "edited": false, "comment_id": 6497675, "creation_date": 1302982157, "score": 0, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}, {"body": "@supercat ; @Jon won&#39;t see that unless you remove the &quot;h&quot;, but: GetType() itself is not virtual, and changing that would be a huge change. Of course, in many ways there is <i>no need to ever call it</i> for structs - the compiler could do the substitution (it already knows); but that would need a spec change.", "edited": false, "reply_to_user": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}, "comment_id": 6497818, "creation_date": 1302982957, "score": 0, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "@Marc Gravell: Will he see your comment?  I thought only the first @ tag was effective?  I think I see the issue.  A struct can implement GetType in such a way as to shadow Object.GetType, and a Nullable&lt;T&gt; probably could too.  This would allow one to call GetType on an object which was known to be of type Nullable&lt;T&gt; without boxing.  That wouldn&#39;t solve the problem in the generic case, though, since method dispatch is determined before the generic type is bound.  One may define a structure with a GetType method that returns 1.GetType; if one calls GetType on such a structure...", "edited": false, "reply_to_user": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}, "comment_id": 6498227, "creation_date": 1302985830, "score": 0, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}, {"body": "@Marc Gravell: ... the result will be (System.Int32), but if one passes such a structure to a generic function which calls GetType on it, the result will be the structure&#39;s type.  I guess I find it a little surprising that Nullable&lt;T&gt; doesn&#39;t shadow the GetType method to allow it to be used without boxing, and adding a shadowed GetType method to Nullable&lt;T&gt; probably wouldn&#39;t break anything, but even if such a shadow method existed wouldn&#39;t affect the need to box within a generic function.  Thanks for writing.", "edited": false, "reply_to_user": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}, "comment_id": 6498245, "creation_date": 1302986011, "score": 0, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}, {"body": "This post was the first time I saw <code>CreateInstance</code> overridden. I immediately understood what it was doing and felt a clammy horror grip my soul..", "edited": false, "comment_id": 8358013, "creation_date": 1312915561, "score": 1, "owner": {"display_name": "Brian Gordon", "reputation": 3196, "user_id": 857012, "user_type": "registered", "accept_rate": 90}}], "creation_date": 1223760323, "comment_count": 15, "score": 395, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}, "last_editor": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}, "last_edit_date": 1259150639, "up_vote_count": 396}, {"body": "<pre><code>Public Class Item\n   Public ID As Guid\n   Public Text As String\n\n   Public Sub New(ByVal id As Guid, ByVal name As String)\n      Me.ID = id\n      Me.Text = name\n   End Sub\nEnd Class\n\nPublic Sub Load(sender As Object, e As EventArgs) Handles Me.Load\n   Dim box As New ComboBox\n   Me.Controls.Add(box)          'Sorry I forgot this line the first time.'\n   Dim h As IntPtr = box.Handle  'Im not sure you need this but you might.'\n   Try\n      box.Items.Add(New Item(Guid.Empty, Nothing))\n   Catch ex As Exception\n      MsgBox(ex.ToString())\n   End Try\nEnd Sub\n</code></pre>\n\n<p>The output is \"Attempted to read protected memory. This is an indication that other memory is corrupt.\"</p>\n", "is_accepted": false, "tags": [], "answer_id": 194685, "down_vote_count": 1, "last_activity_date": 1225142992, "comments": [{"body": "Interesting! Sounds like a compiler bug, though; I&#39;ve ported to C# and it works fine. That said, there are a lot of issues with exceptions thrown in Load, and it behaves differently with/without a debugger - you can catch with a debugger, but not without (in some cases).", "edited": false, "comment_id": 72261, "creation_date": 1223761470, "score": 1, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "Sorry, I forgot, you need to add the combo box to the form before it will.", "edited": false, "comment_id": 72413, "creation_date": 1223777225, "score": 0, "owner": {"display_name": "Joshua", "reputation": 14708, "user_id": 14768, "user_type": "registered", "accept_rate": 87}}, {"body": "Is this to do with dialog initialization using an SEH as some kind of horrible internal communication mechanism? I vaguely remember something like that in Win32.", "edited": false, "comment_id": 459739, "creation_date": 1237053275, "score": 0, "owner": {"display_name": "Daniel Earwicker", "reputation": 71665, "user_id": 27423, "user_type": "registered", "accept_rate": 84}}, {"body": "No. Attaching an unmanaged debugger revealed it to be a null pointer dereference.", "edited": false, "comment_id": 459950, "creation_date": 1237060407, "score": 0, "owner": {"display_name": "Joshua", "reputation": 14708, "user_id": 14768, "user_type": "registered", "accept_rate": 87}}, {"body": "This is the same problem cbp above.  The valuetype being returned is a copy, therefore any references to any properties stemming from said copy are headed to bit-bucket land...  <a href=\"http://bytes.com/topic/net/answers/107771-c-struct-class-can-not-access-properties-struct#post382595\" rel=\"nofollow\">bytes.com/topic/net/answers/&hellip;</a>", "edited": false, "comment_id": 1398245, "creation_date": 1255061068, "score": 1, "owner": {"display_name": "Bennett Dill", "reputation": 1835, "user_id": 67137, "user_type": "registered", "accept_rate": 71}}, {"body": "Nope. There are no structs here. I actually debugged it. It adds a NULL to the list item collection of the native combo box causing a delayed crash.", "edited": false, "comment_id": 1401196, "creation_date": 1255101851, "score": 1, "owner": {"display_name": "Joshua", "reputation": 14708, "user_id": 14768, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1223760860, "comment_count": 6, "score": 10, "owner": {"display_name": "Joshua", "reputation": 14708, "user_id": 14768, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}, "last_edit_date": 1225142992, "up_vote_count": 11}, {"body": "<p>Bankers' Rounding.</p>\n\n<p>This one is not so much a compiler bug or malfunction, but certainly a strange corner case...</p>\n\n<p>The .Net Framework employs a scheme or rounding known as Banker's Rounding.</p>\n\n<p>In Bankers' Rounding the 0.5 numbers are rounded to the nearest even number, so</p>\n\n<pre><code>Math.Round(-0.5) == 0\nMath.Round(0.5) == 0\nMath.Round(1.5) == 2\nMath.Round(2.5) == 2\netc...\n</code></pre>\n\n<p>This can lead to some unexpected bugs in financial calculations based on the more well known Round-Half-Up rounding.</p>\n\n<p>This is also true of Visual Basic.</p>\n", "is_accepted": false, "tags": [], "answer_id": 195143, "down_vote_count": 8, "last_activity_date": 1237349154, "comments": [{"body": "It seemed strange to me too. That is, at least, until I had round a big list of numbers and calculate their sum. You then realize that if you simply round up, you will end up with potentially huge difference from the sum of the non-rounded numbers. Very bad if you are doing financial calculations!", "edited": false, "comment_id": 72583, "creation_date": 1223805909, "score": 22, "owner": {"display_name": "Tsvetomir Tsonev", "reputation": 52509, "user_id": 25449, "user_type": "registered"}}, {"body": "Having worked in financial environments I would disagree. If you business requirements need one way of rounding and if your software acts differently, that is where the problems arise. In heavy statistical calculations, Bankers&#39; rounding is more accurate - which is what I think you are referring to.", "edited": false, "comment_id": 72674, "creation_date": 1223813906, "score": 6, "owner": {"display_name": "Samuel Kim", "reputation": 3137, "user_id": 437435, "user_type": "registered", "accept_rate": 100}}, {"body": "In case people didn&#39;t know, you can do:      Math.Round(x, MidpointRounding.AwayFromZero); To change the rounding scheme.", "edited": false, "comment_id": 72679, "creation_date": 1223814246, "score": 255, "owner": {"display_name": "ICR", "reputation": 7914, "user_id": 214, "user_type": "registered", "accept_rate": 73}}, {"body": "From the docs:  The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding to nearest, or banker&#39;s rounding. It minimizes rounding errors that result from consistently rounding a midpoint value in a single direction.", "edited": false, "comment_id": 72681, "creation_date": 1223814300, "score": 26, "owner": {"display_name": "ICR", "reputation": 7914, "user_id": 214, "user_type": "registered", "accept_rate": 73}}, {"body": "I wonder if this is why I see <code>int(fVal + 0.5)</code> so often even in languages which have a built-in rounding function.", "edited": false, "comment_id": 395207, "creation_date": 1235505009, "score": 8, "owner": {"display_name": "Ben Blank", "reputation": 25227, "user_id": 46387, "user_type": "registered", "accept_rate": 86}}, {"body": "Nice answer!  This drove me insane!!!  I couldn&#39;t figure out why...", "edited": false, "comment_id": 1227197, "creation_date": 1252277438, "score": 0, "owner": {"display_name": "Christian Payne", "reputation": 4166, "user_id": 5188, "user_type": "registered", "accept_rate": 100}}, {"body": "Ironically, I worked at a <i>bank</i> once and the other programmers started flipping out about this, thinking that rounding was broken in the framework", "edited": false, "comment_id": 1891744, "creation_date": 1262119430, "score": 32, "owner": {"display_name": "dan", "reputation": 4737, "user_id": 197605, "user_type": "registered", "accept_rate": 86}}, {"body": "I wrote a stock trade sorting and aggregating app in MS Access years ago (I&#39;ve done my penance, no need for public humiliation now).  If I remember right it did not do banker&#39;s rounding and had some nasty side effects due to the fundamental inexactness of real numbers.  Ultimately a team and I rewrote the whole thing as a .Net 1.0 ASP.Net app using stored procs.  It was a fair bit faster as you might imagine.", "edited": false, "comment_id": 2042676, "creation_date": 1264061343, "score": 1, "owner": {"display_name": "Steve Hiner", "reputation": 1142, "user_id": 10221, "user_type": "registered", "accept_rate": 80}}, {"body": "@Ben Blank: I use that simply because I want an <code>int</code>, not a rounded float.", "edited": false, "reply_to_user": {"display_name": "Ben Blank", "reputation": 25227, "user_id": 46387, "user_type": "registered", "accept_rate": 86}, "comment_id": 2328555, "creation_date": 1267427997, "score": 0, "owner": {"display_name": "Mark", "reputation": 66066, "user_id": 65387, "user_type": "registered", "accept_rate": 67}}, {"body": "+1 I hit this one recently", "edited": false, "comment_id": 2371554, "creation_date": 1267886825, "score": 0, "owner": {"display_name": "Nij", "reputation": 803, "user_id": 6004, "user_type": "registered", "accept_rate": 89}}, {"body": "Yeah! That&#39;s one of the reasons I like .NET. Hold on... I don&#39;t!!!", "edited": false, "comment_id": 2781021, "creation_date": 1272733120, "score": 1, "owner": {"display_name": "victor hugo", "reputation": 19652, "user_id": 70616, "user_type": "registered", "accept_rate": 74}}, {"body": "This isn&#39;t just .net, this goes WAY back to at least VB4. Given this doesn&#39;t skew results in most scenarios when aggregating, why isn&#39;t this the &quot;normal&quot; way of rounding taught in school?", "edited": false, "comment_id": 2967081, "creation_date": 1274895736, "score": 1, "owner": {"display_name": "Jim Leonardo", "reputation": 1713, "user_id": 195693, "user_type": "registered"}}, {"body": "@Jim Leonardo, in school, .5 gets rounded up. In this code, .5 is rounded up if <i>up</i> is even, down if <i>up</i> is odd. Given the following array <code>{ 0.5, 1.5, 2.5, 3.5, 4.5, 5.5 }</code>, rounding would return <code>{ 0, 2, 2, 4, 4, 6 }</code>.", "edited": false, "reply_to_user": {"display_name": "Jim Leonardo", "reputation": 1713, "user_id": 195693, "user_type": "registered"}, "comment_id": 2967218, "creation_date": 1274896776, "score": 2, "owner": {"display_name": "Anthony Pegram", "reputation": 66174, "user_id": 414076, "user_type": "registered", "accept_rate": 86}}, {"body": "Note also that the rounding we were taught in schools (or, at least, that I was taught in schools) was to go one more digit than the desired result, and then round.  With the IEEE standard rounding (so-called &quot;banker&#39;s&quot;), you need to treat a 5 differently if there is an additional remainder.  (For example, 2.5 rounds to 2, but 2.5001 rounds to 3).  I guess that additional detail was thought to be too much for the 3rd-grade mind.", "edited": false, "comment_id": 4931313, "creation_date": 1292978655, "score": 0, "owner": {"display_name": "phoog", "reputation": 27162, "user_id": 385844, "user_type": "registered", "accept_rate": 100}}, {"body": "Actually, if you look deeper into this, it has nothing to do with .Net. It the the Intel x86 FPU that uses Banker&#39;s rounding. Easy to find in Google.", "edited": false, "comment_id": 6385727, "creation_date": 1302377843, "score": 0, "owner": {"display_name": "IanC", "reputation": 4682, "user_id": 401584, "user_type": "registered", "accept_rate": 90}}, {"body": "um.. except you can choose which kind of rounding to use with the second parameter of Math.Round as ICR pointed out.", "edited": false, "comment_id": 7139392, "creation_date": 1306470991, "score": 0, "owner": {"display_name": "Tom", "reputation": 2430, "user_id": 617027, "user_type": "registered", "accept_rate": 72}}], "creation_date": 1223791383, "comment_count": 16, "score": 216, "owner": {"display_name": "Samuel Kim", "reputation": 3137, "user_id": 437435, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "Matt J", "reputation": 18898, "user_id": 18528, "user_type": "registered"}, "last_edit_date": 1237349154, "up_vote_count": 224}, {"body": "<p>I think the answer to the question is because .net uses string interning something that might cause equal strings to point to the same object (since a strings are mutable this is not a problem)</p>\n\n<p>(I'm not talking about the overridden equality operator on the string class)</p>\n", "answer_id": 195611, "tags": [], "down_vote_count": 25, "last_activity_date": 1223825868, "comments": [{"body": "Strings are <i>immutable</i>, not mutable. And this isn&#39;t &quot;normal&quot; string interning - it only occurs when you pass in an empty char array. However, the question isn&#39;t really &quot;why does this happen?&quot; but &quot;what similar things have you seen?&quot;", "edited": false, "comment_id": 72945, "creation_date": 1223834699, "score": 15, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Reminds me of how any discussion of the Fizz Buzz problem leads to at least half the responses being solutions of the problem.", "edited": false, "comment_id": 75565, "creation_date": 1223948479, "score": 10, "owner": {"display_name": "Wedge", "reputation": 13231, "user_id": 332, "user_type": "registered", "accept_rate": 100}}, {"body": "Half of which were incorrect.", "edited": false, "comment_id": 3699258, "creation_date": 1282335840, "score": 2, "owner": {"display_name": "Joe", "reputation": 21092, "user_id": 148423, "user_type": "registered", "accept_rate": 77}}], "creation_date": 1223825868, "comment_count": 3, "score": -18, "owner": {"display_name": "James Z", "reputation": 58, "user_id": 26135, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 7}, {"body": "<p>Interesting - when I first looked at that I assumed it was something the C# compiler was checking for, but even if you emit the IL directly to remove any chance of interference it still happens, which means it really is the <code>newobj</code> op-code that's doing the checking.</p>\n\n<pre><code>var method = new DynamicMethod(\"Test\", null, null);\nvar il = method.GetILGenerator();\n\nil.Emit(OpCodes.Ldc_I4_0);\nil.Emit(OpCodes.Newarr, typeof(char));\nil.Emit(OpCodes.Newobj, typeof(string).GetConstructor(new[] { typeof(char[]) }));\n\nil.Emit(OpCodes.Ldc_I4_0);\nil.Emit(OpCodes.Newarr, typeof(char));\nil.Emit(OpCodes.Newobj, typeof(string).GetConstructor(new[] { typeof(char[]) }));\n\nil.Emit(OpCodes.Call, typeof(object).GetMethod(\"ReferenceEquals\"));\nil.Emit(OpCodes.Box, typeof(bool));\nil.Emit(OpCodes.Call, typeof(Console).GetMethod(\"WriteLine\", new[] { typeof(object) }));\n\nil.Emit(OpCodes.Ret);\n\nmethod.Invoke(null, null);\n</code></pre>\n\n<p>It also equates to <code>true</code> if you check against <code>string.Empty</code> which means this op-code must have special behaviour to intern empty strings.</p>\n", "answer_id": 195636, "tags": [], "down_vote_count": 0, "last_activity_date": 1223827802, "comments": [{"body": "not to be a smart aleck or anything but have you heard of the <a href=\"http://www.red-gate.com/products/reflector/\" rel=\"nofollow\">reflector</a>? it&#39;s quite handy in these sorts of cases;", "edited": false, "comment_id": 939442, "creation_date": 1247527765, "score": 0, "owner": {"display_name": "RCIX", "reputation": 14170, "user_id": 117069, "user_type": "registered", "accept_rate": 92}}, {"body": "You&#39;re not being smart; you&#39;re missing the point - I wanted to generate specific IL for this one case. And anyway, given that Reflection.Emit is trivial for this type of scenario, it&#39;s probably as quick as writing a program in C# then opening reflector, finding the binary, finding the method, etc... And I don&#39;t even have to leave the IDE to do it.", "edited": false, "comment_id": 941170, "creation_date": 1247564146, "score": 3, "owner": {"display_name": "Greg Beech", "reputation": 65570, "user_id": 13552, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1223827802, "comment_count": 2, "score": 12, "owner": {"display_name": "Greg Beech", "reputation": 65570, "user_id": 13552, "user_type": "registered", "accept_rate": 87}, "is_accepted": false, "up_vote_count": 12}, {"body": "<p><strong>When is a Boolean neither True nor False?</strong></p>\n\n<p>Bill discovered that you can hack a boolean so that if A is True and B is True, (A and B) is False.</p>\n\n<p><a href=\"http://blogs.msmvps.com/bill/2004/06/22/a-hacked-boolean/\" rel=\"nofollow\">Hacked Booleans</a></p>\n", "is_accepted": false, "tags": [], "answer_id": 195808, "down_vote_count": 1, "last_activity_date": 1411679559, "comments": [{"body": "When it&#39;s FILE_NOT_FOUND, of course!", "edited": false, "comment_id": 205736, "creation_date": 1229611678, "score": 134, "owner": {"display_name": "Greg", "reputation": 162079, "user_id": 24181, "user_type": "registered", "accept_rate": 77}}, {"body": "This is interesting because it means, mathematically speaking, that no statement in C# is provable. Ooops.", "edited": false, "comment_id": 315396, "creation_date": 1233449797, "score": 12, "owner": {"display_name": "Simon Johnson", "reputation": 5071, "user_id": 854, "user_type": "registered", "accept_rate": 75}}, {"body": "@Simon Johnson - you mean VB.NET, to which that post refers, right?", "edited": false, "comment_id": 459737, "creation_date": 1237053127, "score": 0, "owner": {"display_name": "Daniel Earwicker", "reputation": 71665, "user_id": 27423, "user_type": "registered", "accept_rate": 84}}, {"body": "I&#39;ve tested it and it works in c# as well.", "edited": false, "comment_id": 1296362, "creation_date": 1253408069, "score": 1, "owner": {"display_name": "RCIX", "reputation": 14170, "user_id": 117069, "user_type": "registered", "accept_rate": 92}}, {"body": "Someday I shall write a program that depends on this behavior, and the demons of darkest hell will prepare a welcome for me. Bwahahahahaha!", "edited": false, "comment_id": 1688339, "creation_date": 1259187800, "score": 20, "owner": {"display_name": "Jeffrey L Whitledge", "reputation": 32436, "user_id": 10174, "user_type": "registered"}}, {"body": "This example uses bitwise, not logical operators. How is that surprising?", "edited": false, "comment_id": 1693006, "creation_date": 1259254943, "score": 18, "owner": {"display_name": "Josh Lee", "reputation": 67227, "user_id": 19750, "user_type": "registered", "accept_rate": 100}}, {"body": "Well, he hacks the layout of the struct, of course you&#39;ll get weird results, this is not that surprising or unexpected!", "edited": false, "comment_id": 2907140, "creation_date": 1274239099, "score": 6, "owner": {"display_name": "Ion Todirel", "reputation": 1996, "user_id": 90843, "user_type": "registered", "accept_rate": 75}}], "creation_date": 1223835390, "comment_count": 7, "score": 56, "owner": {"display_name": "Jonathan Allen", "reputation": 27674, "user_id": 5274, "user_type": "registered", "accept_rate": 68}, "last_editor": {"display_name": "Robert Harvey", "reputation": 117921, "user_id": 102937, "user_type": "moderator", "accept_rate": 93}, "last_edit_date": 1411679559, "up_vote_count": 57}, {"body": "<p>What will this function do if called as <code>Rec(0)</code> (not under the debugger)?</p>\n\n<pre><code>static void Rec(int i)\n{\n    Console.WriteLine(i);\n    if (i &lt; int.MaxValue)\n    {\n        Rec(i + 1);\n    }\n}\n</code></pre>\n\n<p>Answer:</p>\n\n<ul>\n<li>On 32-bit JIT it should result in a StackOverflowException</li>\n<li>On 64-bit JIT it should print all the numbers to int.MaxValue</li>\n</ul>\n\n<p>This is because <a href=\"http://blogs.msdn.com/davbr/pages/tail-call-jit-conditions.aspx\">the 64-bit JIT compiler applies tail call optimisation</a>, whereas the 32-bit JIT does not. </p>\n\n<p>Unfortunately I haven't got a 64-bit machine to hand to verify this, but the method does meet all the conditions for tail-call optimisation. If anybody does have one I'd be interested to see if it's true.</p>\n", "is_accepted": false, "tags": [], "answer_id": 195824, "down_vote_count": 0, "last_activity_date": 1329415436, "comments": [{"body": "Has to be compiled in release mode, but most definitely works on x64 =)", "edited": false, "comment_id": 72968, "creation_date": 1223836981, "score": 10, "owner": {"display_name": "Neil Williams", "reputation": 7275, "user_id": 9617, "user_type": "registered", "accept_rate": 88}}, {"body": "might be worth updating your answer when VS 2010 comes out since all current JITs will then do the TCO in Release mode", "edited": false, "comment_id": 867739, "creation_date": 1246232434, "score": 3, "owner": {"display_name": "ShuggyCoUk", "reputation": 26422, "user_id": 12748, "user_type": "registered"}}, {"body": "Just tried on VS2010 Beta 1 on 32-bit WinXP.  Still get a StackOverflowException.", "edited": false, "comment_id": 1171998, "creation_date": 1251319531, "score": 3, "owner": {"display_name": "squillman", "reputation": 5361, "user_id": 75852, "user_type": "registered", "accept_rate": 79}}, {"body": "Yeah, tail call support in the JIT is only useful if the compiler generates tail opcode prefixes, which it looks like the C# compiler still doesn&#39;t do. The equivalent F# code should work perfectly, though. :)", "edited": false, "comment_id": 1222112, "creation_date": 1252123408, "score": 3, "owner": {"display_name": "bcat", "reputation": 5790, "user_id": 152208, "user_type": "registered"}}, {"body": "+1 for the StackOverflowException", "edited": false, "comment_id": 1927838, "creation_date": 1262711667, "score": 130, "owner": {"display_name": "calvinlough", "reputation": 182, "user_id": 240361, "user_type": "registered", "accept_rate": 100}}, {"body": "Doesn&#39;t work for me on win7 x64 :( throws stack overflow exception", "edited": false, "comment_id": 2708217, "creation_date": 1271897114, "score": 0, "owner": {"display_name": "iBiryukov", "reputation": 1088, "user_id": 139077, "user_type": "registered", "accept_rate": 96}}, {"body": "@Ilya - Are you sure you&#39;re compiling the application for the Any CPU or x64 platforms? Visual Studio defaults to x86 so even on a 64-bit system you&#39;ll see 32-bit behaviour unless you change the compilation setting.", "edited": false, "reply_to_user": {"display_name": "iBiryukov", "reputation": 1088, "user_id": 139077, "user_type": "registered", "accept_rate": 96}, "comment_id": 2708244, "creation_date": 1271897485, "score": 0, "owner": {"display_name": "Greg Beech", "reputation": 65570, "user_id": 13552, "user_type": "registered", "accept_rate": 87}}, {"body": "@Gred, yeah I am sure :)", "edited": false, "comment_id": 2711047, "creation_date": 1271933967, "score": 0, "owner": {"display_name": "iBiryukov", "reputation": 1088, "user_id": 139077, "user_type": "registered", "accept_rate": 96}}, {"body": "@Ilya - Perhaps you changed the build target to x64 for Debug mode, then compiled in Release?  I made this mistake myself.", "edited": false, "reply_to_user": {"display_name": "iBiryukov", "reputation": 1088, "user_id": 139077, "user_type": "registered", "accept_rate": 96}, "comment_id": 4770752, "creation_date": 1291744868, "score": 0, "owner": {"display_name": "Odrade", "reputation": 2672, "user_id": 79646, "user_type": "registered", "accept_rate": 88}}, {"body": "That <code>++</code> there totally threw me off. Can&#39;t you call <code>Rec(i + 1)</code> like a normal person?", "edited": false, "comment_id": 5732123, "creation_date": 1298593948, "score": 7, "owner": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}}, {"body": "@configurator ++i is normal for C style languages.", "edited": false, "reply_to_user": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}, "comment_id": 6385833, "creation_date": 1302378450, "score": 1, "owner": {"display_name": "IanC", "reputation": 4682, "user_id": 401584, "user_type": "registered", "accept_rate": 90}}, {"body": "That <code>tail call optimization</code> is interesting: are there similar features in any of the JVMs? Thanks!", "edited": false, "comment_id": 8162485, "creation_date": 1311871347, "score": 0, "owner": {"display_name": "java.is.for.desktop", "reputation": 3721, "user_id": 185919, "user_type": "registered", "accept_rate": 90}}, {"body": "@configurator, the difference is that the <code>i++</code> operator returns the variable value than increments it, the <code>++i</code> increments the value, then returns. and the <code>++</code> operator is much more simple than <code>i + 1</code>.", "edited": false, "reply_to_user": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}, "comment_id": 11179960, "creation_date": 1327008279, "score": 1, "owner": {"display_name": "Shimmy", "reputation": 29460, "user_id": 75500, "user_type": "registered", "accept_rate": 93}}, {"body": "@Shimmy: How is <code>++i</code> simpler than <code>i+1</code> ? They are both exactly 3 characters.  Further <code>++i</code> changes the value of i, which is unnecessary (and potentially confusing) here.  All that is required is that the value &quot;one more than i&quot; be passed to the method.", "edited": false, "reply_to_user": {"display_name": "Shimmy", "reputation": 29460, "user_id": 75500, "user_type": "registered", "accept_rate": 93}, "comment_id": 11748219, "creation_date": 1329403438, "score": 0, "owner": {"display_name": "James Curran", "reputation": 64499, "user_id": 12725, "user_type": "registered", "accept_rate": 75}}, {"body": "@configurator - I have changed <code>i++</code> to <code>i + 1</code> because I agree mutating state is poor form in a functional-style method.", "edited": false, "reply_to_user": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}, "comment_id": 11753267, "creation_date": 1329415464, "score": 0, "owner": {"display_name": "Greg Beech", "reputation": 65570, "user_id": 13552, "user_type": "registered", "accept_rate": 87}}, {"body": "@JamesCurran, agreed on the part of the unnecessary incremention of local var in current recursion.", "edited": false, "reply_to_user": {"display_name": "James Curran", "reputation": 64499, "user_id": 12725, "user_type": "registered", "accept_rate": 75}, "comment_id": 11760832, "creation_date": 1329438889, "score": 0, "owner": {"display_name": "Shimmy", "reputation": 29460, "user_id": 75500, "user_type": "registered", "accept_rate": 93}}], "creation_date": 1223836196, "comment_count": 16, "score": 176, "owner": {"display_name": "Greg Beech", "reputation": 65570, "user_id": 13552, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "Greg Beech", "reputation": 65570, "user_id": 13552, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1329415436, "up_vote_count": 176}, {"body": "<p>The following prints False instead of throwing an overflow exception:</p>\n\n<pre><code>Console.WriteLine(\"{0}\", yep(int.MaxValue ));\n\n\nprivate bool yep( int val )\n{\n    return ( 0 &lt; val * 2);\n}\n</code></pre>\n", "answer_id": 241451, "tags": [], "down_vote_count": 9, "last_activity_date": 1225142645, "comments": [{"body": "You can have your OverflowException by wrapping the test in checked{}, or setting the appropriate compiler option. It&#39;s not immediately obvious why the default is unchecked... <a href=\"http://msdn.microsoft.com/en-us/library/khy08726(VS.71).aspx\" rel=\"nofollow\">msdn.microsoft.com/en-us/library/khy08726(VS.71).aspx</a>", "edited": false, "comment_id": 122453, "creation_date": 1225925623, "score": 2, "owner": {"display_name": "stevemegson", "reputation": 7461, "user_id": 25028, "user_type": "registered", "accept_rate": 100}}, {"body": "The default is unchecked because the performance hit for doing this check on every integer operation in code is expensive.", "edited": false, "comment_id": 216871, "creation_date": 1230053928, "score": 7, "owner": {"display_name": "Peter Oehlert", "reputation": 8226, "user_id": 44656, "user_type": "registered", "accept_rate": 68}}, {"body": "Also, the default for VB is to have it all checked. C# compiler team made a different choice for their default trying to more closely what their target audience would expect.", "edited": false, "comment_id": 216873, "creation_date": 1230053989, "score": 0, "owner": {"display_name": "Peter Oehlert", "reputation": 8226, "user_id": 44656, "user_type": "registered", "accept_rate": 68}}, {"body": "int.MaxValue * 2 is a negative number in unchecked arithmetic, which is the default in C#, there for the comparison returns false. This is not unexpected behavior :P", "edited": false, "comment_id": 796815, "creation_date": 1244831899, "score": 9, "owner": {"display_name": "Lucas", "reputation": 11962, "user_id": 24231, "user_type": "registered"}}], "creation_date": 1225142645, "comment_count": 4, "score": -4, "owner": {"display_name": "Craig Eddy", "reputation": 640, "user_id": 5557, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 5}, {"body": "<p>This one had me truly puzzled (I apologise for the length but it's WinForm). I posted it in the <a href=\"http://bytes.com/forum/thread615727.html\" rel=\"nofollow\">newsgroups</a> a while back.</p>\n\n<blockquote>\n  <p>I've come across an interesting bug. I\n  have workarounds but i'd like to know\n  the root of the problem. I've stripped\n  it down into a short file and hope\n  someone might have an idea about\n  what's going on.</p>\n  \n  <p>It's a simple program that loads a\n  control onto a form and binds \"Foo\"\n  against a combobox (\"SelectedItem\")\n  for it's \"Bar\" property and a\n  datetimepicker (\"Value\") for it's\n  \"DateTime\" property. The\n  DateTimePicker.Visible value is set to\n  false. Once it's loaded up, select the\n  combobox and then attempt to deselect\n  it by selecting the checkbox. This is\n  rendered impossible by the combobox\n  retaining the focus, you cannot even\n  close the form, such is it's grasp on\n  the focus.</p>\n  \n  <p>I have found three ways of fixing this\n  problem.</p>\n  \n  <p>a) Remove the binding to Bar (a bit\n  obvious) </p>\n  \n  <p>b) Remove the binding to\n  DateTime </p>\n  \n  <p>c) Make the DateTimePicker\n  visible !?!</p>\n  \n  <p>I'm currently running Win2k. And .NET\n  2.00, I think 1.1 has the same problem. Code is below.</p>\n</blockquote>\n\n<pre><code>using System;\nusing System.Collections;\nusing System.Windows.Forms;\n\nnamespace WindowsApplication6\n{\n    public class Bar\n    {\n    \tpublic Bar()\n    \t{\n    \t}\n    }\n\n    public class Foo\n    {\n    \tprivate Bar m_Bar = new Bar();\n    \tprivate DateTime m_DateTime = DateTime.Now;\n\n    \tpublic Foo()\n    \t{\n    \t}\n\n    \tpublic Bar Bar\n    \t{\n    \t\tget\n    \t\t{\n    \t\t\treturn m_Bar;\n    \t\t}\n    \t\tset\n    \t\t{\n    \t\t\tm_Bar = value;\n    \t\t}\n    \t}\n\n    \tpublic DateTime DateTime\n    \t{\n    \t\tget\n    \t\t{\n    \t\t\treturn m_DateTime;\n    \t\t}\n    \t\tset\n    \t\t{\n    \t\t\tm_DateTime = value;\n    \t\t}\n    \t}\n    }\n\n    public class TestBugControl : UserControl\n    {\n    \tpublic TestBugControl()\n    \t{\n    \t\tInitializeComponent();\n    \t}\n\n    \tpublic void InitializeData(IList types)\n    \t{\n    \t\tthis.cBoxType.DataSource = types;\n    \t}\n\n    \tpublic void BindFoo(Foo foo)\n    \t{\n    \t\tthis.cBoxType.DataBindings.Add(\"SelectedItem\", foo, \"Bar\");\n    \t\tthis.dtStart.DataBindings.Add(\"Value\", foo, \"DateTime\");\n    \t}\n\n    \t/// &lt;summary&gt;\n    \t/// Required designer variable.\n    \t/// &lt;/summary&gt;\n    \tprivate System.ComponentModel.IContainer components = null;\n\n    \t/// &lt;summary&gt;\n    \t/// Clean up any resources being used.\n    \t/// &lt;/summary&gt;\n    \t/// &lt;param name=\"disposing\"&gt;true if managed resources should be disposed; otherwise, false.&lt;/param&gt;\n    \tprotected override void Dispose(bool disposing)\n    \t{\n    \t\tif (disposing &amp;&amp; (components != null))\n    \t\t{\n    \t\t\tcomponents.Dispose();\n    \t\t}\n    \t\tbase.Dispose(disposing);\n    \t}\n\n    \t#region Component Designer generated code\n\n    \t/// &lt;summary&gt;\n    \t/// Required method for Designer support - do not modify\n    \t/// the contents of this method with the code editor.\n    \t/// &lt;/summary&gt;\n    \tprivate void InitializeComponent()\n    \t{\n    \t\tthis.checkBox1 = new System.Windows.Forms.CheckBox();\n    \t\tthis.cBoxType = new System.Windows.Forms.ComboBox();\n    \t\tthis.dtStart = new System.Windows.Forms.DateTimePicker();\n    \t\tthis.SuspendLayout();\n    \t\t//\n    \t\t// checkBox1\n    \t\t//\n    \t\tthis.checkBox1.AutoSize = true;\n    \t\tthis.checkBox1.Location = new System.Drawing.Point(14, 5);\n    \t\tthis.checkBox1.Name = \"checkBox1\";\n    \t\tthis.checkBox1.Size = new System.Drawing.Size(97, 20);\n    \t\tthis.checkBox1.TabIndex = 0;\n    \t\tthis.checkBox1.Text = \"checkBox1\";\n    \t\tthis.checkBox1.UseVisualStyleBackColor = true;\n    \t\t//\n    \t\t// cBoxType\n    \t\t//\n    \t\tthis.cBoxType.FormattingEnabled = true;\n    \t\tthis.cBoxType.Location = new System.Drawing.Point(117, 3);\n    \t\tthis.cBoxType.Name = \"cBoxType\";\n    \t\tthis.cBoxType.Size = new System.Drawing.Size(165, 24);\n    \t\tthis.cBoxType.TabIndex = 1;\n    \t\t//\n    \t\t// dtStart\n    \t\t//\n    \t\tthis.dtStart.Location = new System.Drawing.Point(117, 40);\n    \t\tthis.dtStart.Name = \"dtStart\";\n    \t\tthis.dtStart.Size = new System.Drawing.Size(165, 23);\n    \t\tthis.dtStart.TabIndex = 2;\n    \t\tthis.dtStart.Visible = false;\n    \t\t//\n    \t\t// TestBugControl\n    \t\t//\n    \t\tthis.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);\n    \t\tthis.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n    \t\tthis.Controls.Add(this.dtStart);\n    \t\tthis.Controls.Add(this.cBoxType);\n    \t\tthis.Controls.Add(this.checkBox1);\n    \t\tthis.Font = new System.Drawing.Font(\"Verdana\", 9.75F,\n    \t\tSystem.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point,\n    \t\t((byte)(0)));\n    \t\tthis.Margin = new System.Windows.Forms.Padding(4);\n    \t\tthis.Name = \"TestBugControl\";\n    \t\tthis.Size = new System.Drawing.Size(285, 66);\n    \t\tthis.ResumeLayout(false);\n    \t\tthis.PerformLayout();\n\n    \t}\n\n    \t#endregion\n\n    \tprivate System.Windows.Forms.CheckBox checkBox1;\n    \tprivate System.Windows.Forms.ComboBox cBoxType;\n    \tprivate System.Windows.Forms.DateTimePicker dtStart;\n    }\n\n    public class Form1 : Form\n    {\n    \tpublic Form1()\n    \t{\n    \t\tInitializeComponent();\n    \t\tthis.Load += new EventHandler(Form1_Load);\n    \t}\n\n    \tvoid Form1_Load(object sender, EventArgs e)\n    \t{\n    \t\tInitializeControl();\n    \t}\n\n    \tpublic void InitializeControl()\n    \t{\n    \t\tTestBugControl control = new TestBugControl();\n    \t\tIList list = new ArrayList();\n    \t\tfor (int i = 0; i &lt; 10; i++)\n    \t\t{\n    \t\t\tlist.Add(new Bar());\n    \t\t}\n    \t\tcontrol.InitializeData(list);\n    \t\tcontrol.BindFoo(new Foo());\n    \t\tthis.Controls.Add(control);\n    \t}\n\n    \t/// &lt;summary&gt;\n    \t/// Required designer variable.\n    \t/// &lt;/summary&gt;\n    \tprivate System.ComponentModel.IContainer components = null;\n\n    \t/// &lt;summary&gt;\n    \t/// Clean up any resources being used.\n    \t/// &lt;/summary&gt;\n    \t/// &lt;param name=\"disposing\"&gt;true if managed resources should be disposed; otherwise, false.&lt;/param&gt;\n    \tprotected override void Dispose(bool disposing)\n    \t{\n    \t\tif (disposing &amp;&amp; (components != null))\n    \t\t{\n    \t\t\tcomponents.Dispose();\n    \t\t}\n    \t\tbase.Dispose(disposing);\n    \t}\n\n    \t#region Windows Form Designer generated code\n\n    \t/// &lt;summary&gt;\n    \t/// Required method for Designer support - do not modify\n    \t/// the contents of this method with the code editor.\n    \t/// &lt;/summary&gt;\n    \tprivate void InitializeComponent()\n    \t{\n    \t\tthis.components = new System.ComponentModel.Container();\n    \t\tthis.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n    \t\tthis.Text = \"Form1\";\n    \t}\n\n    \t#endregion\n    }\n\n    static class Program\n    {\n    \t/// &lt;summary&gt;\n    \t/// The main entry point for the application.\n    \t/// &lt;/summary&gt;\n    \t[STAThread]\n    \tstatic void Main()\n    \t{\n    \t\tApplication.EnableVisualStyles();\n    \t\tApplication.SetCompatibleTextRenderingDefault(false);\n    \t\tApplication.Run(new Form1());\n    \t}\n    }\n}\n</code></pre>\n", "answer_id": 241491, "tags": [], "down_vote_count": 6, "last_activity_date": 1225143731, "creation_date": 1225143731, "comment_count": 0, "score": -4, "owner": {"display_name": "Quibblesome", "reputation": 16007, "user_id": 1143, "user_type": "registered", "accept_rate": 91}, "is_accepted": false, "up_vote_count": 2}, {"body": "<p>C# supports conversions between arrays and lists as long as the arrays are not multidimensional and there is an inheritance relation between the types and the types are reference types</p>\n\n<pre><code>object[] oArray = new string[] { \"one\", \"two\", \"three\" };\nstring[] sArray = (string[])oArray;\n\n// Also works for IList (and IEnumerable, ICollection)\nIList&lt;string&gt; sList = (IList&lt;string&gt;)oArray;\nIList&lt;object&gt; oList = new string[] { \"one\", \"two\", \"three\" };\n</code></pre>\n\n<p>Note that this does not work:</p>\n\n<pre><code>object[] oArray2 = new int[] { 1, 2, 3 }; // Error: Cannot implicitly convert type 'int[]' to 'object[]'\nint[] iArray = (int[])oArray2;            // Error: Cannot convert type 'object[]' to 'int[]'\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 242503, "down_vote_count": 3, "last_activity_date": 1225225370, "comments": [{"body": "The IList&lt;T&gt; example is just a cast, because string[] already implements ICloneable, IList, ICollection, IEnumerable, IList&lt;string&gt;, ICollection&lt;string&gt;, and IEnumerable&lt;string&gt;.", "edited": false, "comment_id": 796866, "creation_date": 1244832410, "score": 11, "owner": {"display_name": "Lucas", "reputation": 11962, "user_id": 24231, "user_type": "registered"}}], "creation_date": 1225180091, "comment_count": 1, "score": 18, "owner": {"display_name": "Peter van der Heijden", "reputation": 6350, "user_id": 1793417, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "Peter van der Heijden", "reputation": 6350, "user_id": 1793417, "user_type": "registered", "accept_rate": 100}, "last_edit_date": 1225225370, "up_vote_count": 21}, {"body": "<p>I'm arriving a bit late to the party, but I've got <strike>three</strike> <strike>four</strike> five:</p>\n\n<ol>\n<li><p>If you poll InvokeRequired on a control that hasn't been loaded/shown, it will say false - and blow up in your face if you try to change it from another thread (<a href=\"http://stackoverflow.com/questions/246058/system-invalidoperationexception-the-object-is-currently-in-use-elsewhere-ho\">the solution</a> is to reference this.Handle in the creator of the control).</p></li>\n<li><p>Another one which tripped me up is that given an assembly with:</p>\n\n<pre><code>enum MyEnum\n{\n    Red,\n    Blue,\n}\n</code></pre>\n\n<p>if you calculate MyEnum.Red.ToString() in another assembly, and in between times someone has recompiled your enum to:</p>\n\n<pre><code>enum MyEnum\n{\n    Black,\n    Red,\n    Blue,\n}\n</code></pre>\n\n<p>at runtime, you will get \"Black\".</p></li>\n<li><p>I had a shared assembly with some handy constants in. My predecessor had left a load of ugly-looking get-only properties, I thought I'd get rid of the clutter and just use public const. I was more than a little surprised when VS compiled them to their values, and not references.</p></li>\n<li><p>If you implement a new method of an interface from another assembly, but you rebuild referencing the old version of that assembly, you get a TypeLoadException (no implementation of 'NewMethod'), even though you <em>have</em> implemented it (see <a href=\"http://stackoverflow.com/questions/948785/typeloadexception-says-no-implementation-but-it-is-implemented\">here</a>).</p></li>\n<li><p>Dictionary&lt;,>: \"The order in which the items are returned is undefined\". This is <em>horrible</em>, because it can bite you sometimes, but work others, and if you've just blindly assumed that Dictionary is going to play nice (\"why shouldn't it? I thought, List does\"), you really have to have your nose in it before you finally start to question your assumption.</p></li>\n</ol>\n", "is_accepted": false, "tags": [], "answer_id": 311831, "down_vote_count": 4, "last_activity_date": 1267424425, "comments": [{"body": "#2 is an interesting example. Enums are compiler mappings to integral values. So even though you didn&#39;t explicitly assign them values, the compiler did, resulting in MyEnum.Red = 0 and MyEnum.Blue = 1. When you added Black, you redefined the value 0 to map from Red to Black. I suspect that the problem would have manifested in other usages as well, such as Serialization.", "edited": false, "comment_id": 713006, "creation_date": 1243220526, "score": 6, "owner": {"display_name": "LBushkin", "reputation": 70691, "user_id": 91671, "user_type": "registered", "accept_rate": 85}}, {"body": "+1 for Invoke required. At ours&#39; we prefer to explicitly assign values to enums like Red=1,Blue=2 so new one can be inserted before or after it will always result in same value. It is specially necessary if you are saving values to databases.", "edited": false, "comment_id": 757610, "creation_date": 1244108452, "score": 3, "owner": {"display_name": "TheVillageIdiot", "reputation": 24889, "user_id": 13198, "user_type": "registered", "accept_rate": 73}}, {"body": "@aman.tur, you might be interested in this question: <a href=\"http://stackoverflow.com/questions/881726/using-hashcode-to-generate-value-for-enum\" title=\"using hashcode to generate value for enum\">stackoverflow.com/questions/881726/&hellip;</a>", "edited": false, "comment_id": 757970, "creation_date": 1244114792, "score": 0, "owner": {"display_name": "Benjol", "reputation": 19174, "user_id": 11410, "user_type": "registered", "accept_rate": 68}}, {"body": "I disagree that #5 is an &quot;edge case&quot;. Dictionary should not have a defined order based on when you insert values. If you want a defined order, use a List, or use a key that can be sorted in a way that&#39;s useful to you, or use an entirely different data structure.", "edited": false, "comment_id": 859278, "creation_date": 1246005003, "score": 53, "owner": {"display_name": "Wedge", "reputation": 13231, "user_id": 332, "user_type": "registered", "accept_rate": 100}}, {"body": "Well, I guess it&#39;s not a corner case, but it&#39;s definitely a gotcha (was for me anyway)", "edited": false, "comment_id": 859304, "creation_date": 1246005506, "score": 0, "owner": {"display_name": "Benjol", "reputation": 19174, "user_id": 11410, "user_type": "registered", "accept_rate": 68}}, {"body": "I spent many hours debugging an InvokeRequired-related bug - very annoying it was.", "edited": false, "comment_id": 1086005, "creation_date": 1249978076, "score": 0, "owner": {"display_name": "Tam\u00e1s Szelei", "reputation": 9662, "user_id": 140367, "user_type": "registered", "accept_rate": 80}}, {"body": "@Wedge, like SortedDictionary perhaps?", "edited": false, "comment_id": 1149277, "creation_date": 1250960058, "score": 21, "owner": {"display_name": "Allon Guralnek", "reputation": 9862, "user_id": 149265, "user_type": "registered", "accept_rate": 96}}, {"body": "The Dictionary is definitely by design, since it&#39;s sorted by hash-code... right?", "edited": false, "comment_id": 1218615, "creation_date": 1252072679, "score": 0, "owner": {"display_name": "John Gietzen", "reputation": 27053, "user_id": 57986, "user_type": "registered", "accept_rate": 88}}, {"body": "#3 happens because constants are inserted as literals everywhere they&#39;re used (in C#, at least). Your predecessor might have already noticed it, which is why they used the get-only property. However, a readonly variable (as opposed to a const) would work just as well.", "edited": false, "comment_id": 1349541, "creation_date": 1254302514, "score": 4, "owner": {"display_name": "Remoun", "reputation": 24, "user_id": 59595, "user_type": "registered", "accept_rate": 75}}, {"body": "#1 is a terrible corner case, which bit us hard. There is an excellent explanation about this here: <a href=\"http://209.85.129.132/search?q=cache:www.ikriv.com/en/prog/info/dotnet/MysteriousHang.html\" rel=\"nofollow\">209.85.129.132/search?q=cache:www.ikriv.com/en/prog/info/dotnet/&hellip;</a> (from Google Cache, because the site seems to be down). It&#39;s a very good article, written like a mystery case.", "edited": false, "comment_id": 2323806, "creation_date": 1267349198, "score": 0, "owner": {"display_name": "Omer Mor", "reputation": 3937, "user_id": 61061, "user_type": "registered", "accept_rate": 42}}, {"body": "#2 <a href=\"http://stackoverflow.com/questions/2875533/what-features-do-you-want-to-see-in-net-5-c-5/2876193#2876193\">Yet another problem with C# enums</a>...  #5 This is how hash-tables work.  If you need it to be ordered, use <a href=\"http://msdn.microsoft.com/en-us/library/f7fta44c.aspx\" rel=\"nofollow\">SortedDictionary</a>", "edited": false, "comment_id": 2967183, "creation_date": 1274896513, "score": 0, "owner": {"display_name": "BlueRaja - Danny Pflughoeft", "reputation": 39513, "user_id": 238419, "user_type": "registered", "accept_rate": 78}}], "creation_date": 1227391202, "comment_count": 11, "score": 47, "owner": {"display_name": "Benjol", "reputation": 19174, "user_id": 11410, "user_type": "registered", "accept_rate": 68}, "last_editor": {"display_name": "Benjol", "reputation": 19174, "user_id": 11410, "user_type": "registered", "accept_rate": 68}, "last_edit_date": 1267424425, "up_vote_count": 51}, {"body": "<p>Here is an example of how you can create a struct that causes the error message \"Attempted to read or write protected memory. This is often an indication that other memory is corrupt\".\nThe difference between success and failure is very subtle.</p>\n\n<p>The following unit test demonstrates the problem.</p>\n\n<p>See if you can work out what went wrong.</p>\n\n<pre><code>    [Test]\n    public void Test()\n    {\n        var bar = new MyClass\n        {\n            Foo = 500\n        };\n        bar.Foo += 500;\n\n        Assert.That(bar.Foo.Value.Amount, Is.EqualTo(1000));\n    }\n\n    private class MyClass\n    {\n        public MyStruct? Foo { get; set; }\n    }\n\n    private struct MyStruct\n    {\n        public decimal Amount { get; private set; }\n\n        public MyStruct(decimal amount) : this()\n        {\n            Amount = amount;\n        }\n\n        public static MyStruct operator +(MyStruct x, MyStruct y)\n        {\n            return new MyStruct(x.Amount + y.Amount);\n        }\n\n        public static MyStruct operator +(MyStruct x, decimal y)\n        {\n            return new MyStruct(x.Amount + y);\n        }\n\n        public static implicit operator MyStruct(int value)\n        {\n            return new MyStruct(value);\n        }\n\n        public static implicit operator MyStruct(decimal value)\n        {\n            return new MyStruct(value);\n        }\n    }\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 530988, "down_vote_count": 0, "last_activity_date": 1276983570, "comments": [{"body": "My head hurts... Why doesn&#39;t this work?", "edited": false, "comment_id": 939500, "creation_date": 1247528679, "score": 0, "owner": {"display_name": "jasonh", "reputation": 8795, "user_id": 116176, "user_type": "registered", "accept_rate": 90}}, {"body": "I second this question - can we get an explanation?", "edited": false, "comment_id": 1060911, "creation_date": 1249498713, "score": 0, "owner": {"display_name": "SqlRyan", "reputation": 17057, "user_id": 8114, "user_type": "registered", "accept_rate": 91}}, {"body": "Hm i wrote this a few months ago, but I can&#39;t remember why exactly it happened.", "edited": false, "comment_id": 1063263, "creation_date": 1249541424, "score": 2, "owner": {"display_name": "cbp", "reputation": 11098, "user_id": 21966, "user_type": "registered", "accept_rate": 61}}, {"body": "Looks like a compiler bug; the <code>+= 500</code> calls: <code>ldc.i4 500</code> (pushes 500 as an Int32), then <code>call valuetype Program&#47;MyStruct Program&#47;MyStruct::op_Addition(valuetype Program&#47;MyStruct, valuetype [mscorlib]System.Decimal)</code> - so it then treats as a <code>decimal</code> (96-bits) without any conversion. If you use <code>+= 500M</code> it gets it right. It simply looks like the compiler <i>thinks</i> it can do it one way (presumably due to the implicit int operator) and then decides to do it another way.", "edited": false, "comment_id": 1257503, "creation_date": 1252750622, "score": 10, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "The structure is a ValueType so the property is returning a copy.  Trying to update a copy of a value type that is going into the bit bucket makes no sense.  If you want to update that value, you probably want...  MyStruct Temp = bar.Foo;  Temp += 500; bar.Foo = Temp;", "edited": false, "comment_id": 1398208, "creation_date": 1255060561, "score": 0, "owner": {"display_name": "Bennett Dill", "reputation": 1835, "user_id": 67137, "user_type": "registered", "accept_rate": 71}}, {"body": "Sorry for the double post, here&#39;s a more qualified explanation.  I&#39;ll add this, I have been bit by this and this it sucks, even though I understand why it happens.  To me this is an unfortunate limitation of the struct/valuetype.  <a href=\"http://bytes.com/topic/net/answers/107771-c-struct-class-can-not-access-properties-struct#post382595\" rel=\"nofollow\">bytes.com/topic/net/answers/&hellip;</a>", "edited": false, "comment_id": 1398221, "creation_date": 1255060751, "score": 1, "owner": {"display_name": "Bennett Dill", "reputation": 1835, "user_id": 67137, "user_type": "registered", "accept_rate": 71}}, {"body": "@Ben getting compiler errors or the modification not affecting the original struct is fine. An access violation is quite a different beast. The runtime should never throw it if you&#39;re just writing safe pure managed code.", "edited": false, "reply_to_user": {"display_name": "Bennett Dill", "reputation": 1835, "user_id": 67137, "user_type": "registered", "accept_rate": 71}, "comment_id": 4578314, "creation_date": 1290203953, "score": 2, "owner": {"display_name": "CodesInChaos", "reputation": 67151, "user_id": 445517, "user_type": "registered", "accept_rate": 50}}, {"body": "Works on my machine...", "edited": false, "comment_id": 5732259, "creation_date": 1298594740, "score": 0, "owner": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}}, {"body": "@configurator: Fixed in C# 4.0", "edited": false, "reply_to_user": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}, "comment_id": 6566307, "creation_date": 1303356853, "score": 0, "owner": {"display_name": "Danny Chen", "reputation": 16929, "user_id": 323924, "user_type": "registered", "accept_rate": 79}}], "creation_date": 1234237200, "comment_count": 9, "score": 20, "owner": {"display_name": "cbp", "reputation": 11098, "user_id": 21966, "user_type": "registered", "accept_rate": 61}, "last_editor": {"display_name": "abatishchev", "reputation": 49823, "user_id": 41956, "user_type": "registered", "accept_rate": 92}, "last_edit_date": 1276983570, "up_vote_count": 20}, {"body": "<p>Few years ago, when working on loyality program, we had an issue with the amount of points given to customers. The issue was related to casting/converting double to int.</p>\n\n<p>In code below:</p>\n\n<pre><code>double d = 13.6;\n\nint i1 = Convert.ToInt32(d);\nint i2 = (int)d;\n</code></pre>\n\n<p><strong>does i1 == i2</strong> ?</p>\n\n<p>It turns out that i1 != i2.\nBecause of different rounding policies in Convert and cast operator the actual values are:</p>\n\n<pre><code>i1 == 14\ni2 == 13\n</code></pre>\n\n<p>It's always better to call Math.Ceiling() or Math.Floor() (or Math.Round with MidpointRounding that meets our requirements)</p>\n\n<pre><code>int i1 = Convert.ToInt32( Math.Ceiling(d) );\nint i2 = (int) Math.Ceiling(d);\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 840352, "down_vote_count": 3, "last_activity_date": 1257233278, "comments": [{"body": "Casting to an integer doesn&#39;t round, it just chops it off (effectively always rounding down). So this makes complete sense.", "edited": false, "comment_id": 672160, "creation_date": 1242322454, "score": 44, "owner": {"display_name": "Max Schmeling", "reputation": 7000, "user_id": 3226, "user_type": "registered", "accept_rate": 72}}, {"body": "@Max: yes, but why does Convert round?", "edited": false, "comment_id": 689020, "creation_date": 1242731251, "score": 57, "owner": {"display_name": "Stefan Steinegger", "reputation": 41258, "user_id": 2658202, "user_type": "registered", "accept_rate": 92}}, {"body": "@Stefan Steinegger If all it did was cast, there would be no reason for it in the first place, would it? Also note that the class name is Convert not Cast.", "edited": false, "comment_id": 1052811, "creation_date": 1249392915, "score": 18, "owner": {"display_name": "bug-a-lot", "reputation": 1858, "user_id": 109945, "user_type": "registered", "accept_rate": 100}}, {"body": "In VB: CInt() rounds. Fix() truncates. Burned me once (<a href=\"http://blog.wassupy.com/2006/01/i-can-believe-it-not-truncating.html\" rel=\"nofollow\">blog.wassupy.com/2006/01/i-can-believe-it-not-truncating.html</a>)", "edited": false, "comment_id": 1178904, "creation_date": 1251406590, "score": 3, "owner": {"display_name": "Michael Haren", "reputation": 50635, "user_id": 29, "user_type": "registered", "accept_rate": 86}}], "creation_date": 1241796036, "comment_count": 4, "score": 100, "owner": {"display_name": "Jarek Kardas", "reputation": 7513, "user_id": 1515181, "user_type": "registered"}, "last_editor": {"display_name": "sth", "reputation": 108030, "user_id": 56338, "user_type": "registered", "accept_rate": 44}, "last_edit_date": 1257233278, "up_vote_count": 103}, {"body": "<p>They should have made 0 an integer even when there's an enum function overload.</p>\n\n<p>I knew C# core team rationale for mapping 0 to enum, but still, it is not as orthogonal as it should be.  Example from <a href=\"http://plus.kaist.ac.kr/~shoh/postgresql/Npgsql/apidocs/Npgsql.NpgsqlParameterCollection.Add%5Foverload%5F3.html\" rel=\"nofollow\">Npgsql</a>.</p>\n\n<p>Test example:</p>\n\n<pre><code>namespace Craft\n{\n    enum Symbol { Alpha = 1, Beta = 2, Gamma = 3, Delta = 4 };\n\n\n   class Mate\n    {\n        static void Main(string[] args)\n        {\n\n            JustTest(Symbol.Alpha); // enum\n            JustTest(0); // why enum\n            JustTest((int)0); // why still enum\n\n            int i = 0;\n\n            JustTest(Convert.ToInt32(0)); // have to use Convert.ToInt32 to convince the compiler to make the call site use the object version\n\n            JustTest(i); // it's ok from down here and below\n            JustTest(1);\n            JustTest(\"string\");\n            JustTest(Guid.NewGuid());\n            JustTest(new DataTable());\n\n            Console.ReadLine();\n        }\n\n        static void JustTest(Symbol a)\n        {\n            Console.WriteLine(\"Enum\");\n        }\n\n        static void JustTest(object o)\n        {\n            Console.WriteLine(\"Object\");\n        }\n    }\n}\n</code></pre>\n", "answer_id": 847353, "tags": [], "down_vote_count": 0, "last_activity_date": 1242033963, "comments": [{"body": "Wow that&#39;s a new one for me. Also wierd how ConverTo.ToIn32() works but casting to (int)0 doesn&#39;t. And any other number &gt; 0 works. (By &quot;works&quot; I mean call the object overload.)", "edited": false, "comment_id": 796907, "creation_date": 1244832764, "score": 18, "owner": {"display_name": "Lucas", "reputation": 11962, "user_id": 24231, "user_type": "registered"}}, {"body": "There is a recommend code analysis rule to enforce good practices around this behavior:  <a href=\"http://msdn.microsoft.com/en-us/library/ms182149%28VS.80%29.aspx\" rel=\"nofollow\">msdn.microsoft.com/en-us/library/ms182149%28VS.80%29.aspx</a>   That link also contains a nice description of how the 0-mapping works.", "edited": false, "comment_id": 1823118, "creation_date": 1260994492, "score": 0, "owner": {"display_name": "Chris Clark", "reputation": 1538, "user_id": 221390, "user_type": "registered", "accept_rate": 100}}, {"body": "@Chris Clark: i tried putting None = 0 on enum Symbol.  still the compiler chooses enum for 0 and even (int)0", "edited": false, "comment_id": 1824978, "creation_date": 1261011074, "score": 1, "owner": {"display_name": "Michael Buen", "reputation": 23353, "user_id": 11432, "user_type": "registered", "accept_rate": 95}}, {"body": "I don&#39;t think Chris realized the true point of your post.  Has nothing to do with enums as flags.", "edited": false, "comment_id": 2445664, "creation_date": 1268766340, "score": 0, "owner": {"display_name": "Jimbo", "reputation": 167, "user_id": 35589, "user_type": "registered"}}, {"body": "This is defined in the spec, and I guess the reason is 0 being the default value for all enums. I&#39;m no complier programmer, but I guess the other option is to initialize all enums to the first value in their list of values. Which would be actually a lot more nonsense.", "edited": false, "comment_id": 3348094, "creation_date": 1279056151, "score": 0, "owner": {"display_name": "Gorkem Pacaci", "reputation": 1103, "user_id": 51749, "user_type": "registered"}}, {"body": "IMO they should have introduced a keyword <code>none</code> which can be used converted to any enum, and made 0 always an int and not implicitly convertible to an enum.", "edited": false, "comment_id": 4577922, "creation_date": 1290201888, "score": 2, "owner": {"display_name": "CodesInChaos", "reputation": 67151, "user_id": 445517, "user_type": "registered", "accept_rate": 50}}, {"body": "ConverTo.ToIn32() works because it&#39;s result is no compiletime constant. And only the compiletime constant 0 is convertible to an enum. In earlier versions of .net even only the literal <code>0</code> should have been convertible to enum. See Eric Lippert&#39;s blog: <a href=\"http://blogs.msdn.com/b/ericlippert/archive/2006/03/28/563282.aspx\" rel=\"nofollow\">blogs.msdn.com/b/ericlippert/archive/2006/03/28/563282.aspx</a>", "edited": false, "comment_id": 4577955, "creation_date": 1290202076, "score": 5, "owner": {"display_name": "CodesInChaos", "reputation": 67151, "user_id": 445517, "user_type": "registered", "accept_rate": 50}}, {"body": "It&#39;s not about premature optimization. I&#39;m after the language or its pattern&#39;s orthogonality and consistency. Indeed, only the constant 0 is convertible to an enum; but if 1 maps to an integer why not for 0? (I know the answer, it has something to do with C language tradition and welcoming programmers from that language camp).", "edited": false, "comment_id": 4583443, "creation_date": 1290271776, "score": 0, "owner": {"display_name": "Michael Buen", "reputation": 23353, "user_id": 11432, "user_type": "registered", "accept_rate": 95}}, {"body": "Wow.. i didn&#39;t knew about that... truly Shocking... Thanx...", "edited": false, "comment_id": 5115790, "creation_date": 1294662640, "score": 0, "owner": {"display_name": "Shekhar_Pro", "reputation": 11364, "user_id": 399722, "user_type": "registered", "accept_rate": 88}}, {"body": "If you want to call the <code>object</code> overload, why are you casting to <code>int</code>? <code>JustTest((object)0)</code> should call the right thing.", "edited": false, "comment_id": 5732151, "creation_date": 1298594110, "score": 0, "owner": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}}], "creation_date": 1242033963, "comment_count": 10, "score": 74, "owner": {"display_name": "Michael Buen", "reputation": 23353, "user_id": 11432, "user_type": "registered", "accept_rate": 95}, "is_accepted": false, "up_vote_count": 74}, {"body": "<p>The scoping in c# is truly bizarre at times. Lets me give you one example:</p>\n\n<pre><code>if (true)\n{\n   OleDbCommand command = SQLServer.CreateCommand();\n}\n\nOleDbCommand command = SQLServer.CreateCommand();\n</code></pre>\n\n<p>This fails to compile, because command is redeclared? There are some interested guesswork as to why it works that way in this <a href=\"http://stackoverflow.com/questions/404899/scope-of-variables-in-a-delegate\">thread on stackoverflow</a> and in <a href=\"http://people.iola.dk/arj/2009/01/02/scoping-rules-in-c/\" rel=\"nofollow\">my blog</a>.</p>\n", "answer_id": 1047948, "tags": [], "down_vote_count": 6, "last_activity_date": 1246004295, "comments": [{"body": "I don&#39;t view that as particularly bizarre. What you call &quot;perfectly correct code&quot; in your blog is perfectly <i>incorrect</i> according to the language specification. It may be correct in some imaginary language you&#39;d <i>like</i> C# to be, but the language spec is quite clear that in C# it&#39;s invalid.", "edited": false, "comment_id": 859360, "creation_date": 1246006132, "score": 34, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Well it is valid in C/C++. And since it is C# I would have liked it to still work. What bugs me the most is that there is no reason for the compiler to do this. It&#39;s not like it hard to do nested scoping. I guess it all comes down to the element of least suprise. Meaning that it can be that the spec says this and that, but that doesn&#39;t really help me very much if it&#39;s completely illogical that it behaves that way.", "edited": false, "comment_id": 859440, "creation_date": 1246007333, "score": 7, "owner": {"display_name": "Anders Rune Jensen", "reputation": 1990, "user_id": 13995, "user_type": "registered", "accept_rate": 78}}, {"body": "C# != C/C++. Would you also like to use cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; endl; instead of Console.WriteLine(&quot;Hello World!&quot;);? Also it not illogical, just read the spec.", "edited": false, "comment_id": 867135, "creation_date": 1246213923, "score": 6, "owner": {"display_name": "Lucas", "reputation": 14758, "user_id": 56555, "user_type": "registered", "accept_rate": 97}}, {"body": "I am speaking about scoping rules which is part of the core of the language. You are speaking about the standard library. But it&#39;s now clear to me that I should simply read the tiny specification of c# language before I start programming in it.", "edited": false, "comment_id": 870908, "creation_date": 1246291899, "score": 9, "owner": {"display_name": "Anders Rune Jensen", "reputation": 1990, "user_id": 13995, "user_type": "registered", "accept_rate": 78}}, {"body": "Eric Lippert actually posted the reasons why C# is designed like that recently: <a href=\"http://blogs.msdn.com/ericlippert/archive/2009/11/02/simple-names-are-not-so-simple.aspx\" rel=\"nofollow\">blogs.msdn.com/ericlippert/archive/2009/11/02/&hellip;</a>. The summary is because it&#39;s less likely that changes will have unintended consequences.", "edited": false, "comment_id": 1686249, "creation_date": 1259169386, "score": 6, "owner": {"display_name": "Helephant", "reputation": 4786, "user_id": 13028, "user_type": "registered", "accept_rate": 86}}, {"body": "Thanks. That sheds quite a lot of light on it. But really his examples are far fetched to me. Example 1 would simply give a warning in C++. I don&#39;t really see they problem. It&#39;s also sloppy programming practice to write such big function so I don&#39;t really see the point in bending over the language just to fit people who can&#39;t write proper code ;-)", "edited": false, "comment_id": 1687767, "creation_date": 1259182176, "score": 1, "owner": {"display_name": "Anders Rune Jensen", "reputation": 1990, "user_id": 13995, "user_type": "registered", "accept_rate": 78}}], "creation_date": 1246004295, "comment_count": 6, "score": 2, "owner": {"display_name": "Anders Rune Jensen", "reputation": 1990, "user_id": 13995, "user_type": "registered", "accept_rate": 78}, "is_accepted": false, "up_vote_count": 8}, {"body": "<p>Here's one I only found out about recently...</p>\n\n<pre><code>interface IFoo\n{\n   string Message {get;}\n}\n...\nIFoo obj = new IFoo(\"abc\");\nConsole.WriteLine(obj.Message);\n</code></pre>\n\n<p>The above looks crazy at first glance, but is <strong>actually legal</strong>.No, really (although I've missed out a key part, but it <strong>isn't</strong> anything hacky like \"add a class called <code>IFoo</code>\" or \"add a <code>using</code> alias to point <code>IFoo</code> at a class\"). </p>\n\n<p>See if you can figure out why, then: <a href=\"http://marcgravell.blogspot.com/2009/08/who-says-you-cant-instantiate-interface.html\" rel=\"nofollow\">Who says you can\u2019t instantiate an interface?</a></p>\n", "answer_id": 1281522, "tags": [], "down_vote_count": 1, "last_activity_date": 1250328500, "comments": [{"body": "+1 for &quot;using alias&quot; - I never knew you could do <i>that</i>!", "edited": false, "comment_id": 2181572, "creation_date": 1265690267, "score": 1, "owner": {"display_name": "David", "reputation": 237, "user_id": 210175, "user_type": "registered"}}, {"body": "hack in the compiler for COM Interop :-)", "edited": false, "comment_id": 7260803, "creation_date": 1307128139, "score": 0, "owner": {"display_name": "Ion Todirel", "reputation": 1996, "user_id": 90843, "user_type": "registered", "accept_rate": 75}}, {"body": "You bastard! You could have at least said &quot;under certain circumstances&quot;... My compiler disproves!", "edited": false, "comment_id": 9868222, "creation_date": 1320783496, "score": 0, "owner": {"display_name": "M.A. Hanin", "reputation": 5393, "user_id": 248534, "user_type": "registered", "accept_rate": 94}}], "creation_date": 1250328500, "comment_count": 3, "score": 66, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 67}, {"body": "<p>This is one of the most unusual i've seen so far (aside from the ones here of course!):</p>\n\n<pre><code>public class Turtle&lt;T&gt; where T : Turtle&lt;T&gt;\n{\n}\n</code></pre>\n\n<p>It lets you declare it but has no real use, since it will always ask you to wrap whatever class you stuff in the center with another Turtle.</p>\n\n<p>[joke] I guess it's turtles all the way down... [/joke]</p>\n", "is_accepted": false, "tags": [], "answer_id": 1332344, "down_vote_count": 2, "last_activity_date": 1251262078, "comments": [{"body": "You can create instances, though: class RealTurtle : Turtle&lt;RealTurtle&gt; { } RealTurtle t = new RealTurtle();", "edited": false, "comment_id": 1167179, "creation_date": 1251269749, "score": 34, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "Indeed. This is the pattern that Java enums use to great effect. I use it in Protocol Buffers too.", "edited": false, "comment_id": 1167237, "creation_date": 1251270586, "score": 24, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "But you can&#39;t do that, seeing as RealTurtle is not a Turtle&lt;RealTurtle&gt;....", "edited": false, "comment_id": 1167428, "creation_date": 1251273400, "score": 0, "owner": {"display_name": "RCIX", "reputation": 14170, "user_id": 117069, "user_type": "registered", "accept_rate": 92}}, {"body": "RCIX, oh yes it is.", "edited": false, "comment_id": 1200959, "creation_date": 1251822122, "score": 6, "owner": {"display_name": "Joshua", "reputation": 14708, "user_id": 14768, "user_type": "registered", "accept_rate": 87}}, {"body": "I stand corrected.", "edited": false, "comment_id": 1202719, "creation_date": 1251842390, "score": 2, "owner": {"display_name": "RCIX", "reputation": 14170, "user_id": 117069, "user_type": "registered", "accept_rate": 92}}, {"body": "I have used this pattern quite a lot in fancy generics stuff. It allows things like a correctly typed clone, or creating instances of itself.", "edited": false, "comment_id": 1249244, "creation_date": 1252611089, "score": 8, "owner": {"display_name": "Lucero", "reputation": 41253, "user_id": 88558, "user_type": "registered", "accept_rate": 100}}, {"body": "I dunno. It may not be illegal, but it sure is one of the strangest things i&#39;ve seen it let me do.", "edited": false, "comment_id": 1296340, "creation_date": 1253407655, "score": 0, "owner": {"display_name": "RCIX", "reputation": 14170, "user_id": 117069, "user_type": "registered", "accept_rate": 92}}, {"body": "This is the &#39;curiously recurring template pattern&#39; <a href=\"http://en.wikipedia.org/wiki/Curiously_recurring_template_pattern\" rel=\"nofollow\">en.wikipedia.org/wiki/Curiously_recurring_template_pattern</a>", "edited": false, "comment_id": 1557147, "creation_date": 1257449416, "score": 20, "owner": {"display_name": "Porges", "reputation": 19905, "user_id": 10311, "user_type": "registered"}}, {"body": "I second Lucero...use it if you want methods on the base class to return the exact type of the inheritor.", "edited": false, "comment_id": 1696046, "creation_date": 1259312551, "score": 2, "owner": {"display_name": "flq", "reputation": 13336, "user_id": 51428, "user_type": "registered", "accept_rate": 80}}, {"body": "This is perfectly valid, and can be very useful to allow the base class to reference the child class&#39;s type (for example, <a href=\"http://madbean.com/2004/mb2004-3/\" rel=\"nofollow\">Java Enums</a> use it to make sure <code>compareTo</code> can only be passed values of that enum).  -1...", "edited": false, "comment_id": 2967155, "creation_date": 1274896266, "score": 1, "owner": {"display_name": "BlueRaja - Danny Pflughoeft", "reputation": 39513, "user_id": 238419, "user_type": "registered", "accept_rate": 78}}, {"body": "This is not the &#39;curiously recurring template pattern&#39; as these are not templates but generics. Not being pedantic. The pattern&#39;s uses in C++ do not work with C# generics.", "edited": false, "comment_id": 4376555, "creation_date": 1288638659, "score": 2, "owner": {"display_name": "wekempf", "reputation": 2298, "user_id": 80193, "user_type": "registered"}}, {"body": "+1 for the feeble turtle joke.", "edited": false, "comment_id": 6252585, "creation_date": 1301617665, "score": 1, "owner": {"display_name": "Tom Chantler", "reputation": 10120, "user_id": 234415, "user_type": "registered"}}, {"body": "I actually used this pattern.", "edited": false, "comment_id": 7467985, "creation_date": 1308244686, "score": 0, "owner": {"display_name": "bevacqua", "reputation": 16479, "user_id": 389745, "user_type": "registered", "accept_rate": 95}}], "creation_date": 1251261368, "comment_count": 13, "score": 67, "owner": {"display_name": "RCIX", "reputation": 14170, "user_id": 117069, "user_type": "registered", "accept_rate": 92}, "last_editor": {"display_name": "RCIX", "reputation": 14170, "user_id": 117069, "user_type": "registered", "accept_rate": 92}, "last_edit_date": 1251262078, "up_vote_count": 69}, {"body": "<p>I found a second really strange corner case that beats my first one by a long shot.</p>\n\n<p>String.Equals Method (String, String, StringComparison) is not actually side effect free.</p>\n\n<p>I was working on a block of code that had this on a line by itself at the top of some function:</p>\n\n<pre><code>stringvariable1.Equals(stringvariable2, StringComparison.InvariantCultureIgnoreCase);\n</code></pre>\n\n<p>Removing that line lead to a stack overflow somewhere else in the program.</p>\n\n<p>The code turned out to be installing a handler for what was in essence a BeforeAssemblyLoad event and trying to do</p>\n\n<pre><code>if (assemblyfilename.EndsWith(\"someparticular.dll\", StringComparison.InvariantCultureIgnoreCase))\n{\n    assemblyfilename = \"someparticular_modified.dll\";\n}\n</code></pre>\n\n<p>By now I shouldn't have to tell you. Using a culture that hasn't been used before in a string comparison causes an assembly load. InvariantCulture is not an exception to this.</p>\n", "answer_id": 1481604, "tags": [], "down_vote_count": 0, "last_activity_date": 1253983088, "comments": [{"body": "I guess &quot;loading an assembly&quot; is a side effect, since you can observe it with BeforeAssemblyLoad!", "edited": false, "comment_id": 1421681, "creation_date": 1255464629, "score": 0, "owner": {"display_name": "Jacob Krall", "reputation": 13276, "user_id": 3140, "user_type": "registered", "accept_rate": 70}}, {"body": "Wow. This is a perfect shot into the maintainer&#39;s leg. I guess writing a BeforeAssemblyLoad handler can lead to lots of such surprises.", "edited": false, "comment_id": 5409315, "creation_date": 1296587125, "score": 2, "owner": {"display_name": "wigy", "reputation": 763, "user_id": 1584012, "user_type": "registered", "accept_rate": 75}}], "creation_date": 1253983088, "comment_count": 2, "score": 28, "owner": {"display_name": "Joshua", "reputation": 14708, "user_id": 14768, "user_type": "registered", "accept_rate": 87}, "is_accepted": false, "up_vote_count": 28}, {"body": "<p>VB.NET, nullables and the ternary operator:</p>\n\n<pre><code>Dim i As Integer? = If(True, Nothing, 5)\n</code></pre>\n\n<p>This took me some time to debug, since I expected <code>i</code> to contain <code>Nothing</code>.</p>\n\n<p>What does i really contain? <code>0</code>.</p>\n\n<p>This is surprising but actually \"correct\" behavior: <code>Nothing</code> in VB.NET is not exactly the same as <code>null</code> in CLR: <code>Nothing</code> can either mean <code>null</code> or <code>default(T)</code> for a value type <code>T</code>, depending on the context. In the above case, <code>If</code> infers <code>Integer</code> as the common type of <code>Nothing</code> and <code>5</code>, so, in this case, <code>Nothing</code> means <code>0</code>.</p>\n", "answer_id": 1672628, "tags": [], "down_vote_count": 0, "last_activity_date": 1257326946, "comments": [{"body": "Interesting enough, I failed to find this answer so I had to create <a href=\"http://stackoverflow.com/questions/4147277/ternary-operator-vb-vs-c-why-resolves-to-integer-and-not-integer\">a question</a>. Well, who knew the answer is in this thread?", "edited": false, "comment_id": 6099703, "creation_date": 1300808888, "score": 0, "owner": {"display_name": "GSerg", "reputation": 40636, "user_id": 11683, "user_type": "registered", "accept_rate": 78}}], "creation_date": 1257326946, "comment_count": 1, "score": 33, "owner": {"display_name": "Heinzi", "reputation": 80298, "user_id": 87698, "user_type": "registered", "accept_rate": 73}, "is_accepted": false, "up_vote_count": 33}, {"body": "<p>PropertyInfo.SetValue() can assign ints to enums, ints to nullable ints, enums to nullable enums, but not ints to nullable enums.</p>\n\n<pre><code>enumProperty.SetValue(obj, 1, null); //works\nnullableIntProperty.SetValue(obj, 1, null); //works\nnullableEnumProperty.SetValue(obj, MyEnum.Foo, null); //works\nnullableEnumProperty.SetValue(obj, 1, null); // throws an exception !!!\n</code></pre>\n\n<p>Full description <a href=\"http://andersivner.blogspot.com/2008/05/nullable-enums.html\" rel=\"nofollow\">here</a></p>\n", "answer_id": 1799153, "tags": [], "down_vote_count": 0, "last_activity_date": 1259175008, "creation_date": 1259175008, "comment_count": 0, "score": 11, "owner": {"display_name": "Anders Ivner", "reputation": 111, "user_id": 218858, "user_type": "unregistered"}, "is_accepted": false, "up_vote_count": 11}, {"body": "<h2>Assign This!</h2>\n\n<hr>\n\n<p>This is one that I like to ask at parties (which is probably why I don't get invited anymore):</p>\n\n<p>Can you make the following piece of code compile?</p>\n\n<pre><code>    public void Foo()\n    {\n        this = new Teaser();\n    }\n</code></pre>\n\n<p>An easy cheat could be:</p>\n\n<pre><code>string cheat = @\"\n    public void Foo()\n    {\n        this = new Teaser();\n    }\n\";\n</code></pre>\n\n<p>But the real solution is this:</p>\n\n<pre><code>public struct Teaser\n{\n    public void Foo()\n    {\n        this = new Teaser();\n    }\n}\n</code></pre>\n\n<p>So it's a little know fact that value types (structs) can reassign their <code>this</code> variable.</p>\n", "is_accepted": false, "tags": [], "answer_id": 1800162, "down_vote_count": 0, "last_activity_date": 1296758878, "comments": [{"body": "C++ classes can do that too... as I discovered somewhat recently, only to be yelled at for actually trying to use it for an optimization :p", "edited": false, "comment_id": 2328641, "creation_date": 1267429713, "score": 3, "owner": {"display_name": "Mark", "reputation": 66066, "user_id": 65387, "user_type": "registered", "accept_rate": 67}}, {"body": "I was using in-place new actually. Just wanted an efficient way to update all fields :)", "edited": false, "comment_id": 2421672, "creation_date": 1268438796, "score": 1, "owner": {"display_name": "Mark", "reputation": 66066, "user_id": 65387, "user_type": "registered", "accept_rate": 67}}, {"body": "This is also a cheat: <code>&#47;&#47;this = new Teaser();</code> :-)", "edited": false, "comment_id": 2459216, "creation_date": 1268910402, "score": 70, "owner": {"display_name": "AndrewJacksonZA", "reputation": 467, "user_id": 132756, "user_type": "registered", "accept_rate": 100}}, {"body": ":-) I&#39;d prefer those cheats in my production code, than this reassignment abomination...", "edited": false, "comment_id": 2507855, "creation_date": 1269467357, "score": 17, "owner": {"display_name": "Omer Mor", "reputation": 3937, "user_id": 61061, "user_type": "registered", "accept_rate": 42}}, {"body": "From CLR via C#: The reason they made this is because you can call the parameterless constructor of a struct in another constructor. If you only want to initialize one value of a struct and want the other values to be zero/null (default), you can write <code>public Foo(int bar){this = new Foo(); specialVar = bar;}</code>. This is not efficient and not really justified (<code>specialVar</code> is assigned twice), but just FYI. (That&#39;s the reason given in the book, I don&#39;t know why we shouldn&#39;t just do <code>public Foo(int bar) : this()</code>)", "edited": false, "comment_id": 5378974, "creation_date": 1296409245, "score": 2, "owner": {"display_name": "kizzx2", "reputation": 8021, "user_id": 111021, "user_type": "registered", "accept_rate": 79}}, {"body": "@Mark are you really sure you can reassign &quot;this&quot; itself? You are not talking about assigning to &quot;*this&quot; ?", "edited": false, "reply_to_user": {"display_name": "Mark", "reputation": 66066, "user_id": 65387, "user_type": "registered", "accept_rate": 67}, "comment_id": 8158645, "creation_date": 1311860727, "score": 0, "owner": {"display_name": "dascandy", "reputation": 3460, "user_id": 272708, "user_type": "registered", "accept_rate": 75}}, {"body": "@dascandy: Well you overwrite the chunk of memory that <code>this</code> occupies, IIRC. Interpret that how you will.", "edited": false, "reply_to_user": {"display_name": "dascandy", "reputation": 3460, "user_id": 272708, "user_type": "registered", "accept_rate": 75}, "comment_id": 8164482, "creation_date": 1311878105, "score": 0, "owner": {"display_name": "Mark", "reputation": 66066, "user_id": 65387, "user_type": "registered", "accept_rate": 67}}, {"body": "Teaser @this; @this = new Teaser(); // Would also work for a class.", "edited": false, "comment_id": 9940441, "creation_date": 1321124163, "score": 0, "owner": {"display_name": "Olivier Jacot-Descombes", "reputation": 38322, "user_id": 880990, "user_type": "registered"}}], "creation_date": 1259185334, "comment_count": 8, "score": 113, "owner": {"display_name": "Omer Mor", "reputation": 3937, "user_id": 61061, "user_type": "registered", "accept_rate": 42}, "last_editor": {"display_name": "Omer Mor", "reputation": 3937, "user_id": 61061, "user_type": "registered", "accept_rate": 42}, "last_edit_date": 1296758878, "up_vote_count": 113}, {"body": "<p>The following might be general knowledge I was just simply lacking, but eh. Some time ago, we had a bug case which included virtual properties. Abstracting the context a bit, consider the following code, and apply breakpoint to specified area :</p>\n\n<pre><code>class Program\n{\n    static void Main(string[] args)\n    {\n        Derived d = new Derived();\n        d.Property = \"AWESOME\";\n    }\n}\n\nclass Base\n{\n    string _baseProp;\n    public virtual string Property \n    { \n        get \n        {\n            return \"BASE_\" + _baseProp;\n        }\n        set\n        {\n            _baseProp = value;\n            //do work with the base property which might \n            //not be exposed to derived types\n            //here\n            Console.Out.WriteLine(\"_baseProp is BASE_\" + value.ToString());\n        }\n    }\n}\n\nclass Derived : Base\n{\n    string _prop;\n    public override string Property \n    {\n        get { return _prop; }\n        set \n        { \n            _prop = value; \n            base.Property = value;\n        } //&lt;- put a breakpoint here then mouse over BaseProperty, \n          //   and then mouse over the base.Property call inside it.\n    }\n\n    public string BaseProperty { get { return base.Property; } private set { } }\n}\n</code></pre>\n\n<p>While in the <code>Derived</code> object context, you can get the same behavior when adding <code>base.Property</code> as a watch, or typing <code>base.Property</code> into the quickwatch. </p>\n\n<p>Took me some time to realize what was going on. In the end I was enlightened by the Quickwatch. When going into the Quickwatch and exploring the <code>Derived</code> object d (or from the object's context, <code>this</code>) and selecting the field <code>base</code>, the edit field on top of the Quickwatch displays the following cast:</p>\n\n<pre><code>((TestProject1.Base)(d))\n</code></pre>\n\n<p>Which means that if base is replaced as such, the call would be</p>\n\n<pre><code>public string BaseProperty { get { return ((TestProject1.Base)(d)).Property; } private set { } }\n</code></pre>\n\n<p>for the Watches, Quickwatch and the debugging mouse-over tooltips, and it would then make sense for it to display <code>\"AWESOME\"</code> instead of <code>\"BASE_AWESOME\"</code> when considering polymorphism. I'm still unsure why it would transform it into a cast, one hypothesis is that <code>call</code> might not be available from those modules' context, and only <code>callvirt</code>.</p>\n\n<p>Anyhow, that obviously doesn't alter anything in terms of functionality, <code>Derived.BaseProperty</code> will still really return <code>\"BASE_AWESOME\"</code>, and thus this was not the root of our bug at work, simply a confusing component. I did however find it interesting how it could mislead developpers which would be unaware of that fact during their debug sessions, specially if <code>Base</code> is not exposed in your project but rather referenced as a 3rd party DLL, resulting in Devs just saying :</p>\n\n<blockquote>\n  <p>\"Oi, wait..what ? omg that DLL is\n  like, ..doing something funny\"</p>\n</blockquote>\n", "is_accepted": false, "tags": [], "answer_id": 2203280, "down_vote_count": 0, "last_activity_date": 1265318387, "comments": [{"body": "That&#39;s nothing special, that&#39;s just the way overrides work.", "edited": false, "comment_id": 5732339, "creation_date": 1298595276, "score": 0, "owner": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}}], "creation_date": 1265318067, "comment_count": 1, "score": 7, "owner": {"display_name": "Dynami Le Savard", "reputation": 3674, "user_id": 208917, "user_type": "registered"}, "last_editor": {"display_name": "Dynami Le Savard", "reputation": 3674, "user_id": 208917, "user_type": "registered"}, "last_edit_date": 1265318387, "up_vote_count": 7}, {"community_owned_date": 1266824471, "body": "<p>I'm not sure if you'd say this is a Windows Vista/7 oddity or a .Net oddity but it had me scratching my head for a while.</p>\n\n<pre><code>string filename = @\"c:\\program files\\my folder\\test.txt\";\nSystem.IO.File.WriteAllText(filename, \"Hello world.\");\nbool exists = System.IO.File.Exists(filename); // returns true;\nstring text = System.IO.File.ReadAllText(filename); // Returns \"Hello world.\"\n</code></pre>\n\n<p>In Windows Vista/7 the file will actually be written to <code>C:\\Users\\&lt;username&gt;\\Virtual Store\\Program Files\\my folder\\test.txt</code></p>\n", "is_accepted": false, "tags": [], "answer_id": 2309473, "down_vote_count": 1, "last_activity_date": 1268342379, "comments": [{"body": "Missing @ on the first line?", "edited": false, "comment_id": 2410925, "creation_date": 1268330713, "score": 0, "owner": {"display_name": "devoured elysium", "reputation": 23535, "user_id": 130758, "user_type": "registered", "accept_rate": 78}}, {"body": "Whoops. Thanks!", "edited": false, "comment_id": 2412456, "creation_date": 1268342397, "score": 0, "owner": {"display_name": "Spencer Ruport", "reputation": 26630, "user_id": 52551, "user_type": "registered", "accept_rate": 89}}, {"body": "This is indeed a vista (not 7, afaik) security enhancement. But the cool thing is that you can read and open the file with the program files path, while if you look there with explorer there is nothing. This one took me almost a day of work @ a customer before I finally found it out.", "edited": false, "comment_id": 2412790, "creation_date": 1268344972, "score": 2, "owner": {"display_name": "Henri", "reputation": 4326, "user_id": 126294, "user_type": "registered", "accept_rate": 80}}, {"body": "It&#39;s definitely a Windows 7 thing too. That&#39;s what I was using when I ran into it. I understand the reasoning behind it but it was still frustrating to figure out.", "edited": false, "comment_id": 2414671, "creation_date": 1268368501, "score": 0, "owner": {"display_name": "Spencer Ruport", "reputation": 26630, "user_id": 52551, "user_type": "registered", "accept_rate": 89}}, {"body": "In Vista/Win 7 (winXP technically too) apps should write to an AppData folder in Users-folder land, as its technically user data.  Applications shouldn&#39;t write to programfiles/windows/system32/etc ever, unless they have admin priveledges, and those priveledges should only be there to say upgrade the program/uninstall it/install new feature.  BUT! Still don&#39;t write to system32/windows/etc :)  If you ran that code above as admin (right click &gt; run as admin) it should theoretically write to the program files app folder.", "edited": false, "comment_id": 2559718, "creation_date": 1270073705, "score": 0, "owner": {"display_name": "Steve Syfuhs", "reputation": 112, "user_id": 51701, "user_type": "registered", "accept_rate": 33}}, {"body": "Sounds like Virtualization - <a href=\"http://crispybit.spaces.live.com/blog/cns!1B71C2122AD43308!134.entry\" rel=\"nofollow\">crispybit.spaces.live.com/blog/cns!1B71C2122AD43308!134.entry</a>", "edited": false, "comment_id": 3005564, "creation_date": 1275389518, "score": 0, "owner": {"display_name": "Colin Newell", "reputation": 2062, "user_id": 216142, "user_type": "registered", "accept_rate": 83}}], "creation_date": 1266824471, "comment_count": 6, "score": 6, "owner": {"display_name": "Spencer Ruport", "reputation": 26630, "user_id": 52551, "user_type": "registered", "accept_rate": 89}, "last_editor": {"display_name": "Spencer Ruport", "reputation": 26630, "user_id": 52551, "user_type": "registered", "accept_rate": 89}, "last_edit_date": 1268342379, "up_vote_count": 7}, {"community_owned_date": 1267427504, "body": "<p>This is the strangest I've encountered by accident:</p>\n\n<pre><code>public class DummyObject\n{\n    public override string ToString()\n    {\n        return null;\n    }\n}\n</code></pre>\n\n<p>Used as follows:</p>\n\n<pre><code>DummyObject obj = new DummyObject();\nConsole.WriteLine(\"The text: \" + obj.GetType() + \" is \" + obj);\n</code></pre>\n\n<p>Will throw a <code>NullReferenceException</code>. Turns out the multiple additions are compiled by the C# compiler to a call to <code>String.Concat(object[])</code>. Prior to .NET 4, there is a bug in just that overload of Concat where the object is checked for null, but not the result of ToString():</p>\n\n<pre><code>object obj2 = args[i];\nstring text = (obj2 != null) ? obj2.ToString() : string.Empty;\n// if obj2 is non-null, but obj2.ToString() returns null, then text==null\nint length = text.Length;\n</code></pre>\n\n<p>This is a bug by ECMA-334 \u00a714.7.4:</p>\n\n<blockquote>\n  <p>The binary + operator performs string concatenation when one or both operands are of type <code>string</code>. If an operand of string concatenation is <code>null</code>, an empty string is substituted. Otherwise, any non-string operand is converted to its string representation by invoking the virtual <code>ToString</code> method inherited from type <code>object</code>. <strong>If <code>ToString</code> returns <code>null</code>, an empty string is substituted.</strong></p>\n</blockquote>\n", "answer_id": 2354325, "tags": [], "down_vote_count": 0, "last_activity_date": 1267427504, "comments": [{"body": "Hmm, but I can imagine this fault as <code>.ToString</code> really should never return null, but string.Empty. Nevertheless and error in the framework.", "edited": false, "comment_id": 2328624, "creation_date": 1267429458, "score": 3, "owner": {"display_name": "Dykam", "reputation": 6241, "user_id": 84535, "user_type": "registered"}}], "creation_date": 1267427504, "comment_count": 1, "score": 15, "owner": {"display_name": "Sam Harwell", "reputation": 60675, "user_id": 138304, "user_type": "registered", "accept_rate": 67}, "is_accepted": false, "up_vote_count": 15}, {"community_owned_date": 1267641784, "body": "<p>There is something really exciting about C#, the way it handles closures.</p>\n\n<p>Instead of copying the stack variable values to the closure free variable, it does that preprocessor magic wrapping all occurences of the variable into an object and thus moves it out of stack - straight to the heap! :)</p>\n\n<p>I guess, that makes C# even more functionally-complete (or lambda-complete huh)) language than ML itself (which uses stack value copying AFAIK). F# has that feature too, as C# does. </p>\n\n<p>That does bring much delight to me, thank you MS guys!</p>\n\n<p>It's not an oddity or corner case though... but something really unexpected from a stack-based VM language :)</p>\n", "answer_id": 2374000, "tags": [], "down_vote_count": 1, "last_activity_date": 1267641784, "creation_date": 1267641784, "comment_count": 0, "score": 3, "owner": {"display_name": "Bubba88", "reputation": 593, "user_id": 185430, "user_type": "registered", "accept_rate": 73}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1269137430, "body": "<p>From a question I asked not long ago:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/2215745/conditional-operator-cannot-cast-implicitly\">http://stackoverflow.com/questions/2215745/conditional-operator-cannot-cast-implicitly</a></p>\n\n<p>Given:</p>\n\n<pre><code>Bool aBoolValue;\n</code></pre>\n\n<p>Where <code>aBoolValue</code> is assigned either True or False;</p>\n\n<p>The following will not compile:</p>\n\n<pre><code>Byte aByteValue = aBoolValue ? 1 : 0;\n</code></pre>\n\n<p>But this would:</p>\n\n<pre><code>Int anIntValue = aBoolValue ? 1 : 0;\n</code></pre>\n\n<p>The answer provided is pretty good too.</p>\n", "answer_id": 2485589, "tags": [], "down_vote_count": 0, "last_activity_date": 1269137430, "comments": [{"body": "although I<code>ve not test it I</code>m sure that this will work:     Byte aByteValue = aBoolValue ? (Byte)1 :(Byte) 0; Or:     Byte aByteValue =(Byte)( aBoolValue ? 1 : 0);", "edited": false, "comment_id": 2840262, "creation_date": 1273496366, "score": 0, "owner": {"display_name": "Alex Pacurar", "reputation": 3364, "user_id": 96537, "user_type": "registered", "accept_rate": 100}}, {"body": "Yes, Alex, that would work. The key is in the implicit casting. <code>1 : 0</code> alone will implicitly cast to int, not Byte.", "edited": false, "comment_id": 2872967, "creation_date": 1273806453, "score": 2, "owner": {"display_name": "MPelletier", "reputation": 9429, "user_id": 210916, "user_type": "registered", "accept_rate": 99}}], "creation_date": 1269137430, "comment_count": 2, "score": 3, "owner": {"display_name": "MPelletier", "reputation": 9429, "user_id": 210916, "user_type": "registered", "accept_rate": 99}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1270751099, "body": "<p>Have you ever thought the C# compiler could generate invalid CIL? Run this and you'll get a <code>TypeLoadException</code>:</p>\n\n<pre><code>interface I&lt;T&gt; {\n  T M(T p);\n}\nabstract class A&lt;T&gt; : I&lt;T&gt; {\n  public abstract T M(T p);\n}\nabstract class B&lt;T&gt; : A&lt;T&gt;, I&lt;int&gt; {\n  public override T M(T p) { return p; }\n  public int M(int p) { return p * 2; }\n}\nclass C : B&lt;int&gt; { }\n\nclass Program {\n  static void Main(string[] args) {\n    Console.WriteLine(new C().M(42));\n  }\n}\n</code></pre>\n\n<p>I don't know how it fares in the C# 4.0 compiler though.</p>\n\n<p><b>EDIT</b>: this is the output from my system:</p>\n\n<pre><code>C:\\Temp&gt;type Program.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace ConsoleApplication1 {\n\n  interface I&lt;T&gt; {\n    T M(T p);\n  }\n  abstract class A&lt;T&gt; : I&lt;T&gt; {\n    public abstract T M(T p);\n  }\n  abstract class B&lt;T&gt; : A&lt;T&gt;, I&lt;int&gt; {\n    public override T M(T p) { return p; }\n    public int M(int p) { return p * 2; }\n  }\n  class C : B&lt;int&gt; { }\n\n  class Program {\n    static void Main(string[] args) {\n      Console.WriteLine(new C().M(11));\n    }\n  }\n\n}\nC:\\Temp&gt;csc Program.cs\nMicrosoft (R) Visual C# 2008 Compiler version 3.5.30729.1\nfor Microsoft (R) .NET Framework version 3.5\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n\nC:\\Temp&gt;Program\n\nUnhandled Exception: System.TypeLoadException: Could not load type 'ConsoleAppli\ncation1.C' from assembly 'Program, Version=0.0.0.0, Culture=neutral, PublicKeyTo\nken=null'.\n   at ConsoleApplication1.Program.Main(String[] args)\n\nC:\\Temp&gt;peverify Program.exe\n\nMicrosoft (R) .NET Framework PE Verifier.  Version  3.5.30729.1\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\n[token  0x02000005] Type load failed.\n[IL]: Error: [C:\\Temp\\Program.exe : ConsoleApplication1.Program::Main][offset 0x\n00000001] Unable to resolve token.\n2 Error(s) Verifying Program.exe\n\nC:\\Temp&gt;ver\n\nMicrosoft Windows XP [Version 5.1.2600]\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 2602423, "down_vote_count": 1, "last_activity_date": 1270990414, "comments": [{"body": "Works for me with both the C# 3.5 compiler and the C# 4 compiler...", "edited": false, "comment_id": 2612128, "creation_date": 1270753894, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "In my system, it doesn&#39;t work. I&#39;ll paste the output in the question.", "edited": false, "comment_id": 2619510, "creation_date": 1270830464, "score": 0, "owner": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}}, {"body": "It failed for me in .NET 3.5 (don&#39;t have time to test 4.0). And I can replicate the problem with VB.NET code.", "edited": false, "comment_id": 3826906, "creation_date": 1283578545, "score": 0, "owner": {"display_name": "Mark Hurd", "reputation": 5791, "user_id": 256431, "user_type": "registered", "accept_rate": 79}}, {"body": "Works for me in C# 4", "edited": false, "comment_id": 3826993, "creation_date": 1283580170, "score": 1, "owner": {"display_name": "Omer Mor", "reputation": 3937, "user_id": 61061, "user_type": "registered", "accept_rate": 42}}], "creation_date": 1270751099, "comment_count": 4, "score": 6, "owner": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}, "last_editor": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}, "last_edit_date": 1270990414, "up_vote_count": 7}, {"community_owned_date": 1274895254, "body": "<p>What if you have a generic class that has methods that could be made ambiguous depending on the type arguments? I ran into this situation recently writing a two-way dictionary. I wanted to write symmetric <code>Get()</code> methods that would return the opposite of whatever argument was passed. Something like this:</p>\n\n<pre><code>class TwoWayRelationship&lt;T1, T2&gt;\n{\n    public T2 Get(T1 key) { /* ... */ }\n    public T1 Get(T2 key) { /* ... */ }\n}\n</code></pre>\n\n<p>All is well good if you make an instance where <code>T1</code> and <code>T2</code> are different types:</p>\n\n<pre><code>var r1 = new TwoWayRelationship&lt;int, string&gt;();\nr1.Get(1);\nr1.Get(\"a\");\n</code></pre>\n\n<p>But if <code>T1</code> and <code>T2</code> are the same (and probably if one was a subclass of another), it's a compiler error:</p>\n\n<pre><code>var r2 = new TwoWayRelationship&lt;int, int&gt;();\nr2.Get(1);  // \"The call is ambiguous...\"\n</code></pre>\n\n<p>Interestingly, all other methods in the second case are still usable; it's only calls to the now-ambiguous method that causes a compiler error. Interesting case, if a little unlikely and obscure.</p>\n", "answer_id": 2915346, "tags": [], "down_vote_count": 0, "last_activity_date": 1274895254, "comments": [{"body": "Opponents of method overloading will love this one ^^.", "edited": false, "comment_id": 3865684, "creation_date": 1283982181, "score": 0, "owner": {"display_name": "Christian Klauser", "reputation": 2738, "user_id": 55208, "user_type": "registered", "accept_rate": 86}}, {"body": "I don&#39;t know, this makes total sense to me.", "edited": false, "comment_id": 6049027, "creation_date": 1300467725, "score": 1, "owner": {"display_name": "Scott Whitlock", "reputation": 8837, "user_id": 17635, "user_type": "registered", "accept_rate": 86}}], "creation_date": 1274895254, "comment_count": 2, "score": 10, "owner": {"display_name": "tclem", "reputation": 238, "user_id": 19688, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 10}, {"community_owned_date": 1276981782, "body": "<p>In an API we're using, methods that return a domain object might return a special \"null object\". In the implementation of this, the comparison operator and the <code>Equals()</code> method are overridden to return <code>true</code> if it is compared with <code>null</code>.</p>\n\n<p>So a user of this API might have some code like this:</p>\n\n<pre><code>return test != null ? test : GetDefault();\n</code></pre>\n\n<p>or perhaps a bit more verbose, like this:</p>\n\n<pre><code>if (test == null)\n    return GetDefault();\nreturn test;\n</code></pre>\n\n<p>where <code>GetDefault()</code> is a method returning some default value that we want to use instead of <code>null</code>. The surprise hit me when I was using ReSharper and following it's recommendation to rewrite either of this to the following:</p>\n\n<pre><code>return test ?? GetDefault();\n</code></pre>\n\n<p>If the test object is a null object returned from the API instead of a proper <code>null</code>, the behavior of the code has now changed, as the null coalescing operator actually checks for <code>null</code>, not running <code>operator=</code> or <code>Equals()</code>.</p>\n", "answer_id": 3077238, "tags": [], "down_vote_count": 0, "last_activity_date": 1276981782, "comments": [{"body": "not really a c# corner case, but dear lord who thought that up?!?", "edited": false, "comment_id": 3169035, "creation_date": 1277193822, "score": 1, "owner": {"display_name": "Ray Booysen", "reputation": 12254, "user_id": 42124, "user_type": "registered", "accept_rate": 97}}, {"body": "Isn&#39;t this code just using nullable types? Hence ReSharper recommending the &quot;??&quot; use. As Ray said, I wouldn&#39;t have thought this a corner case; or am I wrong?", "edited": false, "comment_id": 3171976, "creation_date": 1277216099, "score": 0, "owner": {"display_name": "Tony", "reputation": 6342, "user_id": 243925, "user_type": "registered", "accept_rate": 91}}, {"body": "Yes, the types are nullable - and there is a NullObject in addition. If it is a corner case, I don&#39;t know, but at least it is a case where &#39;if (a != null) return a; return b;&#39; is not the same as &#39;return a ?? b&#39;.   I absolutely agree it is a problem with the framework/API design - overloading == null to return true on an object is certainly not at good idea!", "edited": false, "comment_id": 3172349, "creation_date": 1277218072, "score": 1, "owner": {"display_name": "Tor Livar", "reputation": 163, "user_id": 367665, "user_type": "registered"}}], "creation_date": 1276981782, "comment_count": 3, "score": 8, "owner": {"display_name": "Tor Livar", "reputation": 163, "user_id": 367665, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 8}, {"community_owned_date": 1281454648, "body": "<p>The following doesn't work:</p>\n\n<pre><code>if (something)\n    doit();\nelse\n    var v = 1 + 2;\n</code></pre>\n\n<p>But this works:</p>\n\n<pre><code>if (something)\n    doit();\nelse {\n    var v = 1 + 2;\n}\n</code></pre>\n", "answer_id": 3450711, "tags": [], "down_vote_count": 2, "last_activity_date": 1281454648, "comments": [{"body": "I don&#39;t see how it is a corner case... In the first example, there is no way you can use the <code>v</code> variable, since its scope is the <code>else</code> block and you can only have one instruction in it if you don&#39;t put braces", "edited": false, "comment_id": 3597228, "creation_date": 1281455049, "score": 12, "owner": {"display_name": "Thomas Levesque", "reputation": 168740, "user_id": 98713, "user_type": "registered", "accept_rate": 92}}, {"body": "i don&#39;t see the difference of the two code snippet.", "edited": false, "comment_id": 3603202, "creation_date": 1281507758, "score": 0, "owner": {"display_name": "Benny", "reputation": 3624, "user_id": 124061, "user_type": "registered", "accept_rate": 87}}, {"body": "@Thomas: Yes, but why is that an error? I might have wanted to add the statement just to be able to break in the else clause. In C++ this is perfectly valid. I find it discomforting that there is a semantic difference between else {} and else when there is only one statement in the clause.", "edited": false, "reply_to_user": {"display_name": "Thomas Levesque", "reputation": 168740, "user_id": 98713, "user_type": "registered", "accept_rate": 92}, "comment_id": 3604143, "creation_date": 1281515978, "score": 0, "owner": {"display_name": "Anders Rune Jensen", "reputation": 1990, "user_id": 13995, "user_type": "registered", "accept_rate": 78}}, {"body": "@Anders: Your answers put a lot of focus on the fact that C# differs from C++ like here: <a href=\"http://stackoverflow.com/questions/194484/whats-the-strangest-corner-case-youve-seen-in-c-or-net/1047948#1047948\" title=\"whats the strangest corner case youve seen in c or net\">stackoverflow.com/questions/194484/&hellip;</a> This thread isn&#39;t about the differences between C# and C++. An edge case in C# isn&#39;t a difference from C++. Others have noted you will find answers in the C# spec.", "edited": false, "reply_to_user": {"display_name": "Anders Rune Jensen", "reputation": 1990, "user_id": 13995, "user_type": "registered", "accept_rate": 78}, "comment_id": 3606102, "creation_date": 1281531874, "score": 1, "owner": {"display_name": "John K", "reputation": 15314, "user_id": 179972, "user_type": "registered", "accept_rate": 88}}, {"body": "@jdk: I added the C++ note for completeness. I agree that it might not be the biggest edge case I have seen, it just suprised me when I found it yesterday.", "edited": false, "reply_to_user": {"display_name": "John K", "reputation": 15314, "user_id": 179972, "user_type": "registered", "accept_rate": 88}, "comment_id": 3610326, "creation_date": 1281554323, "score": 0, "owner": {"display_name": "Anders Rune Jensen", "reputation": 1990, "user_id": 13995, "user_type": "registered", "accept_rate": 78}}, {"body": "After a bit of reflection I can see that this will help people new to programming and with almost no harm for normal programmers. So instead of calling it a corner case, one might call it a feature :-)", "edited": false, "comment_id": 3669503, "creation_date": 1282124425, "score": 0, "owner": {"display_name": "Anders Rune Jensen", "reputation": 1990, "user_id": 13995, "user_type": "registered", "accept_rate": 78}}], "creation_date": 1281454648, "comment_count": 6, "score": 2, "owner": {"display_name": "Anders Rune Jensen", "reputation": 1990, "user_id": 13995, "user_type": "registered", "accept_rate": 78}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1281463173, "body": "<h2>C# Accessibility Puzzler</h2>\n\n<hr>\n\n<p>The following derived class is accessing a <strong>private field</strong> from its base class, and the compiler silently looks to the other side:</p>\n\n<pre><code>public class Derived : Base\n{\n    public int BrokenAccess()\n    {\n        return base.m_basePrivateField;\n    }\n}\n</code></pre>\n\n<p>The field is indeed private:</p>\n\n<pre><code>private int m_basePrivateField = 0;\n</code></pre>\n\n<p>Care to guess how we can make such code compile?</p>\n\n<p>.</p>\n\n<p>.</p>\n\n<p>.</p>\n\n<p>.</p>\n\n<p>.</p>\n\n<p>.</p>\n\n<p>.</p>\n\n<h2>Answer</h2>\n\n<hr>\n\n<p>The trick is to declare <code>Derived</code> as an inner class of <code>Base</code>:</p>\n\n<pre><code>public class Base\n{\n    private int m_basePrivateField = 0;\n\n    public class Derived : Base\n    {\n        public int BrokenAccess()\n        {\n            return base.m_basePrivateField;\n        }\n    }\n}\n</code></pre>\n\n<p>Inner classes are given full access to the outer class members. In this case the inner class also happens to derive from the outer class. This allows us to \"break\" the encapsulation of  private members.</p>\n", "is_accepted": false, "tags": [], "answer_id": 3451958, "down_vote_count": 0, "last_activity_date": 1283979893, "comments": [{"body": "That actually is well-documented; <a href=\"http://msdn.microsoft.com/en-us/library/ms173120%28VS.80%29.aspx\" rel=\"nofollow\">msdn.microsoft.com/en-us/library/ms173120%28VS.80%29.aspx</a>. It can be a useful feature at times, especially if the outer class is static.", "edited": false, "comment_id": 4250082, "creation_date": 1287532943, "score": 0, "owner": {"display_name": "Alex R\u00f8nne Petersen", "reputation": 2256, "user_id": 438034, "user_type": "registered", "accept_rate": 82}}, {"body": "Yes - of course it&#39;s documented. However, very few people solved this puzzle so I thought it&#39;s a cool piece of trivia.", "edited": false, "comment_id": 4252617, "creation_date": 1287561062, "score": 0, "owner": {"display_name": "Omer Mor", "reputation": 3937, "user_id": 61061, "user_type": "registered", "accept_rate": 42}}, {"body": "Seems like you&#39;d have a very strong possibility of a stack overflow by having an inner class inherit its owner...", "edited": false, "comment_id": 4342725, "creation_date": 1288285137, "score": 2, "owner": {"display_name": "Jamie Treworgy", "reputation": 15081, "user_id": 480527, "user_type": "registered", "accept_rate": 83}}, {"body": "I don&#39;t see why - ?", "edited": false, "comment_id": 4351788, "creation_date": 1288360432, "score": 4, "owner": {"display_name": "Omer Mor", "reputation": 3937, "user_id": 61061, "user_type": "registered", "accept_rate": 42}}, {"body": "Yet another similar (and perfectly correct) case is that an object can access a private member of another object of the same type: <code>class A {     private int _i;      public void foo(A other)     {         int res = other._i;     } }</code>", "edited": false, "comment_id": 9941053, "creation_date": 1321128134, "score": 0, "owner": {"display_name": "Olivier Jacot-Descombes", "reputation": 38322, "user_id": 880990, "user_type": "registered"}}], "creation_date": 1281463173, "comment_count": 5, "score": 10, "owner": {"display_name": "Omer Mor", "reputation": 3937, "user_id": 61061, "user_type": "registered", "accept_rate": 42}, "last_editor": {"display_name": "Omer Mor", "reputation": 3937, "user_id": 61061, "user_type": "registered", "accept_rate": 42}, "last_edit_date": 1283979893, "up_vote_count": 10}, {"community_owned_date": 1282346107, "body": "<p>If you have the extension method:</p>\n\n<pre><code>public static bool? ToBoolean(this string s)\n{\n    bool result;\n\n    if (bool.TryParse(s, out result))\n        return result;\n    else\n        return null;\n}\n</code></pre>\n\n<p>and this code:</p>\n\n<pre><code>string nullStr = null;\nvar res = nullStr.ToBoolean();\n</code></pre>\n\n<p>This will not throw an exception because it is an extension method (and really <code>HelperClass.ToBoolean(null)</code>) and not an instance method. This can be confusing.</p>\n", "answer_id": 3535490, "tags": [], "down_vote_count": 0, "last_activity_date": 1282346107, "comments": [{"body": "I don&#39;t think this is a strange corner-case, more run of the mill syntax design. This behaviour allows you to do things like <code>static void IfNotNull&lt;T&gt;(Action&lt;T&gt; action)</code>... If your extension method has a problem with a null <code>this</code> parameter then throw an <code>ArgumentNullException</code>.", "edited": false, "comment_id": 3710711, "creation_date": 1282513155, "score": 0, "owner": {"display_name": "Keith", "reputation": 55880, "user_id": 905, "user_type": "registered", "accept_rate": 80}}, {"body": "@Keith It can certainly be useful but when you look at it (from a Java, C++, C# 2 perspective) it will be a strange thing and as a C# 3+ developer you would still have to check whether this is indeed a extension method (not on strings, but on more advanced examples) and not an instance method where they (others code) forgot a null-check.", "edited": false, "reply_to_user": {"display_name": "Keith", "reputation": 55880, "user_id": 905, "user_type": "registered", "accept_rate": 80}, "comment_id": 3712268, "creation_date": 1282537532, "score": 0, "owner": {"display_name": "Lasse Espeholt", "reputation": 12780, "user_id": 174574, "user_type": "registered", "accept_rate": 95}}, {"body": "I guess my point is that the extension method way of working is better in all the places where you would use one rather than an instance method. Take your example method: it returns a <code>bool?</code> - it&#39;s quite acceptable (even preferred) for your <code>nullStr.ToBoolean()</code> to return <code>null</code>, rather than have it throw a <code>NullReferenceException</code>", "edited": false, "reply_to_user": {"display_name": "Lasse Espeholt", "reputation": 12780, "user_id": 174574, "user_type": "registered", "accept_rate": 95}, "comment_id": 3715641, "creation_date": 1282568267, "score": 1, "owner": {"display_name": "Keith", "reputation": 55880, "user_id": 905, "user_type": "registered", "accept_rate": 80}}, {"body": "I think he&#39;s saying if you were inheriting code, and saw the snippet without knowing the extension method definition, it would be confusing.", "edited": false, "comment_id": 6279590, "creation_date": 1301805032, "score": 1, "owner": {"display_name": "Michael Blackburn", "reputation": 486, "user_id": 378133, "user_type": "registered"}}, {"body": "I think they should have used another symbol. Like piping in F#. <code>nullStr|&gt;ToBoolean</code> or <code>nullStr-&gt;ToBoolean</code>.", "edited": false, "comment_id": 6284955, "creation_date": 1301855463, "score": 0, "owner": {"display_name": "Lasse Espeholt", "reputation": 12780, "user_id": 174574, "user_type": "registered", "accept_rate": 95}}], "creation_date": 1282346107, "comment_count": 5, "score": 1, "owner": {"display_name": "Lasse Espeholt", "reputation": 12780, "user_id": 174574, "user_type": "registered", "accept_rate": 95}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1287069421, "body": "<p>here are a few of mine:</p>\n\n<ol>\n<li>this can be null when calling an instance method with out a NullReferenceException being thrown</li>\n<li>a default enumeration value doesn't have to be defined for the enumeration</li>\n</ol>\n\n<p>Simple one first:\n     enum NoZero\n            {\n                Number = 1\n            }</p>\n\n<pre><code>        public bool ReturnsFalse()\n        {\n            //The default value is not defined!\n            return Enum.IsDefined(typeof (NoZero), default(NoZero));\n        }\n</code></pre>\n\n<p>The below code can actually print true!</p>\n\n<pre><code> internal sealed class Strange\n{\n    public void Foo()\n    {\n        Console.WriteLine(this == null);\n    }\n}\n</code></pre>\n\n<p>A simple piece of client code that will result in that is\n   delegate void HelloDelegate(Strange bar);</p>\n\n<pre><code>public class Program\n{\n    [STAThread()]\n    public static void Main(string[] args)\n    {\n        Strange bar = null;\n        var hello = new DynamicMethod(\"ThisIsNull\",\n            typeof(void), new[] { typeof(Strange) },\n         typeof(Strange).Module);\n        ILGenerator il = hello.GetILGenerator(256);\n        il.Emit(OpCodes.Ldarg_0);\n        var foo = typeof(Strange).GetMethod(\"Foo\");\n        il.Emit(OpCodes.Call, foo);\n        il.Emit(OpCodes.Ret);\n        var print = (HelloDelegate)hello.CreateDelegate(typeof(HelloDelegate));\n        print(bar);\n        Console.ReadLine();\n    }\n}\n</code></pre>\n\n<p>this is actually true in most languages as long as the instance method when called doesn't use the state of the object. this is only dereferenced when the state of the object is accessed</p>\n", "answer_id": 3934725, "tags": [], "down_vote_count": 0, "last_activity_date": 1287069421, "comments": [{"body": "The enum case isn&#39;t actually surprising, the default underlaying type of an enum is <code>int</code>, so default of the enum will return 0, which is quite undefined in NoZero indeed. Even by specifying a custom type (within <code>byte</code>, <code>sbyte</code>, <code>short</code>, <code>ushort</code>, <code>int</code>, <code>uint</code>, <code>long</code>, or <code>ulong</code>) to your enum, the default value of all those type is still 0.", "edited": false, "comment_id": 4199922, "creation_date": 1287074100, "score": 4, "owner": {"display_name": "Dynami Le Savard", "reputation": 3674, "user_id": 208917, "user_type": "registered"}}, {"body": "@Dynami yes it&#39;s because of the default value of the underlying type but (to me) it&#39;s rather senseless to have an invalid default value for a valuetype it&#39;s kind of having (1,-1) as default for int. The value simply makes no sense in the context of the given type", "edited": false, "reply_to_user": {"display_name": "Dynami Le Savard", "reputation": 3674, "user_id": 208917, "user_type": "registered"}, "comment_id": 4200579, "creation_date": 1287078026, "score": 0, "owner": {"display_name": "Rune FS", "reputation": 14748, "user_id": 112407, "user_type": "registered", "accept_rate": 89}}], "creation_date": 1287069421, "comment_count": 2, "score": 2, "owner": {"display_name": "Rune FS", "reputation": 14748, "user_id": 112407, "user_type": "registered", "accept_rate": 89}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1294235800, "body": "<p>Consider this weird case:</p>\n\n<pre><code>public interface MyInterface {\n  void Method();\n}\npublic class Base {\n  public void Method() { }\n}\npublic class Derived : Base, MyInterface { }\n</code></pre>\n\n<p>If <code>Base</code> and <code>Derived</code> are declared in the same assembly, the compiler will make <code>Base::Method</code> virtual and sealed (in the CIL), even though <code>Base</code> doesn't implement the interface. </p>\n\n<p>If <code>Base</code> and <code>Derived</code> are in different assemblies, when compiling the <code>Derived</code> assembly, the compiler won't change the other assembly, so it will introduce a member in <code>Derived</code> that will be an explicit implementation for <code>MyInterface::Method</code> that will just delegate the call to <code>Base::Method</code>.</p>\n\n<p>The compiler has to do this in order to support polymorphic dispatch with regards to the interface, i.e. it has to make that method virtual.</p>\n", "is_accepted": false, "tags": [], "answer_id": 4604818, "down_vote_count": 0, "last_activity_date": 1296060011, "comments": [{"body": "That does indeed sound odd. Will have to investigate later :)", "edited": false, "reply_to_user": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}, "comment_id": 5060449, "creation_date": 1294236979, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon Skeet: I found this while researching <a href=\"http://codecrafter.blogspot.com/2010/10/roles-in-c-implementation.html\" rel=\"nofollow\">implementation strategies</a> for <a href=\"http://codecrafter.blogspot.com/2010/10/roles-in-c.html\" rel=\"nofollow\">roles in C#</a>. Would be great to get your feedback on that one!", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 5063268, "creation_date": 1294247971, "score": 0, "owner": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}}], "creation_date": 1294235800, "comment_count": 2, "score": 8, "owner": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}, "last_editor": {"display_name": "Jord\u00e3o", "reputation": 33747, "user_id": 31158, "user_type": "registered", "accept_rate": 89}, "last_edit_date": 1296060011, "up_vote_count": 8}, {"community_owned_date": 1295346919, "body": "<p>Just found a nice little thing today:</p>\n\n<pre><code>public class Base\n{\n   public virtual void Initialize(dynamic stuff) { \n   //...\n   }\n}\npublic class Derived:Base\n{\n   public override void Initialize(dynamic stuff) {\n   base.Initialize(stuff);\n   //...\n   }\n}\n</code></pre>\n\n<p>This throws compile error.  </p>\n\n<p>The call to method 'Initialize' needs to be dynamically dispatched, but cannot be because it is part of a base access expression. Consider casting the dynamic arguments or eliminating the base access.</p>\n\n<p>If I write base.Initialize(stuff as object); it works perfectly, however this seems to be a \"magic word\" here, since it does exactly the same, everything is still recieved as dynamic...</p>\n", "answer_id": 4723038, "tags": [], "down_vote_count": 0, "last_activity_date": 1295346919, "creation_date": 1295346919, "comment_count": 0, "score": 10, "owner": {"display_name": "TDaver", "reputation": 3576, "user_id": 571536, "user_type": "registered", "accept_rate": 90}, "is_accepted": false, "up_vote_count": 10}, {"community_owned_date": 1297221940, "body": "<p>This one is pretty straightforward but I still find it somewhat interesting. What would be the value of x after the call to Foo?</p>\n\n<pre><code>static int x = 0;\n\npublic static void Foo()\n{\n    try { return; }\n    finally { x = 1; }\n}\n\nstatic void Main() { Foo(); }\n</code></pre>\n", "answer_id": 4941012, "tags": [], "down_vote_count": 1, "last_activity_date": 1297221940, "comments": [{"body": "What&#39;s the corner case in your answer?", "edited": false, "comment_id": 5510240, "creation_date": 1297227851, "score": 5, "owner": {"display_name": "Danny Chen", "reputation": 16929, "user_id": 323924, "user_type": "registered", "accept_rate": 79}}, {"body": "Maxim: Right. Danny: That&#39;s not exactly a corner case, but it goes together with corner cases - that&#39;s a thing that not easy to track back, especially when you work with someone&#39;s code.", "edited": false, "comment_id": 5523821, "creation_date": 1297293819, "score": 0, "owner": {"display_name": "Andrew Sevastian", "reputation": 18, "user_id": 589340, "user_type": "registered"}}], "creation_date": 1297221940, "comment_count": 2, "score": 2, "owner": {"display_name": "Andrew Sevastian", "reputation": 18, "user_id": 589340, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1298604795, "body": "<p>This one's pretty hard to top.  I ran into it while I was trying to build a RealProxy implementation that truly supports Begin/EndInvoke (thanks MS for making this impossible to do without horrible hacks).  This example is basically a bug in the CLR, the unmanaged code path for BeginInvoke doesn't validate that the return message from RealProxy.PrivateInvoke (and my Invoke override) is returning an instance of an IAsyncResult.  Once it's returned, the CLR gets incredibly confused and loses any idea of whats going on, as demonstrated by the tests at the bottom.</p>\n\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Runtime.Remoting.Proxies;\nusing System.Reflection;\nusing System.Runtime.Remoting.Messaging;\n\nnamespace BrokenProxy\n{\n    class NotAnIAsyncResult\n    {\n        public string SomeProperty { get; set; }\n    }\n\n    class BrokenProxy : RealProxy\n    {\n        private void HackFlags()\n        {\n            var flagsField = typeof(RealProxy).GetField(\"_flags\", BindingFlags.NonPublic | BindingFlags.Instance);\n            int val = (int)flagsField.GetValue(this);\n            val |= 1; // 1 = RemotingProxy, check out System.Runtime.Remoting.Proxies.RealProxyFlags\n            flagsField.SetValue(this, val);\n        }\n\n        public BrokenProxy(Type t)\n            : base(t)\n        {\n            HackFlags();\n        }\n\n        public override IMessage Invoke(IMessage msg)\n        {\n            var naiar = new NotAnIAsyncResult();\n            naiar.SomeProperty = \"o noes\";\n            return new ReturnMessage(naiar, null, 0, null, (IMethodCallMessage)msg);\n        }\n    }\n\n    interface IRandomInterface\n    {\n        int DoSomething();\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            BrokenProxy bp = new BrokenProxy(typeof(IRandomInterface));\n            var instance = (IRandomInterface)bp.GetTransparentProxy();\n            Func&lt;int&gt; doSomethingDelegate = instance.DoSomething;\n            IAsyncResult notAnIAsyncResult = doSomethingDelegate.BeginInvoke(null, null);\n\n            var interfaces = notAnIAsyncResult.GetType().GetInterfaces();\n            Console.WriteLine(!interfaces.Any() ? \"No interfaces on notAnIAsyncResult\" : \"Interfaces\");\n            Console.WriteLine(notAnIAsyncResult is IAsyncResult); // Should be false, is it?!\n            Console.WriteLine(((NotAnIAsyncResult)notAnIAsyncResult).SomeProperty);\n            Console.WriteLine(((IAsyncResult)notAnIAsyncResult).IsCompleted); // No way this works.\n        }\n    }\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>No interfaces on notAnIAsyncResult\nTrue\no noes\n\nUnhandled Exception: System.EntryPointNotFoundException: Entry point was not found.\n   at System.IAsyncResult.get_IsCompleted()\n   at BrokenProxy.Program.Main(String[] args) \n</code></pre>\n", "answer_id": 5113304, "tags": [], "down_vote_count": 0, "last_activity_date": 1298604795, "creation_date": 1298604795, "comment_count": 0, "score": 7, "owner": {"display_name": "SteveN", "reputation": 319, "user_id": 468666, "user_type": "registered", "accept_rate": 0}, "is_accepted": false, "up_vote_count": 7}], "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "locked_date": 1317794127, "closed_details": {"reason": "not constructive", "by_users": [{"display_name": "Tim Post", "reputation": 23392, "user_id": 50049, "user_type": "moderator", "accept_rate": 96}], "description": "As it currently stands, this question is not a good fit for our Q&amp;A format. We expect answers to be supported by facts, references,   or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question   can be improved and possibly reopened, <a href=\"http://stackoverflow.com/help/reopen-questions\">visit the help center</a> for guidance.", "on_hold": false}, "down_vote_count": 4, "question_id": 194484, "close_vote_count": 0, "up_vote_count": 326}, {"last_activity_date": 1406833533, "accepted_answer_id": 1210951, "creation_date": 1248985887, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1249020779, "favorite_count": 3, "view_count": 3599, "delete_vote_count": 0, "title": "Why is ccrewrite.exe not doing anything from the command line?", "comment_count": 0, "score": 25, "body": "<p>I've got Code Contracts working fine from inside Visual Studio 2010, but I can't get <code>ccrewrite.exe</code> to do anything useful from the command line. Here's a sample app:</p>\n\n<pre><code>using System.Diagnostics.Contracts;\n\npublic class Dummy\n{\n    public static void Main(string[] args)\n    {\n        Contract.Requires(args.Length &gt; 0);\n    }\n}\n</code></pre>\n\n<p>I then compile the code and run ccrewrite.exe on it:</p>\n\n<pre><code>&gt; csc /debug+ /D:CONTRACTS_FULL Dummy.cs\n\n&gt; ccrewrite /o:RewrittenDummy.exe Dummy.exe\nelapsed time: 61ms\n</code></pre>\n\n<p>There's no <code>RewrittenDummy.exe</code> file afterwards.</p>\n\n<p>I've tried loads of options, but nothing's making any difference. A few things I've noticed:</p>\n\n<ul>\n<li>It's definitely loading Dummy.exe, because if I specify a non-existent file, it dies</li>\n<li>Dummy.exe definitely contains references to Contract - if I run it with no arguments, it fails appropriately (but the error message hasn't been filled in as I'd expect if it had been rewritten)</li>\n<li>Using postconditions and invariants makes no difference</li>\n</ul>\n\n<p>I've tried turning warnings and verbosity up, and that doesn't help at all\nWhat am I doing wrong?</p>\n\n<p>(Also asked as a <a href=\"http://social.msdn.microsoft.com/Forums/en-US/codecontracts/thread/0cf6ce81-4778-4ec5-adfe-c12c9da23c7e\">question in the Code Contracts forum</a>. I'll add any relevant answers here myself.)</p>\n", "is_answered": true, "up_vote_count": 25, "tags": [".net-4.0", "code-contracts", "ccrewrite"], "reopen_vote_count": 0, "answers": [{"body": "<p>Okay, this has been <a href=\"http://social.msdn.microsoft.com/Forums/en-US/codecontracts/thread/0cf6ce81-4778-4ec5-adfe-c12c9da23c7e\">answered in the MSDN forum</a>. For once, it wasn't really me being entirely stupid - it's something that could really do with a warning.</p>\n\n<p>Read the forum post for full details, but the basic problem is that <code>ccrewrite</code> couldn't find the contract classes: it was looking in the .NET 3.5 CLR version of <code>mscorlib</code> instead of the .NET 4.0 one.</p>\n\n<p>This can be fixed by explicitly listing the path to the relevant assembly:</p>\n\n<pre><code>&gt; ccrewrite /o:rewrittendummy.exe dummy.exe \n  /libpaths:%SystemRoot%\\Microsoft.Net\\Framework\\v4.0.20506\n</code></pre>\n", "answer_id": 1210951, "tags": [], "down_vote_count": 0, "last_activity_date": 1249021614, "comments": [{"body": "Where I add this line?", "edited": false, "comment_id": 38824946, "creation_date": 1406412303, "score": 1, "owner": {"display_name": "Pedro77", "reputation": 1320, "user_id": 767664, "user_type": "registered", "accept_rate": 74}}, {"body": "Ive commented all my Contracts call and returned to the old and good != null... ccrewrite  is too buggy.", "edited": false, "comment_id": 38825015, "creation_date": 1406412639, "score": 0, "owner": {"display_name": "Pedro77", "reputation": 1320, "user_id": 767664, "user_type": "registered", "accept_rate": 74}}, {"body": "@Pedro77: It&#39;s hard to tell exactly what your problem is from these comments. Perhaps open a new question?", "edited": false, "reply_to_user": {"display_name": "Pedro77", "reputation": 1320, "user_id": 767664, "user_type": "registered", "accept_rate": 74}, "comment_id": 38829755, "creation_date": 1406442540, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Oh, never mind. My doubt here is where should I write your solution: &quot; &gt; ccrewrite /o:rewrit...&quot; ?? Can you please clarify?", "edited": false, "comment_id": 38840000, "creation_date": 1406484175, "score": 1, "owner": {"display_name": "Pedro77", "reputation": 1320, "user_id": 767664, "user_type": "registered", "accept_rate": 74}}, {"body": "@Pedro77: Well that&#39;s if you&#39;re running it from the command line. If you&#39;re just using Visual Studio, you&#39;ll need to work out which project options correspond to which command-line options.", "edited": false, "reply_to_user": {"display_name": "Pedro77", "reputation": 1320, "user_id": 767664, "user_type": "registered", "accept_rate": 74}, "comment_id": 38841923, "creation_date": 1406490431, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet, Isn&#39;t there a simple way to set up code contracts to throw a plain old CLR exception when <code>Contract.Requires&lt;NullReferenceException&gt;(obj != null);</code>?", "edited": false, "comment_id": 47869515, "creation_date": 1430007786, "score": 0, "owner": {"display_name": "Shimmy", "reputation": 29460, "user_id": 75500, "user_type": "registered", "accept_rate": 93}}, {"body": "@Shimmy: It will do that already, won&#39;t it? (So long as the rewriter is set to check everything.) I&#39;m not quite sure what you&#39;re asking - but it&#39;s been a long time since I&#39;ve used CC anyway.", "edited": false, "reply_to_user": {"display_name": "Shimmy", "reputation": 29460, "user_id": 75500, "user_type": "registered", "accept_rate": 93}, "comment_id": 47874001, "creation_date": 1430031060, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet looks like it doesn&#39;t. I&#39;m working on an ASP.NET MVC project and I get complains about ccwriter.", "edited": false, "comment_id": 47889419, "creation_date": 1430077968, "score": 0, "owner": {"display_name": "Shimmy", "reputation": 29460, "user_id": 75500, "user_type": "registered", "accept_rate": 93}}, {"body": "@Shimmy: Sounds like you should ask a new question with plenty of detail.", "edited": false, "reply_to_user": {"display_name": "Shimmy", "reputation": 29460, "user_id": 75500, "user_type": "registered", "accept_rate": 93}, "comment_id": 47889993, "creation_date": 1430079579, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1249021614, "comment_count": 9, "score": 15, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": true, "up_vote_count": 15}], "answer_count": 1, "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 1209166}, {"last_activity_date": 1405987769, "creation_date": 1405359045, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1405410967, "favorite_count": 19, "view_count": 4013, "delete_vote_count": 0, "title": "Why does struct alignment depend on whether a field type is primitive or user-defined?", "comments": [{"body": "You don&#39;t actually seem to be using <code>Ref&lt;T&gt;</code> but are using <code>string</code> instead, not that it should make a difference.", "edited": false, "comment_id": 38384251, "creation_date": 1405359466, "score": 1, "owner": {"display_name": "tvanfosson", "reputation": 308606, "user_id": 12950, "user_type": "registered", "accept_rate": 95}}, {"body": "@tvanfosson: Humbug - <code>Ref&lt;T&gt;</code> shouldn&#39;t have been there - it was an experiment that didn&#39;t help (the &quot;generic struct as a wrapper around the reference&quot; part). I&#39;ve removed it now - thanks for mentioning it.", "edited": false, "reply_to_user": {"display_name": "tvanfosson", "reputation": 308606, "user_id": 12950, "user_type": "registered", "accept_rate": 95}, "comment_id": 38384284, "creation_date": 1405359527, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "What happens if you put two create a struct with two <code>TwoInt32Wrappers</code>, or an <code>Int64</code> and a <code>TwoInt32Wrappers</code>?  How about if you create a generic <code>Pair&lt;T1,T2&gt; {public T1 f1; public T2 f2;}</code> and then create <code>Pair&lt;string,Pair&lt;int,int&gt;&gt;</code> and <code>Pair&lt;string,Pair&lt;Int32Wrapper,Int32Wrapper&gt;&gt;</code>?  Which combinations force the JITter to pad things?", "edited": false, "comment_id": 38384445, "creation_date": 1405359871, "score": 2, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}, {"body": "@supercat: It&#39;s probably best for you to copy the code and experiment for yourself - but <code>Pair&lt;string, TwoInt32Wrappers&gt;</code> <i>does</i> give just 16 bytes, so that would address the issue. Fascinating.", "edited": false, "reply_to_user": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}, "comment_id": 38384653, "creation_date": 1405360213, "score": 6, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "When structures are passed by value, they are sometimes placed on the stack and sometimes in registers, except in generic code where from what I can tell they are always placed on the stack.  I suspect the JITter might have recognized <code>Int32Wrapper</code> as a type which can benefit from being passed as a register, and <code>TwoInt32Wrappers</code> as benefiting from having each part in a wrapper, but it loses sight of the fact that the things to be passed as registers only need to be 32 bits.", "edited": false, "comment_id": 38384823, "creation_date": 1405360523, "score": 0, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}, {"body": "Have you tried <code>Marshal.SizeOf()</code>?  (for simpler measurements)", "edited": false, "comment_id": 38385276, "creation_date": 1405361339, "score": 0, "owner": {"display_name": "SLaks", "reputation": 465233, "user_id": 34397, "user_type": "registered", "accept_rate": 87}}, {"body": "@supercat: It&#39;s odd that the fact that there&#39;s a reference type field is what alters things though.", "edited": false, "reply_to_user": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}, "comment_id": 38385310, "creation_date": 1405361388, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@SLaks: No, partly because I&#39;m not interested in marshalling to native code, and partly because the documentation seems wholly unclear to me in terms of what it actually does.", "edited": false, "reply_to_user": {"display_name": "SLaks", "reputation": 465233, "user_id": 34397, "user_type": "registered", "accept_rate": 87}, "comment_id": 38385338, "creation_date": 1405361434, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@SLaks: Sometimes when a structure is passed to native code, the Runtime will copy all of the data to a structure with a different layout.  <code>Marshal.SizeOf</code> will return the size of the structure which would be passed to native code, which need not have any relation to the size of the structure in .NET code.", "edited": false, "reply_to_user": {"display_name": "SLaks", "reputation": 465233, "user_id": 34397, "user_type": "registered", "accept_rate": 87}, "comment_id": 38385796, "creation_date": 1405362224, "score": 9, "owner": {"display_name": "supercat", "reputation": 34704, "user_id": 363751, "user_type": "registered", "accept_rate": 40}}, {"body": "You&#39;re probably aware but want to point out your division isn&#39;t clean (e.g. Int32Wrapper is really 4.00016, 4.00024 on x86, x64 respectively)", "edited": false, "comment_id": 38386033, "creation_date": 1405362667, "score": 0, "owner": {"display_name": "Rafael Rivera", "reputation": 414, "user_id": 280550, "user_type": "registered"}}, {"body": "@RafaelRivera: Yes, that&#39;s because of the tiny overhead of the actual array object itself. I&#39;ve deliberately used integer division to keep it to the element size via rounding :)", "edited": false, "reply_to_user": {"display_name": "Rafael Rivera", "reputation": 414, "user_id": 280550, "user_type": "registered"}, "comment_id": 38386440, "creation_date": 1405363380, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Does field order make any difference? Also on 32-bit it behaves like you would expect it to.", "edited": false, "comment_id": 38387361, "creation_date": 1405364971, "score": 0, "owner": {"display_name": "leppie", "reputation": 75677, "user_id": 15541, "user_type": "registered", "accept_rate": 86}}, {"body": "@leppie: Nope, field order doesn&#39;t help. I haven&#39;t bothered testing under 32 bit :)", "edited": false, "reply_to_user": {"display_name": "leppie", "reputation": 75677, "user_id": 15541, "user_type": "registered", "accept_rate": 86}, "comment_id": 38387412, "creation_date": 1405365082, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Is a ref and 3 ints the same size?", "edited": false, "comment_id": 38391444, "creation_date": 1405372777, "score": 0, "owner": {"display_name": "BenAdams", "reputation": 792, "user_id": 1109918, "user_type": "registered"}}, {"body": "@BenAdams: I&#39;ve not tried yet. But I&#39;d expect padding to 8 bytes anyway.", "edited": false, "reply_to_user": {"display_name": "BenAdams", "reputation": 792, "user_id": 1109918, "user_type": "registered"}, "comment_id": 38391492, "creation_date": 1405372884, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "[StructLayout(LayoutKind.Sequential, Pack=1)] ?", "edited": false, "comment_id": 38392133, "creation_date": 1405374230, "score": 0, "owner": {"display_name": "BenAdams", "reputation": 792, "user_id": 1109918, "user_type": "registered"}}, {"body": "@BenAdams: Think I tried that, but will double check.", "edited": false, "reply_to_user": {"display_name": "BenAdams", "reputation": 792, "user_id": 1109918, "user_type": "registered"}, "comment_id": 38392156, "creation_date": 1405374270, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "The explanation for DateTime causing automatic layout is simple: it has automatic layout itself. <a href=\"http://stackoverflow.com/q/4132533/445517\">Why does LayoutKind.Sequential work differently if a struct contains a DateTime field?</a>", "edited": false, "comment_id": 38395350, "creation_date": 1405384869, "score": 1, "owner": {"display_name": "CodesInChaos", "reputation": 67151, "user_id": 445517, "user_type": "registered", "accept_rate": 50}}, {"body": "The interesting observation: Mono gives correct results. Environment: CLR 4.0.30319.17020 on Unix 3.13.0.24 (64 bit) Int32Wrapper: 4 TwoInt32s: 8 TwoInt32Wrappers: 8 RefAndTwoInt32s: 16 RefAndTwoInt32Wrappers: 16", "edited": false, "comment_id": 38396347, "creation_date": 1405389560, "score": 5, "owner": {"display_name": "AndreyAkinshin", "reputation": 6066, "user_id": 184842, "user_type": "registered", "accept_rate": 100}}, {"body": "So just for fun I turned on unsafe and made an unsafe struct with <code>char*</code> and the two Int32Wrappers and when I run <code>ShowSize</code> on Int64 I get 16 for the size.", "edited": false, "comment_id": 38481370, "creation_date": 1405562393, "score": 0, "owner": {"display_name": "Maurice Reeves", "reputation": 896, "user_id": 86207, "user_type": "registered"}}, {"body": "<a href=\"http://blogs.msdn.com/b/oldnewthing/archive/2004/08/25/220195.aspx\" rel=\"nofollow\">blogs.msdn.com/b/oldnewthing/archive/2004/08/25/220195.aspx</a>", "edited": false, "comment_id": 40109864, "creation_date": 1409837632, "score": 0, "owner": {"display_name": "Vladimir Frolov", "reputation": 3656, "user_id": 1786606, "user_type": "registered", "accept_rate": 100}}, {"body": "@VladimirFrolov: That doesn&#39;t really explain why two types which are both 64 bits end up causing different alignment in a containing struct.", "edited": false, "reply_to_user": {"display_name": "Vladimir Frolov", "reputation": 3656, "user_id": 1786606, "user_type": "registered", "accept_rate": 100}, "comment_id": 40110447, "creation_date": 1409838477, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "comment_count": 22, "score": 102, "body": "<p>In <a href=\"http://nodatime.org\">Noda Time</a> v2, we're moving to nanosecond resolution. That means we can no longer use an 8-byte integer to represent the whole range of time we're interested in. That has prompted me to investigate the memory usage of the (many) structs of Noda Time, which has in turn led me to uncover a slight oddity in the CLR's alignment decision.</p>\n\n<p>Firstly, I realize that this <em>is</em> an implementation decision, and that the default behaviour could change at any time. I realize that I <em>can</em> modify it using <a href=\"http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.structlayoutattribute\"><code>[StructLayout]</code></a> and <a href=\"http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.fieldoffsetattribute\"><code>[FieldOffset]</code></a>, but I'd rather come up with a solution which didn't require that if possible.</p>\n\n<p>My core scenario is that I have a <code>struct</code> which contains a reference-type field and two other value-type fields, where those fields are simple wrappers for <code>int</code>. I had <em>hoped</em> that that would be represented as 16 bytes on the 64-bit CLR (8 for the reference and 4 for each of the others), but for some reason it's using 24 bytes. I'm measuring the space using arrays, by the way - I understand that the layout may be different in different situations, but this felt like a reasonable starting point.</p>\n\n<p>Here's a sample program demonstrating the issue:</p>\n\n<pre><code>using System;\nusing System.Runtime.InteropServices;\n\n#pragma warning disable 0169\n\nstruct Int32Wrapper\n{\n    int x;\n}\n\nstruct TwoInt32s\n{\n    int x, y;\n}\n\nstruct TwoInt32Wrappers\n{\n    Int32Wrapper x, y;\n}\n\nstruct RefAndTwoInt32s\n{\n    string text;\n    int x, y;\n}\n\nstruct RefAndTwoInt32Wrappers\n{\n    string text;\n    Int32Wrapper x, y;\n}    \n\nclass Test\n{\n    static void Main()\n    {\n        Console.WriteLine(\"Environment: CLR {0} on {1} ({2})\",\n            Environment.Version,\n            Environment.OSVersion,\n            Environment.Is64BitProcess ? \"64 bit\" : \"32 bit\");\n        ShowSize&lt;Int32Wrapper&gt;();\n        ShowSize&lt;TwoInt32s&gt;();\n        ShowSize&lt;TwoInt32Wrappers&gt;();\n        ShowSize&lt;RefAndTwoInt32s&gt;();\n        ShowSize&lt;RefAndTwoInt32Wrappers&gt;();\n    }\n\n    static void ShowSize&lt;T&gt;()\n    {\n        long before = GC.GetTotalMemory(true);\n        T[] array = new T[100000];\n        long after  = GC.GetTotalMemory(true);        \n        Console.WriteLine(\"{0}: {1}\", typeof(T),\n                          (after - before) / array.Length);\n    }\n}\n</code></pre>\n\n<p>And the compilation and output on my laptop:</p>\n\n<pre><code>c:\\Users\\Jon\\Test&gt;csc /debug- /o+ ShowMemory.cs\nMicrosoft (R) Visual C# Compiler version 12.0.30501.0\nfor C# 5\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n\nc:\\Users\\Jon\\Test&gt;ShowMemory.exe\nEnvironment: CLR 4.0.30319.34014 on Microsoft Windows NT 6.2.9200.0 (64 bit)\nInt32Wrapper: 4\nTwoInt32s: 8\nTwoInt32Wrappers: 8\nRefAndTwoInt32s: 16\nRefAndTwoInt32Wrappers: 24\n</code></pre>\n\n<p>So:</p>\n\n<ul>\n<li>If you don't have a reference type field, the CLR is happy to pack <code>Int32Wrapper</code> fields together (<code>TwoInt32Wrappers</code> has a size of 8)</li>\n<li>Even with a reference type field, the CLR is still happy to pack <code>int</code> fields together (<code>RefAndTwoInt32s</code> has a size of 16)</li>\n<li>Combining the two, each <code>Int32Wrapper</code> field appears to be padded/aligned to 8 bytes. (<code>RefAndTwoInt32Wrappers</code> has a size of 24.)</li>\n<li>Running the same code in the debugger (but still a release build) shows a size of 12.</li>\n</ul>\n\n<p>A few other experiments have yielded similar results:</p>\n\n<ul>\n<li>Putting the reference type field after the value type fields doesn't help</li>\n<li>Using <code>object</code> instead of <code>string</code> doesn't help (I expect it's \"any reference type\")</li>\n<li>Using another struct as a \"wrapper\" around the reference doesn't help</li>\n<li>Using a generic struct as a wrapper around the reference doesn't help</li>\n<li>If I keep adding fields (in pairs for simplicity), <code>int</code> fields still count for 4 bytes, and <code>Int32Wrapper</code> fields count for 8 bytes</li>\n<li>Adding <code>[StructLayout(LayoutKind.Sequential, Pack = 4)]</code> to every struct in sight doesn't change the results</li>\n</ul>\n\n<p>Does anyone have any explanation for this (ideally with reference documentation) or a suggestion of how I can get hint to the CLR that I'd like the fields to be packed <em>without</em> specifying a constant field offset?</p>\n", "is_answered": true, "up_vote_count": 102, "tags": ["c#", ".net", "struct", "clr", "memory-alignment"], "reopen_vote_count": 0, "answer_count": 4, "answers": [{"body": "<p>I think this is a bug.  You are seeing the side-effect of automatic layout, it likes to align non-trivial fields to an address that's a multiple of 8 bytes in 64-bit mode.  It occurs even when you explicitly apply the <code>[StructLayout(LayoutKind.Sequential)]</code> attribute.  That is not supposed to happen.</p>\n\n<p>You can see it by making the struct members public and appending test code like this:</p>\n\n<pre><code>    var test = new RefAndTwoInt32Wrappers();\n    test.text = \"adsf\";\n    test.x.x = 0x11111111;\n    test.y.x = 0x22222222;\n    Console.ReadLine();      // &lt;=== Breakpoint here\n</code></pre>\n\n<p>When the breakpoint hits, use Debug + Windows + Memory + Memory 1.  Switch to 4-byte integers and put <code>&amp;test</code> in the Address field:</p>\n\n<pre><code> 0x000000E928B5DE98  0ed750e0 000000e9 11111111 00000000 22222222 00000000 \n</code></pre>\n\n<p><code>0xe90ed750e0</code> is the string pointer on my machine (not yours).  You can easily see the <code>Int32Wrappers</code>, with the extra 4 bytes of padding that turned the size into 24 bytes.  Go back to the struct and put the string last.  Repeat and you'll see the string pointer is <em>still</em> first.  Violating <code>LayoutKind.Sequential</code>, you got <code>LayoutKind.Auto</code>.</p>\n\n<p>It is going to be difficult to convince Microsoft to fix this, it has worked this way for too long so any change is going to be breaking <em>something</em>.  The CLR only makes an attempt to honor <code>[StructLayout]</code> for the managed version of a struct and make it blittable, it in general quickly gives up.  Notoriously for any struct that contains a DateTime.  You only get the true LayoutKind guarantee when marshaling a struct.  The marshaled version certainly is 16 bytes, as <code>Marshal.SizeOf()</code> will tell you.</p>\n\n<p>Using <code>LayoutKind.Explicit</code> fixes it, not what you wanted to hear.</p>\n", "is_accepted": false, "tags": [], "answer_id": 24744714, "down_vote_count": 0, "last_activity_date": 1405987769, "comments": [{"body": "&quot;It is going to be difficult to convince Microsoft to fix this, it has worked this way for too long so any change is going to be breaking something.&quot;  The fact that this apparently does not manifest in 32 bit or mono may help (as per other comments).", "edited": false, "comment_id": 38397487, "creation_date": 1405394696, "score": 6, "owner": {"display_name": "NPSF3000", "reputation": 1798, "user_id": 836713, "user_type": "registered"}}, {"body": "The documentation of StructLayoutAttribute is pretty interesting. Basically, only blittable types are controlled through StructLayout in managed memory. Interesting, never knew that.", "edited": false, "comment_id": 38401865, "creation_date": 1405407693, "score": 0, "owner": {"display_name": "Michael Stum", "reputation": 83083, "user_id": 91, "user_type": "registered", "accept_rate": 91}}, {"body": "@Soner no it does not fix it. Did you put the Layout on both fields to be offset 8 ? If so then x and y are the same and changing one changes the other. Clearly not what Jon is after.", "edited": false, "reply_to_user": {"display_name": "Soner G\u00f6n\u00fcl", "reputation": 55355, "user_id": 447156, "user_type": "registered", "accept_rate": 98}, "comment_id": 38401962, "creation_date": 1405407846, "score": 0, "owner": {"display_name": "BartoszAdamczewski", "reputation": 390, "user_id": 331403, "user_type": "registered"}}, {"body": "Substituting <code>string</code> with another new reference type (<code>class</code>) to which one has applied <code>[StructLayout(LayoutKind.Sequential)]</code> does not appear to change anything. In the opposite direction, applying <code>[StructLayout(LayoutKind.Auto)]</code> to the <code>struct Int32Wrapper</code> changes the memory usage in <code>TwoInt32Wrappers</code>.", "edited": false, "comment_id": 38404571, "creation_date": 1405412763, "score": 0, "owner": {"display_name": "Jeppe Stig Nielsen", "reputation": 24141, "user_id": 1336654, "user_type": "registered", "accept_rate": 70}}, {"body": "&quot;It is going to be difficult to convince Microsoft to fix this, it has worked this way for too long so any change is going to be breaking something.&quot; <a href=\"http://xkcd.com/1172/\" rel=\"nofollow\">xkcd.com/1172</a>", "edited": false, "comment_id": 46447978, "creation_date": 1426624739, "score": 0, "owner": {"display_name": "kennycoc", "reputation": 304, "user_id": 2230115, "user_type": "registered", "accept_rate": 83}}], "creation_date": 1405367463, "comment_count": 5, "score": 71, "owner": {"display_name": "Hans Passant", "reputation": 569404, "user_id": 17034, "user_type": "registered"}, "last_editor": {"display_name": "Hans Passant", "reputation": 569404, "user_id": 17034, "user_type": "registered"}, "last_edit_date": 1405987769, "up_vote_count": 71}, {"body": "<p>Summary see @Hans Passant's answer probably above. Layout Sequential doesn't work</p>\n\n<hr>\n\n<p>Some testing:</p>\n\n<p>It is definitely only on 64bit and the object reference \"poisons\" the struct. 32 bit does what you are expecting:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Environment: CLR 4.0.30319.34209 on Microsoft Windows NT 6.2.9200.0 (32 bit)\nConsoleApplication1.Int32Wrapper: 4\nConsoleApplication1.TwoInt32s: 8\nConsoleApplication1.TwoInt32Wrappers: 8\nConsoleApplication1.ThreeInt32Wrappers: 12\nConsoleApplication1.Ref: 4\nConsoleApplication1.RefAndTwoInt32s: 12\nConsoleApplication1.RefAndTwoInt32Wrappers: 12\nConsoleApplication1.RefAndThreeInt32s: 16\nConsoleApplication1.RefAndThreeInt32Wrappers: 16\n</code></pre>\n\n<p>As soon as the object reference is added all the structs expand to be 8 bytes rather their 4 byte size. Expanding the tests:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Environment: CLR 4.0.30319.34209 on Microsoft Windows NT 6.2.9200.0 (64 bit)\nConsoleApplication1.Int32Wrapper: 4\nConsoleApplication1.TwoInt32s: 8\nConsoleApplication1.TwoInt32Wrappers: 8\nConsoleApplication1.ThreeInt32Wrappers: 12\nConsoleApplication1.Ref: 8\nConsoleApplication1.RefAndTwoInt32s: 16\nConsoleApplication1.RefAndTwoInt32sSequential: 16\nConsoleApplication1.RefAndTwoInt32Wrappers: 24\nConsoleApplication1.RefAndThreeInt32s: 24\nConsoleApplication1.RefAndThreeInt32Wrappers: 32\nConsoleApplication1.RefAndFourInt32s: 24\nConsoleApplication1.RefAndFourInt32Wrappers: 40\n</code></pre>\n\n<p>As you can see as soon as the reference is added every Int32Wrapper becomes 8 bytes so isn't simple alignment. I shrunk down the array allocation incase it was LoH allocation which is differently aligned.</p>\n", "is_accepted": false, "tags": [], "answer_id": 24747588, "down_vote_count": 0, "last_activity_date": 1405386025, "creation_date": 1405380013, "comment_count": 0, "score": 2, "owner": {"display_name": "BenAdams", "reputation": 792, "user_id": 1109918, "user_type": "registered"}, "last_editor": {"display_name": "BenAdams", "reputation": 792, "user_id": 1109918, "user_type": "registered"}, "last_edit_date": 1405386025, "up_vote_count": 2}, {"body": "<p><strong>EDIT2</strong> </p>\n\n<pre><code>struct RefAndTwoInt32Wrappers\n{\n    public int x;\n    public string s;\n}\n</code></pre>\n\n<p>This code will be 8 byte aligned so the struct will have 16 bytes. By comparison this:</p>\n\n<pre><code>struct RefAndTwoInt32Wrappers\n{\n    public int x,y;\n    public string s;\n}\n</code></pre>\n\n<p>Will be 4 byte aligned so this struct also will have 16 bytes. So the rationale here is that struct aligment in CLR is determined by the number of most aligned fields, clases obviously cannot do that so they will remain 8 byte aligned. </p>\n\n<p>Now if we combine all that and create struct:</p>\n\n<pre><code>struct RefAndTwoInt32Wrappers\n{\n    public int x,y;\n    public Int32Wrapper z;\n    public string s;\n}\n</code></pre>\n\n<p>It will have 24 bytes {x,y} will have 4 bytes each and {z,s} will have 8 bytes. Once we introduce a ref type in the struct CLR will always align our custom struct to match the class alignment. </p>\n\n<pre><code>struct RefAndTwoInt32Wrappers\n{\n    public Int32Wrapper z;\n    public long l;\n    public int x,y;  \n}\n</code></pre>\n\n<p>This code will have 24 bytes since Int32Wrapper will be aligned the same as long. So the custom struct wrapper will always align to the highest/best aligned field in the structure or to it's own internal most significant fields. So in the case of a ref string that is 8 byte aligned the struct wrapper will align to that.</p>\n\n<p>Concluding custom struct field inside struct will always be aligned to the highest aligned instance field in the structure. Now if i'm not sure if this is a bug but without some evidence I'm going to stick by my opinion that this might be conscious decision.</p>\n\n<hr>\n\n<p><strong>EDIT</strong>  </p>\n\n<p>The sizes are actually accurate only when allocated on a heap but the structs themselves have smaller sizes (the exact sizes of it's fields). Further analysis seam to suggest that this might be a bug in the CLR code, but needs to be backed up by evidence. </p>\n\n<p>I will inspect cli code and post further updates if something useful will be found.</p>\n\n<hr>\n\n<p>This is a alignment strategy used by .NET mem allocator.</p>\n\n<pre><code>public static RefAndTwoInt32s[] test = new RefAndTwoInt32s[1];\n\nstatic void Main()\n{\n    test[0].text = \"a\";\n    test[0].x = 1;\n    test[0].x = 1;\n\n    Console.ReadKey();\n}\n</code></pre>\n\n<p>This code compiled with .net40 under x64, In WinDbg lets do the following:</p>\n\n<p>Lets find the type on the Heap first:</p>\n\n<pre><code>    0:004&gt; !dumpheap -type Ref\n       Address               MT     Size\n0000000003e72c78 000007fe61e8fb58       56    \n0000000003e72d08 000007fe039d3b78       40    \n\nStatistics:\n              MT    Count    TotalSize Class Name\n000007fe039d3b78        1           40 RefAndTwoInt32s[]\n000007fe61e8fb58        1           56 System.Reflection.RuntimeAssembly\nTotal 2 objects\n</code></pre>\n\n<p>Once we have it lets see what's under that address:</p>\n\n<pre><code>    0:004&gt; !do 0000000003e72d08\nName:        RefAndTwoInt32s[]\nMethodTable: 000007fe039d3b78\nEEClass:     000007fe039d3ad0\nSize:        40(0x28) bytes\nArray:       Rank 1, Number of elements 1, Type VALUETYPE\nFields:\nNone\n</code></pre>\n\n<p>We see that this is a ValueType and its the one we created. Since this is an array we need to get the ValueType def of a single element in the array:</p>\n\n<pre><code>    0:004&gt; !dumparray -details 0000000003e72d08\nName:        RefAndTwoInt32s[]\nMethodTable: 000007fe039d3b78\nEEClass:     000007fe039d3ad0\nSize:        40(0x28) bytes\nArray:       Rank 1, Number of elements 1, Type VALUETYPE\nElement Methodtable: 000007fe039d3a58\n[0] 0000000003e72d18\n    Name:        RefAndTwoInt32s\n    MethodTable: 000007fe039d3a58\n    EEClass:     000007fe03ae2338\n    Size:        32(0x20) bytes\n    File:        C:\\ConsoleApplication8\\bin\\Release\\ConsoleApplication8.exe\n    Fields:\n                      MT    Field   Offset                 Type VT     Attr            Value Name\n        000007fe61e8c358  4000006        0            System.String      0     instance     0000000003e72d30     text\n        000007fe61e8f108  4000007        8             System.Int32      1     instance                    1     x\n        000007fe61e8f108  4000008        c             System.Int32      1     instance                    0     y\n</code></pre>\n\n<p>The structure is actually 32 bytes since it's 16 bytes is reserved for padding so in actuality every structure is at least 16 bytes in size from the get go.</p>\n\n<p>if you add 16 bytes from ints and a string ref to: 0000000003e72d18 + 8 bytes EE/padding you will end up at 0000000003e72d30  and this is the staring point for string reference, and since all references are 8 byte padded from their first actual data field this makes up for our 32 bytes for this structure.</p>\n\n<p>Let's see if the string is actually padded that way:</p>\n\n<pre><code>0:004&gt; !do 0000000003e72d30    \nName:        System.String\nMethodTable: 000007fe61e8c358\nEEClass:     000007fe617f3720\nSize:        28(0x1c) bytes\nFile:        C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_64\\mscorlib\\v4.0_4.0.0.0__b77a5c561934e089\\mscorlib.dll\nString:      a\nFields:\n              MT    Field   Offset                 Type VT     Attr            Value Name\n000007fe61e8f108  40000aa        8         System.Int32  1 instance                1 m_stringLength\n000007fe61e8d640  40000ab        c          System.Char  1 instance               61 m_firstChar\n000007fe61e8c358  40000ac       18        System.String  0   shared           static Empty\n                                 &gt;&gt; Domain:Value  0000000001577e90:NotInit  &lt;&lt;\n</code></pre>\n\n<p>Now lets analyse the above program the same way:</p>\n\n<pre><code>public static RefAndTwoInt32Wrappers[] test = new RefAndTwoInt32Wrappers[1];\n\nstatic void Main()\n{\n    test[0].text = \"a\";\n    test[0].x.x = 1;\n    test[0].y.x = 1;\n\n    Console.ReadKey();\n}\n\n0:004&gt; !dumpheap -type Ref\n     Address               MT     Size\n0000000003c22c78 000007fe61e8fb58       56    \n0000000003c22d08 000007fe039d3c00       48    \n\nStatistics:\n              MT    Count    TotalSize Class Name\n000007fe039d3c00        1           48 RefAndTwoInt32Wrappers[]\n000007fe61e8fb58        1           56 System.Reflection.RuntimeAssembly\nTotal 2 objects\n</code></pre>\n\n<p>Our struct is  48 bytes now.</p>\n\n<pre><code>0:004&gt; !dumparray -details 0000000003c22d08\nName:        RefAndTwoInt32Wrappers[]\nMethodTable: 000007fe039d3c00\nEEClass:     000007fe039d3b58\nSize:        48(0x30) bytes\nArray:       Rank 1, Number of elements 1, Type VALUETYPE\nElement Methodtable: 000007fe039d3ae0\n[0] 0000000003c22d18\n    Name:        RefAndTwoInt32Wrappers\n    MethodTable: 000007fe039d3ae0\n    EEClass:     000007fe03ae2338\n    Size:        40(0x28) bytes\n    File:        C:\\ConsoleApplication8\\bin\\Release\\ConsoleApplication8.exe\n    Fields:\n                      MT    Field   Offset                 Type VT     Attr            Value Name\n        000007fe61e8c358  4000009        0            System.String      0     instance     0000000003c22d38     text\n        000007fe039d3a20  400000a        8             Int32Wrapper      1     instance     0000000003c22d20     x\n        000007fe039d3a20  400000b       10             Int32Wrapper      1     instance     0000000003c22d28     y\n</code></pre>\n\n<p>Here the situation is the same, if we add to 0000000003c22d18 + 8 bytes of string ref we will end up at the start of the first Int wrapper where the value actually point to the address we are at.</p>\n\n<p>Now we can see that each value is an object reference again lets confirm that by peeking 0000000003c22d20.</p>\n\n<pre><code>0:004&gt; !do 0000000003c22d20\n&lt;Note: this object has an invalid CLASS field&gt;\nInvalid object\n</code></pre>\n\n<p>Actually thats correct since its a struct the address tells us nothing if this is an obj or vt.</p>\n\n<pre><code>0:004&gt; !dumpvc 000007fe039d3a20   0000000003c22d20    \nName:        Int32Wrapper\nMethodTable: 000007fe039d3a20\nEEClass:     000007fe03ae23c8\nSize:        24(0x18) bytes\nFile:        C:\\ConsoleApplication8\\bin\\Release\\ConsoleApplication8.exe\nFields:\n              MT    Field   Offset                 Type VT     Attr            Value Name\n000007fe61e8f108  4000001        0         System.Int32  1 instance                1 x\n</code></pre>\n\n<p>So in actuality this is a more like an Union type that will get 8 byte aligned this time around (all of the paddings will be aligned with the parent struct). If it weren't then we would end up with 20 bytes and that's not optimal so the mem allocator will never allow it to happen. If you do the math again it will turn out that the struct is indeed 40 bytes of size. </p>\n\n<p>So if you want to be more conservative with memory you should never pack it in a struct custom struct type but instead use simple arrays. Another way is to allocate memory off heap (VirtualAllocEx for e.g)\n    this way you are given you own memory block and you manage it the way you want.</p>\n\n<p>The final question here is why all of a sudden we might get layout like that. Well if you compare the jited code and performance of a int[] incrementation with struct[] with a counter field incrementation the second one will generate a 8 byte aligned address being an union, but when jited this translates to more optimized assembly code (singe LEA vs multiple MOV). However in the case described here the performance will be actually worse so my take is that this is consistent with the underlying CLR implementation since it's a custom type that can have multiple fields so it may be easier/better to put the starting address instead of a value (since it would be impossible) and do struct padding there, thus resulting in bigger byte size.</p>\n", "is_accepted": false, "tags": [], "answer_id": 24750443, "down_vote_count": 0, "last_activity_date": 1405456521, "comments": [{"body": "Looking at this myself, the size of <code>RefAndTwoInt32Wrappers</code> <i>isn&#39;t</i> 32 bytes - it&#39;s 24, which is the same as reported with my code. If you look in the memory view instead of using <code>dumparray</code>, and look at the memory for an array with (say) 3 elements with distinguishable values, you can clearly see that each element consists of an 8-byte string reference and two 8-byte integers. I suspect that <code>dumparray</code> is showing the values as references simply because it doesn&#39;t know how to display <code>Int32Wrapper</code> values. Those &quot;references&quot; point to themselves; they&#39;re not separate values.", "edited": false, "comment_id": 38406476, "creation_date": 1405416103, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I&#39;m not quite sure where you get the &quot;16 byte padding&quot; from, but I suspect it may be because you&#39;re looking at the size of the array object, which will be &quot;16 bytes + count * element size&quot;. So an array with count 2 has a size of 72 (16 + 2 * 24), which is what <code>dumparray</code> shows.", "edited": false, "comment_id": 38406685, "creation_date": 1405416428, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@jon did you dumpheap your struct and checked how many space does it occupy on the heap? Normally the array size is kept at the start of the array, this can also be verified.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 38407525, "creation_date": 1405417794, "score": 0, "owner": {"display_name": "BartoszAdamczewski", "reputation": 390, "user_id": 331403, "user_type": "registered"}}, {"body": "@jon the size reported contains also the offset of the string which starts at 8. I don&#39;t think that those extra 8 bytes mentioned come from array since most of the array stuff resides before the first element address, but I will double check and comment on that.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 38407973, "creation_date": 1405418449, "score": 0, "owner": {"display_name": "BartoszAdamczewski", "reputation": 390, "user_id": 331403, "user_type": "registered"}}, {"body": "Yes, I looked at the array object: it consisted of a type reference (as for any object), the count, and then the elements. Each element was a reference (8 bytes) and then the two integers (each 8 bytes).", "edited": false, "comment_id": 38408077, "creation_date": 1405418590, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "If you add the WinDbg reported size you will go to the next object which will be the first field of a string object so in this regard size check out (again will double check).", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 38408424, "creation_date": 1405419059, "score": 0, "owner": {"display_name": "BartoszAdamczewski", "reputation": 390, "user_id": 331403, "user_type": "registered"}}, {"body": "Yes, WinDbg is reporting the right size - but for the whole array object, which isn&#39;t the struct size. That&#39;s my point. I think we&#39;re talking at cross-purposes... but I&#39;m sure that the size of <code>RefAndTwoInt32Wrappers</code> really <i>is</i> 24 bytes.", "edited": false, "comment_id": 38408510, "creation_date": 1405419190, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Ok yes since it&#39;s on the heap now so the reported size on the heap is actually correct but the struct layout is 24 bytes this is correct.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 38408777, "creation_date": 1405419569, "score": 0, "owner": {"display_name": "BartoszAdamczewski", "reputation": 390, "user_id": 331403, "user_type": "registered"}}, {"body": "Right. And that&#39;s the problem - for <code>RefAndTwoInt32s</code> it&#39;s 16, and for just <code>TwoInt32Wrappers</code> it&#39;s 8. There&#39;s no good reason for the expansion here, as far as I can see. Why would the presence of another field affect the padding of a different one?", "edited": false, "comment_id": 38409106, "creation_date": 1405420028, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "This might be true is it&#39;s on the heap, have you checked the stack?", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 38409237, "creation_date": 1405420243, "score": 0, "owner": {"display_name": "BartoszAdamczewski", "reputation": 390, "user_id": 331403, "user_type": "registered"}}, {"body": "@jon this is logical like I wrote the CLR did this to preserve 8 byte alignment it would be otherwise impossible. If you would do that with 3 IntWrappers and no string you should still end up having 16 or 24 bytes.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 38409359, "creation_date": 1405420414, "score": 0, "owner": {"display_name": "BartoszAdamczewski", "reputation": 390, "user_id": 331403, "user_type": "registered"}}, {"body": "No, ThreeInt32Wrappers ends up as 12 bytes, FourInt32Wrappers as 16, FiveInt32Wrappers as 20. I don&#39;t see anything logical about the addition of a reference type field changing the layout so drastically. And note that it&#39;s quite happy to ignore 8-byte alignment when the fields are of type <code>Int32</code>. I&#39;m not too bothered about what it does on the stack, to be honest - but I haven&#39;t checked it.", "edited": false, "comment_id": 38410277, "creation_date": 1405421918, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Good point, I will check the mem allocator class in sscli that might give some more answers with respect to structs. Another thing to try is to put in a string inside the IntWrapper.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 38410587, "creation_date": 1405422410, "score": 0, "owner": {"display_name": "BartoszAdamczewski", "reputation": 390, "user_id": 331403, "user_type": "registered"}}, {"body": "Thanks for the extra detail in edit 2. It doesn&#39;t explain <i>why</i> it has this behaviour, but it&#39;s interesting anyway.", "edited": false, "comment_id": 38442734, "creation_date": 1405491985, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@BartoszAdamczewski Just a note: You can remove your older edits and just keep the latest. Because each question and answer on StackOverflow has a history where you can review all edits.", "edited": false, "comment_id": 38449756, "creation_date": 1405503602, "score": 0, "owner": {"display_name": "Gottlieb Notschnabel", "reputation": 3032, "user_id": 1828051, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1405402120, "comment_count": 15, "score": 13, "owner": {"display_name": "BartoszAdamczewski", "reputation": 390, "user_id": 331403, "user_type": "registered"}, "last_editor": {"display_name": "BartoszAdamczewski", "reputation": 390, "user_id": 331403, "user_type": "registered"}, "last_edit_date": 1405456521, "up_vote_count": 13}, {"community_owned_date": 1405461463, "body": "<p>Just to add some data to the mix - I created one more type from the ones you had:</p>\n\n<pre><code>struct RefAndTwoInt32Wrappers2\n{\n    string text;\n    TwoInt32Wrappers z;\n}\n</code></pre>\n\n<p>The program writes out:</p>\n\n<pre><code>RefAndTwoInt32Wrappers2: 16\n</code></pre>\n\n<p>So it looks like the <code>TwoInt32Wrappers</code> struct aligns properly in the new <code>RefAndTwoInt32Wrappers2</code> struct.</p>\n", "answer_id": 24768890, "tags": [], "down_vote_count": 1, "last_activity_date": 1405461463, "comments": [{"body": "Are you running 64 bit? Alignment is fine in 32 bit", "edited": false, "comment_id": 38473329, "creation_date": 1405540333, "score": 0, "owner": {"display_name": "BenAdams", "reputation": 792, "user_id": 1109918, "user_type": "registered"}}, {"body": "My findings are the same as everyone else for the various environments.", "edited": false, "reply_to_user": {"display_name": "BenAdams", "reputation": 792, "user_id": 1109918, "user_type": "registered"}, "comment_id": 38476009, "creation_date": 1405545012, "score": 0, "owner": {"display_name": "Jesse C. Slicer", "reputation": 13445, "user_id": 3312, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1405461463, "comment_count": 2, "score": 2, "owner": {"display_name": "Jesse C. Slicer", "reputation": 13445, "user_id": 3312, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 3}], "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 24742325}, {"body": "<p>I want my <a href=\"http://nodatime.org\">Noda Time</a> continuous build - hosted by a private TeamCity server in my home - to fetch the Mercurial log as an XML file. The source code is <a href=\"https://code.google.com/p/noda-time/source/checkout\">hosted on Google Code</a>. This is so that I can use it for <a href=\"http://nodatime.org/benchmarks\">benchmark browsing on the public web site</a>. It's all very much a work in progress, but it's basically starting to come together.</p>\n\n<p>I'd expected that fetching the log as part of the TeamCity build would be simple. After all, it's already fetched the source in order to perform the build. From a normal repository directory, I can just run:</p>\n\n<pre><code>hg log --style xml &gt; hg-log.xml\n</code></pre>\n\n<p>Unfortunately, as far as I can see, the \"checkout\" directory in Team City isn't an actual Mercurial repository - it's a copy of just the contents of the repository at the appropriate commit. That means I can't run <code>hg log</code> in that directory... or any other directory that I've been able to find so far. None of the <a href=\"http://confluence.jetbrains.com/display/TCD8/Predefined+Build+Parameters\">predefined build parameters</a> seem to have a local repository path, although I'm <em>hoping</em> I've missed one.</p>\n\n<p>My current workaround is to fetch the source <em>again</em> as part of the build (just the default branch, of course) and then use that to get the log. It works, but it feels insanely wasteful.</p>\n\n<p>It's not clear to me how or where TeamCity actually performs the source checkout - I'm really hoping there's a local repo <em>somewhere</em> that I can use to get the log.</p>\n", "is_answered": true, "delete_vote_count": 0, "tags": ["mercurial", "teamcity"], "question_id": 22722823, "reopen_vote_count": 0, "down_vote_count": 1, "view_count": 1770, "answers": [{"body": "<p>Do you have your agent checkout settings set to \"<strong>on agent</strong>\"?  </p>\n\n<p>By default, the server does a checkout and then sends the bits to the client. </p>\n\n<p>You can find the setting here:</p>\n\n<p><img src=\"https://dl.dropboxusercontent.com/u/23788554/Screenshot%202014-03-28%2021.56.46.png\" alt=\"image\"></p>\n", "is_accepted": true, "tags": [], "answer_id": 22722974, "down_vote_count": 1, "last_activity_date": 1398353970, "comments": [{"body": "I&#39;m trying to find that setting now (as a Twitter user has pointed me at it). In this case the server and the agent are the same machine, but I guess there&#39;s a <i>logical</i> distinction anyway :)", "edited": false, "comment_id": 34629410, "creation_date": 1396039946, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "It looks like this will be the right answer - when I&#39;ve worked out how to get the agent-side hg configured properly. Apparently it&#39;s &quot;detected&quot; that just using <code>hg</code> will work, even though I&#39;ve been trying to explicitly configure it with an executable :(", "edited": false, "comment_id": 34630133, "creation_date": 1396041436, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Hooray - this seems to have worked :)", "edited": false, "comment_id": 34630706, "creation_date": 1396042572, "score": 7, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1396039899, "comment_count": 3, "score": 19, "owner": {"display_name": "Lucas Meijer", "reputation": 1444, "user_id": 47901, "user_type": "registered", "accept_rate": 79}, "last_editor": {"display_name": "bigmike7801", "reputation": 1324, "user_id": 647621, "user_type": "registered", "accept_rate": 75}, "last_edit_date": 1398353970, "up_vote_count": 20}, {"body": "<p>Tell TeamCity to check out on the agent. That way, your build agents will run <code>hg</code>, and the checkout directory on the agent will be a repo you can run <code>hg log --style xml &gt; hg-log.xml</code> on.</p>\n", "answer_id": 22722998, "tags": [], "down_vote_count": 0, "last_activity_date": 1396039988, "creation_date": 1396039988, "comment_count": 0, "score": 5, "owner": {"display_name": "Bojan Rajkovic", "reputation": 1391, "user_id": 219192, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 5}, {"body": "<p>Try checking out as 'Automatically on agent'. This should make the checkout directory an actual repos. </p>\n", "answer_id": 22723015, "tags": [], "down_vote_count": 0, "last_activity_date": 1396040050, "creation_date": 1396040050, "comment_count": 0, "score": 5, "owner": {"display_name": "mattyB", "reputation": 838, "user_id": 378973, "user_type": "registered", "accept_rate": 40}, "is_accepted": false, "up_vote_count": 5}], "last_activity_date": 1398353970, "comment_count": 0, "score": 25, "answer_count": 3, "accepted_answer_id": 22722974, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "title": "How can I efficiently fetch a Mercurial change log in TeamCity?", "close_vote_count": 0, "creation_date": 1396039330, "favorite_count": 2, "up_vote_count": 26}, {"last_activity_date": 1395248750, "creation_date": 1365798522, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1382475415, "favorite_count": 6, "view_count": 4626, "delete_vote_count": 0, "title": "How can I perform a culture-sensitive \"starts-with\" operation from the middle of a string?", "comments": [{"body": "While I understand your desire to avoid the performance hit of creating a substring, it might be best to do so, but earlier in the game by shifting everything to a chosen unicode normalization form FIRST and then knowing you can walk &quot;point-by-point&quot;. Probably D-form.", "edited": false, "comment_id": 22781298, "creation_date": 1365799355, "score": 0, "owner": {"display_name": "IDisposable", "reputation": 1337, "user_id": 2076, "user_type": "registered"}}, {"body": "@IDisposable: Yes, I did wonder about that. Obviously I can normalize the month names themselves beforehand. At least I can do the normalization just once. I wonder if the normalization procedure checks whether anything needs to be done first. I don&#39;t have much experience in normalization - definitely one avenue to look into.", "edited": false, "reply_to_user": {"display_name": "IDisposable", "reputation": 1337, "user_id": 2076, "user_type": "registered"}, "comment_id": 22781665, "creation_date": 1365800184, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "If your <code>text</code> isn&#39;t too long, you could do <code>if (compareInfo.IndexOf(text, candidate, position, options) == position)</code>. <a href=\"http://msdn.microsoft.com/en-us/library/ms143031.aspx\" rel=\"nofollow\">msdn.microsoft.com/en-us/library/ms143031.aspx</a>  But if <code>text</code> is very long that&#39;s going to waste a lot of time searching beyond where it needs to.", "edited": false, "comment_id": 22782551, "creation_date": 1365802304, "score": 1, "owner": {"display_name": "Jim Mischel", "reputation": 78866, "user_id": 56778, "user_type": "registered", "accept_rate": 93}}, {"body": "@JimMischel: It&#39;s unlikely that the text will be very long, but it <i>could</i> be... and it also wouldn&#39;t tell me how far to move the cursor.", "edited": false, "reply_to_user": {"display_name": "Jim Mischel", "reputation": 78866, "user_id": 56778, "user_type": "registered", "accept_rate": 93}, "comment_id": 22784004, "creation_date": 1365806430, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet: Normalization for sure. But I wonder -- since strings are immutable, doesn&#39;t <code>string.Substring</code> share the same backing data as the parent? And if it does, how bad can just the one allocation for the <code>string</code> itself be? OTOH, if you are parsing millions of dates...", "edited": false, "comment_id": 22784113, "creation_date": 1365806791, "score": 0, "owner": {"display_name": "Jon", "reputation": 231023, "user_id": 50079, "user_type": "registered", "accept_rate": 67}}, {"body": "@Jon: No, it doesn&#39;t - it used to in Java, but it doesn&#39;t any more, and it&#39;s never done so in .NET. To be honest, I haven&#39;t benchmarked this particular tweak - but I know that our parsing routines are pretty sensitive. I&#39;ll try it over the weekend if I can find time. I should probably do this not just for day/month matching, but also any text literals included in the pattern, which would potentially mean rather more substrings. Given that the BCL doesn&#39;t do this right either, I&#39;m <i>really</i> tempted to just chalk this up to getting the 99.999% case right...", "edited": false, "reply_to_user": {"display_name": "Jon", "reputation": 231023, "user_id": 50079, "user_type": "registered", "accept_rate": 67}, "comment_id": 22784177, "creation_date": 1365806984, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Just bypass using the <code>String</code> class <b>at all</b> in this instance and use a <code>Char[]</code> directly. You&#39;ll end up writing more code, but that&#39;s what happens when you want high performance... or maybe you should be programming in C++/CLI ;-)", "edited": false, "comment_id": 22784453, "creation_date": 1365807910, "score": 1, "owner": {"display_name": "Chris Nash", "reputation": 733, "user_id": 847235, "user_type": "registered", "accept_rate": 100}}, {"body": "@ChrisNash: Well I start off with two strings, so I can&#39;t avoid them being created. But the main problem with that idea is that then I&#39;ve got to write all the comparison code myself, which I&#39;m unlikely to do correctly.", "edited": false, "reply_to_user": {"display_name": "Chris Nash", "reputation": 733, "user_id": 847235, "user_type": "registered", "accept_rate": 100}, "comment_id": 22789294, "creation_date": 1365835527, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Will <a href=\"http://msdn.microsoft.com/en-gb/library/system.globalization.compareoptions.aspx\" rel=\"nofollow\">CompareOptions.IgnoreNonSpace</a> not take care of this automagically for you? It looks to me (from the docco, not in a position to test from this iPad sorry!) as though this might be a (<i>the</i>?) use-case for that option. &quot;<i>Indicates that the string comparison must ignore nonspacing combining characters, such as diacritics.</i>&quot;", "edited": false, "comment_id": 22791800, "creation_date": 1365847394, "score": 1, "owner": {"display_name": "Sepster", "reputation": 3636, "user_id": 1554982, "user_type": "registered", "accept_rate": 40}}, {"body": "Is it a problem that <code>string.Substring</code> doesn&#39;t take into account characters that are from two code points? If it is, then you may have to resort to <code>System.Globalization.StringInfo</code> or something.", "edited": false, "comment_id": 22800337, "creation_date": 1365879539, "score": 0, "owner": {"display_name": "Chris Nash", "reputation": 733, "user_id": 847235, "user_type": "registered", "accept_rate": 100}}], "comment_count": 10, "score": 93, "body": "<p>I have a requirement which is relatively obscure, but it feels like it <em>should</em> be possible using the BCL.</p>\n\n<p>For context, I'm parsing a date/time string in <a href=\"http://noda-time.googlecode.com\">Noda Time</a>. I maintain a logical cursor for my position within the input string. So while the complete string may be \"3 January 2013\" the logical cursor may be at the 'J'.</p>\n\n<p>Now, I need to parse the month name, comparing it against all the known month names for the culture:</p>\n\n<ul>\n<li>Culture-sensitively</li>\n<li>Case-insensitively</li>\n<li>Just from the point of the cursor (not later; I want to see if the cursor is \"looking at\" the candidate month name)</li>\n<li>Quickly</li>\n<li>... and I need to know afterwards how many characters were used</li>\n</ul>\n\n<p>The <a href=\"https://code.google.com/p/noda-time/source/browse/src/NodaTime/Text/ValueCursor.cs?r=40f44c857d94f450372d768a8cef835c3ed1ed4f#60\">current code</a> to do this generally works, using <a href=\"http://msdn.microsoft.com/en-gb/library/f04h1e5y.aspx\"><code>CompareInfo.Compare</code></a>. It's effectively like this (just for the matching part - there's more code in the real thing, but it's not relevant to the match):</p>\n\n<pre><code>internal bool MatchCaseInsensitive(string candidate, CompareInfo compareInfo)\n{\n    return compareInfo.Compare(text, position, candidate.Length,\n                               candidate, 0, candidate.Length, \n                               CompareOptions.IgnoreCase) == 0;\n}\n</code></pre>\n\n<p>However, that relies on the candidate and the region we compare being the same length. Fine most of the time, but <em>not</em> fine in some special cases. Suppose we have something like:</p>\n\n<pre><code>// U+00E9 is a single code point for e-acute\nvar text = \"x b\\u00e9d y\";\nint position = 2;\n// e followed by U+0301 still means e-acute, but from two code points\nvar candidate = \"be\\u0301d\";\n</code></pre>\n\n<p>Now my comparison will fail. I could use <a href=\"http://msdn.microsoft.com/en-gb/library/8hksxky5.aspx\"><code>IsPrefix</code></a>:</p>\n\n<pre><code>if (compareInfo.IsPrefix(text.Substring(position), candidate,\n                         CompareOptions.IgnoreCase))\n</code></pre>\n\n<p>but:</p>\n\n<ul>\n<li>That requires me to create a substring, which I'd really rather avoid. (I'm viewing Noda Time as effectively a system library; parsing performance may well be important to some clients.)</li>\n<li>It doesn't tell me how far to advance the cursor afterwards</li>\n</ul>\n\n<p>In reality, I strongly suspect this won't come up very often... but I'd really <em>like</em> to do the right thing here. I'd also really like to be able to do it without becoming a Unicode expert or implementing it myself :)</p>\n\n<p>(Raised as <a href=\"https://code.google.com/p/noda-time/issues/detail?id=210\">bug 210</a> in Noda Time, in case anyone wants to follow any eventual conclusion.)</p>\n\n<p>I like the idea of normalization. I need to check that in detail for a) correctness and b) performance. Assuming I <em>can</em> make it work correctly, I'm still not sure how whether it would be worth changing over all - it's the sort of thing which will probably <em>never</em> actually come up in real life, but could hurt the performance of all my users :(</p>\n\n<p>I've also checked the BCL - which doesn't appear to handle this properly either. Sample code:</p>\n\n<pre><code>using System;\nusing System.Globalization;\n\nclass Test\n{\n    static void Main()\n    {\n        var culture = (CultureInfo) CultureInfo.InvariantCulture.Clone();\n        var months = culture.DateTimeFormat.AbbreviatedMonthNames;\n        months[10] = \"be\\u0301d\";\n        culture.DateTimeFormat.AbbreviatedMonthNames = months;\n\n        var text = \"25 b\\u00e9d 2013\";\n        var pattern = \"dd MMM yyyy\";\n        DateTime result;\n        if (DateTime.TryParseExact(text, pattern, culture,\n                                   DateTimeStyles.None, out result))\n        {\n            Console.WriteLine(\"Parsed! Result={0}\", result);\n        }\n        else\n        {\n            Console.WriteLine(\"Didn't parse\");\n        }\n    }\n}\n</code></pre>\n\n<p>Changing the custom month name to just \"bed\" with a text value of \"bEd\" parses fine.</p>\n\n<p>Okay, a few more data points:</p>\n\n<ul>\n<li><p>The cost of using <code>Substring</code> and <code>IsPrefix</code> is significant but not horrible. On a sample of \"Friday April 12 2013  20:28:42\" on my development laptop, it changes the number of parse operations I can execute in a second from about 460K to about 400K. I'd rather avoid that slowdown if possible, but it's not <em>too</em> bad.</p></li>\n<li><p>Normalization is less feasible than I thought - because it's not available in Portable Class Libraries. I could potentially use it <em>just</em> for non-PCL builds, allowing the PCL builds to be a little less correct. The performance hit of testing for normalization (<code>string.IsNormalized</code>) takes performance down to about 445K calls per second, which I can live with. I'm still not sure it does everything I need it to - for example, a month name containing \"\u00df\" should match \"ss\" in many cultures, I believe... and normalizing doesn't do that.</p></li>\n</ul>\n", "is_answered": true, "up_vote_count": 93, "tags": [".net", "string", "unicode"], "reopen_vote_count": 0, "answer_count": 3, "answers": [{"body": "<p>I'll consider the problem of many&lt;->one/many casemappings first and separately from handling different Normalization forms.</p>\n\n<p>For example:</p>\n\n<pre><code>x hei\u00dfe y\n  ^--- cursor\n</code></pre>\n\n<p>Matches <code>heisse</code> but then moves cursor 1 too much. And:</p>\n\n<pre><code>x heisse y\n  ^--- cursor\n</code></pre>\n\n<p>Matches <code>hei\u00dfe</code> but then moves cursor 1 too less.</p>\n\n<p>This will apply to any character that doesn't have a simple one-to-one mapping.</p>\n\n<p>You would need to know the length of the substring that was actually matched. But <code>Compare</code>, <code>IndexOf</code> ..etc\nthrow that information away. It could be possible with regular expressions but the implementation doesn't do full case folding and so doesn't match\n<code>\u00df</code> to <code>ss/SS</code> in case-insensitive mode even though <code>.Compare</code> and <code>.IndexOf</code> do. And it would probably be costly to create new regexes\nfor every candidate anyway.</p>\n\n<p>The simplest solution to this is to just internally store strings in case folded form and do binary comparisons with case folded candidates. Then you can\nmove the cursor correctly with just <code>.Length</code> since the cursor is for internal representation. You also get most of the lost performance\nback from not having to use <code>CompareOptions.IgnoreCase</code>.</p>\n\n<p>Unfortunately there is no case fold function built-in and the poor man's case folding doesn't work either because there is no full case mapping - the <code>ToUpper</code> method\ndoesn't turn <code>\u00df</code> into <code>SS</code>. </p>\n\n<p>For example this works in Java (and even in Javascript), given string that is in Normal Form C:</p>\n\n<pre><code>//Poor man's case folding.\n//There are some edge cases where this doesn't work\npublic static String toCaseFold( String input, Locale cultureInfo ) {\n    return input.toUpperCase(cultureInfo).toLowerCase(cultureInfo);\n}\n</code></pre>\n\n<p>Fun to note that Java's ignore case comparison doesn't do full case folding like C#'s <code>CompareOptions.IgnoreCase</code>. So they are opposite in this regard: Java\ndoes full casemapping, but simple case folding - C# does simple casemapping, but full case folding. </p>\n\n<p>So it's likely that you need a 3rd party library to case fold your strings before using them. </p>\n\n<hr>\n\n<p>Before doing anything you have to be sure that your strings are in normal form C. You can use this preliminary quick check optimized for Latin script:</p>\n\n<pre><code>public static bool MaybeRequiresNormalizationToFormC(string input)\n{\n    if( input == null ) throw new ArgumentNullException(\"input\");\n\n    int len = input.Length;\n    for (int i = 0; i &lt; len; ++i)\n    {\n        if (input[i] &gt; 0x2FF)\n        {\n            return true;\n        }\n    }\n\n    return false;\n}\n</code></pre>\n\n<p>This gives false positives but not false negatives, I don't expect it to slow down 460k parses/s at all when using Latin script characters even though it needs to be performed on every string.\nWith a false positive you would use <code>IsNormalized</code> to get a true negative/positive and only after that normalize if necessary.</p>\n\n<p><hr>\nSo in conclusion, the processing is to ensure normal form C first, then case fold. Do binary comparisons with the processed strings and move cursor as you are moving it currently.</p>\n", "is_accepted": false, "tags": [], "answer_id": 16001302, "down_vote_count": 0, "last_activity_date": 1366022300, "comments": [{"body": "Thanks for this - I&#39;ll need to look into normalization form C in more detail, but these are great pointers. I think I can live with the &quot;it doesn&#39;t work quite correctly under the PCL&quot; (which doesn&#39;t provide normalization). Using a 3rd party library for case-folding would be overkill here - we currently have no 3rd party dependencies, and introducing one just for a corner case that even the BCL doesn&#39;t handle would be a pain. Presumably case-folding is culture-sensitive, btw (e.g. Turkish)?", "edited": false, "comment_id": 22835032, "creation_date": 1366016313, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet yes, Turkic deserves its own mode in the casefold mappings :P See the format section in the header of <a href=\"http://www.unicode.org/Public/UNIDATA/CaseFolding.txt\" rel=\"nofollow\">CaseFolding.txt</a>", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 22837363, "creation_date": 1366021070, "score": 2, "owner": {"display_name": "Esailija", "reputation": 86562, "user_id": 995876, "user_type": "registered"}}, {"body": "The bounty is awarded. I&#39;m consider that maybe we can find a way takes the approaches in both our answers and make it more helpful to Mr. Skeet ..", "edited": false, "comment_id": 23188442, "creation_date": 1366893431, "score": 0, "owner": {"display_name": "Ken Kin", "reputation": 1783, "user_id": 927012, "user_type": "registered", "accept_rate": 88}}], "awarded_bounty_users": [{"display_name": "Ken Kin", "reputation": 1783, "user_id": 927012, "user_type": "registered", "accept_rate": 88}], "awarded_bounty_amount": 100, "comment_count": 3, "score": 40, "owner": {"display_name": "Esailija", "reputation": 86562, "user_id": 995876, "user_type": "registered"}, "last_editor": {"display_name": "Esailija", "reputation": 86562, "user_id": 995876, "user_type": "registered"}, "last_edit_date": 1366022300, "creation_date": 1365956574, "up_vote_count": 40}, {"body": "<p>See if this meets the requirement .. :</p>\n\n<pre><code>public static partial class GlobalizationExtensions {\n    public static int IsPrefix(\n        this CompareInfo compareInfo,\n        String source, String prefix, int startIndex, CompareOptions options\n        ) {\n        if(compareInfo.IndexOf(source, prefix, startIndex, options)!=startIndex)\n            return ~0;\n        else\n            // source is started with prefix\n            // therefore the loop must exit\n            for(int length2=0, length1=prefix.Length; ; )\n                if(0==compareInfo.Compare(\n                        prefix, 0, length1, \n                        source, startIndex, ++length2, options))\n                    return length2;\n    }\n}\n</code></pre>\n\n<p><code>compareInfo.Compare</code> only performs once <code>source</code> started with <code>prefix</code>; if it didn't, then <code>IsPrefix</code> returns <code>-1</code>; otherwise, the length of characters used in <code>source</code>. </p>\n\n<p>However, I have no idea except increment <code>length2</code> by <code>1</code> with the following case: </p>\n\n<pre><code>var candidate=\"\u00dfss\u00df\\u00E9\\u0302\";\nvar text=\"abcd ss\u00dfss\\u0065\\u0301\\u0302sss\";\n\nvar count=\n    culture.CompareInfo.IsPrefix(text, candidate, 5, CompareOptions.IgnoreCase);\n</code></pre>\n\n<hr>\n\n<p><strong>update</strong>: </p>\n\n<p>I tried to improve a little bit of perf., but it isn't proved whether there's bug in the following code: </p>\n\n<pre><code>public static partial class GlobalizationExtensions {\n    public static int Compare(\n        this CompareInfo compareInfo,\n        String source, String prefix, int startIndex, ref int length2, \n        CompareOptions options) {\n        int length1=prefix.Length, v2, v1;\n\n        if(0==(v1=compareInfo.Compare(\n            prefix, 0, length1, source, startIndex, length2, options))\n            ) {\n            return 0;\n        }\n        else {\n            if(0==(v2=compareInfo.Compare(\n                prefix, 0, length1, source, startIndex, 1+length2, options))\n                ) {\n                ++length2;\n                return 0;\n            }\n            else {\n                if(v1&lt;0||v2&lt;0) {\n                    length2-=2;\n                    return -1;\n                }\n                else {\n                    length2+=2;\n                    return 1;\n                }\n            }\n        }\n    }\n\n    public static int IsPrefix(\n        this CompareInfo compareInfo,\n        String source, String prefix, int startIndex, CompareOptions options\n        ) {\n        if(compareInfo.IndexOf(source, prefix, startIndex, options)\n                !=startIndex)\n            return ~0;\n        else\n            for(int length2=\n                    Math.Min(prefix.Length, source.Length-(1+startIndex)); ; )\n                if(0==compareInfo.Compare(\n                        source, prefix, startIndex, ref length2, options))\n                    return length2;\n    }\n}\n</code></pre>\n\n<p>I tested with the particular case, and the comparision down to about 3. </p>\n", "is_accepted": false, "tags": [], "answer_id": 16062528, "down_vote_count": 0, "last_activity_date": 1366899894, "comments": [{"body": "@JonSkeet: I&#39;ve revised.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 22946461, "creation_date": 1366263664, "score": 0, "owner": {"display_name": "Ken Kin", "reputation": 1783, "user_id": 927012, "user_type": "registered", "accept_rate": 88}}, {"body": "I&#39;d <i>really</i> rather not have to loop like this. Admittedly with the early out it will only need to loop if it&#39;s found something, but I&#39;d still rather not have to make 8 string comparisons just to match &quot;February&quot; for example. It feels like there must be a better way. Also, the initial <code>IndexOf</code> operation has to look through the entire string from the starting position, which would be a performance pain if the input string is long.", "edited": false, "comment_id": 22946523, "creation_date": 1366263859, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet: Thank you. Maybe there&#39;s something can be added to detect if the loop can be decreased. I&#39;ll think about that.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 22946671, "creation_date": 1366264290, "score": 0, "owner": {"display_name": "Ken Kin", "reputation": 1783, "user_id": 927012, "user_type": "registered", "accept_rate": 88}}, {"body": "@JonSkeet: Would you consider to use reflection? Since I traced into the methods, they fall into invoking native methods not far.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 22948406, "creation_date": 1366268554, "score": 0, "owner": {"display_name": "Ken Kin", "reputation": 1783, "user_id": 927012, "user_type": "registered", "accept_rate": 88}}, {"body": "No, that would be way too brittle - and it would also fail in low-trust environments.", "edited": false, "comment_id": 22948548, "creation_date": 1366268868, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet: Then I almost cannot figure out a way to improve with the particular case like the example in the answer. Maybe call it after check current culture first, or only when other parse approaches were failed. The thinking of <b><i>invoke a rare used method when a rare case occurs</i></b>.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 22948858, "creation_date": 1366269561, "score": 0, "owner": {"display_name": "Ken Kin", "reputation": 1783, "user_id": 927012, "user_type": "registered", "accept_rate": 88}}, {"body": "Sure. I&#39;d like to think there&#39;s a way of making the &quot;it&#39;s not present at all&quot; case faster though. The annoying thing is that as you say, I&#39;m sure there are native methods which do exactly what I need...", "edited": false, "comment_id": 22949225, "creation_date": 1366270306, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet: Sounds like even if porting the methods from BCL would not be better, that would cause you have to maintain the code which manipulates unicode ..", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 22949648, "creation_date": 1366271211, "score": 0, "owner": {"display_name": "Ken Kin", "reputation": 1783, "user_id": 927012, "user_type": "registered", "accept_rate": 88}}, {"body": "Indeed. Noda Time doesn&#39;t want to get into the business of Unicode details :)", "edited": false, "comment_id": 22950641, "creation_date": 1366273160, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "A way you could improve it is to know the language the months and days are in and maintain a list whether that language requires full case folding. Then you don&#39;t have to do the O(n&#178;) loop for example when you know the strings passed in will be English. But it is not unlike maintaining case fold mappings in the first place for sweet binary/ordinal comparisons. But you have to wonder if users even expect this seeing as even ToUpper/ToLower doesn&#39;t work.", "edited": false, "comment_id": 22955544, "creation_date": 1366281965, "score": 0, "owner": {"display_name": "Esailija", "reputation": 86562, "user_id": 995876, "user_type": "registered"}}, {"body": "I have solved a similar problem once like this (search-string highlighting in HTML). I did it similarly. You can tune the loop and search strategy in a way that makes it completed very quickly by checking the likely cases first. The nice thing about this is that it seems to be totally correct and no Unicode details leak into your code.", "edited": false, "comment_id": 22956089, "creation_date": 1366282954, "score": 1, "owner": {"display_name": "usr", "reputation": 103603, "user_id": 122718, "user_type": "registered", "accept_rate": 89}}, {"body": "@Esailija: Thank you. I&#39;ve seen implementation detail of the methods, almost directly fall into invoking native methods after some argument check. An idea that I thought of as your suggestion is like <code>String.Intern</code>, however, I not yet think out how to.", "edited": false, "reply_to_user": {"display_name": "Esailija", "reputation": 86562, "user_id": 995876, "user_type": "registered"}, "comment_id": 22956773, "creation_date": 1366284113, "score": 0, "owner": {"display_name": "Ken Kin", "reputation": 1783, "user_id": 927012, "user_type": "registered", "accept_rate": 88}}, {"body": "@usr can you give specifics? How would you be able to tell that there are complex (not one-to-one) mappings without knowing about Unicode?", "edited": false, "reply_to_user": {"display_name": "usr", "reputation": 103603, "user_id": 122718, "user_type": "registered", "accept_rate": 89}, "comment_id": 22956925, "creation_date": 1366284355, "score": 0, "owner": {"display_name": "Esailija", "reputation": 86562, "user_id": 995876, "user_type": "registered"}}, {"body": "Does this give exception to you (when using the new code): <code>int len = CultureInfo.GetCultureInfo(&quot;de&quot;).CompareInfo.IsPrefix(&quot;x &#223;he&#223;ie&#223; y&quot;, &quot;sshessiess&quot;, 2, CompareOptions.IgnoreCase);</code>", "edited": false, "comment_id": 23190863, "creation_date": 1366897169, "score": 0, "owner": {"display_name": "Esailija", "reputation": 86562, "user_id": 995876, "user_type": "registered"}}, {"body": "@Esailija: Thank you for this, and I&#39;ve revised, hope it&#39;s fixed for all the cases ..", "edited": false, "reply_to_user": {"display_name": "Esailija", "reputation": 86562, "user_id": 995876, "user_type": "registered"}, "comment_id": 23192770, "creation_date": 1366899936, "score": 0, "owner": {"display_name": "Ken Kin", "reputation": 1783, "user_id": 927012, "user_type": "registered", "accept_rate": 88}}], "creation_date": 1366208291, "comment_count": 15, "score": 21, "owner": {"display_name": "Ken Kin", "reputation": 1783, "user_id": 927012, "user_type": "registered", "accept_rate": 88}, "last_editor": {"display_name": "Ken Kin", "reputation": 1783, "user_id": 927012, "user_type": "registered", "accept_rate": 88}, "last_edit_date": 1366899894, "up_vote_count": 21}, {"body": "<p>This is actually possible without normalization and without using <code>IsPrefix</code>.</p>\n\n<p>We need to compare the same number of <strong>text elements</strong> as opposed to the same number of characters, but still return the number of matching characters.</p>\n\n<p>I've created a copy of the <code>MatchCaseInsensitive</code> method from <a href=\"https://code.google.com/p/noda-time/source/browse/src/NodaTime/Text/ValueCursor.cs?r=40f44c857d94f450372d768a8cef835c3ed1ed4f#60\">ValueCursor.cs in Noda Time</a> and modified it slightly so that it can be used in a static context:</p>\n\n<pre><code>// Noda time code from MatchCaseInsensitive in ValueCursor.cs\nstatic int IsMatch_Original(string source, int index, string match, CompareInfo compareInfo)\n{\n    unchecked\n    {\n        if (match.Length &gt; source.Length - index)\n        {\n            return 0;\n        }\n\n        // TODO(V1.2): This will fail if the length in the input string is different to the length in the\n        // match string for culture-specific reasons. It's not clear how to handle that...\n        if (compareInfo.Compare(source, index, match.Length, match, 0, match.Length, CompareOptions.IgnoreCase) == 0)\n        {\n            return match.Length;\n        }\n\n        return 0;\n    }\n}\n</code></pre>\n\n<p>(Just included for reference, it is the code that won't compare properly as you know)</p>\n\n<p>The following variant of that method uses <a href=\"http://msdn.microsoft.com/en-us/library/system.globalization.stringinfo.getnexttextelement%28v=vs.110%29.aspx\">StringInfo.GetNextTextElement</a> which is provided by the framework. The idea is to compare text element by text element to find a match and if found return the actual number of matching characters in the source string:</p>\n\n<pre><code>// Using StringInfo.GetNextTextElement to match by text elements instead of characters\nstatic int IsMatch_New(string source, int index, string match, CompareInfo compareInfo)\n{\n    int sourceIndex = index;\n    int matchIndex = 0;\n\n    // Loop until we reach the end of source or match\n    while (sourceIndex &lt; source.Length &amp;&amp; matchIndex &lt; match.Length)\n    {\n        // Get text elements at the current positions of source and match\n        // Normally that will be just one character but may be more in case of Unicode combining characters\n        string sourceElem = StringInfo.GetNextTextElement(source, sourceIndex);\n        string matchElem = StringInfo.GetNextTextElement(match, matchIndex);\n\n        // Compare the current elements.\n        if (compareInfo.Compare(sourceElem, matchElem, CompareOptions.IgnoreCase) != 0)\n        {\n            return 0; // No match\n        }\n\n        // Advance in source and match (by number of characters)\n        sourceIndex += sourceElem.Length;\n        matchIndex += matchElem.Length;\n    }\n\n    // Check if we reached end of source and not end of match\n    if (matchIndex != match.Length)\n    {\n        return 0; // No match\n    }\n\n    // Found match. Return number of matching characters from source.\n    return sourceIndex - index;\n}\n</code></pre>\n\n<p>That method works just fine at least according to my test cases (which basically just test a couple of variants of the strings you've provided: <code>\"b\\u00e9d\"</code> and <code>\"be\\u0301d\"</code>).</p>\n\n<p>However, the <a href=\"http://msdn.microsoft.com/en-us/library/system.globalization.stringinfo.getnexttextelement%28v=vs.110%29.aspx\">GetNextTextElement</a> method creates a substring for each text element so this implementation requires alot of substring comparisons - which will have an impact on performance.</p>\n\n<p>So, I created another variant that does not use <a href=\"http://msdn.microsoft.com/en-us/library/system.globalization.stringinfo.getnexttextelement%28v=vs.110%29.aspx\">GetNextTextElement</a> but instead skips over Unicode combining characters to find the actual <em>match length</em> in characters:</p>\n\n<pre><code>// This should be faster\nstatic int IsMatch_Faster(string source, int index, string match, CompareInfo compareInfo)\n{\n    int sourceLength = source.Length;\n    int matchLength = match.Length;\n    int sourceIndex = index;\n    int matchIndex = 0;\n\n    // Loop until we reach the end of source or match\n    while (sourceIndex &lt; sourceLength &amp;&amp; matchIndex &lt; matchLength)\n    {\n        sourceIndex += GetTextElemLen(source, sourceIndex, sourceLength);\n        matchIndex += GetTextElemLen(match, matchIndex, matchLength);\n    }\n\n    // Check if we reached end of source and not end of match\n    if (matchIndex != matchLength)\n    {\n        return 0; // No match\n    }\n\n    // Check if we've found a match\n    if (compareInfo.Compare(source, index, sourceIndex - index, match, 0, matchIndex, CompareOptions.IgnoreCase) != 0)\n    {\n        return 0; // No match\n    }\n\n    // Found match. Return number of matching characters from source.\n    return sourceIndex - index;\n}\n</code></pre>\n\n<p>That method uses the following two helpers:</p>\n\n<pre><code>static int GetTextElemLen(string str, int index, int strLen)\n{\n    bool stop = false;\n    int elemLen;\n\n    for (elemLen = 0; index &lt; strLen &amp;&amp; !stop; ++elemLen, ++index)\n    {\n        stop = !IsCombiningCharacter(str, index);\n    }\n\n    return elemLen;\n}\n\nstatic bool IsCombiningCharacter(string str, int index)\n{\n    switch (CharUnicodeInfo.GetUnicodeCategory(str, index))\n    {\n        case UnicodeCategory.NonSpacingMark:\n        case UnicodeCategory.SpacingCombiningMark:\n        case UnicodeCategory.EnclosingMark:\n            return true;\n\n        default:\n            return false;\n    }\n}\n</code></pre>\n\n<p>I haven't done any bench marking, so I don't really know whether the faster method is actually faster. Nor have I done any extended testing.</p>\n\n<p>But this should answer your question on how to perform cultural sensitive substring matching for strings that may include Unicode combining characters.</p>\n\n<p>These are the test cases I've used:</p>\n\n<pre><code>static Tuple&lt;string, int, string, int&gt;[] tests = new []\n{\n    Tuple.Create(\"x b\\u00e9d y\", 2, \"be\\u0301d\", 3),\n    Tuple.Create(\"x be\\u0301d y\", 2, \"b\\u00e9d\", 4),\n\n    Tuple.Create(\"x b\\u00e9d\", 2, \"be\\u0301d\", 3),\n    Tuple.Create(\"x be\\u0301d\", 2, \"b\\u00e9d\", 4),\n\n    Tuple.Create(\"b\\u00e9d y\", 0, \"be\\u0301d\", 3),\n    Tuple.Create(\"be\\u0301d y\", 0, \"b\\u00e9d\", 4),\n\n    Tuple.Create(\"b\\u00e9d\", 0, \"be\\u0301d\", 3),\n    Tuple.Create(\"be\\u0301d\", 0, \"b\\u00e9d\", 4),\n\n    Tuple.Create(\"b\\u00e9\", 0, \"be\\u0301d\", 0),\n    Tuple.Create(\"be\\u0301\", 0, \"b\\u00e9d\", 0),\n};\n</code></pre>\n\n<p>The tuple values are:</p>\n\n<ol>\n<li>The source string (haystack)</li>\n<li>The starting position in source.</li>\n<li>The match string (needle).</li>\n<li>The expected match length.</li>\n</ol>\n\n<p>Running those tests on the three methods yields this result:</p>\n\n<pre><code>Test #0: Orignal=BAD; New=OK; Faster=OK\nTest #1: Orignal=BAD; New=OK; Faster=OK\nTest #2: Orignal=BAD; New=OK; Faster=OK\nTest #3: Orignal=BAD; New=OK; Faster=OK\nTest #4: Orignal=BAD; New=OK; Faster=OK\nTest #5: Orignal=BAD; New=OK; Faster=OK\nTest #6: Orignal=BAD; New=OK; Faster=OK\nTest #7: Orignal=BAD; New=OK; Faster=OK\nTest #8: Orignal=OK; New=OK; Faster=OK\nTest #9: Orignal=OK; New=OK; Faster=OK\n</code></pre>\n\n<p>The last two tests are testing the case when the source string is shorter than the match string. In this case the original (Noda time) method will succeed as well.</p>\n", "is_accepted": false, "tags": [], "answer_id": 22513015, "down_vote_count": 0, "last_activity_date": 1395248750, "comments": [{"body": "Thank you so much for this. I&#39;ll need to look over it in detail to see how well it performs, but it looks like a great starting point. More knowledge of Unicode (in the code itself) than I&#39;d <i>hoped</i> would be required, but if the platform doesn&#39;t do what&#39;s required, there&#39;s not a lot I can do about that :(", "edited": false, "comment_id": 34254723, "creation_date": 1395249165, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet: Glad to be of any help! And yes, substring matching with Unicode support should definately have been included in the framework...", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 34255205, "creation_date": 1395249754, "score": 0, "owner": {"display_name": "M\u00e5rten Wikstr\u00f6m", "reputation": 4504, "user_id": 688958, "user_type": "registered", "accept_rate": 95}}], "creation_date": 1395248420, "comment_count": 2, "score": 7, "owner": {"display_name": "M\u00e5rten Wikstr\u00f6m", "reputation": 4504, "user_id": 688958, "user_type": "registered", "accept_rate": 95}, "last_editor": {"display_name": "M\u00e5rten Wikstr\u00f6m", "reputation": 4504, "user_id": 688958, "user_type": "registered", "accept_rate": 95}, "last_edit_date": 1395248750, "up_vote_count": 7}], "last_editor": {"display_name": "Robert Harvey", "reputation": 117921, "user_id": 102937, "user_type": "moderator", "accept_rate": 93}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 15980310}, {"last_activity_date": 1385262171, "accepted_answer_id": 5520623, "creation_date": 1281346842, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1281354695, "favorite_count": 13, "view_count": 12851, "delete_vote_count": 0, "title": "TextBox.TextChanged event firing twice on Windows Phone 7 emulator", "comments": [{"body": "Just out of interest - if you check inside the event, is the content of the TextBox the same both times the event fires?  I don&#39;t really know why this would happen, as I usually use MVVM and data binding instead of event handling for these things (Silverlight and WPF, not much experience with WP7).", "edited": false, "comment_id": 3582910, "creation_date": 1281347506, "score": 0, "owner": {"display_name": "Rune Jacobsen", "reputation": 4080, "user_id": 2122, "user_type": "registered", "accept_rate": 93}}, {"body": "@Rune: Yes, I see the &quot;after&quot; text twice. So if I press &quot;h&quot; and display <code>textBox1.Text</code> as part of the textBlock1 addition, it will show &quot;h&quot; in both lines.", "edited": false, "reply_to_user": {"display_name": "Rune Jacobsen", "reputation": 4080, "user_id": 2122, "user_type": "registered", "accept_rate": 93}, "comment_id": 3582936, "creation_date": 1281347704, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "You mention the 2 keyboards, could that be a factor? Can you disable one? And maybe can you can check if all members of TextChangedEventArgs are equal in both calls?", "edited": false, "comment_id": 3582969, "creation_date": 1281348074, "score": 1, "owner": {"display_name": "Henk Holterman", "reputation": 167974, "user_id": 60761, "user_type": "registered", "accept_rate": 91}}, {"body": "@Henk: Most of the time I haven&#39;t bothered enabling the physical keyboard... only to see if that would have an effect. <code>TextChangedEventArgs</code> doesn&#39;t really have a lot available - just the <code>OriginalSource</code>, which is always null.", "edited": false, "reply_to_user": {"display_name": "Henk Holterman", "reputation": 167974, "user_id": 60761, "user_type": "registered", "accept_rate": 91}, "comment_id": 3582990, "creation_date": 1281348270, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "What happens when you set e.Handled = true?", "edited": false, "comment_id": 7890223, "creation_date": 1281352387, "score": 0, "owner": {"display_name": "Wim Bokkers", "reputation": 1, "user_id": 414994, "user_type": "registered"}}, {"body": "<code>TextChangedEventArgs</code> doesn&#39;t have a <code>Handled</code> property in WP7 :(", "edited": false, "comment_id": 7890224, "creation_date": 1281352483, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "It does look like a bug, it isn&#39;t related to the keyboard because you can get the same results by simply assigning a new value to the Text property, the TextChanged still fires twice.", "edited": false, "comment_id": 3584020, "creation_date": 1281356157, "score": 3, "owner": {"display_name": "AnthonyWJones", "reputation": 134121, "user_id": 17516, "user_type": "registered", "accept_rate": 79}}, {"body": "Are you typing with two keyboards again?", "edited": false, "comment_id": 3584210, "creation_date": 1281357284, "score": 0, "owner": {"display_name": "Chris S", "reputation": 37309, "user_id": 21574, "user_type": "registered", "accept_rate": 81}}, {"body": "File a bug on WP7.", "edited": false, "comment_id": 3586666, "creation_date": 1281370956, "score": 0, "owner": {"display_name": "Franci Penov", "reputation": 50415, "user_id": 17028, "user_type": "registered", "accept_rate": 100}}, {"body": "Was this fixed in the RTM?", "edited": false, "comment_id": 4041695, "creation_date": 1285656848, "score": 0, "owner": {"display_name": "Richard Szalay", "reputation": 48361, "user_id": 3603, "user_type": "registered", "accept_rate": 84}}, {"body": "@Richard: Ooh, I haven&#39;t checked yet. Will do so today.", "edited": false, "reply_to_user": {"display_name": "Richard Szalay", "reputation": 48361, "user_id": 3603, "user_type": "registered", "accept_rate": 84}, "comment_id": 4041754, "creation_date": 1285657365, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet Hi, Is this bug fixed already at this time? Thanks", "edited": false, "comment_id": 10822394, "creation_date": 1325494980, "score": 0, "owner": {"display_name": "Allan Chua", "reputation": 2200, "user_id": 983476, "user_type": "registered", "accept_rate": 98}}, {"body": "@AllanChua: I haven&#39;t done any Mango development, so it may be fixed there - but I&#39;m not sure.", "edited": false, "reply_to_user": {"display_name": "Allan Chua", "reputation": 2200, "user_id": 983476, "user_type": "registered", "accept_rate": 98}, "comment_id": 10823297, "creation_date": 1325499578, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet uhmm guess i have to check it out :).. by the way thanks for the time sir..", "edited": false, "comment_id": 10834981, "creation_date": 1325550442, "score": 0, "owner": {"display_name": "Allan Chua", "reputation": 2200, "user_id": 983476, "user_type": "registered", "accept_rate": 98}}, {"body": "In my windows phone 8 real device this works fine.", "edited": false, "comment_id": 44848262, "creation_date": 1422648311, "score": 0, "owner": {"display_name": "adrian4aes", "reputation": 120, "user_id": 1491726, "user_type": "registered", "accept_rate": 91}}], "comment_count": 15, "score": 85, "body": "<p>I have a very simple test app just to play around with Windows Phone 7. I've just added a <code>TextBox</code> and a <code>TextBlock</code> to the standard UI template. The only custom code is the following:</p>\n\n<pre><code>public partial class MainPage : PhoneApplicationPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n    }\n\n    private int counter = 0;\n\n    private void TextBoxChanged(object sender, TextChangedEventArgs e)\n    {\n        textBlock1.Text += \"Text changed \" + (counter++) + \"\\r\\n\";\n    }\n}\n</code></pre>\n\n<p>The <code>TextBox.TextChanged</code> event is wired up to <code>TextBoxChanged</code> in the XAML:</p>\n\n<pre><code>&lt;TextBox Height=\"72\" HorizontalAlignment=\"Left\" Margin=\"6,37,0,0\"\n         Name=\"textBox1\" Text=\"\" VerticalAlignment=\"Top\"\n         Width=\"460\" TextChanged=\"TextBoxChanged\" /&gt;\n</code></pre>\n\n<p>However, every time I press a key when running in the emulator (either the on-screen keyboard or the physical one, having pressed Pause to enable the latter) it increments the counter twice, displaying two lines in the <code>TextBlock</code>. Everything I've tried shows that the event is genuinely firing twice, and I've no idea why. I've verified that it's only being subscribed once - if I unsubscribe in the <code>MainPage</code> constructor, nothing happens at all (to the text block) when the text changes.</p>\n\n<p>I've tried the equivalent code in a regular Silverlight app, and it didn't occur there. I don't have a physical phone to reproduce this with at the moment. I haven't found any record of this being a known problem in the Windows Phone 7.</p>\n\n<p>Can anyone explain what I'm doing wrong, or should I report this as a bug?</p>\n\n<p>EDIT: To reduce the possibility of this being down to having two text controls, I've tried removing the <code>TextBlock</code> completely, and changing the TextBoxChanged method to <em>just</em> increment <code>counter</code>. I've then run in the emulator, typed 10 letters and <em>then</em> put a breakpoint on the <code>counter++;</code> line (just to get rid of any possibility that breaking into the debugger is causing issues) - and it shows <code>counter</code> as 20.</p>\n\n<p>EDIT: I've now <a href=\"http://social.msdn.microsoft.com/Forums/en-US/windowsphone7series/thread/cb9b5544-a75e-4c9c-8475-0bf29e0bb5e3\">asked in the Windows Phone 7 forum</a>... we'll see what happens.</p>\n", "is_answered": true, "up_vote_count": 85, "tags": ["silverlight", "events", "textbox", "windows-phone-7"], "reopen_vote_count": 0, "answer_count": 10, "answers": [{"body": "<p>Sure looks like a bug to me, if you're trying to raise an event every time the text changes you could try using a two-way binding instead, unfortunately this won't raise per-key press change events (only when the field loses focus). Here's a workaround if you need one:</p>\n\n<pre><code>        this.textBox1.TextChanged -= this.TextBoxChanged;\n        textBlock1.Text += \"Text changed \" + (counter++) + \"\\r\\n\";\n        this.textBox1.TextChanged += this.TextBoxChanged;\n</code></pre>\n", "answer_id": 3439141, "tags": [], "down_vote_count": 0, "last_activity_date": 1281349883, "comments": [{"body": "I&#39;m not sure that that will work around it - the problem isn&#39;t the event handler firing because of <code>textBlock1.Text</code> changing - I&#39;ll give it a try though. (The workaround <i>I</i> was going to try was to make my eventhandler stateful, remembering the previous text. If it hasn&#39;t actually changed, ignore it :)", "edited": false, "comment_id": 3583220, "creation_date": 1281350301, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1281349883, "comment_count": 1, "score": 0, "owner": {"display_name": "Flatliner DOA", "reputation": 1562, "user_id": 87912, "user_type": "registered", "accept_rate": 89}, "is_accepted": false, "up_vote_count": 0}, {"body": "<p>i'd go for the bug, mainly because if you put the <code>KeyDown</code> and <code>KeyUp</code> events in there, it shows that that they are fired only once (each of them) but the <code>TextBoxChanged</code> event is fired twice</p>\n", "answer_id": 3439627, "tags": [], "down_vote_count": 0, "last_activity_date": 1281354214, "comments": [{"body": "@undertakeror: Thanks for checking out that bit. I&#39;ll ask the same question on the WP7-specific forum and see what the response is...", "edited": false, "reply_to_user": {"display_name": "undertakeror", "reputation": 741, "user_id": 206604, "user_type": "registered"}, "comment_id": 3583751, "creation_date": 1281354356, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "What does TextInput do? These seems like quite a big bug to slip through the unit tests of the WP7, but then it is SL", "edited": false, "comment_id": 3584230, "creation_date": 1281357388, "score": 0, "owner": {"display_name": "Chris S", "reputation": 37309, "user_id": 21574, "user_type": "registered", "accept_rate": 81}}, {"body": "@Chris S: What do you mean by &quot;What does <code>TextInput</code> do?&quot; I&#39;m not familiar with <code>TextInput</code>...", "edited": false, "reply_to_user": {"display_name": "Chris S", "reputation": 37309, "user_id": 21574, "user_type": "registered", "accept_rate": 81}, "comment_id": 3584275, "creation_date": 1281357765, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon ` OnTextInput(TextCompositionEventArgs e)` is the SL way of handling text input instead of KeyDown, as obviously the device may not have a keyboard: &quot;Occurs when a UI element gets text in a device-independent manner&quot; <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.uielement.textinput(v=VS.95).aspx\" rel=\"nofollow\">msdn.microsoft.com/en-us/library/&hellip;</a>", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 3586114, "creation_date": 1281367625, "score": 0, "owner": {"display_name": "Chris S", "reputation": 37309, "user_id": 21574, "user_type": "registered", "accept_rate": 81}}, {"body": "I was just curious if that fired twice as well", "edited": false, "comment_id": 3586118, "creation_date": 1281367654, "score": 0, "owner": {"display_name": "Chris S", "reputation": 37309, "user_id": 21574, "user_type": "registered", "accept_rate": 81}}, {"body": "@Chris: I&#39;ll give it a try if I have time :)", "edited": false, "reply_to_user": {"display_name": "Chris S", "reputation": 37309, "user_id": 21574, "user_type": "registered", "accept_rate": 81}, "comment_id": 3597886, "creation_date": 1281458997, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1281354214, "comment_count": 6, "score": 18, "owner": {"display_name": "undertakeror", "reputation": 741, "user_id": 206604, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 18}, {"body": "<p>Disclaimer- I'm not familiar with xaml nuances and I know this sounds illogical... but anyway- my first thought is to try passing as just plain eventargs rather than textchangedeventargs.  Doesn't make sense, but may be it could help?  It seems like when I've seen double firings like this before that it is either due to a bug or due to somehow 2 add event handler calls happening behind the scenes... I'm not sure which though?</p>\n\n<p>If you need quick and dirty, again, me not being experienced with xaml- my next step would be to just skip xaml for that textbox as a quick workaround... do that textbox totally in c# for now until you can pinpoint the bug or tricky code... that is, if you need a temporary solution.</p>\n", "is_accepted": false, "tags": [], "answer_id": 3441044, "down_vote_count": 0, "last_activity_date": 1281364994, "comments": [{"body": "I&#39;m not the one passing any event args - I&#39;m implementing an event handler. But I&#39;ve verified that adding the event handler purely in C# makes no difference... it still gets fired twice.", "edited": false, "reply_to_user": {"display_name": "Pimp Juice McJones", "reputation": 136, "user_id": 302270, "user_type": "registered"}, "comment_id": 3585635, "creation_date": 1281365149, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "OK, hmmm.  Yeah, if it&#39;s pure c# then it sounds more like a bug.  About by first suggestion- I&#39;m sorry my verbage was horrible, how I should have stated is- I&#39;d try [in your implementation/TextBoxChanged handler method] change the args parameter type to just plain eventargs.  Probably won&#39;t work... but hey... it was just my first thought.", "edited": false, "comment_id": 3585835, "creation_date": 1281366153, "score": 0, "owner": {"display_name": "Pimp Juice McJones", "reputation": 136, "user_id": 302270, "user_type": "registered"}}, {"body": "In other words, it probably won&#39;t work but I&#39;d try method signature = private void TextBoxChanged(object sender, EventArgs e) just to say that I tried it =)", "edited": false, "comment_id": 3585881, "creation_date": 1281366379, "score": 0, "owner": {"display_name": "Pimp Juice McJones", "reputation": 136, "user_id": 302270, "user_type": "registered"}}, {"body": "Right. I don&#39;t think that will have any effective, I&#39;m afraid.", "edited": false, "reply_to_user": {"display_name": "Pimp Juice McJones", "reputation": 136, "user_id": 302270, "user_type": "registered"}, "comment_id": 3586719, "creation_date": 1281371259, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1281364319, "comment_count": 4, "score": 0, "owner": {"display_name": "Pimp Juice McJones", "reputation": 136, "user_id": 302270, "user_type": "registered"}, "last_editor": {"display_name": "Pimp Juice McJones", "reputation": 136, "user_id": 302270, "user_type": "registered"}, "last_edit_date": 1281364994, "up_vote_count": 0}, {"body": "<p>I believe this has always been a bug in the Compact Framework. It must have been carried over into WP7.</p>\n", "answer_id": 3459729, "tags": [], "down_vote_count": 0, "last_activity_date": 1281538811, "comments": [{"body": "I thought it was fixed in a more recent version of the CF... and it would be weird to get in despite the move to Silverlight. On the other hand, it&#39;s a pretty weird bug to see anyway...", "edited": false, "comment_id": 3607984, "creation_date": 1281541044, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I agree that it is strange. I reran into it yesterday in a CF 2.0 application.", "edited": false, "comment_id": 3608259, "creation_date": 1281542248, "score": 0, "owner": {"display_name": "Jerod Houghtelling", "reputation": 2636, "user_id": 373521, "user_type": "registered", "accept_rate": 88}}], "creation_date": 1281538811, "comment_count": 2, "score": 1, "owner": {"display_name": "Jerod Houghtelling", "reputation": 2636, "user_id": 373521, "user_type": "registered", "accept_rate": 88}, "is_accepted": false, "up_vote_count": 1}, {"body": "<p>That does sound like a bug to me. As a workaround, you could always use Rx's <code>DistinctUntilChanged</code>. There is an overload that allows you to specify the distinct key.</p>\n\n<p>This extension method returns the observable TextChanged event but skips consecutive duplicates:</p>\n\n<pre><code>public static IObservable&lt;IEvent&lt;TextChangedEventArgs&gt;&gt; GetTextChanged(\n    this TextBox tb)\n{\n    return Observable.FromEvent&lt;TextChangedEventArgs&gt;(\n               h =&gt; textBox1.TextChanged += h, \n               h =&gt; textBox1.TextChanged -= h\n           )\n           .DistinctUntilChanged(t =&gt; t.Text);\n}\n</code></pre>\n\n<p>Once the bug is fixed you can simply remove the <code>DistinctUntilChanged</code> line.</p>\n", "is_accepted": false, "tags": [], "answer_id": 3657800, "down_vote_count": 0, "last_activity_date": 1283855781, "creation_date": 1283855446, "comment_count": 0, "score": 8, "owner": {"display_name": "Richard Szalay", "reputation": 48361, "user_id": 3603, "user_type": "registered", "accept_rate": 84}, "last_editor": {"display_name": "Richard Szalay", "reputation": 48361, "user_id": 3603, "user_type": "registered", "accept_rate": 84}, "last_edit_date": 1283855781, "up_vote_count": 8}, {"body": "<p>I dont think it is a bug ..\nWhen you assign the value to a text property inside the textchanged event , the textbox value is changed which will again call the text changed event ..</p>\n\n<p>try this in Windows Forms Application , you might get an error </p>\n\n<p>\"An unhandled exception of type 'System.StackOverflowException' occurred in System.Windows.Forms.dll\"</p>\n", "answer_id": 4720893, "tags": [], "down_vote_count": 1, "last_activity_date": 1295329975, "comments": [{"body": "From the question: &quot;I&#39;ve just added a TextBox and a TextBlock to the standard UI template&quot; - they&#39;re not the same thing. I&#39;ve got one TextBox which the user can type into, and one TextBlock which displays the count.", "edited": false, "comment_id": 5214676, "creation_date": 1295332022, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1295329975, "comment_count": 1, "score": 0, "owner": {"display_name": "Senthil Kumar B", "reputation": 755, "user_id": 236750, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 1}, {"body": "<p>The reason the <code>TextChanged</code> event fires twice in WP7 is a side effect of how the <code>TextBox</code> has been templated for the Metro look.</p>\n\n<p>If you edit the <code>TextBox</code> template in Blend you will see that it contains a secondary <code>TextBox</code> for the disabled/read-only state. This causes, as a side effect, the event to fire twice.</p>\n\n<p>You can change the template to remove the extra <code>TextBox</code> (and associated states) if you don't need these states, or modify the template to achieve a different look in the disabled/read-only state, without using a secondary <code>TextBox</code>.</p>\n\n<p>With that, the event will fire only once.</p>\n", "is_accepted": true, "tags": [], "answer_id": 5520623, "down_vote_count": 0, "last_activity_date": 1380120579, "creation_date": 1301709741, "comment_count": 0, "score": 71, "owner": {"display_name": "StefanWick", "reputation": 2516, "user_id": 686985, "user_type": "registered"}, "last_editor": {"display_name": "Smi", "reputation": 5815, "user_id": 1128737, "user_type": "registered"}, "last_edit_date": 1380120579, "up_vote_count": 71}, {"body": "<p>StefanWick is right, consider using this template</p>\n\n<pre><code>&lt;Application.Resources&gt;\n        &lt;ControlTemplate x:Key=\"PhoneDisabledTextBoxTemplate\" TargetType=\"TextBox\"&gt;\n            &lt;ContentControl x:Name=\"ContentElement\" BorderThickness=\"0\" HorizontalContentAlignment=\"Stretch\" Margin=\"{StaticResource PhoneTextBoxInnerMargin}\" Padding=\"{TemplateBinding Padding}\" VerticalContentAlignment=\"Stretch\"/&gt;\n        &lt;/ControlTemplate&gt;\n        &lt;Style x:Key=\"TextBoxStyle1\" TargetType=\"TextBox\"&gt;\n            &lt;Setter Property=\"FontFamily\" Value=\"{StaticResource PhoneFontFamilyNormal}\"/&gt;\n            &lt;Setter Property=\"FontSize\" Value=\"{StaticResource PhoneFontSizeMediumLarge}\"/&gt;\n            &lt;Setter Property=\"Background\" Value=\"{StaticResource PhoneTextBoxBrush}\"/&gt;\n            &lt;Setter Property=\"Foreground\" Value=\"{StaticResource PhoneTextBoxForegroundBrush}\"/&gt;\n            &lt;Setter Property=\"BorderBrush\" Value=\"{StaticResource PhoneTextBoxBrush}\"/&gt;\n            &lt;Setter Property=\"SelectionBackground\" Value=\"{StaticResource PhoneAccentBrush}\"/&gt;\n            &lt;Setter Property=\"SelectionForeground\" Value=\"{StaticResource PhoneTextBoxSelectionForegroundBrush}\"/&gt;\n            &lt;Setter Property=\"BorderThickness\" Value=\"{StaticResource PhoneBorderThickness}\"/&gt;\n            &lt;Setter Property=\"Padding\" Value=\"2\"/&gt;\n            &lt;Setter Property=\"Template\"&gt;\n                &lt;Setter.Value&gt;\n                    &lt;ControlTemplate TargetType=\"TextBox\"&gt;\n                        &lt;Grid Background=\"Transparent\"&gt;\n                            &lt;VisualStateManager.VisualStateGroups&gt;\n                                &lt;VisualStateGroup x:Name=\"CommonStates\" ec:ExtendedVisualStateManager.UseFluidLayout=\"True\"&gt;\n                                    &lt;VisualState x:Name=\"Normal\"/&gt;\n                                    &lt;VisualState x:Name=\"MouseOver\"/&gt;\n                                    &lt;VisualState x:Name=\"Disabled\"&gt;\n                                        &lt;Storyboard&gt;\n                                            &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetProperty=\"Visibility\" Storyboard.TargetName=\"EnabledBorder\"&gt;\n                                                &lt;DiscreteObjectKeyFrame KeyTime=\"0\"&gt;\n                                                    &lt;DiscreteObjectKeyFrame.Value&gt;\n                                                        &lt;Visibility&gt;Collapsed&lt;/Visibility&gt;\n                                                    &lt;/DiscreteObjectKeyFrame.Value&gt;\n                                                &lt;/DiscreteObjectKeyFrame&gt;\n                                            &lt;/ObjectAnimationUsingKeyFrames&gt;\n                                        &lt;/Storyboard&gt;\n                                    &lt;/VisualState&gt;\n                                    &lt;VisualState x:Name=\"ReadOnly\"&gt;\n                                        &lt;Storyboard&gt;\n                                            &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetProperty=\"Visibility\" Storyboard.TargetName=\"EnabledBorder\"&gt;\n                                                &lt;DiscreteObjectKeyFrame KeyTime=\"0\"&gt;\n                                                    &lt;DiscreteObjectKeyFrame.Value&gt;\n                                                        &lt;Visibility&gt;Collapsed&lt;/Visibility&gt;\n                                                    &lt;/DiscreteObjectKeyFrame.Value&gt;\n                                                &lt;/DiscreteObjectKeyFrame&gt;\n                                            &lt;/ObjectAnimationUsingKeyFrames&gt;\n                                        &lt;/Storyboard&gt;\n                                    &lt;/VisualState&gt;\n                                &lt;/VisualStateGroup&gt;\n                                &lt;VisualStateGroup x:Name=\"FocusStates\"&gt;\n                                    &lt;VisualState x:Name=\"Focused\"&gt;\n                                        &lt;Storyboard&gt;\n                                            &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetProperty=\"Background\" Storyboard.TargetName=\"EnabledBorder\"&gt;\n                                                &lt;DiscreteObjectKeyFrame KeyTime=\"0\" Value=\"{StaticResource PhoneTextBoxEditBackgroundBrush}\"/&gt;\n                                            &lt;/ObjectAnimationUsingKeyFrames&gt;\n                                            &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetProperty=\"BorderBrush\" Storyboard.TargetName=\"EnabledBorder\"&gt;\n                                                &lt;DiscreteObjectKeyFrame KeyTime=\"0\" Value=\"{StaticResource PhoneTextBoxEditBorderBrush}\"/&gt;\n                                            &lt;/ObjectAnimationUsingKeyFrames&gt;\n                                        &lt;/Storyboard&gt;\n                                    &lt;/VisualState&gt;\n                                    &lt;VisualState x:Name=\"Unfocused\"/&gt;\n                                &lt;/VisualStateGroup&gt;\n                            &lt;/VisualStateManager.VisualStateGroups&gt;\n                            &lt;VisualStateManager.CustomVisualStateManager&gt;\n                                &lt;ec:ExtendedVisualStateManager/&gt;\n                            &lt;/VisualStateManager.CustomVisualStateManager&gt;\n                            &lt;Border x:Name=\"EnabledBorder\" BorderBrush=\"{TemplateBinding BorderBrush}\" BorderThickness=\"{TemplateBinding BorderThickness}\" Background=\"{TemplateBinding Background}\" Margin=\"{StaticResource PhoneTouchTargetOverhang}\"&gt;\n                                &lt;ContentControl x:Name=\"ContentElement\" BorderThickness=\"0\" HorizontalContentAlignment=\"Stretch\" Margin=\"{StaticResource PhoneTextBoxInnerMargin}\" Padding=\"{TemplateBinding Padding}\" VerticalContentAlignment=\"Stretch\"/&gt;\n                            &lt;/Border&gt;\n                        &lt;/Grid&gt;\n                    &lt;/ControlTemplate&gt;\n                &lt;/Setter.Value&gt;\n            &lt;/Setter&gt;\n        &lt;/Style&gt;\n    &lt;/Application.Resources&gt;\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 13250326, "down_vote_count": 0, "last_activity_date": 1352202672, "creation_date": 1352202267, "comment_count": 0, "score": 0, "owner": {"display_name": "onmyway133", "reputation": 5882, "user_id": 1418457, "user_type": "registered", "accept_rate": 81}, "last_editor": {"display_name": "onmyway133", "reputation": 5882, "user_id": 1418457, "user_type": "registered", "accept_rate": 81}, "last_edit_date": 1352202672, "up_vote_count": 0}, {"body": "<p>It's an old topic, but instead of change template (that does not work for me, I dont't see the other textbox with Blend) you can add boolean to check if the event already did the function or not.</p>\n\n<pre><code>boolean already = false;\nprivate void Tweet_SizeChanged(object sender, EventArgs e)\n{\n    if (!already)\n    {\n        already = true;\n        ...\n    }\n    else\n    {\n    already = false;\n    }\n}\n</code></pre>\n\n<p>I'm aware that is NOT the perfect way, but I think it's the simple way to do that. And it works.</p>\n", "answer_id": 15113559, "tags": [], "down_vote_count": 0, "last_activity_date": 1361972493, "creation_date": 1361972493, "comment_count": 0, "score": 0, "owner": {"display_name": "TDK", "reputation": 50, "user_id": 1523369, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 0}, {"body": "<p>Nice! I found this question by searching for a related problem and also found this annoying thing in my code. Double event eats more CPU resources in my case. So, I fixed my real-time filter textbox with this solution:</p>\n\n<pre><code>private string filterText = String.Empty;\n\nprivate void SearchBoxUpdated( object sender, TextChangedEventArgs e )\n{\n    if ( filterText != filterTextBox.Text )\n    {\n        // one call per change\n        filterText = filterTextBox.Text;\n        ...\n    }\n\n}\n</code></pre>\n", "answer_id": 20170594, "tags": [], "down_vote_count": 0, "last_activity_date": 1385262171, "creation_date": 1385262171, "comment_count": 0, "score": 0, "owner": {"display_name": "crea7or", "reputation": 3010, "user_id": 1051830, "user_type": "registered", "accept_rate": 81}, "is_accepted": false, "up_vote_count": 0}], "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 3438806}, {"last_activity_date": 1368710523, "accepted_answer_id": 11595823, "creation_date": 1342885894, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1342891075, "favorite_count": 26, "view_count": 5367, "delete_vote_count": 0, "title": "Why would finding a type's initializer throw a NullReferenceException?", "comments": [{"body": "Re last bullet; was that the same <i>assembly</i> on mono? Or the same <i>c#</i>, compiled-and-run on mono? Just wondering if this is compiler vs runtime. Presumably you&#39;ve glanced at the IL and nothing looks crazy?", "edited": false, "comment_id": 15343299, "creation_date": 1342886408, "score": 0, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "Heh - &quot;despite there being no null values in my code&quot; this might actually be the first time ever in recorded SO history that the &quot;the bug isn&#39;t in my code&quot; card has been played successfully.", "edited": false, "comment_id": 15343355, "creation_date": 1342886622, "score": 82, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "4.0.30319.1 runs fine", "edited": false, "comment_id": 15343357, "creation_date": 1342886628, "score": 3, "owner": {"display_name": "Remus Rusanu", "reputation": 183165, "user_id": 105929, "user_type": "registered", "accept_rate": 67}}, {"body": "@MarcGravell: Same assembly.", "edited": false, "reply_to_user": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}, "comment_id": 15343366, "creation_date": 1342886655, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@RemusRusanu: Ooh, that&#39;s interesting. More interesting than .NET 3.5 or 2.0, in fact.", "edited": false, "reply_to_user": {"display_name": "Remus Rusanu", "reputation": 183165, "user_id": 105929, "user_type": "registered", "accept_rate": 67}, "comment_id": 15343373, "creation_date": 1342886675, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Returns True just fine with no Debug doing first test from cmdline with .NET 4 Framework, Visual C# compiler 4.0.30319.1", "edited": false, "comment_id": 15343386, "creation_date": 1342886741, "score": 1, "owner": {"display_name": "Kerry", "reputation": 251, "user_id": 568333, "user_type": "registered", "accept_rate": 83}}, {"body": "@MarcGravell: Yeah, while I&#39;m normally very skeptical of saying &quot;There&#39;s no bug in <i>my</i> code&quot; in this case, when there&#39;s a single expression at stake, and the exception is a <code>NullReferenceException</code> (which should <i>always</i> indicate a bug) it really does look dodgy. I strongly suspect if this <i>is</i> a .NET 4.5 bug, I&#39;ve missed the window for getting it fixed...", "edited": false, "reply_to_user": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}, "comment_id": 15343391, "creation_date": 1342886751, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet: We all know MS&#39;s SP1 is the real RTM ;p", "edited": false, "comment_id": 15343415, "creation_date": 1342886861, "score": 15, "owner": {"display_name": "leppie", "reputation": 75677, "user_id": 15541, "user_type": "registered", "accept_rate": 86}}, {"body": "Interesting: <code>csc &#47;o+ test.cs</code> works. Must be some kind of (lack of) optimizer bug... Still clueless on the effects though.", "edited": false, "comment_id": 15343559, "creation_date": 1342887764, "score": 0, "owner": {"display_name": "leppie", "reputation": 75677, "user_id": 15541, "user_type": "registered", "accept_rate": 86}}, {"body": "@JonSkeet Just confirmed I received the exact results you did when using 4.0.30319.17626 for Microsoft (R) .NET Framework 4.5 on the build tablet with VS 2012 RC", "edited": false, "comment_id": 15343660, "creation_date": 1342888278, "score": 0, "owner": {"display_name": "Kerry", "reputation": 251, "user_id": 568333, "user_type": "registered", "accept_rate": 83}}, {"body": "@JonSkeet: Some further results. It only crashes when <code>csc &#47;o- &#47;debug- test.cs</code>. Any other combination works fine. I suspect a JIT bug.", "edited": false, "comment_id": 15343723, "creation_date": 1342888565, "score": 0, "owner": {"display_name": "leppie", "reputation": 75677, "user_id": 15541, "user_type": "registered", "accept_rate": 86}}, {"body": "@minitech: what flags were passed to <code>ilasm</code>?", "edited": false, "reply_to_user": {"display_name": "minitech", "reputation": 107014, "user_id": 707111, "user_type": "moderator", "accept_rate": 100}, "comment_id": 15343880, "creation_date": 1342889296, "score": 0, "owner": {"display_name": "leppie", "reputation": 75677, "user_id": 15541, "user_type": "registered", "accept_rate": 86}}, {"body": "@leppie: None, but adding <code>&#47;DEBUG</code> works. Sigh. Well, it&#39;s not a compiler bug!", "edited": false, "reply_to_user": {"display_name": "leppie", "reputation": 75677, "user_id": 15541, "user_type": "registered", "accept_rate": 86}, "comment_id": 15343897, "creation_date": 1342889387, "score": 0, "owner": {"display_name": "minitech", "reputation": 107014, "user_id": 707111, "user_type": "moderator", "accept_rate": 100}}, {"body": "@minitech: If it was a compiler bug, PEVerify would fail. It does not.", "edited": false, "reply_to_user": {"display_name": "minitech", "reputation": 107014, "user_id": 707111, "user_type": "moderator", "accept_rate": 100}, "comment_id": 15343924, "creation_date": 1342889490, "score": 0, "owner": {"display_name": "leppie", "reputation": 75677, "user_id": 15541, "user_type": "registered", "accept_rate": 86}}, {"body": "@leppie: Nope, <code>csc &#47;o+ &#47;debug- Test.cs</code> fails for me too, which is odd.", "edited": false, "reply_to_user": {"display_name": "leppie", "reputation": 75677, "user_id": 15541, "user_type": "registered", "accept_rate": 86}, "comment_id": 15344113, "creation_date": 1342890395, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Tried to recreate it on my machine, no exception.", "edited": false, "comment_id": 15344429, "creation_date": 1342891842, "score": 0, "owner": {"display_name": "Austin Henley", "reputation": 3024, "user_id": 938695, "user_type": "registered", "accept_rate": 90}}, {"body": "Tried <code>csc &#47;o+ &#47;debug- Test.cs</code>, fails for me as well.", "edited": false, "comment_id": 15344501, "creation_date": 1342892108, "score": 0, "owner": {"display_name": "Bruno Brant", "reputation": 4245, "user_id": 227332, "user_type": "registered", "accept_rate": 62}}, {"body": "When you set the JIT tracking to on, everything works fine. <code>[assembly: Debuggable(true, true)]</code>", "edited": false, "comment_id": 15344685, "creation_date": 1342893028, "score": 1, "owner": {"display_name": "Mehdi Golchin", "reputation": 6051, "user_id": 188268, "user_type": "registered"}}, {"body": "Yes, the bug only reproduces if there&#39;s no debugging information in the PE file. I&#39;ve opened a bug against the CLR team and we&#39;ll see what they respond.", "edited": false, "comment_id": 15344739, "creation_date": 1342893222, "score": 0, "owner": {"display_name": "Kirill Osenkov", "reputation": 4572, "user_id": 37899, "user_type": "registered"}}, {"body": "Using csc.exe to compile and run on .Net 4.5 RC / X64 I get the same exception. But when compiled and run in visual studio 2012 it runs successfully.", "edited": false, "comment_id": 15349377, "creation_date": 1342921278, "score": 0, "owner": {"display_name": "Pratik", "reputation": 6636, "user_id": 11711, "user_type": "registered", "accept_rate": 75}}, {"body": "@Jon, what was the outcome on this in the end?", "edited": false, "comment_id": 29895776, "creation_date": 1384859090, "score": 0, "owner": {"display_name": "Ian Ringrose", "reputation": 22210, "user_id": 57159, "user_type": "registered", "accept_rate": 88}}, {"body": "@IanRingrose: It was acknowleged as a bug and fixed before release, I believe - or possibly in a patch. (I can&#39;t reproduce it now.)", "edited": false, "reply_to_user": {"display_name": "Ian Ringrose", "reputation": 22210, "user_id": 57159, "user_type": "registered", "accept_rate": 88}, "comment_id": 29899609, "creation_date": 1384865434, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet, at least, this code got you stumped ;)", "edited": false, "comment_id": 34368611, "creation_date": 1395491483, "score": 0, "owner": {"display_name": "Amit Joki", "reputation": 36703, "user_id": 3001736, "user_type": "registered", "accept_rate": 65}}], "comment_count": 23, "score": 161, "body": "<p>This has got me stumped. I was trying to optimize some tests for Noda Time, where we have some type initializer checking. I thought I'd find out whether a type <em>has</em> a type initializer (static constructor or static variables with initializers) before loading everything into a new <code>AppDomain</code>. To my surprise, a small test of this threw <code>NullReferenceException</code> - despite there being no null values in <em>my</em> code. It <em>only</em> throws the exception when compiled with no debug information.</p>\n\n<p>Here's a short but complete program to demonstrate the problem:</p>\n\n<pre><code>using System;\n\nclass Test\n{\n    static Test() {}\n\n    static void Main()\n    {\n        var cctor = typeof(Test).TypeInitializer;\n        Console.WriteLine(\"Got initializer? {0}\", cctor != null);\n    }    \n}\n</code></pre>\n\n<p>And a transcript of compilation and output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>c:\\Users\\Jon\\Test&gt;csc Test.cs\nMicrosoft (R) Visual C# Compiler version 4.0.30319.17626\nfor Microsoft (R) .NET Framework 4.5\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n\nc:\\Users\\Jon\\Test&gt;test\n\nUnhandled Exception: System.NullReferenceException: Object reference not set to\nan instance of an object.\n   at System.RuntimeType.GetConstructorImpl(BindingFlags bindingAttr, Binder bin\nder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifi\ners)\n   at Test.Main()\n\nc:\\Users\\Jon\\Test&gt;csc /debug+ Test.cs\nMicrosoft (R) Visual C# Compiler version 4.0.30319.17626\nfor Microsoft (R) .NET Framework 4.5\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n\nc:\\Users\\Jon\\Test&gt;test\nGot initializer? True\n</code></pre>\n\n<p>Now you'll notice I'm using .NET 4.5 (the release candidate) - which <em>may</em> be relevant here. It's somewhat tricky for me to test it with the various other original frameworks (in particular \"vanilla\" .NET 4) but if anyone else has easy access to machines with other frameworks, I'd be interested in the results.</p>\n\n<p>Other details:</p>\n\n<ul>\n<li>I'm on an x64 machine, but this problem occurs with both x86 and x64 assemblies</li>\n<li>It's the \"debug-ness\" of the <em>calling</em> code which makes a difference - even though in the test case above it's testing it on its own assembly, when I tried this against Noda Time I didn't have to recompile <code>NodaTime.dll</code> to see the differences - just <code>Test.cs</code> which referred to it.</li>\n<li>Running the \"broken\" assembly on Mono 2.10.8 <em>doesn't</em> throw</li>\n</ul>\n\n<p>Any ideas? Framework bug?</p>\n\n<p>EDIT: Curiouser and curiouser. If you take out the <code>Console.WriteLine</code> call:</p>\n\n<pre><code>using System;\n\nclass Test\n{\n    static Test() {}\n\n    static void Main()\n    {\n        var cctor = typeof(Test).TypeInitializer;\n    }    \n}\n</code></pre>\n\n<p>It now <em>only</em> fails when compiled with <code>csc /o- /debug-</code>. If you turn on optimizations, (<code>/o+</code>) it works. But if you include the <code>Console.WriteLine</code> call as per the original, both versions will fail.</p>\n", "is_answered": true, "up_vote_count": 162, "tags": [".net", "reflection", "nullreferenceexception", ".net-4.5", "typeinitializer"], "reopen_vote_count": 0, "answer_count": 2, "answers": [{"body": "<p>with <code>csc test.cs</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>(196c.1874): Access violation - code c0000005 (first chance)\nmscorlib_ni!System.RuntimeType.GetConstructorImpl(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])+0xa3:\n000007fe`e5735403 488b4608        mov     rax,qword ptr [rsi+8] ds:00000000`00000008=????????????????\n</code></pre>\n\n<p>Trying to load from <code>[rsi+8]</code> when <code>@rsi</code> is NULL. Lets inspect the function:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>0:000&gt; ln 000007fe`e5735403\n(000007fe`e5735360)   mscorlib_ni!System.RuntimeType.GetConstructorImpl(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])+0xa3\n0:000&gt; uf 000007fe`e5735360\nFlow analysis was incomplete, some code may be missing\nmscorlib_ni!System.RuntimeType.GetConstructorImpl(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[]):\n000007fe`e5735360 53              push    rbx\n000007fe`e5735361 55              push    rbp\n000007fe`e5735362 56              push    rsi\n000007fe`e5735363 57              push    rdi\n000007fe`e5735364 4154            push    r12\n000007fe`e5735366 4883ec30        sub     rsp,30h\n000007fe`e573536a 498bf8          mov     rdi,r8\n000007fe`e573536d 8bea            mov     ebp,edx\n000007fe`e573536f 48c744242800000000 mov   qword ptr [rsp+28h],0\n000007fe`e5735378 488bb42480000000 mov     rsi,qword ptr [rsp+80h]\n000007fe`e5735380 4889742420      mov     qword ptr [rsp+20h],rsi\n000007fe`e5735385 41b903000000    mov     r9d,3\n...    \nmscorlib_ni!System.RuntimeType.GetConstructorImpl(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])+0x97:\n000007fe`e57353f7 488b4b08        mov     rcx,qword ptr [rbx+8]\n000007fe`e57353fb 85c9            test    ecx,ecx\n000007fe`e57353fd 0f848e000000    je      mscorlib_ni!System.RuntimeType.GetConstructorImpl(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])+0x131 (000007fe`e5735491)\n\nmscorlib_ni!System.RuntimeType.GetConstructorImpl(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])+0xa3:\n000007fe`e5735403 488b4608        mov     rax,qword ptr [rsi+8]\n000007fe`e5735407 85c0            test    eax,eax\n000007fe`e5735409 7545            jne     mscorlib_ni!System.RuntimeType.GetConstructorImpl(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])+0xf0 (000007fe`e5735450)\n...\n</code></pre>\n\n<p><code>@rsi</code> is loaded in the beginning from <code>[rsp+20h]</code> so it must be passed by caller. Lets look at the caller:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>0:000&gt; k3\nChild-SP          RetAddr           Call Site\n00000000`001fec70 000007fe`8d450110 mscorlib_ni!System.RuntimeType.GetConstructorImpl(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])+0xa3\n00000000`001fecd0 000007fe`ecb6e073 image00000000_01120000!Test.Main()+0x60\n00000000`001fed20 000007fe`ecb6dcb2 clr!CoUninitializeEE+0x7ae1f\n0:000&gt; ln 000007fe`8d450110\n(000007fe`8d4500b0)   image00000000_01120000!Test.Main()+0x60\n0:000&gt; uf 000007fe`8d4500b0\nimage00000000_01120000!Test.Main():\n000007fe`8d4500b0 53              push    rbx\n000007fe`8d4500b1 4883ec40        sub     rsp,40h\n000007fe`8d4500b5 e8a69ba658      call    mscorlib_ni!System.Console.get_In() (000007fe`e5eb9c60)\n000007fe`8d4500ba 4c8bd8          mov     r11,rax\n000007fe`8d4500bd 498b03          mov     rax,qword ptr [r11]\n000007fe`8d4500c0 488b5048        mov     rdx,qword ptr [rax+48h]\n000007fe`8d4500c4 498bcb          mov     rcx,r11\n000007fe`8d4500c7 ff5238          call    qword ptr [rdx+38h]\n000007fe`8d4500ca 488d0d7737eeff  lea     rcx,[000007fe`8d333848]\n000007fe`8d4500d1 e88acb715f      call    clr!CoUninitializeEE+0x79a0c (000007fe`ecb6cc60)\n000007fe`8d4500d6 4c8bd8          mov     r11,rax\n000007fe`8d4500d9 48b92012531200000000 mov rcx,12531220h\n000007fe`8d4500e3 488b09          mov     rcx,qword ptr [rcx]\n000007fe`8d4500e6 498b03          mov     rax,qword ptr [r11]\n000007fe`8d4500e9 4c8b5068        mov     r10,qword ptr [rax+68h]\n000007fe`8d4500ed 48c744242800000000 mov   qword ptr [rsp+28h],0\n000007fe`8d4500f6 48894c2420      mov     qword ptr [rsp+20h],rcx\n000007fe`8d4500fb 41b903000000    mov     r9d,3\n000007fe`8d450101 4533c0          xor     r8d,r8d\n000007fe`8d450104 ba38000000      mov     edx,38h\n000007fe`8d450109 498bcb          mov     rcx,r11\n000007fe`8d45010c 41ff5228        call    qword ptr [r10+28h]\n000007fe`8d450110 48bb1032531200000000 mov rbx,12533210h\n000007fe`8d45011a 488b1b          mov     rbx,qword ptr [rbx]\n000007fe`8d45011d 33d2            xor     edx,edx\n000007fe`8d45011f 488bc8          mov     rcx,rax\n000007fe`8d450122 e829452e58      call    mscorlib_ni!System.Reflection.ConstructorInfo.op_Equality(System.Reflection.ConstructorInfo, System.Reflection.ConstructorInfo) (000007fe`e5734650)\n000007fe`8d450127 0fb6c8          movzx   ecx,al\n000007fe`8d45012a 33c0            xor     eax,eax\n000007fe`8d45012c 85c9            test    ecx,ecx\n000007fe`8d45012e 0f94c0          sete    al\n000007fe`8d450131 0fb6c8          movzx   ecx,al\n000007fe`8d450134 894c2430        mov     dword ptr [rsp+30h],ecx\n000007fe`8d450138 488d542430      lea     rdx,[rsp+30h]\n000007fe`8d45013d 488d0d24224958  lea     rcx,[mscorlib_ni+0x682368 (000007fe`e58e2368)]\n000007fe`8d450144 e807246a5f      call    clr+0x2550 (000007fe`ecaf2550)\n000007fe`8d450149 488bd0          mov     rdx,rax\n000007fe`8d45014c 488bcb          mov     rcx,rbx\n000007fe`8d45014f e81cab2758      call    mscorlib_ni!System.Console.WriteLine(System.String, System.Object) (000007fe`e56cac70)\n000007fe`8d450154 90              nop\n000007fe`8d450155 4883c440        add     rsp,40h\n000007fe`8d450159 5b              pop     rbx\n000007fe`8d45015a c3              ret\n</code></pre>\n\n<p>(My disassemble shows <code>System.Console.get_In</code> because I added a <code>Console.GetLine()</code> in test.cs to have an opportunity to break in debugger. I validated it doesn\u2019t change the behavior).</p>\n\n<p>We're in this call: <code>000007fe8d45010c 41ff5228        call    qword ptr [r10+28h]</code> (our AV frame ret address is the instruction right after this <code>call</code>). </p>\n\n<p>Lets compare this with what happens when we compile <code>csc /debug test.cs</code>. We can set up a <code>bp 000007fee5735360</code>, luckily the module loads at the same address. On the instruction that loads <code>@rsi</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>0:000&gt; r\nrax=000007fee58e2f30 rbx=00000000027c6258 rcx=00000000027c6258\nrdx=0000000000000038 rsi=00000000002debd8 rdi=0000000000000000\nrip=000007fee5735378 rsp=00000000002de990 rbp=0000000000000038\n r8=0000000000000000  r9=0000000000000003 r10=000007fee58831c8\nr11=00000000002de9c0 r12=0000000000000000 r13=00000000002dedc0\nr14=00000000002dec58 r15=0000000000000004\niopl=0         nv up ei pl nz na po nc\ncs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206\nmscorlib_ni!System.RuntimeType.GetConstructorImpl(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])+0x18:\n000007fe`e5735378 488bb42480000000 mov     rsi,qword ptr [rsp+80h] ss:00000000`002dea10=a0627c0200000000\n</code></pre>\n\n<p>Note that <code>@rsi</code> is 00000000002debd8. Stepping through the function shows that this the address that will be dereferenced later at the place when the bad exe bombs (ie. <code>@rsi</code> does not change). The stack is very interesting <em>because it shows an extra frame</em>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>0:000&gt; k3\nChild-SP          RetAddr           Call Site\n00000000`002de990 000007fe`e5eddf68 mscorlib_ni!System.RuntimeType.GetConstructorImpl(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])+0x18\n00000000`002de9f0 000007fe`8d460119 mscorlib_ni!System.Type.get_TypeInitializer()+0x48\n00000000`002dea30 000007fe`ecb6e073 good!Test.Main()+0x49*** WARNING: Unable to verify checksum for good.exe\n\n0:000&gt; ln 000007fe`e5eddf68\n(000007fe`e5eddf20)   mscorlib_ni!System.Type.get_TypeInitializer()+0x48\n0:000&gt; uf 000007fe`e5eddf20\nmscorlib_ni!System.Type.get_TypeInitializer():\n000007fe`e5eddf20 53              push    rbx\n000007fe`e5eddf21 4883ec30        sub     rsp,30h\n000007fe`e5eddf25 488bd9          mov     rbx,rcx\n000007fe`e5eddf28 ba22010000      mov     edx,122h\n000007fe`e5eddf2d b901000000      mov     ecx,1\n000007fe`e5eddf32 e8d1a075ff      call    CORINFO_HELP_GETSHARED_GCSTATIC_BASE (000007fe`e5638008)\n000007fe`e5eddf37 488b88f0010000  mov     rcx,qword ptr [rax+1F0h]\n000007fe`e5eddf3e 488b03          mov     rax,qword ptr [rbx]\n000007fe`e5eddf41 4c8b5068        mov     r10,qword ptr [rax+68h]\n000007fe`e5eddf45 48c744242800000000 mov   qword ptr [rsp+28h],0\n000007fe`e5eddf4e 48894c2420      mov     qword ptr [rsp+20h],rcx\n000007fe`e5eddf53 41b903000000    mov     r9d,3\n000007fe`e5eddf59 4533c0          xor     r8d,r8d\n000007fe`e5eddf5c ba38000000      mov     edx,38h\n000007fe`e5eddf61 488bcb          mov     rcx,rbx\n000007fe`e5eddf64 41ff5228        call    qword ptr [r10+28h]\n000007fe`e5eddf68 90              nop\n000007fe`e5eddf69 4883c430        add     rsp,30h\n000007fe`e5eddf6d 5b              pop     rbx\n000007fe`e5eddf6e c3              ret\n0:000&gt; ln 000007fe`8d460119\n</code></pre>\n\n<p>The call is the same <code>call    qword ptr [r10+28h]</code> that we've seen before, so in the bad case this function was probably inlined in the <code>Main()</code>, so the fact that there is an extra frame is a red herring. If we look at the preparation of this <code>call    qword ptr [r10+28h]</code> we notice this instruction: <code>mov     qword ptr [rsp+20h],rcx</code>. This is what loads the address which gets eventually dereferenced as <code>@rsi</code>. In the good case, this is how <code>@rcx</code> is loaded:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>000007fe`e5eddf32 e8d1a075ff      call    CORINFO_HELP_GETSHARED_GCSTATIC_BASE (000007fe`e5638008)\n000007fe`e5eddf37 488b88f0010000  mov     rcx,qword ptr [rax+1F0h]\n</code></pre>\n\n<p>In the bad case it looks very different:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>000007fe`8d4600d9 48b92012721200000000 mov rcx,12721220h\n000007fe`8d4600e3 488b09          mov     rcx,qword ptr [rcx]\n</code></pre>\n\n<p>This is very different. Unlike the good case that calls CORINFO_HELP_GETSHARED_GCSTATIC_BASE and reads what ends up as the critical pointer that causes the AV from some member at offset <code>1F0</code> in a return structure, the optimized code loads it from a static address. And of course 12721220h contains NULL:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>0:000&gt; dp 12721220h L8\n00000000`12721220  00000000`00000000 00000000`00000000\n00000000`12721230  00000000`00000000 00000000`02722198\n00000000`12721240  00000000`027221c8 00000000`027221f8\n00000000`12721250  00000000`02722228 00000000`02722258\n</code></pre>\n\n<p>Unfortunately is too late for me to dig deeper right now, the dissasembly of <code>CORINFO_HELP_GETSHARED_GCSTATIC_BASE</code> is far from trivial. I'm posting this in hope someone more knowledgeable in CLR internals can make sense (as you can see, I really considered the issue just from the native instructions POV and completely ignored IL).</p>\n", "is_accepted": true, "tags": [], "answer_id": 11595823, "down_vote_count": 0, "last_activity_date": 1353108929, "comments": [{"body": "You deserve many more reps than this for your debugging skills.", "edited": false, "comment_id": 15348571, "creation_date": 1342914658, "score": 38, "owner": {"display_name": "JSB\u0571\u0578\u0563\u0579", "reputation": 26967, "user_id": 8078, "user_type": "registered", "accept_rate": 87}}, {"body": "This is an optimizer bug.  CORINFO* is a function pointer, it calls JIT_GetSharedGCStaticBase.  My guess is that it tripped up by the new 4.5 background jit feature and accesses a field before it is initialized, forgetting to jit the class.  Report this at connect.microsoft.com", "edited": false, "comment_id": 15354602, "creation_date": 1342960962, "score": 20, "owner": {"display_name": "Hans Passant", "reputation": 569404, "user_id": 17034, "user_type": "registered"}}, {"body": "No need. We&#39;re already looking. You&#39;re absolutely right, what happens is that because we directly allocate an instance of RuntimeType the cctor of Type never gets called, so Type.EmptyTypes remains null and that&#39;s what is passed to GetConstructor.", "edited": false, "comment_id": 15425815, "creation_date": 1343197819, "score": 23, "owner": {"display_name": "Kirill Osenkov", "reputation": 4572, "user_id": 37899, "user_type": "registered"}}, {"body": "Heh, I think I may be experiencing this bug as well, except I get an access violation throw by my program which is completely managed. My crude attempts at analyzing the native JIT code have gotten me nowhere, and the project is big and trying to capture the bug in a smaller test case is proving to be impossible :(", "edited": false, "comment_id": 16541804, "creation_date": 1347050515, "score": 0, "owner": {"display_name": "Earlz", "reputation": 22528, "user_id": 69742, "user_type": "registered", "accept_rate": 70}}, {"body": "Actually, this program appears to cause an Access Violation as well. And I&#39;m using the official release version of .Net 4.5", "edited": false, "comment_id": 16541852, "creation_date": 1347050645, "score": 0, "owner": {"display_name": "Earlz", "reputation": 22528, "user_id": 69742, "user_type": "registered", "accept_rate": 70}}, {"body": "@Earlz: post a separate question and describe the issue there rather than in comments. FYI a managed NullReferenceException is just how a native AV gets translated into a managed exception. The hardware runs native.", "edited": false, "reply_to_user": {"display_name": "Earlz", "reputation": 22528, "user_id": 69742, "user_type": "registered", "accept_rate": 70}, "comment_id": 16541876, "creation_date": 1347050737, "score": 0, "owner": {"display_name": "Remus Rusanu", "reputation": 183165, "user_id": 105929, "user_type": "registered", "accept_rate": 67}}, {"body": "Just broke 100 points for you Remus!", "edited": false, "comment_id": 17151229, "creation_date": 1349248422, "score": 0, "owner": {"display_name": "dotancohen", "reputation": 6795, "user_id": 343302, "user_type": "registered", "accept_rate": 90}}, {"body": "Is there a book I can read to get these debugging skills? (Preferably beginning with &quot;Idiots Guide to&quot; or ending with &quot;for Dummies&quot;)", "edited": false, "comment_id": 22983357, "creation_date": 1366343985, "score": 0, "owner": {"display_name": "Igby Largeman", "reputation": 9860, "user_id": 293522, "user_type": "registered", "accept_rate": 93}}, {"body": "@IgbyLargeman: <a href=\"http://www.amazon.com/Advanced-Windows-Debugging-Mario-Hewardt/dp/0321374460\" rel=\"nofollow\">Advanced Windows Debugging</a> is pretty good.", "edited": false, "reply_to_user": {"display_name": "Igby Largeman", "reputation": 9860, "user_id": 293522, "user_type": "registered", "accept_rate": 93}, "comment_id": 22984328, "creation_date": 1366347957, "score": 0, "owner": {"display_name": "Remus Rusanu", "reputation": 183165, "user_id": 105929, "user_type": "registered", "accept_rate": 67}}, {"body": "@RemusRusanu: thanks. Do you have any experience with its counterpart, <a href=\"http://www.amazon.com/Debugging-Addison-Wesley-Microsoft-Technology-ebook/dp/B002YYWEKE/ref=zg_bs_3974_10\" rel=\"nofollow\">Advanced .Net Debugging</a>?", "edited": false, "comment_id": 22985086, "creation_date": 1366350631, "score": 0, "owner": {"display_name": "Igby Largeman", "reputation": 9860, "user_id": 293522, "user_type": "registered", "accept_rate": 93}}], "creation_date": 1342904681, "comment_count": 10, "score": 239, "owner": {"display_name": "Remus Rusanu", "reputation": 183165, "user_id": 105929, "user_type": "registered", "accept_rate": 67}, "last_editor": {"display_name": "Timwi", "reputation": 34968, "user_id": 33225, "user_type": "registered", "accept_rate": 93}, "last_edit_date": 1353108929, "up_vote_count": 239}, {"body": "<p>As I believe I've found some new interesting findings about the problem, I decided to add them as an answer, acknowledging at the same time that they are not addressing the <strong>\"why it happens\"</strong> in the original question. Maybe someone who knows more about the internal workings of the involved types might post an edifying answer based also on the observations I'm posting.</p>\n\n<p>I've also managed to reproduce the issue on my machine and I've tracked a connection with the <a href=\"http://msdn.microsoft.com/en-us/library/system.runtime.interopservices._type.aspx\" rel=\"nofollow\">System.Runtime.InteropServices._Type Interface</a>, which is implemented by the <code>System.Type</code> class.</p>\n\n<p>Initially, I've found at least 3 workaround approaches for fixing the problem:</p>\n\n<ol>\n<li><p>Simply by casting the <code>Type</code> to <code>_Type</code> inside the <code>Main</code> method:</p>\n\n<pre><code>var cctor = ((_Type)typeof(Test)).TypeInitializer;\n</code></pre></li>\n<li><p>Or making sure that approach 1 was used previously inside the method:</p>\n\n<pre><code>var warmUp = ((_Type)typeof(Test)).TypeInitializer; \nvar cctor = ((Type)typeof(Test)).TypeInitializer;\n</code></pre></li>\n<li><p>Or by adding a static field to the <code>Test</code> class and initializing it (with casting it to <code>_Type</code>):</p>\n\n<pre><code>static ConstructorInfo _dummy1 = (typeof(object) as _Type).TypeInitializer;\n</code></pre></li>\n</ol>\n\n<p>Later on, I discovered that if we don't want to involve the <code>System.Runtime.InteropServices._Type</code> interface in the workarounds, the problem doesn't occur either by:</p>\n\n<ol>\n<li><p>Adding a static field to the <code>Test</code> class and initializing it (without casting it to <code>_Type</code>):</p>\n\n<pre><code>static ConstructorInfo _dummy2 = typeof(object).TypeInitializer;\n</code></pre></li>\n<li><p>Or by initializing the <code>cctor</code> variable itself as a static field of the class:</p>\n\n<pre><code>static ConstructorInfo cctor = typeof(Test).TypeInitializer;\n</code></pre></li>\n</ol>\n\n<p>I'm looking forward to your feedback.</p>\n", "is_accepted": false, "tags": [], "answer_id": 16588486, "down_vote_count": 0, "last_activity_date": 1368710523, "creation_date": 1368710076, "comment_count": 0, "score": 4, "owner": {"display_name": "Alex Filipovici", "reputation": 17212, "user_id": 674700, "user_type": "registered", "accept_rate": 57}, "last_editor": {"display_name": "Alex Filipovici", "reputation": 17212, "user_id": 674700, "user_type": "registered", "accept_rate": 57}, "last_edit_date": 1368710523, "up_vote_count": 4}], "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "down_vote_count": 1, "close_vote_count": 0, "question_id": 11593615}, {"last_activity_date": 1366608173, "accepted_answer_id": 442330, "creation_date": 1231917681, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1231928372, "favorite_count": 6, "view_count": 1773, "delete_vote_count": 0, "title": "What's the best way to represent a stage script in HTML?", "comment_count": 0, "score": 23, "body": "<p>I have a sketch that I want to put up on my website, and I also intend to write a short play at some point which I'd also want to make freely available.</p>\n\n<p>I'm trying to work out the best way of representing this in HTML. I basically need two columns - one for the character speaking, and one for the text. Each speech obviously needs to line up with the speaker though. In other words, something like this:</p>\n\n<pre>\n    Jeff        This sure is a nice website we've got now.\n\n    Joel        It certainly is. By the way, working at FogCreek rocks.\n\n    Jeff        Of course it does. Have you played Rock Band yet? It's\n                 a lot of fun.\n</pre>\n\n<p>(Well it's better than lorem ipsum...)</p>\n\n<p>I know how I could do this with HTML tables (with one table row per speech) but that seems pretty ugly, and everyone certainly seems to be keen on using CSS to represent non-tabular data. I can't see how this really counts a tabular data - my use of \"row\" and \"column\" earlier was to do with the layout rather than the fundamental data.</p>\n\n<p>So, any ideas? I think most of the script websites I've seen (not many, admittedly) either use <code>&lt;pre&gt;</code> like my example above, or don't bother trying to keep the normal script format, instead just prefixing each paragraph with the speaker's name. (See the podcast wiki for an example of this style.) I'm having trouble working out even what HTML elements I should be using to represent this, frankly - a dictionary definition list with the speaker as the term and the speech as the definition is probably the closest I've thought of, but that feels like abuse.</p>\n", "is_answered": true, "up_vote_count": 24, "tags": ["html", "css", "layout", "table"], "reopen_vote_count": 0, "answers": [{"body": "<p>IMO that actually is tabular data.  First column is speaker, second column is text.</p>\n\n<p>If you want to be fashionable and aggressively eschew tables, though, what I believe is compliant with what the Web mavens are dictating this season is a structure like:</p>\n\n<pre><code>&lt;div class=\"play\"&gt;\n  &lt;div class=\"line\"&gt;\n    &lt;div class=\"speaker\"&gt;Jeff&lt;/div&gt;\n    &lt;div class=\"text\"&gt;This sure is a nice website we've got now. &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"line\"&gt;\n    &lt;div class=\"speaker\"&gt;Joel&lt;/div&gt;\n    &lt;div class=\"text\"&gt;It certainly is. By the way, working at FogCreek rocks.&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Then you control how that lays out with appropriate CSS.</p>\n\n<p>If it looks like you're basically writing XML and using CSS to specify how it lays out, well, that's because that's what the Web mavens believe you should be doing, AFAICT.</p>\n", "is_accepted": false, "tags": [], "answer_id": 442192, "down_vote_count": 4, "last_activity_date": 1363269542, "comments": [{"body": "That leads to an interesting idea, actually - XML + XSLT. &lt;speech&gt;&lt;speaker&gt;Jeff&lt;/speaker&gt;&lt;text&gt;Foo&lt;/text&gt;&lt;/speech&gt;. Hmm. Next job: a WYSIWYG app for it... otherwise I can see the creative flow getting somewhat interrupted :)", "edited": false, "comment_id": 264081, "creation_date": 1231918648, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "(I can use the XSLT to create tables instead of huge numbers of divs, of course.)", "edited": false, "comment_id": 264086, "creation_date": 1231918772, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "This is almost as much markup as a table...", "edited": false, "comment_id": 264092, "creation_date": 1231918962, "score": 0, "owner": {"display_name": "Eran Galperin", "reputation": 56993, "user_id": 10585, "user_type": "registered", "accept_rate": 60}}, {"body": "@Jon Skeet: Not unreasonable.  May be just as well to have your play editing interface store in a database, output whatever final form is useful, and skip the XSLT, though.", "edited": false, "comment_id": 264102, "creation_date": 1231919450, "score": 0, "owner": {"display_name": "chaos", "reputation": 78028, "user_id": 47529, "user_type": "registered", "accept_rate": 100}}, {"body": "@Eran Galperin: Yup.  But it&#39;s the magically politically approved divs, not the evil counterrevolutionary tables, so it&#39;s Right and Good. (Can you tell I think some people are a bit snooty and prima-donnaish with their knee-jerk &quot;eww, tables&quot; diatribes?  Yeah, I thought you could.)", "edited": false, "comment_id": 264106, "creation_date": 1231919568, "score": 0, "owner": {"display_name": "chaos", "reputation": 78028, "user_id": 47529, "user_type": "registered", "accept_rate": 100}}, {"body": "I don&#39;t agree. The same structure (two columns) can be implemented using semantic tags with much less markup, easily.", "edited": false, "comment_id": 264107, "creation_date": 1231919712, "score": 0, "owner": {"display_name": "Eran Galperin", "reputation": 56993, "user_id": 10585, "user_type": "registered", "accept_rate": 60}}, {"body": "@Eran Galperin: While I think the divs are kind of ridiculous and would vote for tables in the first place, I have to point out that you and Mark Tyler&#39;s examples have a lot less markup, but they&#39;re toy examples that can&#39;t actually be used in a non-trivial production website. (cont.)", "edited": false, "comment_id": 264121, "creation_date": 1231920077, "score": 0, "owner": {"display_name": "chaos", "reputation": 78028, "user_id": 47529, "user_type": "registered", "accept_rate": 100}}, {"body": "@Eran Galperin: It&#39;s insanely bad practice to globally repurpose semantic tags for something like this the way both of your examples are doing.  In real production, your markup would be expanded by the class (or, ugh, id) attributes necessary to isolate your behavioral specifications.", "edited": false, "comment_id": 264125, "creation_date": 1231920206, "score": 0, "owner": {"display_name": "chaos", "reputation": 78028, "user_id": 47529, "user_type": "registered", "accept_rate": 100}}, {"body": "of course in real world it would have a class, or a container with a class. it is just an example, not a full application. I added a container to my example, and still less than half the markup", "edited": false, "comment_id": 264141, "creation_date": 1231920923, "score": 0, "owner": {"display_name": "Eran Galperin", "reputation": 56993, "user_id": 10585, "user_type": "registered", "accept_rate": 60}}, {"body": "@Eran Galperin: &#39;kay.  I do like your example better with the container.  Our examples are aimed at different things, really.  Mine isn&#39;t trying to minimize markup, it&#39;s trying to map logical structure and maximize the clarity and precision of associated CSS.", "edited": false, "comment_id": 264157, "creation_date": 1231921583, "score": 0, "owner": {"display_name": "chaos", "reputation": 78028, "user_id": 47529, "user_type": "registered", "accept_rate": 100}}, {"body": "Minimizing markup is not an ideal, but it does help maintainability and simplicity. Using named tags is also good for semantics (screen readers, etc)", "edited": false, "comment_id": 264165, "creation_date": 1231921966, "score": 0, "owner": {"display_name": "Eran Galperin", "reputation": 56993, "user_id": 10585, "user_type": "registered", "accept_rate": 60}}, {"body": "@chaos &quot;IMO that actually is tabular data.&quot;  - I absolutely agree.", "edited": false, "comment_id": 264175, "creation_date": 1231922338, "score": 0, "owner": {"display_name": "yaauie", "reputation": 1021, "user_id": 53098, "user_type": "registered"}}, {"body": "Definitely a table - no need for divs - since this is of the form (a:b)+ and not a keyvalue form since &quot;a&quot; can be repeated (rules out &lt;dl&gt;).", "edited": false, "comment_id": 264216, "creation_date": 1231924481, "score": 0, "owner": {"display_name": "annakata", "reputation": 47432, "user_id": 13018, "user_type": "registered", "accept_rate": 73}}, {"body": "@annakata: the spec says nothing about unique terms within a DL. A DL can contain any number of dd/dt elements in any order (well, as long as there&#39;s at least 1 in the entire list!). This makes the humble DL very flexible and quite well-suited to tasks such as this. Until we get an element ...", "edited": false, "comment_id": 267829, "creation_date": 1232022239, "score": 0, "owner": {"display_name": "Bobby Jack", "reputation": 8587, "user_id": 5058, "user_type": "registered", "accept_rate": 62}}, {"body": "... aimed directly at scripts, I think this is the best we can do. I guess a table isn&#39;t totally wrong, but I generally get suspicious about tabular data that MUST be ordered in a fixed way, and not by a given column. This is my own personal definition, of course.", "edited": false, "comment_id": 267832, "creation_date": 1232022349, "score": 0, "owner": {"display_name": "Bobby Jack", "reputation": 8587, "user_id": 5058, "user_type": "registered", "accept_rate": 62}}], "creation_date": 1231918506, "comment_count": 15, "score": 4, "owner": {"display_name": "chaos", "reputation": 78028, "user_id": 47529, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "Barnee", "reputation": 2182, "user_id": 1581050, "user_type": "registered"}, "last_edit_date": 1363269542, "up_vote_count": 8}, {"body": "<p>I would use headers and paragraphs.</p>\n\n<pre><code>&lt;div class=\"play\"&gt;\n    &lt;h2&gt;Jeff&lt;/h2&gt;        \n    &lt;p&gt;This sure is a nice website we've got now.&lt;/p&gt;\n\n    &lt;h2&gt;Joel&lt;/h2&gt;\n    &lt;p&gt;It certainly is. By the way, working at FogCreek rocks.&lt;/p&gt;\n\n    &lt;h2&gt;Jeff&lt;/h2&gt;        \n    &lt;p&gt;Of course it does. Have you played Rock Band yet? It's&lt;br /&gt;\n    a lot of fun.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>With the following styles it would arrange as you presented it:</p>\n\n<pre><code>.play h2 {\n    float:left; \n    clear:left;\n    width:100px;\n    margin:0;\n}\n.play p {\n    margin-left:100px;\n}\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 442202, "down_vote_count": 0, "last_activity_date": 1231920892, "creation_date": 1231918891, "comment_count": 0, "score": 4, "owner": {"display_name": "Eran Galperin", "reputation": 56993, "user_id": 10585, "user_type": "registered", "accept_rate": 60}, "last_editor": {"display_name": "Eran Galperin", "reputation": 56993, "user_id": 10585, "user_type": "registered", "accept_rate": 60}, "last_edit_date": 1231920892, "up_vote_count": 4}, {"body": "<p>More proper (semantically) and shorter would be to use definition lists:</p>\n\n<pre><code>&lt;dl&gt;\n   &lt;dt&gt;Jeff&lt;/dt&gt;\n   &lt;dd&gt;This sure is a nice website we've got now.&lt;/dd&gt;\n&lt;/dl&gt;\n\n\ndl {\n  overflow:hidden;\n}\n\ndl dt {\n  float:left;\n  width:30%;\n}\n\ndl dd {\n  float:left;\n  width:70%;\n}\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 442206, "down_vote_count": 1, "last_activity_date": 1366608173, "comments": [{"body": "I don&#39;t really agree that that&#39;s necessarily semantically proper.  An actual definition list doesn&#39;t have an extended series of multiple definitions for the term &quot;Jeff&quot;.", "edited": false, "comment_id": 264096, "creation_date": 1231919171, "score": 6, "owner": {"display_name": "chaos", "reputation": 78028, "user_id": 47529, "user_type": "registered", "accept_rate": 100}}, {"body": "Thinking about this some more, I&#39;d say the same thing if the &lt;dl&gt; element were called &lt;al&gt;, association list, but not if it were &lt;pl&gt;, paired list.", "edited": false, "comment_id": 264101, "creation_date": 1231919300, "score": 0, "owner": {"display_name": "chaos", "reputation": 78028, "user_id": 47529, "user_type": "registered", "accept_rate": 100}}, {"body": "Sure, but unfortunatelly HTML doesn&#39;t have the &lt;al&gt; or &lt;pl&gt; tags implemented. There&#39;s so much things missing in HTML.. :)", "edited": false, "comment_id": 264162, "creation_date": 1231921829, "score": 0, "owner": {"display_name": "Deniss Kozlovs", "reputation": 2782, "user_id": 53948, "user_type": "registered", "accept_rate": 88}}, {"body": "Chaos, I would tend to agree, but consider that the HTML 4.01 spec (for instance) actually says that &quot;Another application of DL, for example, is for marking up dialogues, with each DT naming a speaker, and each DD containing his or her words.&quot;", "edited": false, "comment_id": 264996, "creation_date": 1231945350, "score": 9, "owner": {"display_name": "Will Wagner", "reputation": 2277, "user_id": 25468, "user_type": "registered"}}], "creation_date": 1231918949, "comment_count": 4, "score": 32, "owner": {"display_name": "Deniss Kozlovs", "reputation": 2782, "user_id": 53948, "user_type": "registered", "accept_rate": 88}, "last_editor": {"display_name": "WChargin", "reputation": 6688, "user_id": 732016, "user_type": "registered", "accept_rate": 86}, "last_edit_date": 1366608173, "up_vote_count": 33}, {"body": "<p>Tables is the way to go.</p>\n\n<p>Anything else like messing around with &lt;div&gt;s and css or XSLT is just reinventing the &lt;table&gt; but with a c**p syntax.</p>\n\n<p>I would go for three or four fixed width colums. (Any non-trivial play is going to need stage directions, special effects, sound effects etc.).</p>\n", "answer_id": 442221, "tags": [], "down_vote_count": 4, "last_activity_date": 1231919459, "comments": [{"body": "Stage directions etc are generally represented in the same column as the speech, but in italics. It does sound like tables may well be the best way to go though.", "edited": false, "comment_id": 264150, "creation_date": 1231921341, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Oh, but now I&#39;ve read all the other answers a couple of times, it&#39;s getting less clear...", "edited": false, "comment_id": 264155, "creation_date": 1231921523, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Don&#39;t let the anti-table bullies scare ya.  If the situation calls for a GOTO, then by God it calls for a GOTO.", "edited": false, "comment_id": 264172, "creation_date": 1231922292, "score": 0, "owner": {"display_name": "chaos", "reputation": 78028, "user_id": 47529, "user_type": "registered", "accept_rate": 100}}, {"body": "I see no advantage to avoiding tables here. I would, however, recommend using &lt;th&gt; elements for your names, as they are to the speech what headers are to numbers in a numeric grid.", "edited": false, "comment_id": 264173, "creation_date": 1231922294, "score": 0, "owner": {"display_name": "yaauie", "reputation": 1021, "user_id": 53098, "user_type": "registered"}}, {"body": "@chaos: The pro/anti table debate is <i>so</i> frequently miscast - tables are a perfectly acceptable solution to a range of problems. The troubles arise when people start to use tables as a means of layout control where the content has no earthly relationship with a table. It&#39;s all about the semantics.", "edited": false, "comment_id": 264226, "creation_date": 1231924744, "score": 0, "owner": {"display_name": "annakata", "reputation": 47432, "user_id": 13018, "user_type": "registered", "accept_rate": 73}}, {"body": "@chaos - just because I care, doesn&#39;t make me a bully!", "edited": false, "comment_id": 266625, "creation_date": 1231973115, "score": 0, "owner": {"display_name": "Steve Perks", "reputation": 2448, "user_id": 16124, "user_type": "registered", "accept_rate": 69}}], "creation_date": 1231919459, "comment_count": 6, "score": 2, "owner": {"display_name": "James Anderson", "reputation": 20231, "user_id": 38207, "user_type": "registered", "accept_rate": 83}, "is_accepted": false, "up_vote_count": 6}, {"body": "<p>I second the heresy :-)</p>\n\n<p>Always good to consider CSS before resorting to tables - but often tables really are the best fit. It looks like it in this case.</p>\n\n<p>The only additional consideration would be accessibility. I've heard that tables make it harder for text reader software to process tables, but I don't see why this would be the case (feel free to comment here if you know more).</p>\n\n<p>One other thing - I presume you'd be holding the raw data in some other format first - perhaps a database, or xml or some other structured text?</p>\n\n<p>In any case, getting it into an xml format and tranforming that to html with xslt can be quite liberating when it comes to playing with this stuff.</p>\n", "answer_id": 442330, "tags": [], "down_vote_count": 2, "last_activity_date": 1231923616, "creation_date": 1231923616, "comment_count": 0, "score": 8, "owner": {"display_name": "philsquared", "reputation": 14749, "user_id": 32136, "user_type": "registered", "accept_rate": 65}, "is_accepted": true, "up_vote_count": 10}, {"body": "<p>Please avoid the \"sledge hammer syndrome\" (if your only tool is a hammer, you try to treat every problem like a nail). HTML is a <em>representation</em> language, not a <em>source</em> language.</p>\n\n<p>So my suggestion is to write the play in something which can represent your thoughts best (not necessarily XML) and then convert that to HTML. For my own works, I'm using a recursive XML parser which can fall out of XML parsing for certain elements:</p>\n\n<pre><code>&lt;content&gt;&lt;&lt;Hello,&gt;&gt; Forne smiled and thought: &lt;&lt;T Idiot.&gt;&gt;&lt;/content&gt;\n</code></pre>\n\n<p>My parser will invoke a custom parser to parse the content of <code>&lt;content&gt;</code>. In my case, it will create an intermediate XML tree:</p>\n\n<pre><code>&lt;content&gt;&lt;say&gt;Hello,&lt;/say&gt; &lt;char&gt;Forne&lt;/char&gt; smiled and thought: &lt;think&gt;Idiot.&lt;/think&gt;&lt;/content&gt;\n</code></pre>\n\n<p>This tree is then converted into HTML, TeX, PDF, whatever.</p>\n\n<p>[EDIT] My strategy to come up with a compact language works like this: I start with XML. After a while, I look at the XML and try to see patterns. Then I think how I could express these patterns in a more compact way 1.) as XML, 2.) as XML text (with custom markup) and 3.) as something else entirely. When an idea hits me, I write a parser for the new format.</p>\n\n<p>Frankly, writing parsers which can turn something into XML for automatic background processing is a minor task, today.</p>\n", "is_accepted": false, "tags": [], "answer_id": 442339, "down_vote_count": 0, "last_activity_date": 1231931614, "comments": [{"body": "+1 for HTML just being the representation. I&#39;m not sure what the best source language is at this point - but I will need to know what HTML to generate at some point. Of course, with an appropriate source language I can try all the ideas given here fairly easily...", "edited": false, "comment_id": 264329, "creation_date": 1231928630, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon: There are three people on this planet who can design a good language. One of them is Guido van Rossum and the other two isn&#39;t me or you ;)", "edited": false, "comment_id": 264397, "creation_date": 1231931440, "score": 0, "owner": {"display_name": "Aaron Digulla", "reputation": 178090, "user_id": 34088, "user_type": "registered", "accept_rate": 78}}], "creation_date": 1231923844, "comment_count": 2, "score": 4, "owner": {"display_name": "Aaron Digulla", "reputation": 178090, "user_id": 34088, "user_type": "registered", "accept_rate": 78}, "last_editor": {"display_name": "Aaron Digulla", "reputation": 178090, "user_id": 34088, "user_type": "registered", "accept_rate": 78}, "last_edit_date": 1231931614, "up_vote_count": 4}, {"body": "<p>If you want to do it semantically, I would use labels, something like:</p>\n\n<pre><code>&lt;div class=\"script\"&gt;\n&lt;label for=\"Jeff1\"&gt;Jeff&lt;label&gt;\n&lt;div id=\"Jeff1\"&gt;\n  &lt;p&gt;This sure is a nice website we've got now.&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;label for=\"Joel1\"&gt;Joel&lt;/label&gt;\n&lt;div id=\"Joel1\"&gt;\n  &lt;p&gt;It certainly is.&lt;/p&gt;\n  &lt;p&gt;By the way, working at FogCreek rocks.&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;label for=\"Jeff2\"&gt;Jeff&lt;/label&gt;\n&lt;div id=\"Jeff2\"&gt;\n  &lt;p&gt;Of course it does.&lt;/p&gt;\n  &lt;p&gt;Have you played Rock Band yet? It's a lot of fun.&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;/div&gt;\n</code></pre>\n\n<p>That degrades pretty nicely and I think the label is a bit more appropriate for what you're trying to do. And then, in your style sheet, I would style it something like Eran Galperin's example CSS.</p>\n\n<p>The other suggestion I would have, if you're serious about this, would be to look further into how dead tree scripts are written and do your utmost to preserve their style. This will help ensure that it looks familiar (read professional) to your audience.</p>\n", "answer_id": 442475, "tags": [], "down_vote_count": 2, "last_activity_date": 1231927522, "comments": [{"body": "I&#39;m serious enough to have a look at some of the scripts I&#39;ve got knocking around and try to work out any kinks. I&#39;m not serious enough to spend hours and hours on it :) I like the look of this apart from having to have a separate ID for each speech - that doesn&#39;t sound ideal to me :(", "edited": false, "comment_id": 264326, "creation_date": 1231928563, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "You can do without ids and leave the for attribute out of the divs.", "edited": false, "comment_id": 267514, "creation_date": 1232012073, "score": 0, "owner": {"display_name": "Travis", "reputation": 6530, "user_id": 1685, "user_type": "registered", "accept_rate": 89}}, {"body": "That&#39;s definitely an abuse of the <a href=\"http://www.w3.org/TR/html-markup/label.html\" rel=\"nofollow\"><code>label</code> element</a> which is designed to give a description to a form input.", "edited": false, "comment_id": 23058508, "creation_date": 1366610509, "score": 2, "owner": {"display_name": "steveax", "reputation": 9032, "user_id": 557612, "user_type": "registered"}}], "creation_date": 1231927522, "comment_count": 3, "score": -1, "owner": {"display_name": "Travis", "reputation": 6530, "user_id": 1685, "user_type": "registered", "accept_rate": 89}, "is_accepted": false, "up_vote_count": 1}, {"body": "<p>My favourite example of marking up something like this is one of Tantek's XHTML compounds <a href=\"http://tantek.com/presentations/2005/03/elementsofxhtml/\" rel=\"nofollow\">http://tantek.com/presentations/2005/03/elementsofxhtml/</a> (check out the conversation bit)</p>\n\n<p>In summary it goes like so:</p>\n\n<pre><code>&lt;ol&gt;\n  &lt;li&gt;&lt;cite&gt;Jeff&lt;/cite&gt;\n    &lt;blockquote&gt;&lt;p&gt;This sure is a nice website we've got now.&lt;/p&gt;&lt;blockquote&gt;\n  &lt;/li&gt;\n  &lt;li&gt;&lt;cite&gt;Joel&lt;/cite&gt;\n    &lt;blockquote&gt;&lt;p&gt;It certainly is. By the way, working at FogCreek rocks.&lt;/p&gt;&lt;/blockquote&gt;\n  &lt;/li&gt;\n  ...etc...\n&lt;/ol&gt;\n</code></pre>\n\n<p>Not sure how you'd mark up stage directions etc... Maybe you'll end up creating a new microformat :)</p>\n\n<p>Also that markup has some ideal CSS hooks, with discrete LInes unlike a definition list.</p>\n", "is_accepted": false, "tags": [], "answer_id": 442572, "down_vote_count": 1, "last_activity_date": 1231930519, "comments": [{"body": "Beat me to the cite, blockquote combination. I wasn&#39;t going to add a list though, although that is exactly what it is, a list of lines.", "edited": false, "comment_id": 264373, "creation_date": 1231930237, "score": 0, "owner": {"display_name": "John_", "reputation": 1930, "user_id": 26081, "user_type": "registered", "accept_rate": 85}}], "creation_date": 1231929900, "comment_count": 1, "score": 11, "owner": {"display_name": "sanchothefat", "reputation": 7359, "user_id": 42147, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "sanchothefat", "reputation": 7359, "user_id": 42147, "user_type": "registered", "accept_rate": 100}, "last_edit_date": 1231930519, "up_vote_count": 12}, {"body": "<p>I'd say</p>\n\n<pre><code>&lt;dialog&gt;\n  &lt;dt&gt;Jeff\n  &lt;dd&gt;This sure is a nice website we've got now.\n  &lt;dt&gt;Joel\n  &lt;dd&gt;It certainly is. By the way, working at FogCreek rocks.\n  &lt;dt&gt;Jeff\n  &lt;dd&gt;Of course it does. Have you played Rock Band yet? It's a lot of fun.\n&lt;/dialog&gt;\n</code></pre>\n\n<p>as defined in <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/semantics.html#the-dialog-element\">HTML5</a>.</p>\n\n<p>Of course, you'll need a <code>&lt;script>document.createElement('dialog');&lt;/script></code> to get IE to do something sensible and a <code>dialog { display:block; }</code> in your CSS to get it to work completely.</p>\n", "answer_id": 444378, "tags": [], "down_vote_count": 0, "last_activity_date": 1231962083, "comments": [{"body": "Wow - that&#39;s really cool! Now, how many current browsers support it?", "edited": false, "comment_id": 266156, "creation_date": 1231966115, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Like it or not, I&#39;d suggest that this supports the initial suggested use in the w3 specs of DL. No?", "edited": false, "comment_id": 266728, "creation_date": 1231976037, "score": 0, "owner": {"display_name": "Steve Perks", "reputation": 2448, "user_id": 16124, "user_type": "registered", "accept_rate": 69}}, {"body": "I don\u2019t know what kind of history this had, but <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#the-dialog-element\" rel=\"nofollow\">it\u2019s not appropriate now</a>.", "edited": false, "comment_id": 32314187, "creation_date": 1390955256, "score": 1, "owner": {"display_name": "minitech", "reputation": 107014, "user_id": 707111, "user_type": "moderator", "accept_rate": 100}}], "creation_date": 1231962083, "comment_count": 3, "score": 12, "owner": {"display_name": "Ms2ger", "reputation": 9067, "user_id": 33466, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 12}, {"body": "<p>You're not going to get a definitive answer to this question as HTML has many gaps, one of which is this - there are some very solid articles dotted around the web about his subject and a good place to start would be <a href=\"http://www.brucelawson.co.uk/2006/breaking-news-w3c-specs-are-not-word-of-god/\" rel=\"nofollow\">Bruce Lawson's article from 2006</a>.</p>\n\n<p>Considering that there is no answer to the question, the best we can do is look at what elements that are available to us and make our own compromises based upon our (and the communities) interpretation of the guidelines.</p>\n\n<p>I personally like the <code>cite</code>/<code>blockquote</code> and data list route. I know that data lists smack of none semantic markup, but I truly believe that the intent of data lists isn't to list data definitions purely in a dictionary fashion, but to pair data where <code>ul</code>s and <code>ol</code>s can't.</p>\n\n<p>I've spent a lot of time thinking about semantics, and one thing I (as well as most others in the field) am sure of when looking at all questions of markup is that tables are not the answer to 99.9% of markup questions (if it's not tabular data where you can use <code>th</code>, <code>caption</code> then tables should really be dropped from your inventory). That said, I would also say that exclusively using <code>div</code>s is also probably not the right answer.</p>\n\n<p>I very much doubt that the up-votes in this question will reflect the best approach, but will more likely reflect an agreement to the approach base upon the voters current knowledge and use of HTML.</p>\n", "is_accepted": false, "tags": [], "answer_id": 444939, "down_vote_count": 0, "last_activity_date": 1323476685, "creation_date": 1231971941, "comment_count": 0, "score": 2, "owner": {"display_name": "Steve Perks", "reputation": 2448, "user_id": 16124, "user_type": "registered", "accept_rate": 69}, "last_editor": {"display_name": "Tim Cooper", "reputation": 68459, "user_id": 142162, "user_type": "registered", "accept_rate": 100}, "last_edit_date": 1323476685, "up_vote_count": 2}], "answer_count": 10, "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "down_vote_count": 1, "close_vote_count": 0, "question_id": 442176}, {"last_activity_date": 1361447668, "creation_date": 1361042824, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1361135102, "favorite_count": 3, "view_count": 1857, "delete_vote_count": 0, "title": "How can I find out what's causing differences in generated Sandcastle docs?", "comments": [{"body": "You are definitely sure that there isn&#39;t another version in your path of the SC executable? Hmm, is there a Unix &quot;which&quot; command that is usable for Windows, maybe.", "edited": false, "comment_id": 20922952, "creation_date": 1361043211, "score": 1, "owner": {"display_name": "larsw", "reputation": 2488, "user_id": 2732, "user_type": "registered", "accept_rate": 73}}, {"body": "@larsw: There&#39;s only one SandcastleHelpFileBuilder.targets file on each machine :(", "edited": false, "reply_to_user": {"display_name": "larsw", "reputation": 2488, "user_id": 2732, "user_type": "registered", "accept_rate": 73}, "comment_id": 20923054, "creation_date": 1361043543, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Could the difference be due to any Windows system /.NET update/patch that is installed on one machine, but not on the other? Did you install all present .NET framework versions on the two machines in an identical way?", "edited": false, "comment_id": 20924286, "creation_date": 1361048273, "score": 1, "owner": {"display_name": "stakx", "reputation": 40776, "user_id": 240733, "user_type": "registered", "accept_rate": 95}}, {"body": "@stakx: Both machines were installed &quot;fairly recently&quot; (late 2012) and both are completely up to date with Windows Update... but that&#39;s not quite the same thing, of course...", "edited": false, "reply_to_user": {"display_name": "stakx", "reputation": 40776, "user_id": 240733, "user_type": "registered", "accept_rate": 95}, "comment_id": 20925268, "creation_date": 1361051917, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@larsw You can use <code>where</code> in Windows cmd-line to find (by default) exacutables located along the <code>PATH</code> env variable.", "edited": false, "reply_to_user": {"display_name": "larsw", "reputation": 2488, "user_id": 2732, "user_type": "registered", "accept_rate": 73}, "comment_id": 20964192, "creation_date": 1361197296, "score": 1, "owner": {"display_name": "Cristi Diaconescu", "reputation": 9922, "user_id": 11545, "user_type": "registered", "accept_rate": 79}}], "comment_count": 5, "score": 45, "body": "<p>In Noda Time, we generate our documentation using Sandcastle and <a href=\"http://shfb.codeplex.com/\">SHFB</a>. We then commit the documentation back into the source repository - primarily because that makes it easy to view the latest (and historical) docs.</p>\n\n<p>I'm the primary developer for the project, but I use two computers - and unfortunately, at the moment they're building different documentation even though they're both updated to the same source.</p>\n\n<p>The two computers are the same in every important way I can think of:</p>\n\n<ul>\n<li>Sandcastle 2.7.2.0</li>\n<li>SHFB 1.9.6.0</li>\n<li>VS 2012 Professional (both reported version 11.0.50727.1 in \"Programs\", both \"Version 11.0.51106.01 Update 1\" in the \"About\" page)</li>\n<li>Latest version of local help content for .NET Framework 4.5 (and no local help content for other framework versions)</li>\n</ul>\n\n<p>Steps taken to ensure a clean build:</p>\n\n<ul>\n<li>Deleted the SHFB cache folder (<code>C:\\Users\\Jon\\AppData\\Local\\EWSoftware\\Sandcastle Help File Builder\\Cache</code>)</li>\n<li>Deleted the folder the documentation is generated into</li>\n<li>Deleted the user settings file related to the SHFB project file</li>\n<li>Deleted the symbol cache in Visual Studio</li>\n</ul>\n\n<p>Still the differences remain. They appear to be limited to documentation inherited from MSDN itself, in particular <a href=\"http://msdn2.microsoft.com/en-us/library/4k87zsw7\"><code>Object.Finalize</code></a>.</p>\n\n<p>Version 1 (generated on machine \"Chubby\"):</p>\n\n<pre><code>&lt;div class=\"summary\"&gt;Allows an object to try to free resources and perform\nother cleanup operations before it is reclaimed by garbage collection.&lt;/div&gt;\n</code></pre>\n\n<p>Version 2 (generated on machine \"Sandy\"):</p>\n\n<pre><code>&lt;div class=\"summary\"&gt;Allows an &lt;a \n   href=\"http://msdn2.microsoft.com/en-us/library/e5kfa45b\" target=\"_blank\"&gt;\n   Object&lt;/a&gt; to attempt to free resources and perform other cleanup operations\n   before the &lt;a href=\"http://msdn2.microsoft.com/en-us/library/e5kfa45b\" \n   target=\"_blank\"&gt;Object&lt;/a&gt; is reclaimed by garbage collection.&lt;/div&gt;\n</code></pre>\n\n<p>Both link to the same MSDN documentation, which looks like version 1 (no links to <code>Object</code>).</p>\n\n<p>Looking at a few of the changed files, the change is consistent and restricted to this member.</p>\n\n<p>Where might Sandcastle be getting this documentation from, and how can I get both computers to behave the same way?</p>\n\n<p>EDIT: One more fragment of information - after cleaning the cache and rebuilding the docs on both machines, there are three files in the SHFB Cache directory:</p>\n\n<ul>\n<li>Reflection.cache has the same size on both machines</li>\n<li>MsdnUrl.cache has the same size on both machines</li>\n<li>.NETFramework_4.0.0319_E8879A28.cache has size 13,377,733 bytes on Chubby, and 13,337,949 bytes on Sandy</li>\n</ul>\n\n<p>EDIT: Significant progress! I've found where the difference is probably coming from...</p>\n\n<p>The file <code>c:\\Windows\\Microsoft.NET\\Framework\\v2.0.50727\\en\\mscorlib.xml</code>:</p>\n\n<ul>\n<li>On Chubby is 8,005,263 bytes with a date of 12th December 2011, and has the non-linked text for <code>Finalize</code></li>\n<li>On Sandy is 9,740,370 bytes with a date of 31st August 2009, and has the text for <code>Finalize</code> which includes links</li>\n</ul>\n\n<p>On both machines, <code>mscorlib.dll</code> itself is the same size (4,550,656 bytes) and has a modified date of 13th September 2012.</p>\n\n<p>But how can I get them to be the same? Where does that difference come from? (Service packs?)</p>\n\n<p>EDIT: Okay, the version in <code>c:\\Windows</code> was a red herring - it's the version in <code>c:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework</code> that's to blame. I'm going to see if I can find out why that might be different between installations...</p>\n", "is_answered": true, "up_vote_count": 48, "tags": ["documentation", "sandcastle", "finalize", "shfb"], "reopen_vote_count": 0, "answer_count": 1, "answers": [{"body": "<p>A couple of ideas considering your recent edits, although I agree it is a bit shooting in the dark...</p>\n\n<p>I would use a tool like \"Beyond Compare\" to compare the .Net Framework files and XML files on both machines (\"folder compare\" profile).\nFavour the binary level comparison to be perfectly sure... if both of your machines are local, it should be very fast.</p>\n\n<p>You can also try to run Mark Russinovich's Process Monitor ( <a href=\"http://live.sysinternals.com/procmon.exe\">http://live.sysinternals.com/procmon.exe</a> ) on both machines and run the documentation building process.\nThis way, you will see which files are being read from and involved in the help file building process, and where they are coming from...\nYou will get a lot of output as it will show everything that happens in your system; you may want to disable registry and network monitoring, to only leave file monitoring, and also exclude any process unrelated to the documentation building process.</p>\n\n<p>I'm not an help generation expert, but I would think that the text comes from the XML files, so you may want to put a filter on only showing the xml files as well.</p>\n\n<p>If you can identify the files involved, then you might just have to copy them from one machine over to the other.</p>\n", "answer_id": 15001616, "tags": [], "down_vote_count": 0, "last_activity_date": 1361447668, "comments": [{"body": "I&#39;ve found the files involved now - it&#39;s definitely the reference assemblies. I&#39;ve got a temporary fix by removing inherited documentation, but I also want to know why those differences exist.", "edited": false, "comment_id": 21072588, "creation_date": 1361448239, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Do you have the version numbers of the differing assemblies? If you look for the version numbers using google site:support.microsoft.com do you find any KB mentionning them? A possibility could be an hotfix released out of the Windows Update cycle that would have landed on one of your machines somehow (another app having installed the hotfix as a prerequisite, for example)?", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 21073021, "creation_date": 1361449182, "score": 0, "owner": {"display_name": "Kharlos Dominguez", "reputation": 1109, "user_id": 367663, "user_type": "registered", "accept_rate": 91}}, {"body": "Sorry, no - the XML files in the reference assemblies directory. I have some folks in Microsoft looking into what might be happening (why there are two different versions).", "edited": false, "comment_id": 21073060, "creation_date": 1361449263, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1361447668, "comment_count": 3, "score": 10, "owner": {"display_name": "Kharlos Dominguez", "reputation": 1109, "user_id": 367663, "user_type": "registered", "accept_rate": 91}, "is_accepted": false, "up_vote_count": 10}], "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "down_vote_count": 3, "close_vote_count": 0, "question_id": 14914222}, {"last_activity_date": 1359492556, "accepted_answer_id": 14591974, "creation_date": 1359318550, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1359319354, "favorite_count": 2, "view_count": 2372, "delete_vote_count": 0, "title": "Can I get a \"sometimes portable\" class library project to load in Visual Studio Express?", "comments": [{"body": "Wow, very interesting question. Extremely weird how VS is loading commented out XML", "edited": false, "comment_id": 20300399, "creation_date": 1359319164, "score": 0, "owner": {"display_name": "Earlz", "reputation": 22528, "user_id": 69742, "user_type": "registered", "accept_rate": 70}}, {"body": "@pst: Which part only applies to the Express versions? The failing to load does. I don&#39;t know about the &quot;commenting out&quot; part. I&#39;ll clarify both.", "edited": false, "comment_id": 20300448, "creation_date": 1359319296, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Except the part about VS trying to load the commented xml fragment, this looks indeed like the purpose of the Express edition: you can&#39;t work with unsupported project types, regardless of whether the current configuration makes them active or not. Not sure I understand why you find it strange. Compare it to bringing your workbook to an exam and swear that you won&#39;t use it. It&#39;s thus prevented in the first place.", "edited": false, "comment_id": 20301511, "creation_date": 1359322760, "score": 0, "owner": {"display_name": "Simone", "reputation": 754, "user_id": 32093, "user_type": "registered", "accept_rate": 67}}, {"body": "@Simone: I&#39;m not expecting them to be &quot;worked with&quot; at all. I&#39;m happy for them to be treated as if they weren&#39;t there at all. I&#39;d like them to be ignored if the user doesn&#39;t try to interact with them at all. I don&#39;t think your comparison with the exam is relevant in the slightest - or if you want to make it relevant, I&#39;d think that&#39;s fine so long as the workbook has an alarm attached so that if you <i>tried</i> to use it, all hell would break loose. I have no problem with it failing if the user tries to build the PCL version.", "edited": false, "reply_to_user": {"display_name": "Simone", "reputation": 754, "user_id": 32093, "user_type": "registered", "accept_rate": 67}, "comment_id": 20301558, "creation_date": 1359322949, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "What&#39;s weird is that I&#39;ve just installed Visual Studio 2012 Express to my Windows 2008 Server box, and all 10 projects appeared to have opened just fine. All I did was double click the solution file and I appear to be able to browse all of the projects.", "edited": false, "comment_id": 20301962, "creation_date": 1359324410, "score": 0, "owner": {"display_name": "dash", "reputation": 31846, "user_id": 1073107, "user_type": "registered"}}, {"body": "This behavior is similar to what I experienced with VS 2012 Premium running on a Win7 machine when I tried to load a PCL that targets WinRT (a long with other platforms). Visual Studio failed to open the project with a similar message, but on Windows 8 machine the same project opened fined. I find this behavior erratic because even though I can&#39;t develop WinRT apps under Win7, this is a portable library, so it should be accessible on any of the platforms it&#39;s intended to support. Seems that portable profile in a project manifest may fool VS in thinking that it&#39;s something it does not support.", "edited": false, "comment_id": 20303191, "creation_date": 1359328908, "score": 0, "owner": {"display_name": "Vagif Abilov", "reputation": 3285, "user_id": 223675, "user_type": "registered", "accept_rate": 70}}, {"body": "@dash: That&#39;s really odd. I&#39;m trying it on Windows 8, and it doesn&#39;t work... on the same box where it works with VS Pro.", "edited": false, "reply_to_user": {"display_name": "dash", "reputation": 31846, "user_id": 1073107, "user_type": "registered"}, "comment_id": 20303730, "creation_date": 1359331259, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@VagifAbilov: It&#39;s failing for me on a Windows 8 box with VS Pro installed as well.", "edited": false, "reply_to_user": {"display_name": "Vagif Abilov", "reputation": 3285, "user_id": 223675, "user_type": "registered", "accept_rate": 70}, "comment_id": 20303733, "creation_date": 1359331275, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet: May I suggest checking if it works with just VS Express installed on Win8. Also, the order that VS Pro and VS Express are installed may be relevant. I&#39;m thinking about this problem from a &#39;there might be a bug in VS&#39; point of view.", "edited": false, "comment_id": 20304400, "creation_date": 1359334642, "score": 0, "owner": {"display_name": "Jonathan Parker", "reputation": 4441, "user_id": 4504, "user_type": "registered", "accept_rate": 86}}, {"body": "&lt;ProjectTypeGuids&gt; is a property that indicates to VS what project system to load when opening a given project file. Clearly the thing that reads it isn&#39;t a real XML reader if its still seeing it the comment. There&#39;s a bit of chicken and egg problem; the project system reads the XML, but VS doesn&#39;t know which project system to load until it itself reads this property - its a real hack.", "edited": false, "comment_id": 20304669, "creation_date": 1359336332, "score": 4, "owner": {"display_name": "David Kean", "reputation": 4104, "user_id": 1218765, "user_type": "registered"}}, {"body": "I don&#39;t think there&#39;s a going to be a way to do what you want - you&#39;ll need to separate the portable projects into separate projects, or remove the &lt;ProjectTypeGuid&gt; element entirely - this will opt you of &quot;portable&quot; enhancements, such as a UI for changing the target framework, etc. As a completely side note, I&#39;d really recommend that instead of treating portable as a separate build, instead you have a portable core, and then separate assemblies for desktop specific functionality. Have a look at what RX Extensions did for v2 for an example of what I mean.", "edited": false, "comment_id": 20304713, "creation_date": 1359336591, "score": 2, "owner": {"display_name": "David Kean", "reputation": 4104, "user_id": 1218765, "user_type": "registered"}}, {"body": "@DavidKean: I&#39;ll take a look - but unfortunately there are bits that are small changes within the same class, such as working round PCL not supplying <code>DateTimeFormatInfo.DateSeparator</code>. I quite like the idea of just removing the <code>&lt;ProjectTypeGuid&gt;</code> part entirely, if that&#39;s just around UI and not actual build...", "edited": false, "reply_to_user": {"display_name": "David Kean", "reputation": 4104, "user_id": 1218765, "user_type": "registered"}, "comment_id": 20308802, "creation_date": 1359355574, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@dash Which flavor of Express did you try? The &#39;for Windows Desktop&#39; or the &#39;for Windows 8&#39;? Maybe there are differences in allowed projects between the two?", "edited": false, "reply_to_user": {"display_name": "dash", "reputation": 31846, "user_id": 1073107, "user_type": "registered"}, "comment_id": 20311045, "creation_date": 1359362199, "score": 0, "owner": {"display_name": "jv42", "reputation": 6692, "user_id": 428381, "user_type": "registered", "accept_rate": 86}}, {"body": "@jv42 Good question - it was the <code>for Windows Desktop</code> version.", "edited": false, "reply_to_user": {"display_name": "jv42", "reputation": 6692, "user_id": 428381, "user_type": "registered", "accept_rate": 86}, "comment_id": 20311634, "creation_date": 1359363768, "score": 0, "owner": {"display_name": "dash", "reputation": 31846, "user_id": 1073107, "user_type": "registered"}}], "comment_count": 14, "score": 35, "body": "<p>For <a href=\"http://noda-time.googlecode.com\">Noda Time</a> version 1.1, the main goal is to build a Portable Class Library flavour, primarily to support Windows Phone and Windows Store apps. This means losing some functionality, so we build a desktop configuration and a PCL configuration (for each of debug, release, and \"signed release\").</p>\n\n<p>To avoid having to work with umpteen project files, all of the 6 configurations exist in the same project file. The <a href=\"https://code.google.com/p/noda-time/source/browse/src/NodaTime/NodaTime.csproj\">project file</a> is customized to generate a property called \"Portability\", which is set to either \"PCL\" or \"Desktop\", like this:</p>\n\n<pre><code>&lt;!-- Set the custom Portability property based on configuration --&gt;\n&lt;PropertyGroup&gt;\n  &lt;Portability Condition=\"'$(Configuration)' == 'Debug Portable'\"&gt;PCL&lt;/Portability&gt;\n  &lt;Portability Condition=\"'$(Configuration)' == 'Release Portable'\"&gt;PCL&lt;/Portability&gt;\n  &lt;Portability Condition=\"'$(Configuration)' == 'Signed Release Portable'\"&gt;PCL&lt;/Portability&gt;\n  &lt;!-- Default to desktop if not explicitly set above --&gt;\n  &lt;Portability Condition=\"'$(Portability)' == ''\"&gt;Desktop&lt;/Portability&gt;\n&lt;/PropertyGroup&gt;\n</code></pre>\n\n<p>We then have separate property groups for portable vs desktop, based on the above property. This is what defines the project type as \"class library\" or \"portable class library\" (along with the <code>OutputType</code> of <code>Library</code>, which is shared):</p>\n\n<pre><code>&lt;!-- Desktop-specific properties --&gt;\n&lt;PropertyGroup Condition=\"'$(Portability)' == 'Desktop'\"&gt;\n  &lt;TargetFrameworkVersion&gt;v3.5&lt;/TargetFrameworkVersion&gt;\n  &lt;TargetFrameworkProfile&gt;Client&lt;/TargetFrameworkProfile&gt;\n&lt;/PropertyGroup&gt;\n\n&lt;!-- PCL-specific properties --&gt;\n&lt;PropertyGroup Condition=\"'$(Portability)' == 'PCL'\"&gt;\n  &lt;MinimumVisualStudioVersion&gt;10.0&lt;/MinimumVisualStudioVersion&gt;\n  &lt;ProjectGuid&gt;{c78f6992-28d7-45c9-a4c1-6eaa649f3247}&lt;/ProjectGuid&gt;\n  &lt;TargetFrameworkVersion&gt;v4.0&lt;/TargetFrameworkVersion&gt;\n  &lt;TargetFrameworkProfile&gt;Profile2&lt;/TargetFrameworkProfile&gt;\n  &lt;ProjectTypeGuids&gt;{786C830F-07A1-408B-BD7F-6EE04809D6DB};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}&lt;/ProjectTypeGuids&gt;\n&lt;/PropertyGroup&gt;\n</code></pre>\n\n<p>This generally works very well - I have the different solution configurations, so I can build and test everything at a moment's notice, and I only need to add each new <code>.cs</code> file to a single project file. So under Visual Studio 2012 Professional (which is what I use) I'm perfectly happy.</p>\n\n<p>The problem comes when I try to load the solution in Visual Studio Express (either VS2010 or VS2012). While the solution is loading, it fails with an error to say that some projects can't be loaded, and the two projects which build PCL versions then have build output like this:</p>\n\n<pre><code>C:\\Path\\To\\NodaTime.csproj : error  :\n     The project file 'C:\\Path\\To\\NodaTime.csproj' cannot be opened.\n\nThere is a missing project subtype.\n     Subtype: '{786C830F-07A1-408B-BD7F-6EE04809D6DB}'\n     is unsupported by this installation.\n</code></pre>\n\n<p>(Reformatted for clarity.) The two projects refuse to load, so you can't even browse the source code.</p>\n\n<p>I had really hoped that even if Express users couldn't build the PCL versions, they'd still be able to load up the solution, browse the source, and build non-PCL versions. MSBuild works from the command line, but that's not as friendly.</p>\n\n<p>I've tried removing the solution configurations which refer to the PCL project configurations, and that doesn't help. Weirdly enough, even commenting out the XML element, like this:</p>\n\n<pre><code>&lt;!-- \n    &lt;ProjectTypeGuids&gt;(Guids as before)&lt;/ProjectTypeGuids&gt;\n --&gt;\n</code></pre>\n\n<p>doesn't help - although deleting the line does. It's as if Visual Studio isn't actually loading it as a real XML file. (I haven't tried loading the version with the commented out element into VS Pro.)</p>\n\n<p>I <em>could</em> go down the route of generating separate PCL project files if I need to, but I'd really like to avoid it if possible - it would make normal development more painful. Likewise I <em>could</em> generate Express-only PCL and solution files, but again I'd rather not - it just feels wrong.</p>\n\n<p>While ideally I'd like to support VS Express both 2010 and 2012, if there's a solution which only works for 2012, that would be a good start.</p>\n\n<p>So, is there any way of persuading Visual Studio Express that it really <em>can</em> load a project despite a conditional property group (whose condition isn't met) referring to a project type it doesn't know about?</p>\n", "is_answered": true, "up_vote_count": 35, "tags": ["msbuild", "visual-studio-express", "portable-class-library"], "reopen_vote_count": 0, "answer_count": 2, "answers": [{"body": "<p>As answered here:<br>\n<a href=\"http://social.msdn.microsoft.com/Forums/en-US/toolsforwinapps/thread/9c7fe120-14b5-49f8-ad09-f48dc80fa5c4\" rel=\"nofollow\">Visual Studio 2012 Express with Portable Class Library?</a><br>\nand here:<br>\n<a href=\"http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj714086%28v=vs.105%29.aspx\" rel=\"nofollow\">Share functionality using Portable Class Libraries</a></p>\n\n<blockquote>\n  <p>Portable Class library projects are not supported in the express\n  SKU...need a higher SKU for the full support.  Of course the binary\n  (e.g., using it as a reference) is, just not the project/source\n  support.</p>\n</blockquote>\n\n<p>I can imagine there is a simple reason for that - there are different types of VS2012 Express editions: for Windows Phone development, for Desktop apps, for Windows 8 apps... I bet the Windows Phone Express edition does not know about the Windows Phone project type and vice versa. This could be the simple reason why PCLs are not supported as well. </p>\n\n<p>Although the idea of Portable Class Libraries is really nice, it's still quite limited in many ways, for instance you cannot use conditional compilation using #if xy as far as I know. If you really have to use Visual Studio Express for development, then it might be better to use projects for each platform with referenced source files and conditional compilation.</p>\n", "answer_id": 14558473, "tags": [], "down_vote_count": 0, "last_activity_date": 1359363240, "comments": [{"body": "I&#39;m not wanting PCLs to be <i>really</i> supported by Express - just the loading of a project which has <i>some</i> flavour which would build the PCL. It sounds like removing the <code>ProjectTypeGuids</code> element may solve this... I need to experiment further.", "edited": false, "comment_id": 20312192, "creation_date": 1359365155, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Maybe if there is a way how to detect the type of Visual Studio, like detecting VS Express for WP8, and changing the project type from PCL to WP8 using project file conditions?", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 20313246, "creation_date": 1359367530, "score": 0, "owner": {"display_name": "Martin Suchan", "reputation": 8235, "user_id": 574062, "user_type": "registered", "accept_rate": 81}}, {"body": "I&#39;m already using conditional sections in the project file: you can&#39;t even load it into a solution where <i>no</i> configuration uses the PCL. Just the presence of the element causes a problem :(", "edited": false, "comment_id": 20313279, "creation_date": 1359367597, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1359363240, "comment_count": 3, "score": 3, "owner": {"display_name": "Martin Suchan", "reputation": 8235, "user_id": 574062, "user_type": "registered", "accept_rate": 81}, "is_accepted": false, "up_vote_count": 3}, {"body": "<p>David Kean's comment here gave me the answer I'm using for the moment:</p>\n\n<blockquote>\n  <p>or remove the  element entirely - this will opt you of \"portable\" enhancements, such as a UI for changing the target framework, etc</p>\n</blockquote>\n\n<p>I've tried that, and it works like a dream. On machines which have everything appropriately installed, you can then even build the PCL version under Express! I've verified that the resulting binary really is a PCL, and it seems fine.</p>\n\n<p>I wouldn't be surprised to find that I ran into some problems later on, but for the moment this works fine for me. I can easily live without the enhancements in Visual Studio - it was already confused by my project having very different build configurations, so I don't think I was getting much benefit anyway.</p>\n", "answer_id": 14591974, "tags": [], "down_vote_count": 0, "last_activity_date": 1359492556, "creation_date": 1359492556, "comment_count": 0, "score": 9, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": true, "up_vote_count": 9}], "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 14551881}, {"last_activity_date": 1356073260, "creation_date": 1247692656, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1356073260, "favorite_count": 3, "view_count": 4913, "delete_vote_count": 0, "title": "User permission error when accessing \"user instance\" database from ASP.NET", "comments": [{"body": "OMG, Jon Skeet <i>asked</i> a question?", "edited": false, "comment_id": 951764, "creation_date": 1247692812, "score": 52, "owner": {"display_name": "rlbond", "reputation": 28556, "user_id": 72631, "user_type": "registered", "accept_rate": 90}}, {"body": "Is DataDirectory a UNC path or mapped drive?", "edited": false, "comment_id": 951770, "creation_date": 1247692891, "score": 0, "owner": {"display_name": "Brian R. Bondy", "reputation": 167774, "user_id": 3153, "user_type": "registered", "accept_rate": 99}}, {"body": "@Brian: Nope, |DataDirectory| is the way of referring to App_Data in ASP.NET. Worked fine on the old machine, and works fine in my local dev environment...", "edited": false, "comment_id": 951774, "creation_date": 1247692915, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I figure that just about everyone here knows your site, Jon, but I&#39;ve seen questions being closed as spam because the asker used it to &quot;promote&quot; their site by mentioning and linking it without any necessity...", "edited": false, "comment_id": 951841, "creation_date": 1247693462, "score": 9, "owner": {"display_name": "balpha", "reputation": 21613, "user_id": 115866, "user_type": "moderator", "accept_rate": 88}}, {"body": "To clarify: I&#39;m not trying to accuse you of anything. I just want to avoid the impression of double standards.", "edited": false, "comment_id": 951852, "creation_date": 1247693642, "score": 7, "owner": {"display_name": "balpha", "reputation": 21613, "user_id": 115866, "user_type": "moderator", "accept_rate": 88}}, {"body": "Okay, will edit to remove link.", "edited": false, "comment_id": 951872, "creation_date": 1247693825, "score": 8, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "With 4422 answers I think he deserves a small unintentional plug.", "edited": false, "comment_id": 951928, "creation_date": 1247694385, "score": 12, "owner": {"display_name": "Brian R. Bondy", "reputation": 167774, "user_id": 3153, "user_type": "registered", "accept_rate": 99}}, {"body": "Does the Network Service account have read access to the MDF file?", "edited": false, "comment_id": 22884353, "creation_date": 1247696073, "score": 0, "owner": {"display_name": "Janie", "reputation": 637, "user_id": 129551, "user_type": "unregistered", "accept_rate": 75}}, {"body": "Yup - I&#39;ve given full permission to everyone on both the directory and the files.", "edited": false, "comment_id": 22884354, "creation_date": 1247696448, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Brian: Totally agree...  Who cares if he put a link to his site... He has a very valid and legit issue.  At over 70K rep points, nobody should complain...", "edited": false, "comment_id": 952446, "creation_date": 1247701316, "score": 2, "owner": {"display_name": "RSolberg", "reputation": 17934, "user_id": 55747, "user_type": "registered", "accept_rate": 90}}, {"body": "@Jon Skeet: did you try temporarily setting the pool to run as administrator.  Does that bypass the error?", "edited": false, "comment_id": 952522, "creation_date": 1247702395, "score": 2, "owner": {"display_name": "Brian R. Bondy", "reputation": 167774, "user_id": 3153, "user_type": "registered", "accept_rate": 99}}, {"body": "Nope, same issue.", "edited": false, "comment_id": 953422, "creation_date": 1247721836, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon Skeet: I presume you fixed this issue (the question <i>was</i> posted over a year ago).  Any chance you could post the solution <i>if</i> you found one?  It&#39;d be helpful if anyone comes across this question with the same issue :-)", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 4006211, "creation_date": 1285275328, "score": 2, "owner": {"display_name": "Doctor Jones", "reputation": 13005, "user_id": 39277, "user_type": "registered", "accept_rate": 94}}, {"body": "@DoctaJonez: Unfortunately, I never did. I&#39;m now using an XML file as my storage - it&#39;s a lot simpler all round!", "edited": false, "reply_to_user": {"display_name": "Doctor Jones", "reputation": 13005, "user_id": 39277, "user_type": "registered", "accept_rate": 94}, "comment_id": 4006311, "creation_date": 1285276063, "score": 3, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Looks like you Skeet&#39;ed away from this one with a workaround based on a comment I found.  But when you have time, I&#39;ve provided 2 solutions for you.", "edited": false, "comment_id": 15743071, "creation_date": 1344311624, "score": 0, "owner": {"display_name": "MacGyver", "reputation": 6330, "user_id": 640205, "user_type": "registered", "accept_rate": 92}}, {"body": "@MacGyver: Thanks for giving them, for posterity - but I&#39;m very happy with the XML solution now :)", "edited": false, "reply_to_user": {"display_name": "MacGyver", "reputation": 6330, "user_id": 640205, "user_type": "registered", "accept_rate": 92}, "comment_id": 15743133, "creation_date": 1344312178, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "comment_count": 16, "score": 25, "body": "<p>The server hosting csharpindepth.com has recently been migrated.</p>\n\n<p>Most of it is working fine, but I can't get at the database used to hold errata, notes etc.</p>\n\n<p>Relevant details:</p>\n\n<ul>\n<li>32 bit Windows Server 2003</li>\n<li>SQL Server Express 2005 installed</li>\n<li>ASP.NET pool running under \"NETWORK SERVICE\" account</li>\n<li>.NET 3.5</li>\n<li>Everyone has full permission to database files (at the moment, just to rule that out!)</li>\n<li><p>Connection string:</p>\n\n<pre><code>Data Source=.;AttachDbFilename=|DataDirectory|\\WebSiteData.mdf;\nIntegrated Security=True;User Instance=True\n</code></pre></li>\n<li><p>I'm connecting just by creating a new <code>WebSiteDataContext</code> (which has the above connection string as its default)</p></li>\n</ul>\n\n<p>Using a small test console app running from the directory containing the files, as the administrator account, using the same query, I can see the contents of the database.</p>\n\n<p>In ASP.NET I'm getting this exception:</p>\n\n<pre><code>SqlException (0x80131904): User does not have permission to perform this action.\n</code></pre>\n\n<p>EDIT: More information, here's the stack trace:</p>\n\n<pre><code>[SqlException (0x80131904): User does not have permission to perform this action.]\n   System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection) +4844759\n   System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj) +194\n   System.Data.SqlClient.TdsParser.Run(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj) +2392\n   System.Data.SqlClient.SqlInternalConnectionTds.CompleteLogin(Boolean enlistOK) +35\n   System.Data.SqlClient.SqlInternalConnectionTds.AttemptOneLogin(ServerInfo serverInfo, String newPassword, Boolean ignoreSniOpenTimeout, Int64 timerExpire, SqlConnection owningObject) +144\n   System.Data.SqlClient.SqlInternalConnectionTds.LoginNoFailover(String host, String newPassword, Boolean redirectedUserInstance, SqlConnection owningObject, SqlConnectionString connectionOptions, Int64 timerStart) +342\n   System.Data.SqlClient.SqlInternalConnectionTds.OpenLoginEnlist(SqlConnection owningObject, SqlConnectionString connectionOptions, String newPassword, Boolean redirectedUserInstance) +221\n   System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, Object providerInfo, String newPassword, SqlConnection owningObject, Boolean redirectedUserInstance) +189\n   System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection) +4859187\n   System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnection owningConnection, DbConnectionPool pool, DbConnectionOptions options) +31\n   System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject) +433\n   System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject) +66\n   System.Data.ProviderBase.DbConnectionPool.GetConnection(DbConnection owningObject) +499\n   System.Data.ProviderBase.DbConnectionFactory.GetConnection(DbConnection owningConnection) +65\n   System.Data.ProviderBase.DbConnectionClosed.OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory) +117\n   System.Data.SqlClient.SqlConnection.Open() +122\n   System.Data.Linq.SqlClient.SqlConnectionManager.UseConnection(IConnectionUser user) +44\n   System.Data.Linq.SqlClient.SqlProvider.get_IsSqlCe() +45\n   System.Data.Linq.SqlClient.SqlProvider.InitializeProviderMode() +20\n   System.Data.Linq.SqlClient.SqlProvider.System.Data.Linq.Provider.IProvider.Execute(Expression query) +57\n   System.Data.Linq.DataQuery`1.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() +35\n</code></pre>\n\n<p>EDIT: I was wrong about the filename having to be right - changing the connection string to make it talk to a different file <em>doesn't</em> change the error.</p>\n\n<p>ProcMon never shows it touching the file...</p>\n\n<p>EDIT: Further oddities - restarting the application pool with it running under the Local System account <em>still</em> has problems, which is about as odd as it gets! It's as if, despite the error message, it's actually trying to do something impossible (e.g. with the wrong path) rather than just being a permissions issue.</p>\n\n<p>EDIT: More information - I've just run my little test console app from a service as \"NETWORK SERVICE\" and (after an initial attempt which timed out) it was successful. So it's not a permissions thing in terms of the user account... it's something about the environment in which it runs...</p>\n", "is_answered": true, "up_vote_count": 27, "tags": ["asp.net", ".net", "sql", "sql-server", "permissions"], "reopen_vote_count": 0, "answer_count": 10, "answers": [{"body": "<p>The first thing I would do is fire off filemon (or better <a href=\"http://technet.microsoft.com/en-us/sysinternals/bb896645.aspx\" rel=\"nofollow\">Process Monitor) </a>to see if the IIS process is able to open the database file - it looks like a security issue to me.</p>\n\n<p>Also: Make sure that the ~/App_Data folder is not read-only. Also, check if you have granted full permissions to the \"Network Service\u201d account for the same folder.</p>\n\n<p>You may want to run IISRESET to restart IIS and to refresh its permissions as well.</p>\n", "is_accepted": false, "tags": [], "answer_id": 1134177, "down_vote_count": 0, "last_activity_date": 1247694106, "comments": [{"body": "I&#39;ve been trying to use ProcMon, not a lot of joy yet. Still trying...", "edited": false, "comment_id": 952009, "creation_date": 1247695107, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1247693004, "comment_count": 1, "score": 0, "owner": {"display_name": "Ot\u00e1vio D\u00e9cio", "reputation": 48899, "user_id": 48684, "user_type": "registered", "accept_rate": 88}, "last_editor": {"display_name": "Ot\u00e1vio D\u00e9cio", "reputation": 48899, "user_id": 48684, "user_type": "registered", "accept_rate": 88}, "last_edit_date": 1247694106, "up_vote_count": 0}, {"body": "<p>Have you done this?</p>\n\n<blockquote>\n  <p>To configure SQL Server for Windows\n  integrated security</p>\n  \n  <p>From the Windows Start menu, select\n  Microsoft SQL Server, and then select\n  Enterprise Manager.</p>\n  \n  <p>Open the node for the server and\n  expand the node for the database you\n  want to give users permissions for.</p>\n  \n  <p>Right-click the Users node and select\n  New Database User.</p>\n  \n  <p>In the Database User Properties dialog\n  box, enter domain\\username in the\n  Login name box, and then click OK.\n  Additionally, configure the SQL Server\n  to allow all domain users to access\n  the database.</p>\n</blockquote>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/bsz5788z.aspx\" rel=\"nofollow\">Source</a></p>\n\n<p>So basically verify that you have \"NT AUTHORITY\\NETWORK SERVICE\" listed there.</p>\n\n<p>Also in SQL 2008 at least, not sure about 2005 you would set it at the server level too (Server -> Security -> Logins). </p>\n", "is_accepted": false, "tags": [], "answer_id": 1134185, "down_vote_count": 0, "last_activity_date": 1247694190, "comments": [{"body": "Checking now...", "edited": false, "comment_id": 951912, "creation_date": 1247694201, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "know if it does not work yet?", "edited": false, "comment_id": 951967, "creation_date": 1247694776, "score": 0, "owner": {"display_name": "Brian R. Bondy", "reputation": 167774, "user_id": 3153, "user_type": "registered", "accept_rate": 99}}, {"body": "Just set it at server level too, no joy.", "edited": false, "comment_id": 951986, "creation_date": 1247694928, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Maybe try restarting the SQL service and try restarting the w3svc service after that change.", "edited": false, "comment_id": 952004, "creation_date": 1247695063, "score": 0, "owner": {"display_name": "Brian R. Bondy", "reputation": 167774, "user_id": 3153, "user_type": "registered", "accept_rate": 99}}, {"body": "Might want to verify the permissions of that newly added login too.", "edited": false, "comment_id": 952043, "creation_date": 1247695572, "score": 0, "owner": {"display_name": "Brian R. Bondy", "reputation": 167774, "user_id": 3153, "user_type": "registered", "accept_rate": 99}}, {"body": "Yup, restarted various things. I just wish I could work out which process to look for failing... it doesn&#39;t seem to be any of the usual suspects.", "edited": false, "comment_id": 952128, "creation_date": 1247696628, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1247693104, "comment_count": 6, "score": 1, "owner": {"display_name": "Brian R. Bondy", "reputation": 167774, "user_id": 3153, "user_type": "registered", "accept_rate": 99}, "last_editor": {"display_name": "Brian R. Bondy", "reputation": 167774, "user_id": 3153, "user_type": "registered", "accept_rate": 99}, "last_edit_date": 1247694190, "up_vote_count": 1}, {"body": "<blockquote>\n  <p>Integrated Security=True</p>\n</blockquote>\n\n<p>Is the user logon(s) in the database connected to user accounts in the machine? Could it be that there is some mapping issue around that?</p>\n", "answer_id": 1134199, "tags": [], "down_vote_count": 0, "last_activity_date": 1247693297, "comments": [{"body": "There are no user logins in the database - it&#39;s just a database file.", "edited": false, "comment_id": 951876, "creation_date": 1247693885, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1247693297, "comment_count": 1, "score": 1, "owner": {"display_name": "Fredrik M\u00f6rk", "reputation": 97089, "user_id": 93623, "user_type": "registered", "accept_rate": 86}, "is_accepted": false, "up_vote_count": 1}, {"body": "<p>When you say users have full permissions to the file, do all users have full permissions on the app_data directory? Sql will need to create a lock file along side the MDF file.</p>\n\n<p>Also are you sure the SQL Express instance has user instances enabled?</p>\n", "answer_id": 1134274, "tags": [], "down_vote_count": 0, "last_activity_date": 1247694234, "comments": [{"body": "@blowdart: Directory, yes. User instances enabled could be it - where&#39;s that?", "edited": false, "comment_id": 951962, "creation_date": 1247694734, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "My partner in crime says he&#39;s checked that user instances are indeed enabled.", "edited": false, "comment_id": 952023, "creation_date": 1247695308, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "OK, try removing the user instance parameter temporarily and see what happens. Just in case it&#39;s gotten very confused. They&#39;re going away in 2010 anyway :)", "edited": false, "comment_id": 952055, "creation_date": 1247695798, "score": 0, "owner": {"display_name": "blowdart", "reputation": 31473, "user_id": 2525, "user_type": "registered", "accept_rate": 83}}, {"body": "Okay, trying that now.", "edited": false, "comment_id": 952074, "creation_date": 1247695957, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I guess that should work. This is what the link, I gave below says.", "edited": false, "comment_id": 952090, "creation_date": 1247696203, "score": 0, "owner": {"display_name": "shahkalpesh", "reputation": 23758, "user_id": 23574, "user_type": "registered"}}, {"body": "Yup, that changes things in a pretty explicit way: &quot;System.Data.SqlClient.SqlException: Generating user instances in SQL Server is disabled. Use sp_configure &#39;user instances enabled&#39; to generate user instances.&quot;", "edited": false, "comment_id": 952097, "creation_date": 1247696295, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "And then if you do that and switch it back? (You may need to manually detach the database first)", "edited": false, "comment_id": 953382, "creation_date": 1247720975, "score": 0, "owner": {"display_name": "blowdart", "reputation": 31473, "user_id": 2525, "user_type": "registered", "accept_rate": 83}}, {"body": "Yes, I re-enabled user instances and I&#39;m getting the same problem.", "edited": false, "comment_id": 959693, "creation_date": 1247815293, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Weird, that should rule out a permissions problem then", "edited": false, "comment_id": 960077, "creation_date": 1247821782, "score": 0, "owner": {"display_name": "blowdart", "reputation": 31473, "user_id": 2525, "user_type": "registered", "accept_rate": 83}}], "creation_date": 1247694234, "comment_count": 9, "score": 0, "owner": {"display_name": "blowdart", "reputation": 31473, "user_id": 2525, "user_type": "registered", "accept_rate": 83}, "is_accepted": false, "up_vote_count": 0}, {"body": "<p>See if this link helps.<br />\n<a href=\"http://p2p.wrox.com/asp-net-2-0-basics/53774-sqlexception-0x80131904-cannot-open-user-defau.html\" rel=\"nofollow\">http://p2p.wrox.com/asp-net-2-0-basics/53774-sqlexception-0x80131904-cannot-open-user-defau.html</a></p>\n", "answer_id": 1134356, "tags": [], "down_vote_count": 0, "last_activity_date": 1247695285, "comments": [{"body": "That&#39;s talking about making it not a user instance... I want it to still be a user instance.", "edited": false, "comment_id": 952235, "creation_date": 1247698208, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1247695285, "comment_count": 1, "score": 0, "owner": {"display_name": "shahkalpesh", "reputation": 23758, "user_id": 23574, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 0}, {"body": "<p>If you're using user instancing your're connecting as admin anyway, which incidentally is why it's not recommended for hosting scenarios. The perms problems I tend to get are physical ones on the files themselves, not the folders - detaching database has a tendency to strip perms.</p>\n\n<p>It might help if you can narrow down exactly where the exception is happening. What action is it trying to perform? Database open, read, write? Also try another database (ie, is it that particular database) and try a non-user instanced version; attach the database to an instance.</p>\n", "answer_id": 1134537, "tags": [], "down_vote_count": 0, "last_activity_date": 1247698018, "comments": [{"body": "Database connect. Will update the question with stack trace.", "edited": false, "comment_id": 952293, "creation_date": 1247698887, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I presume you&#39;ve checked that your SQL Server supports user instancing? See <a href=\"http://msdn.microsoft.com/en-us/library/ms254504(VS.80).aspx\" rel=\"nofollow\">msdn.microsoft.com/en-us/library/ms254504(VS.80).aspx</a>. SQLEXPRESS supports this by default, but you&#39;re not connecting to SQLEXPRESS so it&#39;s possible it&#39;s not enabled.", "edited": false, "comment_id": 954877, "creation_date": 1247745663, "score": 0, "owner": {"display_name": "Dave Sussman", "user_type": "does_not_exist"}}, {"body": "Yup, it&#39;s enabled.", "edited": false, "comment_id": 959692, "creation_date": 1247815259, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1247698018, "comment_count": 3, "score": 1, "owner": {"display_name": "Dave Sussman", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 1}, {"body": "<p>Have you tried running aspnet_regsql.exe on the server to potentially kick something back into place (sort of like how have to run aspnet_regiis once in blue moon)? Scott Gu has a basic overview on the whole process found <a href=\"http://weblogs.asp.net/scottgu/archive/2005/08/25/423703.aspx\" rel=\"nofollow\">here</a>.</p>\n", "answer_id": 1134621, "tags": [], "down_vote_count": 0, "last_activity_date": 1247700028, "comments": [{"body": "I don&#39;t think it&#39;s the same sort of tool, but gave it a try anyway. Doesn&#39;t look like it&#39;s really for use with user instances though.", "edited": false, "comment_id": 952432, "creation_date": 1247701073, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Bummer. I was thinking that too, until I looked towards the end of the article and noticed the configuration setting had the AttachDbFilename going with it and thought it might help.", "edited": false, "comment_id": 952436, "creation_date": 1247701189, "score": 0, "owner": {"display_name": "Dillie-O", "reputation": 18327, "user_id": 71, "user_type": "registered", "accept_rate": 91}}], "creation_date": 1247700028, "comment_count": 2, "score": 0, "owner": {"display_name": "Dillie-O", "reputation": 18327, "user_id": 71, "user_type": "registered", "accept_rate": 91}, "is_accepted": false, "up_vote_count": 0}, {"body": "<p>Does the child instance even start? When a RANU database is requested the master instance (.\\SQLEXPRESS in this case) has to create a 'child' instance, in other words start the sqlservr.exe process as an user process running under the credentials of the user that requested the RANU connection from the .SQLEXPRESS instance. In this case the instance would have to be started as 'NETWORK SERVICE'.</p>\n\n<p>To validate if the child instance is started, connect to the master instance (.\\SQLEXPRESS) and check <a href=\"http://msdn.microsoft.com/en-us/library/ms165698.aspx\">sys.dm_os_child_instances</a>:</p>\n\n<pre><code>SELECT * \nFROM sys.dm_os_child_instances\n</code></pre>\n\n<p>If an NETWORK SERVICE owned child instance is started, take it's <code>instance_pipe_name</code> and connect straight to the child instance:</p>\n\n<pre><code>sqlcmd -S np:\\\\.\\pipe\\&lt;child pipe name&gt;\\tsql\\query\n</code></pre>\n\n<p>Ideally, connect as NETWORK SERVICE (eg. from an interactive cmd console started as NEWTORK SERVICE, perhaps using at.exe to schedule it 1 minute in future). If that works, the last step is to try to attach the MDF using ordinarry sp_attach_db. </p>\n\n<p>The idea of these steps is not to solve the issue, but pinpoint the failure cause, since the error you get is kinda generic and ... not exactly helpfull.</p>\n", "answer_id": 1134743, "tags": [], "down_vote_count": 0, "last_activity_date": 1247702478, "comments": [{"body": "No sign that the child instance was started... and indeed I suspect that&#39;s the problem, but I can&#39;t see where exactly it&#39;s failing. Changing my application pool to run as local system doesn&#39;t help either, which is most odd.", "edited": false, "comment_id": 953429, "creation_date": 1247721980, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "What&#39;s the easiest way of starting a console as NETWORK SERVICE? It would be interesting to try my test app in the same way...", "edited": false, "comment_id": 953445, "creation_date": 1247722281, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I know how to start it as system using AT.exe: at 10:45pm /INTERACTIVE cmd (where 10:45pm is like 1 minute into future). For NETWORK SERVICE I&#39;m at loss because I don&#39;t know how one can retrieve it&#39;s... password. RUNAS needs is (besides I&#39;m not sure NETWORK SERVICE is allowed to run in runas) and trying to create a dummy service with sc.exe: sc create cmd_as_ns binpath= c:\\WINDOWS\\system32\\cmd.exe start= demand obj= &quot;NETWORK SERVICE&quot; also needs its password (even after wrapping cmd.exe in srvany.exe).", "edited": false, "comment_id": 953489, "creation_date": 1247723414, "score": 0, "owner": {"display_name": "Remus Rusanu", "reputation": 183165, "user_id": 105929, "user_type": "registered", "accept_rate": 67}}, {"body": "Any restrictions in <code>C:\\Documents and Settings\\NetworkService\\Local Settings\\Application Data\\Microsoft\\Microsoft SQL Server Data\\SQLEXPRESS</code> that may prevent the copy of the master/model/tempdb?", "edited": false, "comment_id": 953510, "creation_date": 1247723669, "score": 0, "owner": {"display_name": "Remus Rusanu", "reputation": 183165, "user_id": 105929, "user_type": "registered", "accept_rate": 67}}, {"body": "Running CMD.EXE as Local System: <a href=\"http://blogs.msdn.com/adioltean/articles/271063.aspx\" rel=\"nofollow\">blogs.msdn.com/adioltean/articles/271063.aspx</a>", "edited": false, "comment_id": 953531, "creation_date": 1247724017, "score": 0, "owner": {"display_name": "Pavel Chuchuva", "reputation": 14130, "user_id": 14131, "user_type": "registered", "accept_rate": 92}}, {"body": "@Pavel: Thanks, but it doesn&#39;t work with remote desktop :( Will try at.exe", "edited": false, "comment_id": 957463, "creation_date": 1247772165, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Okay, managed to run my test app as NETWORK SERVICE successfully - will edit question.", "edited": false, "comment_id": 957512, "creation_date": 1247772794, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Jon, I believe your AT.EXE runs as LocalSystem, not NETWORK SERVICE. If you managed to start a child instance from with AT, check the owner of the child instance in dm_os_child_instances and make sure is NETWORK SERVICE.", "edited": false, "comment_id": 957622, "creation_date": 1247773802, "score": 0, "owner": {"display_name": "Remus Rusanu", "reputation": 183165, "user_id": 105929, "user_type": "registered", "accept_rate": 67}}, {"body": "@Remus: I didn&#39;t use at.exe in the end; I used a service. However, I&#39;ve just checked for the SQLEXPRESS directory you mentioned and it doesn&#39;t exist. There&#39;s an MSSQLSERVER directory at the same location, which perhaps represents the &quot;.&quot; instance... how do I get the appropriate data into a SQLEXPRESS directory?", "edited": false, "comment_id": 957689, "creation_date": 1247774510, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "If there is a MSSQLSERVER directory there it means that a default (noname) Express instance was once able to start a child instance for NETWORK SERVICE. The data is placed there by the master instance during the process of creating the child instance. Also check if is not in %WINDIR%\\ServiceProfiles\\NetworkService\\AppData\\Local\\Microsoft\\Microsoft SQL Server Data\\SQLEXPRESS", "edited": false, "comment_id": 957722, "creation_date": 1247774889, "score": 0, "owner": {"display_name": "Remus Rusanu", "reputation": 183165, "user_id": 105929, "user_type": "registered", "accept_rate": 67}}, {"body": "But anyway, if you have ur child instance running, does it open/attach your MDF of choice?", "edited": false, "comment_id": 957748, "creation_date": 1247775068, "score": 0, "owner": {"display_name": "Remus Rusanu", "reputation": 183165, "user_id": 105929, "user_type": "registered", "accept_rate": 67}}, {"body": "@Remus: I don&#39;t have a ServiceProfiles directory...", "edited": false, "comment_id": 957837, "creation_date": 1247776014, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Remus: There are 2 SQL Server instances running - &quot;.&quot; and &quot;SQLEXPRESS&quot;. The SQLEXPRESS instance doesn&#39;t have any child instance running. The &quot;.&quot; one has three, one of which is under NETWORK SERVICE", "edited": false, "comment_id": 957851, "creation_date": 1247776069, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "... but that one was dead. I&#39;ve managed to connect to the one running under LOCAL SYSTEM. Just about managed to attach the database, too.", "edited": false, "comment_id": 957902, "creation_date": 1247776469, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "So it meas you&#39;re creating your child instances under the &quot;.&quot; master, which means the &quot;MSSQLSERVER&quot; folder in &#39;Application Data\\...&#39; is correct. Which is all expected since your data source is &quot;.&quot;... one of those doh! moments lol, haven&#39;t even bother to look at ur connect string before.", "edited": false, "comment_id": 958092, "creation_date": 1247778627, "score": 0, "owner": {"display_name": "Remus Rusanu", "reputation": 183165, "user_id": 105929, "user_type": "registered", "accept_rate": 67}}, {"body": "Sounds like NETWORK SERVICE is able to create the child instance and attach the MDF, so the problem it appears to be just the time it takes to create the instance on first request. The child instances last 60 minutes by default, after last access. You need to increase the <code>connect timeout</code> in the connection string to something like 60 seconds to allow for the creation of the child instance, if is not started.", "edited": false, "comment_id": 958114, "creation_date": 1247778889, "score": 0, "owner": {"display_name": "Remus Rusanu", "reputation": 183165, "user_id": 105929, "user_type": "registered", "accept_rate": 67}}, {"body": "@Remus: I don&#39;t think I&#39;m creating the child instances under MSSQLSERVER - there are other web apps which may well have been doing it. I don&#39;t think the timeout would do it, otherwise subsequent requests would succeed, wouldn&#39;t they?", "edited": false, "comment_id": 959688, "creation_date": 1247815226, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "SO is great, but posting comments back and forth to troubleshoot is kinda inefficient. Shoot me a mail on my site contact or tweet @rusanu, I can probably help if we have a faster turnaround for chit-chat.", "edited": false, "comment_id": 960072, "creation_date": 1247821737, "score": 0, "owner": {"display_name": "Remus Rusanu", "reputation": 183165, "user_id": 105929, "user_type": "registered", "accept_rate": 67}}], "creation_date": 1247702478, "comment_count": 18, "score": 5, "owner": {"display_name": "Remus Rusanu", "reputation": 183165, "user_id": 105929, "user_type": "registered", "accept_rate": 67}, "is_accepted": false, "up_vote_count": 5}, {"body": "<p>This question appears related to: <a href=\"http://stackoverflow.com/questions/8528768/cannot-open-user-default-database-login-failed-after-installing-sql-server-m/8583258#8583258\">&quot;Cannot open user default database. Login failed.&quot; after installing SQL Server Management Studio Express</a></p>\n\n<p>Apparently User Instance and SQL Server Express has some interesting issues. You might want to take a look at <a href=\"http://blogs.msdn.com/b/sqlexpress/archive/2006/11/22/connecting-to-sql-express-user-instances-in-management-studio.aspx\" rel=\"nofollow\">http://blogs.msdn.com/b/sqlexpress/archive/2006/11/22/connecting-to-sql-express-user-instances-in-management-studio.aspx</a>. This seems to do the trick for most who have this problem. </p>\n", "answer_id": 8597812, "tags": [], "down_vote_count": 0, "last_activity_date": 1324510962, "comments": [{"body": "Thanks - will do if I ever come across it again. Fortunately I moved away from using a database at all for this particular problem. Just an XML file did just as well, and was a lot simpler :)", "edited": false, "comment_id": 10671372, "creation_date": 1324540799, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1324510962, "comment_count": 1, "score": 2, "owner": {"display_name": "user806549", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 2}, {"body": "<p>Since you have Trusted Authentication=True, the connection uses the security context of the calling process.  That means you're running the development server in the security context of the logged in user, so every thing works fine.  When you run in IIS, you are in the security context of the application pool process, which is NETWORK SERVICE, which does not have a user profile, therefore it crashes.</p>\n\n<p>To fix, use solution #1 or #2.</p>\n\n<p>1.) Change the identity of the application pool to a normal user with access to the database, as a custom account.  HINT: set this user: <code>SELECT owning_principal_name FROM sys.dm_os_child_instances WHERE heart_beat = 'alive'</code></p>\n\n<p>2.) Use a connection string with user name and password; meaning use SQL Server Authentication, not Trusted Authentication=True.</p>\n", "is_accepted": false, "tags": [], "answer_id": 11838971, "down_vote_count": 0, "last_activity_date": 1344311720, "creation_date": 1344311161, "comment_count": 0, "score": 0, "owner": {"display_name": "MacGyver", "reputation": 6330, "user_id": 640205, "user_type": "registered", "accept_rate": 92}, "last_editor": {"display_name": "MacGyver", "reputation": 6330, "user_id": 640205, "user_type": "registered", "accept_rate": 92}, "last_edit_date": 1344311720, "up_vote_count": 0}], "last_editor": {"display_name": "Vivek Dragon", "reputation": 1257, "user_id": 1716774, "user_type": "registered", "accept_rate": 60}, "down_vote_count": 2, "close_vote_count": 0, "question_id": 1134151}, {"body": "<p>This is definitely subjective, but I'd like to try to avoid it becoming argumentative. I think it could be an interesting question if people treat it appropriately.</p>\n\n<p>The idea for this question came from the comment thread from <a href=\"http://stackoverflow.com/questions/282329/what-are-five-things-you-hate-about-your-favorite-language#282342\">my answer</a> to the <a href=\"http://stackoverflow.com/questions/282329\">\"What are five things you hate about your favorite language?\" question</a>. I contended that classes in C# should be sealed by default - I won't put my reasoning in the question, but I might write a fuller explanation as an answer to this question. I was surprised at the heat of the discussion in the comments (25 comments currently).</p>\n\n<p>So, what contentious opinions do <em>you</em> hold? I'd rather avoid the kind of thing which ends up being pretty religious with relatively little basis (e.g. brace placing) but examples might include things like \"unit testing isn't actually terribly helpful\" or \"public fields are okay really\". The important thing (to me, anyway) is that you've got reasons behind your opinions.</p>\n\n<p>Please present your opinion and reasoning - I would encourage people to vote for opinions which are well-argued and interesting, whether or not you happen to agree with them.</p>\n", "last_activity_date": 1346549927, "creation_date": 1230902066, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1256233675, "favorite_count": 1234, "view_count": 193200, "delete_vote_count": 0, "title": "What's your most controversial programming opinion?", "comment_count": 0, "score": 363, "community_owned_date": 1230902066, "is_answered": true, "notice": {"body": "<p>This question exists because it has historical significance, but <b>it is not considered a good, on-topic question for this site</b>,   so please do not use it as evidence that you can ask similar questions here.  This question and its answers are frozen and cannot be changed.  More info: <a href=\"http://stackoverflow.com/help\">help center</a>.</p>", "owner_user_id": 811, "creation_date": 1339642856}, "up_vote_count": 386, "tags": ["language-agnostic"], "reopen_vote_count": 0, "answers": [{"community_owned_date": 1230902145, "body": "<p><strong>The world needs more GOTOs</strong></p>\n\n<p>GOTOs are avoided religiously often with no reasoning beyond \"my professor told me GOTOs are bad.\"  They have a purpose and would greatly simplify production code in many places.</p>\n\n<p>That said, they aren't really necessary in 99% of the code you'll ever write.</p>\n", "is_accepted": false, "tags": [], "answer_id": 406762, "down_vote_count": 38, "last_activity_date": 1231520242, "comments": [{"body": "I agree. Not necessarily that we need more gotos, but that sometimes programmers go to ridiculous lengths to avoid them: such as creating bizarre constructs like: do { ... break; ... } while (false); to simulate a goto while pretending not to use one.", "edited": false, "comment_id": 231614, "creation_date": 1230902447, "score": 4, "owner": {"display_name": "Ferruccio", "reputation": 59500, "user_id": 4086, "user_type": "registered", "accept_rate": 89}}, {"body": "Especially when you&#39;re taught what GOTOs are for an entire semester and how to use them, then the next semester a new lecturer comes along chanting the death of the GOTO statement in a folly of unexplained and illogical rage.", "edited": false, "comment_id": 231616, "creation_date": 1230902531, "score": 0, "owner": {"display_name": "Kieran Senior", "reputation": 7420, "user_id": 39693, "user_type": "registered", "accept_rate": 67}}, {"body": "I agree as well, one of my old lectures would go mental if you ever thought about using them. But coding to avoid them may end up being worse than using them.", "edited": false, "comment_id": 231620, "creation_date": 1230902654, "score": 0, "owner": {"display_name": "Mark Davidson", "reputation": 3039, "user_id": 50866, "user_type": "registered", "accept_rate": 60}}, {"body": "I&#39;ve used GOTOs in switch statements to have logic jump all over the place, and had no problem with it (apart from the fact that I got FxCop to actually complain about the complexity of the method in question).", "edited": false, "comment_id": 231669, "creation_date": 1230904146, "score": 0, "owner": {"display_name": "Dmitri Nesteruk", "reputation": 8707, "user_id": 9476, "user_type": "registered", "accept_rate": 66}}, {"body": "I have seen only 1 example of a good usage for the last 5 years, so make it 99,999 percent.", "edited": false, "comment_id": 231674, "creation_date": 1230904305, "score": 4, "owner": {"display_name": "Paco", "reputation": 6663, "user_id": 13376, "user_type": "registered", "accept_rate": 89}}, {"body": "I&#39;ve never had to use a goto for anything.  Anytime when I actually thought goto might be a good idea, it was instead an indicator that things weren&#39;t flowing properly.", "edited": false, "comment_id": 231908, "creation_date": 1230908768, "score": 10, "owner": {"display_name": "Gene Roberts", "reputation": 1119, "user_id": 47544, "user_type": "registered"}}, {"body": "No no no no no. So much production code is so wildly obfuscated and unclear already. You would be giving more tools to the monkeys.", "edited": false, "comment_id": 232350, "creation_date": 1230917566, "score": 0, "owner": {"display_name": "Steve B.", "reputation": 26500, "user_id": 19479, "user_type": "registered", "accept_rate": 72}}, {"body": "I don&#39;t think I can come up with a single good use of GoTo in a .NET application... can you give an example of a good use of it?", "edited": false, "comment_id": 233234, "creation_date": 1230938092, "score": 0, "owner": {"display_name": "BenAlabaster", "reputation": 22192, "user_id": 40650, "user_type": "registered", "accept_rate": 91}}, {"body": "Goto is very useful in native code.  It lets you move all of your error handling to the end of you function and helps ensure that all necessary cleanup happens(freeing memory/resources, etc).  The pattern which I like to see is to have exactly two labels in each function: Error and Cleanup.", "edited": false, "comment_id": 233594, "creation_date": 1230953977, "score": 1, "owner": {"display_name": "Jesse Weigert", "reputation": 2830, "user_id": 7618, "user_type": "registered", "accept_rate": 86}}, {"body": "The explanation I&#39;ve heard is that GOTOs make the stack non-deterministic.  If you got to a line with a GOTO, there&#39;s no way of telling how you got there.  Makes debugging much harder.", "edited": false, "comment_id": 233627, "creation_date": 1230955541, "score": 0, "owner": {"display_name": "dj_segfault", "reputation": 7605, "user_id": 14924, "user_type": "registered", "accept_rate": 100}}, {"body": "As the years have gone by the need for GOTOs goes down and down as languages add constructs that remove the need for some uses.  I&#39;m down to about 1 GOTO per year now but there are times it&#39;s the right answer.", "edited": false, "comment_id": 233672, "creation_date": 1230959240, "score": 0, "owner": {"display_name": "Loren Pechtel", "reputation": 5985, "user_id": 10659, "user_type": "registered", "accept_rate": 56}}, {"body": "Nice to see that this did indeed generate a great bit of controversy!", "edited": false, "comment_id": 233834, "creation_date": 1230974699, "score": 0, "owner": {"display_name": "Max", "reputation": 944, "user_id": 50023, "user_type": "registered"}}, {"body": "I find goto&#39;s are not very readable.  I despise them in SQL, so why would I use them anywhere else?", "edited": false, "comment_id": 234792, "creation_date": 1231017504, "score": 0, "owner": {"display_name": "Jeremy", "reputation": 16448, "user_id": 9266, "user_type": "registered", "accept_rate": 65}}, {"body": "@Jeremy, Can you do goto in SQL? SQL is a declarative language. Which db vendor has SQL that knows a goto?", "edited": false, "comment_id": 236539, "creation_date": 1231106944, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "@tuinstoel, MSSQL has supported it since at least 6.5. I use it a lot to begin, commit/rollback transactions in stored procedures.", "edited": false, "comment_id": 236981, "creation_date": 1231124319, "score": 0, "owner": {"display_name": "Jeremy", "reputation": 16448, "user_id": 9266, "user_type": "registered", "accept_rate": 65}}, {"body": "@Jeremy, Don&#39;t you mean T-SQL instead of SQL?", "edited": false, "comment_id": 237541, "creation_date": 1231152510, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "To my knowledge in assembly/machine language all branching are forms of goto.  What does your high level language get compiled into?  Nothing wrong with the occasional &quot;low level style&quot; shortcut if it is done properly.", "edited": false, "comment_id": 238822, "creation_date": 1231183405, "score": 2, "owner": {"display_name": "Andy Webb", "reputation": 1289, "user_id": 10931, "user_type": "registered"}}, {"body": "Continue = goto for loops; Break = goto for blocks; switch = goto madness; Goto is obviously not a problem if used with some sense then. If you are using an OO language and you use Goto for Error and Cleanup then you scare me. RAII and counterparts should be considered your friends.", "edited": false, "comment_id": 239782, "creation_date": 1231209244, "score": 0, "owner": {"display_name": "Greg Domjan", "reputation": 6714, "user_id": 37558, "user_type": "registered", "accept_rate": 68}}, {"body": "+1 for controversy :). Oh, I know what GOTO&#39;s are, I started with BASIC like many of you. We need more GOTO&#39;s like we need DOS 8.3 filenames, plain ASCII encoding, FAT 16 filesystems, and 5 1/4 inch floppies.", "edited": false, "comment_id": 243712, "creation_date": 1231316785, "score": 27, "owner": {"display_name": "postfuturist", "reputation": 11180, "user_id": 1892, "user_type": "registered", "accept_rate": 75}}, {"body": "Just found this: <a href=\"http://stackoverflow.com/questions/84556/whats-your-favorite-programmer-cartoon#301419\" title=\"whats your favorite programmer cartoon%23301419\">stackoverflow.com/questions/84556/&hellip;</a>", "edited": false, "comment_id": 247080, "creation_date": 1231389095, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "A good example of goto: <a href=\"http://stackoverflow.com/questions/416464/is-it-possible-to-exit-a-for-before-time-in-c-if-an-ending-condition-is-reache#416555\" title=\"is it possible to exit a for before time in c if an ending condition is reache%23416555\">stackoverflow.com/questions/416464/&hellip;</a>", "edited": false, "comment_id": 253640, "creation_date": 1231542815, "score": 0, "owner": {"display_name": "FryGuy", "reputation": 6500, "user_id": 28776, "user_type": "registered", "accept_rate": 89}}, {"body": "I used goto quite a bit in C programming - generally as a finally block.  I have a file handle I need to close, memory I need to free etc, so at the point where I would return early, I just set a return code and goto the cleanup: label.", "edited": false, "comment_id": 254895, "creation_date": 1231612249, "score": 0, "owner": {"display_name": "Hamish Downer", "reputation": 5432, "user_id": 3189, "user_type": "registered", "accept_rate": 78}}, {"body": "Gotos are also commonly used to code up state machines. You can use an enumeration, a switch statement, and a loop to achieve the same effect. However, all that really does is mask the true structure of your control flow (and slow things down a bit).", "edited": false, "comment_id": 265565, "creation_date": 1231956320, "score": 0, "owner": {"display_name": "T.E.D.", "reputation": 28709, "user_id": 29639, "user_type": "registered", "accept_rate": 76}}, {"body": "Goto can be OK. My rule of thumb. If a good programmer, who doesn&#39;t often use Goto, is prepared to defend it - then it&#39;s OK. And it probably is a once a year thing if that. Dmitri, sounds like FxCop is right and you&#39;re wrong.", "edited": false, "comment_id": 299610, "creation_date": 1233056157, "score": 0, "owner": {"display_name": "MarkJ", "reputation": 23308, "user_id": 15639, "user_type": "registered", "accept_rate": 67}}, {"body": "This thread considered harmful.  Edsger Dijkstra is rolling in his grave. :)", "edited": false, "comment_id": 486948, "creation_date": 1237817221, "score": 10, "owner": {"display_name": "Darcy Casselman", "reputation": 1623, "user_id": 5062, "user_type": "registered", "accept_rate": 100}}, {"body": "Agreed. I am struggling to translate numerical code from Fortran into F# because it lacks an efficient goto construct.", "edited": false, "comment_id": 633389, "creation_date": 1241525933, "score": 0, "owner": {"display_name": "Jon Harrop", "reputation": 30762, "user_id": 13924, "user_type": "registered", "accept_rate": 49}}, {"body": "The problem with GOTO&#39;s are that they are like giving a little alcohol to a recovering alcoholic.  Incredibly dangerous for programmers coming over from BASIC who are unstructured happy.", "edited": false, "comment_id": 671787, "creation_date": 1242318132, "score": 0, "owner": {"display_name": "Austin", "reputation": 381, "user_id": 52453, "user_type": "registered", "accept_rate": 95}}, {"body": "People who think gotos are evil have never programmed in C, or if they have, they did it poorly. Gotos are the <i>best</i> way to do error handling in plain C, and repeating Dijkstras quote dogmatically only demonstrates ignorance. Please read this before complaining about gotos: <a href=\"http://eli.thegreenplace.net/2009/04/27/using-goto-for-error-handling-in-c/\" rel=\"nofollow\">eli.thegreenplace.net/2009/04/27/&hellip;</a>", "edited": false, "comment_id": 803201, "creation_date": 1245030096, "score": 2, "owner": {"display_name": "catphive", "reputation": 1826, "user_id": 14978, "user_type": "registered", "accept_rate": 14}}, {"body": "To add on to catphive&#39;s point about using goto&#39;s in C, here&#39;s a discussion about gotos by the Linux kernel developers when one man jumps the gun on a goto and proceeds to recommend avoiding it at all costs: <a href=\"http://kerneltrap.org/node/553/2131\" rel=\"nofollow\">kerneltrap.org/node/553/2131</a>", "edited": false, "comment_id": 894756, "creation_date": 1246684962, "score": 0, "owner": {"display_name": "Coding With Style", "reputation": 868, "user_id": 130718, "user_type": "registered"}}, {"body": "Actually, the discussion of the use of goto in Linux made me change my mind if goto is indeed harmful in development. I&#39;ve learned not just to trust what you&#39;ve taught :).", "edited": false, "comment_id": 1247505, "creation_date": 1252594752, "score": 0, "owner": {"display_name": "OnesimusUnbound", "reputation": 1957, "user_id": 24755, "user_type": "registered", "accept_rate": 81}}, {"body": "I needed gotos in C because it has no equivalent for Java&#39;s &quot;continue loopname;&quot;", "edited": false, "comment_id": 1435043, "creation_date": 1255632452, "score": 0, "owner": {"display_name": "luiscubal", "reputation": 10472, "user_id": 32775, "user_type": "registered", "accept_rate": 92}}, {"body": "I once got sent home from college for telling someone to use a GOTO :P", "edited": false, "comment_id": 1927923, "creation_date": 1262712308, "score": 0, "owner": {"display_name": "ing0", "reputation": 9577, "user_id": 143979, "user_type": "registered", "accept_rate": 92}}, {"body": "Events are the modern GOTO statement.  You arrive from anywhere, anytime, with extra baggage of data that GOTOs never had.", "edited": false, "comment_id": 3298691, "creation_date": 1278563851, "score": 0, "owner": {"display_name": "Tom A", "reputation": 524, "user_id": 10226, "user_type": "registered", "accept_rate": 100}}, {"body": "I&#39;ve always learned not to use GOTOs because they create spaghetti code and are for the lazy (that if you do use them, something is wrong with your flow). However, JUMP statements, which are essentially GOTOs, are very useful in assembly.", "edited": false, "comment_id": 3482465, "creation_date": 1280329501, "score": 0, "owner": {"display_name": "Dennis", "reputation": 9699, "user_id": 72321, "user_type": "registered", "accept_rate": 77}}, {"body": "&quot;They have a purpose and would greatly simplify production code in many places. That said, they aren&#39;t really necessary in 99% of the code you&#39;ll ever write.&quot; +2 if I could, sir, that could not have been written better.", "edited": false, "comment_id": 3658759, "creation_date": 1282042050, "score": 0, "owner": {"display_name": "Jake Petroules", "reputation": 8046, "user_id": 343845, "user_type": "registered", "accept_rate": 98}}, {"body": "Sorry but I&#39;m very very glad to have not seen a GOTO statement since porting a QuickBasic program to C#.  Give me a break statement anyday.", "edited": false, "comment_id": 3998618, "creation_date": 1285231234, "score": 0, "owner": {"display_name": "wonea", "reputation": 1786, "user_id": 271200, "user_type": "registered", "accept_rate": 85}}], "creation_date": 1230902145, "comment_count": 36, "score": 86, "owner": {"display_name": "Max", "reputation": 944, "user_id": 50023, "user_type": "registered"}, "last_editor": {"display_name": "Alex B", "reputation": 14455, "user_id": 6180, "user_type": "registered", "accept_rate": 83}, "last_edit_date": 1231520242, "up_vote_count": 124}, {"community_owned_date": 1230902245, "body": "<p>Stay away from Celko!!!!</p>\n\n<p><a href=\"http://www.dbdebunk.com/page/page/857309.htm\" rel=\"nofollow\">http://www.dbdebunk.com/page/page/857309.htm</a></p>\n\n<p>I think it makes a lot more sense to use surrogate primary keys then \"natural\" primary keys.</p>\n\n<p><hr></p>\n\n<p>@ocdecio: Fabian Pascal gives (in chapter 3 of his book <a href=\"http://books.google.it/books?id=t9ZQAAAAMAAJ\" rel=\"nofollow\"><em>Practical issues in database management</em></a>, cited in point 3 at the page that you link) as one of the criteria for choosing a key that of stability (it always exists and doesn't change). When a natural key does not possesses such property, than a surrogate key must be used, for evident reasons, to which you hint in comments.</p>\n\n<p>You don't know what he wrote and you have not bothered to check, otherwise you could discover that you actually agree with him. Nothing controversial there: he was saying \"don't be dogmatic, adapt general guidelines to circumstances, and, above all, think, use your brain instead of a dogmatic/cookbook/words-of-guru approach\".</p>\n", "is_accepted": false, "tags": [], "answer_id": 406764, "down_vote_count": 1, "last_activity_date": 1257463042, "comments": [{"body": "Yes!  His ideas about Heiarchical data structures are academically elegant and totally useless.", "edited": false, "comment_id": 231804, "creation_date": 1230906490, "score": 0, "owner": {"display_name": "Charles Bretana", "reputation": 71330, "user_id": 32632, "user_type": "registered", "accept_rate": 75}}, {"body": "Well, I like Celko but I agree with you re: surrogate primary keys!", "edited": false, "comment_id": 231944, "creation_date": 1230909544, "score": 0, "owner": {"display_name": "Mark Brittingham", "reputation": 20417, "user_id": 15592, "user_type": "registered", "accept_rate": 88}}, {"body": "Agree in part, surrogate keys are definitely more convenient when accessing data, but I try to identify a natural key as well and usually set it up as a constraint.  So why not both?!", "edited": false, "comment_id": 234274, "creation_date": 1231000441, "score": 0, "owner": {"display_name": "tekiegreg", "reputation": 683, "user_id": 16868, "user_type": "registered", "accept_rate": 86}}, {"body": "I have no problems with natural keys to be used for convenience, but primary keys should be immutable. I once had a system that used SSN&#39;s as PK&#39;s, and sometimes persons wouldn&#39;t have one (as children) and then they would. Try to change a PK, what a mess...", "edited": false, "comment_id": 234304, "creation_date": 1231001812, "score": 0, "owner": {"display_name": "Ot\u00e1vio D\u00e9cio", "reputation": 48899, "user_id": 48684, "user_type": "registered", "accept_rate": 88}}, {"body": "I can agree with the concept that once your autonumber keys get mismatched, there&#39;s no way to fix them.  But the solution isn&#39;t &quot;natural&quot; keys; the solution is never to expose the keys to your users.", "edited": false, "comment_id": 235251, "creation_date": 1231039301, "score": 0, "owner": {"display_name": "Kyralessa", "reputation": 97118, "user_id": 5486, "user_type": "registered", "accept_rate": 59}}, {"body": "I wish I could go back a few years on my current project and tell myself not to use a natural key. Now we&#39;re stuck with it and kludging around it. +1", "edited": false, "comment_id": 250599, "creation_date": 1231470512, "score": 0, "owner": {"display_name": "Marcus Downing", "reputation": 5723, "user_id": 1000, "user_type": "registered", "accept_rate": 68}}, {"body": "@ocdecio: Fabian Pascal gives (in chapter 3 of his book, as cited in point 3 at the page that you link) as one of the criteria for choosing a key that of <b>stability</b> (it always exists and doesn&#39;t change). When a natural key does not possesses such property, than a surrogate key must be used, for evident reasons, to which you hint. So you actually agree with him, but think otherwise. Nothing controversial there: he was saying &quot;don&#39;t be dogmatic, adapt general guidelines to circumstances, and, above all, <b>think</b>, use your brain instead of a dogmatic/cookbook/words-of-guru approach&quot;.", "edited": false, "comment_id": 1470513, "creation_date": 1256187012, "score": 0, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}, {"body": "One of the classic mistakes is to assume that just because a candidate natural key, such as SSN, is by definition unique, that you will receive unique values. People may lie or make mistakes and you then have a chance of collision when the &quot;real person&quot; comes along.", "edited": false, "comment_id": 1847673, "creation_date": 1261367198, "score": 0, "owner": {"display_name": "Andy Dent", "reputation": 11022, "user_id": 53870, "user_type": "registered", "accept_rate": 86}}], "creation_date": 1230902245, "comment_count": 8, "score": 13, "owner": {"display_name": "Ot\u00e1vio D\u00e9cio", "reputation": 48899, "user_id": 48684, "user_type": "registered", "accept_rate": 88}, "last_editor": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}, "last_edit_date": 1257463042, "up_vote_count": 14}, {"community_owned_date": 1230902251, "body": "<p><strong>Respect the Single Responsibility Principle</strong></p>\n\n<p>At first glance you might not think this would be controversial, but in my experience when I mention to another developer that they shouldn't be doing everything in the page load method they often push back ... so for the children please quit building the \"do everything\" method we see all to often.</p>\n", "is_accepted": false, "tags": [], "answer_id": 406765, "down_vote_count": 3, "last_activity_date": 1234106162, "comments": [{"body": "How is that controversial?", "edited": false, "comment_id": 231617, "creation_date": 1230902590, "score": 5, "owner": {"display_name": "Vinko Vrsalovic", "reputation": 141838, "user_id": 5190, "user_type": "registered", "accept_rate": 72}}, {"body": "Agree, but not very controversial?", "edited": false, "comment_id": 231723, "creation_date": 1230905170, "score": 1, "owner": {"display_name": "Ed Guiness", "reputation": 24287, "user_id": 4200, "user_type": "registered", "accept_rate": 100}}, {"body": "it&#39;s controversial because the ugly mess that most people call MVC is mostly a &#39;do everything&#39;", "edited": false, "comment_id": 231751, "creation_date": 1230905688, "score": 0, "owner": {"display_name": "Javier", "reputation": 38007, "user_id": 11649, "user_type": "registered", "accept_rate": 50}}, {"body": "Really? I actually thought that MVC was the opposite to that.", "edited": false, "comment_id": 231836, "creation_date": 1230907289, "score": 0, "owner": {"display_name": "Leonardo Herrera", "reputation": 4669, "user_id": 7841, "user_type": "registered", "accept_rate": 92}}, {"body": "Upvoted for lack of controversy!", "edited": false, "comment_id": 232877, "creation_date": 1230929752, "score": 0, "owner": {"display_name": "spender", "reputation": 61337, "user_id": 14357, "user_type": "registered", "accept_rate": 82}}, {"body": "This answer seems to stir up a bit of controversy on its controversial-ness.  ;P", "edited": false, "comment_id": 233029, "creation_date": 1230933076, "score": 0, "owner": {"display_name": "strager", "reputation": 49749, "user_id": 39992, "user_type": "registered", "accept_rate": 82}}, {"body": "I Agree RE: MVC - really hard to limit method bloat on the controllers", "edited": false, "comment_id": 237283, "creation_date": 1231141155, "score": 1, "owner": {"display_name": "Andrew Harry", "reputation": 5509, "user_id": 30576, "user_type": "registered", "accept_rate": 66}}, {"body": "Re MVC: If method bloat is the issue then make more controllers, they shouldn&#39;t be bloated with methods it doesn&#39;t feel right if that happens, feels like the controllers try to do more than they should.", "edited": false, "comment_id": 246220, "creation_date": 1231365841, "score": 0, "owner": {"display_name": "Pop Catalin", "reputation": 29192, "user_id": 4685, "user_type": "registered", "accept_rate": 93}}, {"body": "If you don&#39;t think this is controversial, you probably don&#39;t know how far you can go with this. :-)", "edited": false, "comment_id": 1791476, "creation_date": 1260562071, "score": 0, "owner": {"display_name": "hstoerr", "reputation": 7437, "user_id": 21499, "user_type": "registered", "accept_rate": 55}}], "creation_date": 1230902251, "comment_count": 9, "score": 63, "owner": {"display_name": "Toran Billups", "reputation": 12054, "user_id": 2701, "user_type": "registered", "accept_rate": 83}, "last_editor": {"display_name": "Toran Billups", "reputation": 12054, "user_id": 2701, "user_type": "registered", "accept_rate": 83}, "last_edit_date": 1234106162, "up_vote_count": 66}, {"community_owned_date": 1230902351, "body": "<p>If I were being controversial, <strong>I'd have to suggest that Jon Skeet isn't omnipotent..</strong></p>\n", "is_accepted": false, "tags": [], "answer_id": 406768, "down_vote_count": 10, "last_activity_date": 1231530592, "comments": [{"body": "+1 up vote, all though I think you&#39;ve upset his fans ;)", "edited": false, "comment_id": 231800, "creation_date": 1230906373, "score": 0, "owner": {"display_name": "Shane MacLaughlin", "reputation": 13668, "user_id": 22564, "user_type": "registered", "accept_rate": 79}}, {"body": "Yes, apparently this is a very controversial view", "edited": false, "comment_id": 231805, "creation_date": 1230906492, "score": 0, "owner": {"display_name": "Gareth", "reputation": 52159, "user_id": 31582, "user_type": "registered", "accept_rate": 86}}, {"body": "BLASPHE---!!  Um, I mean, yes, I quite concur.", "edited": false, "comment_id": 232424, "creation_date": 1230919350, "score": 0, "owner": {"display_name": "Mike Hofer", "reputation": 7420, "user_id": 47580, "user_type": "registered", "accept_rate": 98}}, {"body": "It does appear that writing a book on C# doesn&#39;t also mean you know everything about VB ;)", "edited": false, "comment_id": 232645, "creation_date": 1230924973, "score": 0, "owner": {"display_name": "ChrisA", "reputation": 3163, "user_id": 24867, "user_type": "registered", "accept_rate": 77}}, {"body": "I think you might want to bring yourself up to date on the Jon Skeet facts. Remember:  &quot;Can Jon Skeet ask a question he cannot answer? Yes. And he can answer it too.&quot;  He is omnipotent!", "edited": false, "comment_id": 244450, "creation_date": 1231336639, "score": 3, "owner": {"display_name": "Vlad Gudim", "reputation": 11837, "user_id": 22088, "user_type": "registered", "accept_rate": 75}}, {"body": "At first I thought you said John Skeet isn&#39;t impotent.", "edited": false, "comment_id": 255565, "creation_date": 1231644896, "score": 25, "owner": {"display_name": "John D. Cook", "reputation": 20363, "user_id": 25188, "user_type": "registered", "accept_rate": 89}}, {"body": "@Totophil:  Interesting comment when you consider: Jon Skeet asked this question (and he posted an answer...)", "edited": false, "comment_id": 372669, "creation_date": 1234971590, "score": 2, "owner": {"display_name": "James Curran", "reputation": 64499, "user_id": 12725, "user_type": "registered", "accept_rate": 75}}, {"body": "@John D. Cook: Well, he isn&#39;t: <a href=\"http://moms4mom.com/users/111/jon-skeet\" rel=\"nofollow\">moms4mom.com/users/111/jon-skeet</a>", "edited": false, "comment_id": 1397384, "creation_date": 1255042439, "score": 1, "owner": {"display_name": "Brian Ortiz", "reputation": 1058, "user_id": 13395, "user_type": "registered", "accept_rate": 76}}], "creation_date": 1230902351, "comment_count": 8, "score": 47, "owner": {"display_name": "Gareth", "reputation": 52159, "user_id": 31582, "user_type": "registered", "accept_rate": 86}, "last_editor": {"display_name": "David Basarab", "reputation": 30732, "user_id": 2469, "user_type": "registered", "accept_rate": 98}, "last_edit_date": 1231530592, "up_vote_count": 57}, {"community_owned_date": 1230902423, "body": "<p>In my workplace, I've been trying to introduce more Agile/XP development habits.  Continuous Design is the one I've felt most resistance on so far.  Maybe I shouldn't have phrased it as \"let's round up all of the architecture team and shoot them\"... ;)</p>\n", "answer_id": 406770, "tags": [], "down_vote_count": 2, "last_activity_date": 1230902423, "comments": [{"body": "That&#39;s good. Along the same lines is casually insulting people in the name of &quot;truth&quot;. That particular virus seems to have a reservoir in grad schools, like the one I attended.", "edited": false, "comment_id": 1540720, "creation_date": 1257259131, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1230902423, "comment_count": 1, "score": 5, "owner": {"display_name": "Giraffe", "reputation": 1210, "user_id": 50136, "user_type": "registered", "accept_rate": 75}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1230902457, "body": "<p>I work in ASP.NET / VB.NET a lot and find ViewState an absolute nightmare.  It's enabled by default on the majority of fields and causes a large quantity of encoded data at the start of every web page.  The bigger a page gets in terms of controls on a page, the larger the ViewState data will become.  Most people don't turn an eye to it, but it creates a large set of data which is usually irrelevant to the tasks being carried on the page.  You must manually disable this option on all ASP controls if they're not being used.  It's either that or have custom controls for everything.</p>\n\n<p>On some pages I work with, half of the page is made up of ViewState, which is a shame really as there's probably better ways of doing it.</p>\n\n<p>That's just one small example I can think of in terms of language/technology opinions.  It may be controversial.</p>\n\n<p>By the way, you might want to edit voting on this thread, it could get quite heated by some ;)</p>\n", "answer_id": 406772, "tags": [], "down_vote_count": 1, "last_activity_date": 1230902457, "comments": [{"body": "Could you highlight your controversial opinion... is it &quot;viewstate is bad&quot; or something else?", "edited": false, "comment_id": 231725, "creation_date": 1230905224, "score": 0, "owner": {"display_name": "Ed Guiness", "reputation": 24287, "user_id": 4200, "user_type": "registered", "accept_rate": 100}}, {"body": "Nope, it&#39;s &quot;ViewState is enabled by default, when I really don&#39;t think it should be, but having it disabled by default required custom controls&quot;", "edited": false, "comment_id": 231786, "creation_date": 1230906113, "score": 0, "owner": {"display_name": "Kieran Senior", "reputation": 7420, "user_id": 39693, "user_type": "registered", "accept_rate": 67}}, {"body": "I expect anyone who has worked on ASP.NET would agree with this.  We have a page to search a third party system that has some LARGE drop down lists on it.  The ViewState doubled the already 200Kb page size.", "edited": false, "comment_id": 231823, "creation_date": 1230906899, "score": 0, "owner": {"display_name": "pipTheGeek", "reputation": 2404, "user_id": 28552, "user_type": "registered"}}, {"body": "I don&#39;t think that experienced webforms developers will find this particularly controversial...most of us will agree with you!", "edited": false, "comment_id": 231948, "creation_date": 1230909630, "score": 0, "owner": {"display_name": "Mark Brittingham", "reputation": 20417, "user_id": 15592, "user_type": "registered", "accept_rate": 88}}, {"body": "Yup, we encounter the page size doubling from time to time, and sometimes even more.  The page renders slower, more bandwidth is used, and it&#39;s a nightmare to track down problems when you&#39;re viewing the rendered page source.", "edited": false, "comment_id": 231974, "creation_date": 1230910162, "score": 0, "owner": {"display_name": "Kieran Senior", "reputation": 7420, "user_id": 39693, "user_type": "registered", "accept_rate": 67}}, {"body": "The intersting thing about this is that in the majority of cases ViewState is not needed at all!", "edited": false, "comment_id": 232722, "creation_date": 1230926148, "score": 0, "owner": {"display_name": "etsuba", "reputation": 113, "user_id": 46483, "user_type": "registered"}}, {"body": "Don&#39;t throw so much crap on a page if Viewstate is really a problem. You probably have a design problem if you really have that much viewstate stuff on a page.", "edited": false, "comment_id": 234640, "creation_date": 1231012270, "score": 0, "owner": {"display_name": "Paul Mendoza", "reputation": 3146, "user_id": 29277, "user_type": "registered", "accept_rate": 78}}, {"body": "Have you tried programming without ViewState? I can promise you that 5 minutes with JSP will make you <i>run</i> back to ViewState. Seriously, the ViewState is <i>NEVER</i> the problem, the problem is the developer using the ViewState!", "edited": false, "comment_id": 255116, "creation_date": 1231620678, "score": 0, "owner": {"display_name": "Thomas Hansen", "reputation": 3653, "user_id": 29746, "user_type": "registered", "accept_rate": 25}}, {"body": "@Paul, I insanely agree! Don&#39;t throw so much crap in your page if you&#39;re having ViewState problems - go back to design!", "edited": false, "comment_id": 255119, "creation_date": 1231620789, "score": 0, "owner": {"display_name": "Thomas Hansen", "reputation": 3653, "user_id": 29746, "user_type": "registered", "accept_rate": 25}}, {"body": "Try ASP.NET MVC, it&#39;s a joy to program with.", "edited": false, "comment_id": 263373, "creation_date": 1231891156, "score": 2, "owner": {"display_name": "Dave", "reputation": 501, "user_id": 28757, "user_type": "registered", "accept_rate": 91}}, {"body": "You do not have to turn ViewState off for each and every control. You can do it in the @Page directive.", "edited": false, "comment_id": 1935734, "creation_date": 1262797340, "score": 0, "owner": {"display_name": "xanadont", "reputation": 3390, "user_id": 1886, "user_type": "registered", "accept_rate": 75}}], "creation_date": 1230902457, "comment_count": 11, "score": 20, "owner": {"display_name": "Kieran Senior", "reputation": 7420, "user_id": 39693, "user_type": "registered", "accept_rate": 67}, "is_accepted": false, "up_vote_count": 21}, {"community_owned_date": 1230902492, "body": "<p><strong>The only \"best practice\" you should be using all the time is \"Use Your Brain\".</strong></p>\n\n<p>Too many people jumping on too many bandwagons and trying to force methods, patterns, frameworks etc onto things that don't warrant them.  Just because something is new, or because someone respected has an opinion, doesn't mean it fits all :)</p>\n\n<p>EDIT:\nJust to clarify - I don't think people should ignore best practices, valued opinions etc. Just that people shouldn't just blindly jump on something without thinking about WHY this \"thing\" is so great, IS it applicable to what I'm doing, and WHAT benefits/drawbacks does it bring?</p>\n", "is_accepted": false, "tags": [], "answer_id": 406775, "down_vote_count": 23, "last_activity_date": 1231516349, "creation_date": 1230902492, "comment_count": 0, "score": 770, "owner": {"display_name": "Steven Robbins", "reputation": 20662, "user_id": 26507, "user_type": "registered", "accept_rate": 92}, "last_editor": {"display_name": "David Basarab", "reputation": 30732, "user_id": 2469, "user_type": "registered", "accept_rate": 98}, "last_edit_date": 1231516349, "up_vote_count": 793}, {"community_owned_date": 1230902844, "body": "<p>I firmly believe that unmanaged code isn't worth the trouble.  The extra maintainability expenses associated with hunting down memory leaks which even the best programmers introduce occasionally far outweigh the performance to be gained from a language like C++.  If Java, C#, etc. can't get the performance you need, buy more machines.</p>\n", "answer_id": 406785, "tags": [], "down_vote_count": 9, "last_activity_date": 1230902844, "comments": [{"body": "I think you overestimate the amount of memory management that occur in modern C++. C++ now uses the RAII idiom everywhere. Memory leaks aren&#39;t really much of a concern or an issue anymore.", "edited": false, "comment_id": 231760, "creation_date": 1230905768, "score": 0, "owner": {"display_name": "Doug T.", "reputation": 36891, "user_id": 8123, "user_type": "registered", "accept_rate": 62}}, {"body": "if you can&#39;t track memory leaks, you&#39;re not worth to use high-powered tools.", "edited": false, "comment_id": 231761, "creation_date": 1230905770, "score": 2, "owner": {"display_name": "Javier", "reputation": 38007, "user_id": 11649, "user_type": "registered", "accept_rate": 50}}, {"body": "agree with Doug; with some simple rules of thumb, memory leaks are mostly elliminated.", "edited": false, "comment_id": 231763, "creation_date": 1230905865, "score": 0, "owner": {"display_name": "Javier", "reputation": 38007, "user_id": 11649, "user_type": "registered", "accept_rate": 50}}, {"body": "... and performance is a much-misunderstood subject.", "edited": false, "comment_id": 231835, "creation_date": 1230907283, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "Sometimes raw performance matters.", "edited": false, "comment_id": 231875, "creation_date": 1230907946, "score": 1, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}}, {"body": "Not to mention that not all programs run exclusively on a recent version of Windows.", "edited": false, "comment_id": 231878, "creation_date": 1230908056, "score": 2, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}}, {"body": "I completely agree. Using a non-memory-managed language is like taking a shortcut through a minefield rather than going a slightly longer route on a comfortable and well paved road.", "edited": false, "comment_id": 231937, "creation_date": 1230909450, "score": 0, "owner": {"display_name": "glenatron", "reputation": 6752, "user_id": 15394, "user_type": "registered", "accept_rate": 64}}, {"body": "And sometimes you need to take the shortcut, no matter what.  I need all the performance I can get, in what I&#39;m paid to do.  This is not true for most people.", "edited": false, "comment_id": 232089, "creation_date": 1230912577, "score": 0, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}}, {"body": "Should I buy more machines to all users of the software I write? There are millions of them, and all of them want their programs to run fast.", "edited": false, "comment_id": 232372, "creation_date": 1230918327, "score": 0, "owner": {"display_name": "Nemanja Trifunovic", "reputation": 19014, "user_id": 8899, "user_type": "registered"}}, {"body": "but ... but ...... I don&#39;t think that&#39;s controversial, is it?", "edited": false, "comment_id": 233564, "creation_date": 1230952677, "score": 0, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "Hey how about not worrying about performance until it actually becomes an issue, and then when it does, profile, Profile PROFILE. It is at that point when it&#39;s legitimate to decide whether to take that shortcut through the minefield. It&#39;s a cavalier waste of money and time to decide before necessary", "edited": false, "comment_id": 235642, "creation_date": 1231066068, "score": 0, "owner": {"display_name": "Breton", "reputation": 10548, "user_id": 51101, "user_type": "registered", "accept_rate": 62}}, {"body": "I firmly believe that we don&#39;t need airplanes, we can always use cars, right...? And if we need to cross the open sea, we could just use a boat, right...?", "edited": false, "comment_id": 255120, "creation_date": 1231620874, "score": 2, "owner": {"display_name": "Thomas Hansen", "reputation": 3653, "user_id": 29746, "user_type": "registered", "accept_rate": 25}}, {"body": "Hi.My name is Larry.It&#39;s nice to meet all of you.  :)  I thought I was alone in this world, then I find all of you who think just like me...  As you&#39;ll see in MY answer to this question.  I&#39;m a HUGE fan of C/C++, and feel that if you can&#39;t do C/C++ right, then don&#39;t do it at all. C# is NOT required.", "edited": false, "comment_id": 266764, "creation_date": 1231977197, "score": 0, "owner": {"display_name": "LarryF", "reputation": 3059, "user_id": 18518, "user_type": "registered", "accept_rate": 67}}, {"body": "Pipe-dream reasoning. Earth calling marcumka", "edited": false, "comment_id": 296296, "creation_date": 1232966468, "score": 1, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "<b>Right tool, right job.</b>  Go try and code that kernel or NIC driver in C# and get back to us.  Yes, there are plenty of folks who stick with the language they know, but your unqualified answer is overly broad.  (And that from a Java developer!)", "edited": false, "comment_id": 609883, "creation_date": 1240951488, "score": 7, "owner": {"display_name": "Stu Thompson", "reputation": 20094, "user_id": 2961, "user_type": "registered", "accept_rate": 81}}, {"body": "As if C# doesn&#39;t have memory leaks...", "edited": false, "comment_id": 762862, "creation_date": 1244185959, "score": 0, "owner": {"display_name": "Matthew Flaschen", "reputation": 151541, "user_id": 47773, "user_type": "registered", "accept_rate": 55}}, {"body": "If we had really well written frameworks to run managed code on, then I&#39;d say you have a good point. Sadly, the .NET framework gets more bloat heaped onto it with every release, and the truth is that C++ remains about the only way for a developer to write at a reasonably high level and be assured of [the ability to attain] good performance.", "edited": false, "comment_id": 906376, "creation_date": 1246974651, "score": 0, "owner": {"display_name": "Mark", "reputation": 6383, "user_id": 64084, "user_type": "registered", "accept_rate": 63}}, {"body": "Memory leaks are not possible in C++ if you use the right techniques:  Use RAII/Smart pointers instead of raw pointers/handles  In the worst case, use Valgrind", "edited": false, "comment_id": 1431987, "creation_date": 1255604220, "score": 0, "owner": {"display_name": "blwy10", "reputation": 3388, "user_id": 187854, "user_type": "registered"}}], "creation_date": 1230902844, "comment_count": 18, "score": 6, "owner": {"display_name": "marcumka", "reputation": 1002, "user_id": 30761, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 15}, {"community_owned_date": 1230902869, "body": "<p>I really dislike when people tell me to <strong>use getters and setters instead of making the variable public when you should be able to both get and set the class variable</strong>. </p>\n\n<p>I totally agree on it if it's to change a variable in an object in your object, so you don't get things like: a.b.c.d.e = something; but I would rather use: a.x = something; then a.setX(something); I think a.x = something; actually are both easier to read, and prettier then set/get in the same example.</p>\n\n<p>I don't see the reason by making:</p>\n\n<p>void setX(T x)\n{\n    this->x = x;\n}</p>\n\n<p>T getX()\n{\n    return x;\n}</p>\n\n<p>which is more code, more time when you do it over and over again, and just makes the code harder to read.</p>\n", "is_accepted": false, "tags": [], "answer_id": 406787, "down_vote_count": 3, "last_activity_date": 1231534539, "comments": [{"body": "Agreed. Getters and setters violate encapsulation just as much as exposing objects directly does. There is no real point to them (except maybe in an external interface).", "edited": false, "comment_id": 231636, "creation_date": 1230903441, "score": 0, "owner": {"display_name": "Ferruccio", "reputation": 59500, "user_id": 4086, "user_type": "registered", "accept_rate": 89}}, {"body": "There&#39;s actually a good reason to use setters: You can do some checking on constraints before assigning the new value to your variable. Even if your current code doesn&#39;t require it, it will be much easier to add such checks when there&#39;s a setter.", "edited": false, "comment_id": 231650, "creation_date": 1230903784, "score": 13, "owner": {"display_name": "Jorn", "reputation": 6178, "user_id": 8681, "user_type": "registered", "accept_rate": 73}}, {"body": "I was very glad there was a setter on a variable once when I had to make sure some processing was done when it changed.", "edited": false, "comment_id": 231871, "creation_date": 1230907893, "score": 3, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}}, {"body": "Actually, I think Ruby has something that gets you both - it&#39;s called virtual attributes.  It allows you to have checks on your assignments and still be able to access the data as if it were a public member.", "edited": false, "comment_id": 234202, "creation_date": 1230996931, "score": 1, "owner": {"display_name": "Cristi\u00e1n Romo", "reputation": 3223, "user_id": 1256, "user_type": "registered", "accept_rate": 91}}, {"body": "Python lets you do that as well.", "edited": false, "comment_id": 237613, "creation_date": 1231155663, "score": 0, "owner": {"display_name": "sli", "reputation": 753, "user_id": 13876, "user_type": "registered", "accept_rate": 100}}, {"body": "Setters allow you to add contention in multithreading environments. Just lock when you set. Of course, it is not always the case that your code will end up being accessed by multiple threads, or is it?", "edited": false, "comment_id": 237871, "creation_date": 1231163835, "score": 0, "owner": {"display_name": "David Rodr\u00edguez - dribeas", "reputation": 137526, "user_id": 36565, "user_type": "registered"}}, {"body": "But this being 2009, who&#39;s still using an IDE that does not create the getters and setters on the press of a key...?", "edited": false, "comment_id": 586004, "creation_date": 1240354040, "score": 0, "owner": {"display_name": "Arjan", "reputation": 9277, "user_id": 84237, "user_type": "registered", "accept_rate": 100}}, {"body": "It&#39;s not just that I have to write the code, but the getters and setters obfuscates the code itself by, in 95% of the time of my applications, taking up space and just being plane ugly.", "edited": false, "comment_id": 586095, "creation_date": 1240356028, "score": 0, "owner": {"display_name": "martiert", "reputation": 964, "user_id": 36973, "user_type": "registered", "accept_rate": 88}}, {"body": "I guess C# gives you a easy way to have both, is this Java?", "edited": false, "comment_id": 690378, "creation_date": 1242748796, "score": 0, "owner": {"display_name": "rball", "reputation": 3974, "user_id": 50711, "user_type": "registered", "accept_rate": 98}}, {"body": "I had / have this opinion in some cases, but, one VERY important fact for me is that you can&#39;t &#39;override&#39; a public variable. If the class in question is final, sealed, whatever - cool... AND if you&#39;re basically saying extenders should never be able to do anything on set / get ... ever ...", "edited": false, "comment_id": 744261, "creation_date": 1243882119, "score": 0, "owner": {"display_name": "Gabriel", "reputation": 1051, "user_id": 114054, "user_type": "registered"}}, {"body": "In many languages you can change a public field to a property without requiring any changes to code that consumes it.  You would, however, force a recompile (in non-interpreted languages at least), which adds some constraints if you&#39;re shipping opaque libraries to external customers.", "edited": false, "comment_id": 793543, "creation_date": 1244786008, "score": 0, "owner": {"display_name": "Richard Berg", "reputation": 15603, "user_id": 74439, "user_type": "registered", "accept_rate": 88}}, {"body": "And you set a breakpoint on a public field how, exactly? Setters are brilliant for exactly this reason - you can easily see what code is influencing a value.", "edited": false, "comment_id": 906394, "creation_date": 1246974777, "score": 4, "owner": {"display_name": "Mark", "reputation": 6383, "user_id": 64084, "user_type": "registered", "accept_rate": 63}}, {"body": "You <i>must</i> use getters and setters when you code to an interface!", "edited": false, "comment_id": 1482088, "creation_date": 1256326876, "score": 0, "owner": {"display_name": "Thorbj\u00f8rn Ravn Andersen", "reputation": 43814, "user_id": 53897, "user_type": "registered", "accept_rate": 57}}, {"body": "1. Use an editor that shortens the process 2. Using setters and getters are much more safe than directly accessing the variable: what if you write a class with a variable inside: counter, and incorporate it into code (maybe in 100 classes) and now suddenly decide that counter cannot be negative ? using setter can help solve problems like these... 3. Sometimes exposing variables can be dangerous; eg: Exposing TOS in a stack class", "edited": false, "comment_id": 1809257, "creation_date": 1260855208, "score": 0, "owner": {"display_name": "Salvin Francis", "reputation": 1739, "user_id": 146182, "user_type": "registered", "accept_rate": 66}}, {"body": "@Richard Berg In VB6 you could change a public field to a property and vice versa without requiring any changes to code that consumes it, not even a recompile. It&#39;s one of the few areas where VB6 was IMHO better than .Net", "edited": false, "reply_to_user": {"display_name": "Richard Berg", "reputation": 15603, "user_id": 74439, "user_type": "registered", "accept_rate": 88}, "comment_id": 3386472, "creation_date": 1279401343, "score": 0, "owner": {"display_name": "MarkJ", "reputation": 23308, "user_id": 15639, "user_type": "registered", "accept_rate": 67}}, {"body": "@Thorbj&#248;rn -- not necessarily.  Just because the designers of C#/Java decided to disallow fields in interfaces doesn&#39;t make it an inherently bad idea.  Direct access is the dominant idiom in languages as diverse as C and Ruby.", "edited": false, "reply_to_user": {"display_name": "Thorbj\u00f8rn Ravn Andersen", "reputation": 43814, "user_id": 53897, "user_type": "registered", "accept_rate": 57}, "comment_id": 3402993, "creation_date": 1279598963, "score": 0, "owner": {"display_name": "Richard Berg", "reputation": 15603, "user_id": 74439, "user_type": "registered", "accept_rate": 88}}, {"body": "@Mark -- set a data breakpoint.  Your CPU has hardware interrupts for this exact purpose.  Getting it to work in a managed language is a little challenging, but not any harder than the problems inherent to soft-mode debugging generally.", "edited": false, "reply_to_user": {"display_name": "MarkJ", "reputation": 23308, "user_id": 15639, "user_type": "registered", "accept_rate": 67}, "comment_id": 3402995, "creation_date": 1279599046, "score": 0, "owner": {"display_name": "Richard Berg", "reputation": 15603, "user_id": 74439, "user_type": "registered", "accept_rate": 88}}, {"body": "@Richard Berg: I don&#39;t get you - direct access <i>is</i> a dominant idiom for C, but definitely not for Ruby - actually, without reflection, there is no way in Ruby to do direct access. What Ruby does is give you an extremely easy way (<code>attr_accessor :x</code>) to generate getters/setters for an attribute which are syntactically transparent; i.e. you&#39;d still use <code>p.x</code> and <code>p.x = 3</code> instead of <code>p.getX()</code> and <code>p.setX(3)</code>, but they&#39;re still methods. &quot;Direct&quot; instance variable would be <code>@x</code>, and you can&#39;t use a dot notation with it (i.e. <code>p.@x</code> is ungrammatical).", "edited": false, "reply_to_user": {"display_name": "Richard Berg", "reputation": 15603, "user_id": 74439, "user_type": "registered", "accept_rate": 88}, "comment_id": 3601783, "creation_date": 1281488602, "score": 0, "owner": {"display_name": "Amadan", "reputation": 66802, "user_id": 240443, "user_type": "registered", "accept_rate": 83}}, {"body": "I agree. I think your point is valid as long as we are not talking about exposed interfaces (where obviously you want to provide as much encapsulation as possible). For internal code I prefer to use setters/getters when there is actual checking of constraints before setting/getting anything. I don&#39;t like setters/getters that do nothing because you have to browse the code to actually see if they do something...", "edited": false, "comment_id": 4489621, "creation_date": 1289510023, "score": 0, "owner": {"display_name": "matias", "reputation": 411, "user_id": 305487, "user_type": "registered"}}], "creation_date": 1230902869, "comment_count": 19, "score": 15, "owner": {"display_name": "martiert", "reputation": 964, "user_id": 36973, "user_type": "registered", "accept_rate": 88}, "last_editor": {"display_name": "David Basarab", "reputation": 30732, "user_id": 2469, "user_type": "registered", "accept_rate": 98}, "last_edit_date": 1231534539, "up_vote_count": 18}, {"community_owned_date": 1230902926, "body": "<p><strong>I fail to understand why people think that Java is absolutely the best \"first\" programming language to be taught in universities.</strong> </p>\n\n<p>For one, I believe that first programming language should be such that it highlights the need to learn control flow and variables, not objects and syntax</p>\n\n<p>For another, I believe that people who have not had experience in debugging memory leaks in C / C++ cannot fully appreciate what Java brings to the table.</p>\n\n<p>Also the natural progression should be from \"how can I do this\" to \"how can I find the library which does that\" and not the other way round.</p>\n", "is_accepted": false, "tags": [], "answer_id": 406788, "down_vote_count": 25, "last_activity_date": 1231782111, "creation_date": 1230902926, "comment_count": 0, "score": 615, "owner": {"display_name": "Learning", "reputation": 5758, "user_id": 18275, "user_type": "registered", "accept_rate": 50}, "last_editor": {"display_name": "Michael Myers", "reputation": 100007, "user_id": 13531, "user_type": "moderator", "accept_rate": 75}, "last_edit_date": 1231782111, "up_vote_count": 640}, {"community_owned_date": 1230902955, "body": "<p>Okay, I said I'd give a bit more detail on my \"sealed classes\" opinion. I guess one way to show the kind of answer I'm interested in is to give one myself :)</p>\n\n<p><strong>Opinion: Classes should be sealed by default in C#</strong></p>\n\n<p><strong>Reasoning:</strong></p>\n\n<p>There's no doubt that inheritance is powerful. However, it has to be somewhat guided. If someone derives from a base class in a way which is completely unexpected, this can break the assumptions in the base implementation. Consider two methods in the base class, where one calls another - if these methods are both virtual, then that implementation detail has to be documented, otherwise someone could quite reasonably override the second method and expect a call to the first one to work. And of course, as soon as the implementation is documented, it can't be changed... so you lose flexibility.</p>\n\n<p>C# took a step in the right direction (relative to Java) by making methods sealed by default. However, I believe a further step - making <em>classes</em> sealed by default - would have been even better. In particular, it's easy to override methods (or not explicitly seal existing virtual methods which you don't override) so that you end up with unexpected behaviour. This wouldn't actually stop you from doing anything you can currently do - it's just changing a <em>default</em>, not changing the available options. It would be a \"safer\" default though, just like the default access in C# is always \"the most private visibility available at that point.\"</p>\n\n<p>By making people <em>explicitly</em> state that they wanted people to be able to derive from their classes, we'd be encouraging them to think about it a bit more. It would also help me with my laziness problem - while I know I <em>should</em> be sealing almost all of my classes, I rarely actually remember to do so :(</p>\n\n<p><strong>Counter-argument:</strong></p>\n\n<p>I can see an argument that says that a class which has no virtual methods can be derived from relatively safely without the extra inflexibility and documentation usually required.  I'm not sure how to counter this one at the moment, other than to say that I believe the harm of accidentally-unsealed classes is greater than that of accidentally-sealed ones.</p>\n", "answer_id": 406790, "tags": [], "down_vote_count": 7, "last_activity_date": 1230902955, "comments": [{"body": "I believe the default in C++ is to make all methods non-virtual, so C# was hardly taking a step in the right direction.  I&#39;d call that returning to their C++ roots.", "edited": false, "comment_id": 231638, "creation_date": 1230903540, "score": 0, "owner": {"display_name": "duffymo", "reputation": 209039, "user_id": 37213, "user_type": "registered", "accept_rate": 81}}, {"body": "C# isn&#39;t really rooted in C++ though - it&#39;s rooted in Java, pretty strongly. IMO, of course :)", "edited": false, "comment_id": 231656, "creation_date": 1230903917, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "That&#39;s not controversial - that&#39;s common sense :)", "edited": false, "comment_id": 231671, "creation_date": 1230904180, "score": 0, "owner": {"display_name": "Brian Rasmussen", "reputation": 76194, "user_id": 38206, "user_type": "registered", "accept_rate": 80}}, {"body": "I realize that the link between C# and Java is certainly stronger than C++, but if we were drawing an inheritance diagram they&#39;d both claim C++ as parent (arguably grandparent for C++).", "edited": false, "comment_id": 231687, "creation_date": 1230904553, "score": 0, "owner": {"display_name": "duffymo", "reputation": 209039, "user_id": 37213, "user_type": "registered", "accept_rate": 81}}, {"body": "+1 from me. I very rarely have to remove a sealed modifier (and I make everything sealed by default, unless it is immediately clear that it cannot be sealed).", "edited": false, "comment_id": 231765, "creation_date": 1230905886, "score": 2, "owner": {"display_name": "Andreas Huber", "reputation": 3251, "user_id": 49572, "user_type": "registered", "accept_rate": 76}}, {"body": "My understanding is that you are saying we should be extra careful when designing object hierarchies, but I don&#39;t understand how sealing classes by default would help to achieve this.", "edited": false, "comment_id": 231868, "creation_date": 1230907795, "score": 0, "owner": {"display_name": "Leonardo Herrera", "reputation": 4669, "user_id": 7841, "user_type": "registered", "accept_rate": 92}}, {"body": "&quot;I believe the default in C++ is to make all methods non-virtual, so C# was hardly taking a step in the right direction&quot; how is that logical?? i miss the connection. making methods nonvirtual by default in c++ is a Good Thing (imho) +1", "edited": false, "comment_id": 232225, "creation_date": 1230914822, "score": 0, "owner": {"display_name": "Johannes Schaub - litb", "reputation": 296033, "user_id": 34509, "user_type": "registered", "accept_rate": 63}}, {"body": "I think the counter-argument could be generalized to: a class that derives from a base class without overriding anything further up in the hierarchy can be done relatively safely, etc.", "edited": false, "comment_id": 232292, "creation_date": 1230916372, "score": 0, "owner": {"display_name": "Chris Smith", "reputation": 3248, "user_id": 9073, "user_type": "registered", "accept_rate": 83}}, {"body": "i think this is an anti-pattern. Classes without inheritance are just modules. Please don&#39;t pretend to know what all future programmers will need to do with your code.", "edited": false, "comment_id": 232516, "creation_date": 1230921580, "score": 3, "owner": {"display_name": "Steven A. Lowe", "reputation": 43916, "user_id": 9345, "user_type": "registered", "accept_rate": 83}}, {"body": "Inheritance and immutability don&#39;t go well together.  If I want to know for sure that an object is immutable, I must know that it is not derived from, since a derived type can break that contract.", "edited": false, "comment_id": 233150, "creation_date": 1230936410, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "Given your reasoning, it&#39;s difficult to disagree.  However - if I wished to use your class for a purpose which you didn&#39;t intend, but through some clever overriding/application of your base methods/properties it will suit my purpose, isn&#39;t that <i>my</i> prerogative rather than yours?", "edited": false, "comment_id": 233181, "creation_date": 1230937030, "score": 2, "owner": {"display_name": "BenAlabaster", "reputation": 22192, "user_id": 40650, "user_type": "registered", "accept_rate": 91}}, {"body": "+1 from me too. Its about avoiding implicit assumptions - which always come back to bite you. An explicit statement is always more accurate.", "edited": false, "comment_id": 233201, "creation_date": 1230937447, "score": 0, "owner": {"display_name": "devstuff", "reputation": 6305, "user_id": 41321, "user_type": "registered"}}, {"body": "@balabaster: If you do that and then I want to make a change, it&#39;s very likely to break your code. As a code supplier, I don&#39;t want to put customers in the position of having fragile code. (Not that I&#39;m actually a code supplier etc. This is in theory.)", "edited": false, "comment_id": 233220, "creation_date": 1230937725, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I agree that inheritance should be guided, but sealing all your classes by default doesn&#39;t guide you it&#39;s a road block, removing inheritance entirely", "edited": false, "comment_id": 234771, "creation_date": 1231016976, "score": 0, "owner": {"display_name": "Jeremy", "reputation": 16448, "user_id": 9266, "user_type": "registered", "accept_rate": 65}}, {"body": "Even so, I should understand the risks in deriving from a non-frozen class. Any changes you make in an unsealed class carry the same penalty, so all you&#39;re doing by making everything default-sealed is making it harder to use your code in my own way.", "edited": false, "comment_id": 234776, "creation_date": 1231017056, "score": 1, "owner": {"display_name": "Jeff Hubbard", "reputation": 6242, "user_id": 8844, "user_type": "registered"}}, {"body": "Agreed in principle, although I hated the sealed-by-default behaviour of methods when I was using early C# (at Microsoft, actually) because sometimes I would want to intercept calls to some library class&#39;s method, but couldn&#39;t just subclass it because they didn&#39;t make the methods virtual.", "edited": false, "comment_id": 235322, "creation_date": 1231043124, "score": 0, "owner": {"display_name": "Joe", "reputation": 165, "user_id": 42276, "user_type": "registered", "accept_rate": 75}}, {"body": "If a inheriting class changes behavior of the method it is wrong. Period. It does not fulfill the substitutability principle. There is no need to make a class sealed, just shoot the offender.", "edited": false, "comment_id": 235803, "creation_date": 1231073261, "score": 0, "owner": {"display_name": "David Rodr\u00edguez - dribeas", "reputation": 137526, "user_id": 36565, "user_type": "registered"}}, {"body": "One problem with having everything sealed is that it kills proper unit testing. Because methods in the .NET framework are sealed, it&#39;s almost impossible to test classes that use .NET framework classes like DirectoryEntry (which uses external resources), without writing a wrapper first", "edited": false, "comment_id": 237442, "creation_date": 1231147715, "score": 0, "owner": {"display_name": "Erlend", "reputation": 2826, "user_id": 5746, "user_type": "registered", "accept_rate": 40}}, {"body": "I agree, and I would expand the scope to say that all programming language constructs should default to the &quot;safest&quot; or &quot;no additional work required&quot; state (not the opposite).  Also, there should always be an optional keyword for the default whenever there is a keyword to specify a non-default.", "edited": false, "comment_id": 239050, "creation_date": 1231188105, "score": 0, "owner": {"display_name": "Rob Williams", "reputation": 6575, "user_id": 26682, "user_type": "registered"}}, {"body": "You can not mock sealed classes, except if they implement a certain interface which is used by all users of that class instead of the sealed class. (Bye Bye folks, I will descent into hell soon, as I dared to down vote Jon Skeet...)", "edited": false, "comment_id": 244623, "creation_date": 1231339817, "score": 0, "owner": {"display_name": "EricSchaefer", "reputation": 9190, "user_id": 8976, "user_type": "registered", "accept_rate": 100}}, {"body": "I vastly prefer mocking of interfaces instead of classes anyway, so it&#39;s never been an issue for me.", "edited": false, "comment_id": 244633, "creation_date": 1231340048, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "AOL. Interface based programming is underrated anyways...", "edited": false, "comment_id": 244763, "creation_date": 1231341881, "score": 0, "owner": {"display_name": "EricSchaefer", "reputation": 9190, "user_id": 8976, "user_type": "registered", "accept_rate": 100}}, {"body": "Why not get rid of defaults all together force the developer to make a decision if it&#39;s sealed or not, same should go for public vs private.", "edited": false, "comment_id": 261857, "creation_date": 1231863322, "score": 0, "owner": {"display_name": "JoshBerke", "reputation": 38685, "user_id": 26160, "user_type": "registered", "accept_rate": 97}}, {"body": "@Josh: Yes, that&#39;s definitely an interesting idea. There are some options where I don&#39;t want to have to be explicit - e.g. &quot;nonvolatile&quot; would be silly. How about &quot;writable&quot; as the opposite of &quot;readonly&quot; for static and instance variables though? Hmm...", "edited": false, "comment_id": 261896, "creation_date": 1231863962, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I&#39;ve found this to be <i>very</i> controversial in the circles I frequent. While I favor interfaces &amp; aggregation over inheritance, I&#39;ve seen some very creative and powerful techniques employed that rely on the availability of inheritance in the framework level libraries being used. My observation is that many people are reluctant to change code that they didn&#39;t write to begin with (particularly in IT organizations where it sometimes is actively discouraged).", "edited": false, "comment_id": 1422454, "creation_date": 1255473468, "score": 0, "owner": {"display_name": "LBushkin", "reputation": 70691, "user_id": 91671, "user_type": "registered", "accept_rate": 85}}, {"body": "Strongest argument I&#39;ve seen for classes NOT to be sealed by default is that it would adversely impact the ecology of software libraries (commercial and internal). Too few people take the time to consider how their classes can be inherited - it&#39;s hard to get this right. Most will stick with the language default. Software changes relatively slowly (even when you have the code) and there will be a lag in getting inheritability changed. Finally, will people really spend more time designing for inheritance? Or just blindly add &quot;overrideable&quot; when the find a case where they decide they need it?", "edited": false, "comment_id": 1422488, "creation_date": 1255473819, "score": 0, "owner": {"display_name": "LBushkin", "reputation": 70691, "user_id": 91671, "user_type": "registered", "accept_rate": 85}}, {"body": "@LBushkin: The fact that people don&#39;t take time to consider things properly (and that it&#39;s hard to get it right) is exactly why the default ought to be the <i>safe</i> option. Give people the shotgun <i>unloaded</i>, and make them load it themselves if they want to.", "edited": false, "comment_id": 1423703, "creation_date": 1255499990, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1230902955, "comment_count": 27, "score": 46, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": false, "up_vote_count": 53}, {"community_owned_date": 1230903453, "body": "<p>My controversial view is that the \"While\" construct should be removed from all programming languages. </p>\n\n<p>You can easily replicate While using \"Repeat\" and a boolean flag, and I just don't believe that it's useful to have the two structures. In fact, I think that having both \"Repeat...Until\" and \"While..EndWhile\" in a language confuses new programmers. </p>\n\n<p><strong>Update - Extra Notes</strong></p>\n\n<p>One common mistake new programmers make with While is they assume that the code will break as soon as the tested condition flags false. So - If the While test flags false half way through the code, they assume a break out of the While Loop. This mistake isn't made as much with Repeat. </p>\n\n<p>I'm actually not that bothered which of the two loops types is kept, as long as there's only one loop type. Another reason I have for choosing Repeat over While is that \"While\" functionality makes more sense written using \"repeat\" than the other way around. </p>\n\n<p><strong>Second Update:</strong>\nI'm guessing that the fact I'm the only person currently running with a negative score here means this actually is a controversial opinion. (Unlike the rest of you. Ha!)</p>\n", "is_accepted": false, "tags": [], "answer_id": 406799, "down_vote_count": 14, "last_activity_date": 1230904348, "comments": [{"body": "What if you&#39;re unaware of when a condition is false?  And where has Repeat come from?  While works on the English basis of &quot;while this condition is true, do this&quot;", "edited": false, "comment_id": 231644, "creation_date": 1230903693, "score": 0, "owner": {"display_name": "Kieran Senior", "reputation": 7420, "user_id": 39693, "user_type": "registered", "accept_rate": 67}}, {"body": "You could replace all constructs with goto.", "edited": false, "comment_id": 231688, "creation_date": 1230904569, "score": 0, "owner": {"display_name": "Toon Krijthe", "reputation": 38750, "user_id": 18061, "user_type": "registered", "accept_rate": 83}}, {"body": "Not only do I like WHILE but I would also borrow Nemerle&#39;s UNLESS and put it into C#.", "edited": false, "comment_id": 231700, "creation_date": 1230904806, "score": 0, "owner": {"display_name": "Dmitri Nesteruk", "reputation": 8707, "user_id": 9476, "user_type": "registered", "accept_rate": 66}}, {"body": "a language designed for mediocre or unexperienced programmers gets only mediocre and unexperienced users.", "edited": false, "comment_id": 231790, "creation_date": 1230906183, "score": 0, "owner": {"display_name": "Javier", "reputation": 38007, "user_id": 11649, "user_type": "registered", "accept_rate": 50}}, {"body": "I haven&#39;t seen Repeat...Until since BBC BASIC!  VB now has Do...Loop, Repeat...Until and While...Wend should both be removed. It bugs me though when I see, Do While Not ... instead of Do Until ...", "edited": false, "comment_id": 231862, "creation_date": 1230907644, "score": 0, "owner": {"display_name": "pipTheGeek", "reputation": 2404, "user_id": 28552, "user_type": "registered"}}, {"body": "The first question I usually ask when I see a While loop is &quot;Will it break during the loop or after the check?&quot;  The reason for this is I&#39;ve used a language or two before that immediately broke out of the loop when the condition returned false.", "edited": false, "comment_id": 232360, "creation_date": 1230917949, "score": 0, "owner": {"display_name": "Dalin Seivewright", "reputation": 913, "user_id": 29053, "user_type": "registered", "accept_rate": 87}}, {"body": "This is nonsense.  Neither repeat nor while will break in the middle so your argument is absurd.  Basically the developers need to be instructed in the use of break/exit/goto to exit a loop early.  As for testing condition at the beginning/end both have their uses.", "edited": false, "comment_id": 232473, "creation_date": 1230920455, "score": 5, "owner": {"display_name": "Cervo", "reputation": 2948, "user_id": 16219, "user_type": "registered"}}, {"body": "Also do { statements } while (!condition) is the same as do { statements } until (condition) so I don&#39;t know what the complaint is.", "edited": false, "comment_id": 232475, "creation_date": 1230920506, "score": 0, "owner": {"display_name": "Cervo", "reputation": 2948, "user_id": 16219, "user_type": "registered"}}, {"body": "It&#39;s not controversial, just wrong :-P", "edited": false, "comment_id": 233213, "creation_date": 1230937617, "score": 1, "owner": {"display_name": "Dour High Arch", "reputation": 13607, "user_id": 22437, "user_type": "registered", "accept_rate": 88}}, {"body": "Actually, I&#39;m not sure if it&#39;s the same or not, but I never use do ... while blocks, so I think perhaps I agree with you. :)", "edited": false, "comment_id": 233887, "creation_date": 1230978317, "score": 0, "owner": {"display_name": "skiphoppy", "reputation": 20237, "user_id": 18103, "user_type": "registered", "accept_rate": 67}}, {"body": "&quot;One common ... flags false&quot; - How common is this? In what language? Perhaps the answer for those who have this idea when it&#39;s false is &quot;RTFM!&quot;. This is just a bad solution looking for a problem it can&#39;t find.", "edited": false, "comment_id": 235684, "creation_date": 1231067947, "score": 2, "owner": {"display_name": "jwpfox", "reputation": 1170, "user_id": 18665, "user_type": "registered"}}, {"body": "A while with a repeat is a    if &lt;not condition&gt; then repeat until condition  not a while + bool", "edited": false, "comment_id": 641707, "creation_date": 1241678828, "score": 0, "owner": {"display_name": "Marco van de Voort", "reputation": 17263, "user_id": 99354, "user_type": "registered", "accept_rate": 83}}], "creation_date": 1230903453, "comment_count": 12, "score": -8, "owner": {"display_name": "seanyboy", "reputation": 3591, "user_id": 1726, "user_type": "registered", "accept_rate": 85}, "last_editor": {"display_name": "seanyboy", "reputation": 3591, "user_id": 1726, "user_type": "registered", "accept_rate": 85}, "last_edit_date": 1230904348, "up_vote_count": 6}, {"community_owned_date": 1230903532, "body": "<p><strong>Design patterns are hurting good design more than they're helping it.</strong></p>\n\n<p>IMO software design, especially good software design is far too varied to be meaningfully captured in patterns, especially in the small number of patterns people can actually remember - and they're far too abstract for people to really remember more than a handful. So they're not helping much.</p>\n\n<p>And on the other hand, far too many people become enamoured with the concept and try to apply patterns everywhere - usually, in the resulting code you can't find the actual design between all the (completely meaningless) Singletons and Abstract Factories.</p>\n", "is_accepted": false, "tags": [], "answer_id": 406801, "down_vote_count": 28, "last_activity_date": 1230906643, "creation_date": 1230903532, "comment_count": 0, "score": 289, "owner": {"display_name": "Michael Borgwardt", "reputation": 211236, "user_id": 16883, "user_type": "registered", "accept_rate": 83}, "last_editor": {"display_name": "Michael Borgwardt", "reputation": 211236, "user_id": 16883, "user_type": "registered", "accept_rate": 83}, "last_edit_date": 1230906643, "up_vote_count": 317}, {"community_owned_date": 1230903574, "body": "<p><strong>Debuggers should be forbidden</strong>. This would force people to write code that is testable through unit tests, and in the end would lead to much better code quality.</p>\n\n<p><strong>Remove Copy &amp; Paste from ALL programming IDEs</strong>. Copy &amp; pasted code is very bad, this option should be completely removed. Then the programmer will hopefully be too lazy to retype all the code so he makes a function and reuses the code.</p>\n\n<p><strong>Whenever you use a Singleton, slap yourself</strong>. Singletons are almost never necessary, and are most of the time just a fancy name for a global variable.</p>\n", "is_accepted": false, "tags": [], "answer_id": 406804, "down_vote_count": 44, "last_activity_date": 1230906165, "comments": [{"body": "I have noticed a definite inverse relationship between design/coding skill and skill in using a debugger (which is not the same as having debugging skills).", "edited": false, "comment_id": 231660, "creation_date": 1230903988, "score": 1, "owner": {"display_name": "Ferruccio", "reputation": 59500, "user_id": 4086, "user_type": "registered", "accept_rate": 89}}, {"body": "I second the Copy&amp;Paste removal. I often see my co-workers copy&amp;paste 20 lines of code and just change a value.", "edited": false, "comment_id": 231670, "creation_date": 1230904154, "score": 0, "owner": {"display_name": "Rauhotz", "reputation": 3635, "user_id": 48722, "user_type": "registered", "accept_rate": 59}}, {"body": "Copy/paste is an instant Red Flag in my opinion. If code is duplicated, it should either a) be factored using OO methods; or b) model-driven/generated/dsl-defined.", "edited": false, "comment_id": 231676, "creation_date": 1230904341, "score": 0, "owner": {"display_name": "Dmitri Nesteruk", "reputation": 8707, "user_id": 9476, "user_type": "registered", "accept_rate": 66}}, {"body": "I agree, all the code you see in stackoverflow should not be tested code because if it is tested it is copied from an IDE and copying from an IDE should be impossible:) So please post only untested code on SO!", "edited": false, "comment_id": 231730, "creation_date": 1230905308, "score": 3, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "@tuinstoel: So maybe it should be &quot;copy but not paste&quot;? :)", "edited": false, "comment_id": 231759, "creation_date": 1230905764, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "maybe it should just not allow copy &amp; paste of sourcecode within the same application, might be fun to write an eclipse plugin that prevents this :-)", "edited": false, "comment_id": 231769, "creation_date": 1230905959, "score": 0, "owner": {"display_name": "martinus", "reputation": 8144, "user_id": 48181, "user_type": "registered", "accept_rate": 100}}, {"body": "There is no way testing can replace the usefulness of debuggers and debugging.", "edited": false, "comment_id": 231779, "creation_date": 1230906061, "score": 9, "owner": {"display_name": "Tim", "reputation": 13852, "user_id": 10755, "user_type": "registered", "accept_rate": 59}}, {"body": "Singletons look really mental when bound to WPF too (all that x:Static stuff).", "edited": false, "comment_id": 231812, "creation_date": 1230906727, "score": 0, "owner": {"display_name": "Dmitri Nesteruk", "reputation": 8707, "user_id": 9476, "user_type": "registered", "accept_rate": 66}}, {"body": "Ok, so you remove all debuggers, and all alternate systems for debugging.  (if the easy way is bad, then the hard ways must be worse, no?)  Then in testing you discover a bug. Now what do you do?  Cancel the project?", "edited": false, "comment_id": 231819, "creation_date": 1230906858, "score": 1, "owner": {"display_name": "Charles Bretana", "reputation": 71330, "user_id": 32632, "user_type": "registered", "accept_rate": 75}}, {"body": "@charles, when I discover a bug I try reproduce the behavior in a unit test. Then I fix it. If you need a debugger it is just a sign that you need better tests or refactor the code that it is easier to understand.", "edited": false, "comment_id": 231830, "creation_date": 1230907163, "score": 0, "owner": {"display_name": "martinus", "reputation": 8144, "user_id": 48181, "user_type": "registered", "accept_rate": 100}}, {"body": "Sometimes I have to maintain and extend programs that make extensive use of complex pointer arithmetic. You can pry my debugger from my cold, dead hands. And if any developer mentions &quot;global&quot; in the same room I am, he can consider himself slapped.", "edited": false, "comment_id": 231833, "creation_date": 1230907238, "score": 0, "owner": {"display_name": "Leonardo Herrera", "reputation": 4669, "user_id": 7841, "user_type": "registered", "accept_rate": 92}}, {"body": "@Jon Skeet, if only copy is possible I can&#39;t paste from SO:)", "edited": false, "comment_id": 231837, "creation_date": 1230907309, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "Right..  Get rid of debuggers - so that you can&#39;t see the results of your code until then end, rather than step your way through to see exactly WHERE the problem crops up.  I&#39;ll take debuggers over dozens of &quot;temporary, interim display statements&quot; <i>ANY</i> day.", "edited": false, "comment_id": 231845, "creation_date": 1230907464, "score": 8, "owner": {"display_name": "David", "reputation": 713, "user_id": 15891, "user_type": "registered", "accept_rate": 57}}, {"body": "Debuggers can be excellent for understanding how current code is working (I generally don&#39;t need them much for my own independent code), and cut/paste is part of refactoring.", "edited": false, "comment_id": 231860, "creation_date": 1230907634, "score": 2, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}}, {"body": "Without any way to debug it, how can you tell what to change to fix it?  are you prescient? if so, why did you put the bug in there in the first place?  &quot;Debugging&quot; and &quot;Debuggers&quot; are by defintion, the tools we use to figure out what is causing the bug.  Without them, you can&#39;t fix any bug.", "edited": false, "comment_id": 231877, "creation_date": 1230908033, "score": 0, "owner": {"display_name": "Charles Bretana", "reputation": 71330, "user_id": 32632, "user_type": "registered", "accept_rate": 75}}, {"body": "Except perhaps by random shotgun approach and a LOT of luck (Just change something, test again, and repeat until bug goes away...)", "edited": false, "comment_id": 231879, "creation_date": 1230908102, "score": 0, "owner": {"display_name": "Charles Bretana", "reputation": 71330, "user_id": 32632, "user_type": "registered", "accept_rate": 75}}, {"body": "And outputting variable values or &quot;I am Here&quot; statements to a text file IS a debugger too!", "edited": false, "comment_id": 231880, "creation_date": 1230908177, "score": 1, "owner": {"display_name": "Charles Bretana", "reputation": 71330, "user_id": 32632, "user_type": "registered", "accept_rate": 75}}, {"body": "&quot;Debuggers should be forbidden.&quot; -- and how do you find bugs that are not yours but come from the library/platform?", "edited": false, "comment_id": 231932, "creation_date": 1230909261, "score": 0, "owner": {"display_name": "niXar", "reputation": 598, "user_id": 19979, "user_type": "registered"}}, {"body": "Wow. This is like saying &quot;if a hammer can&#39;t do the job, it isn&#39;t worth doing.&quot;  Seriously, how would you track a memory overwrite originating outside of your object with unit tests?", "edited": false, "comment_id": 231941, "creation_date": 1230909508, "score": 1, "owner": {"display_name": "Mark Brittingham", "reputation": 20417, "user_id": 15592, "user_type": "registered", "accept_rate": 88}}, {"body": "Probably the term &quot;Debugger&quot; is just wrong. I have yet to see a tool, that removes bugs from (de-bugs) my program.", "edited": false, "comment_id": 231949, "creation_date": 1230909634, "score": 1, "owner": {"display_name": "Simon Lehmann", "reputation": 6292, "user_id": 27011, "user_type": "registered", "accept_rate": 75}}, {"body": "@simon: <code>rm</code> or <code>del</code> will remove all bugs. Granted, it also removes the rest of the program, but such is the price for a bugless program :)", "edited": false, "comment_id": 232233, "creation_date": 1230914963, "score": 1, "owner": {"display_name": "Will Mc", "reputation": 187, "user_id": 35378, "user_type": "registered", "accept_rate": 100}}, {"body": "IMO, you can only discover bugs with unittesting, not locate them. After you found a bug with unittesting, you use debugging/debuggers to find where the bug actualy is located", "edited": false, "comment_id": 232263, "creation_date": 1230915637, "score": 3, "owner": {"display_name": "Ikke", "reputation": 39826, "user_id": 20261, "user_type": "registered", "accept_rate": 82}}, {"body": "Steve Macguire uses the entirety of chapter 4 of &quot;Writing Solid Code&quot; to promote the idea of stepping through new or changed code in a debugger.  It&#39;s good advice.  Debugger <i>abuse</i> is a different story.  I&#39;ve seen that too, but wouldn&#39;t propose doing away with the tool because some will abuse it.", "edited": false, "comment_id": 232288, "creation_date": 1230916228, "score": 0, "owner": {"display_name": "JeffK", "reputation": 2301, "user_id": 5420, "user_type": "registered", "accept_rate": 100}}, {"body": "+1: definitely a controversial opinion based on the comments on this post :)", "edited": false, "comment_id": 232379, "creation_date": 1230918428, "score": 2, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}, {"body": "Hmmm...  When I started writing basic on a dumb terminal back in 1979, we didn&#39;t have a debugger nor did I have a copy/paste, but that doesn&#39;t mean I wrote better code back then.", "edited": false, "comment_id": 232387, "creation_date": 1230918608, "score": 1, "owner": {"display_name": "Kluge", "reputation": 2205, "user_id": 8752, "user_type": "registered"}}, {"body": "First two seem almost hypocritical...", "edited": false, "comment_id": 232422, "creation_date": 1230919298, "score": 0, "owner": {"display_name": "Pablo Fernandez", "reputation": 40361, "user_id": 7595, "user_type": "registered", "accept_rate": 70}}, {"body": "Um, and I did use a singleton in code I was working on last night.  And I&#39;m not slapping myself.  And I might use another singleton sometime in the future too.  There are reasons for global state, although darn few are good ones.", "edited": false, "comment_id": 233100, "creation_date": 1230935377, "score": 0, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}}, {"body": "Eek - no copy and paste?  What happens when I decide I need to move a block of code from one class to another?  You&#39;re gonna make me retype it all out by hand?  No debugger...yeah, I could probably work around that, it would be a pain though.  I could probably live without Singletons too.", "edited": false, "comment_id": 233210, "creation_date": 1230937558, "score": 1, "owner": {"display_name": "BenAlabaster", "reputation": 22192, "user_id": 40650, "user_type": "registered", "accept_rate": 91}}, {"body": "@balabaster that&#39;s cut &amp; paste, not copy &amp; paste. So I guess I would allow that ;-)", "edited": false, "comment_id": 233281, "creation_date": 1230939393, "score": 0, "owner": {"display_name": "martinus", "reputation": 8144, "user_id": 48181, "user_type": "registered", "accept_rate": 100}}, {"body": "I agree with balabaster--we need cut &amp; paste for refactoring or the like.", "edited": false, "comment_id": 233669, "creation_date": 1230958914, "score": 0, "owner": {"display_name": "Loren Pechtel", "reputation": 5985, "user_id": 10659, "user_type": "registered", "accept_rate": 56}}, {"body": "Those are the strangest, most archaic things I&#39;ve read in a while.  Chances of writing bugs are just as great when manually typing as when copy/pasting,  There&#39;s nothing forcing someone to write good code if they have no debugger, and although a singleton may bot be necessary, does that make it bad?", "edited": false, "comment_id": 234762, "creation_date": 1231016816, "score": 1, "owner": {"display_name": "Jeremy", "reputation": 16448, "user_id": 9266, "user_type": "registered", "accept_rate": 65}}, {"body": "Sounds like someone who doesn&#39;t understand debugging. How can my copying and pasting my own code be bad?   As far as copying and pasting others, I think you need to test it, understand it, and reduce it to what is necessary for your application before using it in your project.", "edited": false, "comment_id": 235199, "creation_date": 1231034818, "score": 0, "owner": {"display_name": "bruceatk", "reputation": 4408, "user_id": 791, "user_type": "registered", "accept_rate": 100}}, {"body": "@bruceatk, copy &amp; paste code is very bad. suppose you ind a bug and fix one of the copied pieces, then it is difficult to track down all the copies to fix the bug there too.", "edited": false, "comment_id": 235446, "creation_date": 1231054156, "score": 0, "owner": {"display_name": "martinus", "reputation": 8144, "user_id": 48181, "user_type": "registered", "accept_rate": 100}}, {"body": "Regarding Singletons, that may be wrong in languages like C# or Java, but with less OOP strict languages like Javascript or Scala, using singletons is okay. In JS every object is a singleton! (and classed using prototypes, at least in JS 1.x) And Scala has a singleton type called object.", "edited": false, "comment_id": 236525, "creation_date": 1231106445, "score": 0, "owner": {"display_name": "Alcides", "reputation": 474, "user_id": 28516, "user_type": "registered"}}, {"body": "There&#39;s nothing wrong with Singletons in themselves.  I suspect you&#39;re upset with some particular abuse of them, not the concept.", "edited": false, "comment_id": 236674, "creation_date": 1231111836, "score": 0, "owner": {"display_name": "chaos", "reputation": 78028, "user_id": 47529, "user_type": "registered", "accept_rate": 100}}, {"body": "@martinus, maybe it is for you, but I copy and paste my own code all the time. I&#39;ve never had a problem having to go back and fix stuff.  I&#39;ve been doing it for almost 30 years. I see no practical reason to change now.", "edited": false, "comment_id": 236765, "creation_date": 1231115158, "score": 0, "owner": {"display_name": "bruceatk", "reputation": 4408, "user_id": 791, "user_type": "registered", "accept_rate": 100}}, {"body": "I want to up-vote your Singleton comment and down-vote your Debugger comment... You need the debugger to figure out why that core dump exists in the first place (only trivial code is 100% testable).", "edited": false, "comment_id": 236951, "creation_date": 1231123477, "score": 0, "owner": {"display_name": "Tom", "reputation": 7463, "user_id": 40620, "user_type": "registered", "accept_rate": 90}}, {"body": "@martinus, it&#39;s not that copy paste is bad but in your example, the programmer should use a common function, rather than duplicating a chunk of code. That way if the function has a bug, you fix it in one place. But there&#39;s copy paste scenarios where you wouldn&#39;t use a common function line one liners", "edited": false, "comment_id": 236957, "creation_date": 1231123608, "score": 0, "owner": {"display_name": "Jeremy", "reputation": 16448, "user_id": 9266, "user_type": "registered", "accept_rate": 65}}, {"body": "How can I fix a driver without a debugger... Write a unit test that reproduces... Wait.", "edited": false, "comment_id": 244527, "creation_date": 1231338285, "score": 0, "owner": {"display_name": "Edouard A.", "reputation": 5270, "user_id": 41363, "user_type": "registered"}}, {"body": "Fundamentalisme isn&#39;t the way forward!", "edited": false, "comment_id": 296207, "creation_date": 1232964104, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "I agree with getting rid of copy-paste as long as you can still cut-paste. Cutting and pasting code is essential to refactoring and keeping the code in a clean state.", "edited": false, "comment_id": 446791, "creation_date": 1236761876, "score": 4, "owner": {"display_name": "Sergio Acosta", "reputation": 6965, "user_id": 2954, "user_type": "registered", "accept_rate": 85}}, {"body": "Are you nuts? &lt;wink&gt;  I&#39;ll vote you up just because I disagree so strongly (and that makes it controversial - to me anyway).  I need those tools.  It would be similar to punishing everyone by taxing junk food because some people can&#39;t control themselves.", "edited": false, "comment_id": 1297192, "creation_date": 1253438901, "score": 0, "owner": {"display_name": "Doug L.", "reputation": 2311, "user_id": 19179, "user_type": "registered", "accept_rate": 80}}, {"body": "I agree that you shouldn&#39;t need a debugger for app code you wrote. But you need one to make sense of corefiles, you need one for driver work, and you damn well need one to make sense of weird, uncommented and undocumented code some other bloke (who has long since left the company) perpetrated. There&#39;s not only <i>creators</i> out there, but <i>maintainers</i> as well, and the debugger is our best friend.", "edited": false, "comment_id": 2045274, "creation_date": 1264086304, "score": 0, "owner": {"display_name": "DevSolar", "reputation": 26262, "user_id": 60281, "user_type": "registered", "accept_rate": 97}}], "creation_date": 1230903574, "comment_count": 43, "score": 4, "owner": {"display_name": "martinus", "reputation": 8144, "user_id": 48181, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "martinus", "reputation": 8144, "user_id": 48181, "user_type": "registered", "accept_rate": 100}, "last_edit_date": 1230906165, "up_vote_count": 48}, {"community_owned_date": 1230903663, "body": "<p><strong>Write small methods.</strong>  It seems that programmers love to write loooong methods where they do multiple different things.  </p>\n\n<p>I think that a method should be created wherever you can name one.</p>\n", "is_accepted": false, "tags": [], "answer_id": 406805, "down_vote_count": 10, "last_activity_date": 1231518578, "creation_date": 1230903663, "comment_count": 0, "score": 257, "owner": {"display_name": "Matt Secoske", "reputation": 21, "user_id": 50301, "user_type": "registered"}, "last_editor": {"display_name": "David Basarab", "reputation": 30732, "user_id": 2469, "user_type": "registered", "accept_rate": 98}, "last_edit_date": 1231518578, "up_vote_count": 267}, {"community_owned_date": 1230903719, "body": "<p><strong>Getters and Setters are Highly Overused</strong></p>\n\n<p>I've seen millions of people claiming that public fields are evil, so they make them private and provide getters and setters for all of them. I believe this is almost identical to making the fields public, maybe a bit different if you're using threads (but generally is not the case) or if your accessors have business/presentation logic (something 'strange' at least).</p>\n\n<p>I'm not in favor of public fields, but against making a getter/setter (or Property) for everyone of them, and then claiming that doing that is <strong>encapsulation</strong> or <strong>information hiding</strong>... ha!</p>\n\n<p><strong>UPDATE:</strong></p>\n\n<p>This answer has raised some controversy in it's comments, so I'll try to clarify it a bit (I'll leave the original untouched since that is what many people upvoted).</p>\n\n<p>First of all: <strong>anyone who uses public fields deserves jail time</strong></p>\n\n<p>Now, creating private fields and then using the IDE to <em>automatically generate getters and setters for every one of them</em> is <strong>nearly as bad</strong> as using public fields.</p>\n\n<p>Many people think:</p>\n\n<p><code>private fields + public accessors == encapsulation</code></p>\n\n<p>I say (automatic or not) generation of getter/setter pair for your fields effectively goes against the so called encapsulation you are trying to achieve.</p>\n\n<p>Lastly, let me quote <a href=\"http://en.wikipedia.org/wiki/Robert%5FCecil%5FMartin\" rel=\"nofollow\">Uncle Bob</a> in this topic (taken from chapter 6 of \"Clean Code\"):</p>\n\n<blockquote>\n  <p>There is a reason that we keep our\n  variables private. We don't want\n  anyone else to depend on them. We want\n  the freedom to change their type or\n  implementation on a whim or an\n  impulse. Why, then, do so many\n  programmers automatically add getters\n  and setters to their objects, exposing\n  their private fields <strong>as if they were\n  public?</strong></p>\n</blockquote>\n", "is_accepted": false, "tags": [], "answer_id": 406807, "down_vote_count": 29, "last_activity_date": 1242404715, "creation_date": 1230903719, "comment_count": 0, "score": 440, "owner": {"display_name": "Pablo Fernandez", "reputation": 40361, "user_id": 7595, "user_type": "registered", "accept_rate": 70}, "last_editor": {"display_name": "Pablo Fernandez", "reputation": 40361, "user_id": 7595, "user_type": "registered", "accept_rate": 70}, "last_edit_date": 1242404715, "up_vote_count": 469}, {"community_owned_date": 1230903745, "body": "<p>I also think there's <strong>nothing wrong with having binaries in source control</strong>.. if there is a good reason for it.  If I have an assembly I don't have the source for, and might not necessarily be in the same place on each devs machine, then I will usually stick it in a \"binaries\" directory and reference it in a project using a relative path.  </p>\n\n<p>Quite a lot of people seem to think I should be burned at the stake for even mentioning \"source control\" and \"binary\" in the same sentence.  I even know of places that have strict rules saying you can't add them.</p>\n", "is_accepted": false, "tags": [], "answer_id": 406808, "down_vote_count": 6, "last_activity_date": 1231519018, "creation_date": 1230903745, "comment_count": 0, "score": 185, "owner": {"display_name": "Steven Robbins", "reputation": 20662, "user_id": 26507, "user_type": "registered", "accept_rate": 92}, "last_editor": {"display_name": "David Basarab", "reputation": 30732, "user_id": 2469, "user_type": "registered", "accept_rate": 98}, "last_edit_date": 1231519018, "up_vote_count": 191}, {"community_owned_date": 1230903851, "body": "<p><strong>Most comments in code are in fact a pernicious form of code duplication.</strong></p>\n\n<p>We spend most of our time maintaining code written by others (or ourselves) and poor, incorrect, outdated, misleading comments must be near the top of the list of most annoying artifacts in code.</p>\n\n<p>I think eventually many people just blank them out, especially those flowerbox monstrosities.</p>\n\n<p>Much better to concentrate on making the code readable, refactoring as necessary, and minimising idioms and quirkiness.</p>\n\n<p>On the other hand, many courses teach that comments are very nearly more important than the code itself, leading to the <em>this next line adds one to invoiceTotal</em> style of commenting.</p>\n", "is_accepted": false, "tags": [], "answer_id": 406812, "down_vote_count": 33, "last_activity_date": 1239480835, "creation_date": 1230903851, "comment_count": 0, "score": 713, "owner": {"display_name": "Ed Guiness", "reputation": 24287, "user_id": 4200, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "Ed Guiness", "reputation": 24287, "user_id": 4200, "user_type": "registered", "accept_rate": 100}, "last_edit_date": 1239480835, "up_vote_count": 746}, {"community_owned_date": 1230904099, "body": "<p><strong>The use of hungarian notation should be punished with death.</strong> </p>\n\n<p>That should be controversial enough ;)</p>\n", "is_accepted": false, "tags": [], "answer_id": 406819, "down_vote_count": 26, "last_activity_date": 1231518609, "creation_date": 1230904099, "comment_count": 0, "score": 331, "owner": {"display_name": "Marc", "reputation": 950, "user_id": 27947, "user_type": "registered"}, "last_editor": {"display_name": "David Basarab", "reputation": 30732, "user_id": 2469, "user_type": "registered", "accept_rate": 98}, "last_edit_date": 1231518609, "up_vote_count": 357}, {"community_owned_date": 1230904269, "body": "<p><strong>1) The Business Apps farce</strong>:</p>\n\n<p>I think that the whole \"Enterprise\" frameworks thing is smoke and mirrors. J2EE, .NET, the majority of the Apache frameworks and most abstractions to manage such things create far more complexity than they solve.</p>\n\n<p>Take any regular Java or .NET ORM, or any supposedly modern MVC framework for either which does \"magic\" to solve tedious, simple tasks. You end up writing huge amounts of ugly XML boilerplate that is difficult to validate and write quickly. You have massive APIs where half of those are just to integrate the work of the other APIs, interfaces that are impossible to recycle, and abstract classes that are needed only to overcome the inflexibility of Java and C#. We simply don't need most of that.</p>\n\n<p>How about all the different application servers with their own darned descriptor syntax, the overly complex database and groupware products?</p>\n\n<p>The point of this is not that complexity==bad, it's that unnecessary complexity==bad. I've worked in massive enterprise installations where some of it was necessary, but even in most cases a few home-grown scripts and a simple web frontend is all that's needed to solve most use cases.</p>\n\n<p>I'd try to replace all of these enterprisey apps with simple web frameworks, open source DBs, and trivial programming constructs.</p>\n\n<p><strong>2) The n-years-of-experience-required:</strong></p>\n\n<p>Unless you need a consultant or a technician to handle a specific issue related to an application, API or framework, then you don't really need someone with 5 years of experience in that application. What you need is a developer/admin who can read documentation, who has domain knowledge in whatever it is you're doing, and who can learn quickly. If you need to develop in some kind of language, a decent developer will pick it up in less than 2 months. If you need an administrator for X web server, in two days he should have read the man pages and newsgroups and be up to speed. Anything less and that person is not worth what he is paid.</p>\n\n<p><strong>3) The common \"computer science\" degree curriculum:</strong></p>\n\n<p>The majority of computer science and software engineering degrees are bull. If your first programming language is Java or C#, then you're doing something wrong. If you don't get several courses full of algebra and math, it's wrong. If you don't delve into functional programming, it's incomplete. If you can't apply loop invariants to a trivial for loop, you're not worth your salt as a supposed computer scientist. If you come out with experience in x and y languages and object orientation, it's full of s***. A real computer scientist sees a language in terms of the concepts and syntaxes it uses, and sees programming methodologies as one among many, and has such a good understanding of the underlying philosophies of both that picking new languages, design methods, or specification languages should be trivial.</p>\n", "is_accepted": false, "tags": [], "answer_id": 406825, "down_vote_count": 18, "last_activity_date": 1256509331, "creation_date": 1230904269, "comment_count": 0, "score": 466, "owner": {"display_name": "Daishiman", "reputation": 682, "user_id": 42345, "user_type": "registered"}, "last_editor": {"display_name": "pavpanchekha", "reputation": 1421, "user_id": 66517, "user_type": "registered", "accept_rate": 50}, "last_edit_date": 1256509331, "up_vote_count": 484}, {"community_owned_date": 1230904448, "body": "<p><strong>Every developer should be familiar with the basic architecture of modern computers.</strong> This also applies to developers who target a virtual machine (maybe even more so, because they have been told time and time again that they don't need to worry themselves with memory management etc.)</p>\n", "is_accepted": false, "tags": [], "answer_id": 406831, "down_vote_count": 14, "last_activity_date": 1231018764, "creation_date": 1230904448, "comment_count": 0, "score": 180, "owner": {"display_name": "Brian Rasmussen", "reputation": 76194, "user_id": 38206, "user_type": "registered", "accept_rate": 80}, "last_editor": {"display_name": "Brian Rasmussen", "reputation": 76194, "user_id": 38206, "user_type": "registered", "accept_rate": 80}, "last_edit_date": 1231018764, "up_vote_count": 194}, {"community_owned_date": 1230904713, "body": "<p>Once i saw the following from a co-worker:</p>\n\n<p>equal = a.CompareTo(b) == 0;</p>\n\n<p>I stated that he cannot assume that in a general case, but he just laughed.</p>\n", "answer_id": 406843, "tags": [], "down_vote_count": 2, "last_activity_date": 1230904713, "comments": [{"body": "I&#39;d be interested in hearing your reasoning here - as well as which CompareTo method you&#39;re talking about.", "edited": false, "comment_id": 231717, "creation_date": 1230905036, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I&#39;m taking about the C# IComparable.CompareTo method. Don&#39;t expect that two IComparable implementing objects are equal if the CompareTo method returns zero. They just have the same order.", "edited": false, "comment_id": 231735, "creation_date": 1230905380, "score": 0, "owner": {"display_name": "Rauhotz", "reputation": 3635, "user_id": 48722, "user_type": "registered", "accept_rate": 59}}, {"body": "Then your implementation of IComparable is broken. The docs state that a return value of zero means &quot;This instance is equal to obj.&quot; I&#39;m not saying that there aren&#39;t broken implementations out there, but your colleague can reasonably point to the docs...", "edited": false, "comment_id": 231744, "creation_date": 1230905558, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I&#39;d argue that if things don&#39;t have a natural equality/ordering relationship, it&#39;s better to have a separate IComparer implementation, which can express this explicitly. There are certainly tricky edge cases - is 1.000m equal to 1.0m for example?", "edited": false, "comment_id": 231747, "creation_date": 1230905660, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "that&#39;s a good case of narrow-minded view.  check the lots of &#39;compare&#39; predicates in Scheme", "edited": false, "comment_id": 231780, "creation_date": 1230906062, "score": 0, "owner": {"display_name": "Javier", "reputation": 38007, "user_id": 11649, "user_type": "registered", "accept_rate": 50}}, {"body": "Jon, could you be so kind and point me the lines in the docs, where it says &quot;a.CompareTo(b) == 0 implies a.Equals(b) == true&quot;?", "edited": false, "comment_id": 231788, "creation_date": 1230906145, "score": 0, "owner": {"display_name": "Rauhotz", "reputation": 3635, "user_id": 48722, "user_type": "registered", "accept_rate": 59}}, {"body": "Sure. The docs to ICompable.Compare mean that &quot;a.CompareTo(b) == 0&quot; implies &quot;a is equal to b&quot;. The docs to object.Equals mean that &quot;a.Equals(b)&quot; should return true if a is equal to b. It can be argued that the documentation is too narrow or incomplete (Java&#39;s docs are more careful on this front)", "edited": false, "comment_id": 231820, "creation_date": 1230906865, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "but the documentation really does seem fairly clearly limiting. It does say that the meaning of &quot;equals&quot; depends on the implementation, but it&#39;s at the very least confusing for &quot;equals&quot; to mean something different <i>within the same type</i> between two methods.", "edited": false, "comment_id": 231826, "creation_date": 1230906946, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "That&#39;s why I think it&#39;s clearer to implement non-natural orderings (i.e. where equality within ordering doesn&#39;t mean equality between objects) via IComparer instead of IComparable.", "edited": false, "comment_id": 231827, "creation_date": 1230906995, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "JavaDocs where it&#39;s nice and clear (compared with the MSDN ones for IComparable): <a href=\"http://java.sun.com/javase/6/docs/api/java/lang/Comparable.html\" rel=\"nofollow\">java.sun.com/javase/6/docs/api/java/lang/Comparable.html</a> It even says how to document times when you violate consistency with equals.", "edited": false, "comment_id": 231832, "creation_date": 1230907217, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Of course, given the number of comments discussing this line, I think we&#39;re justified in considering it at least a bit unclear.", "edited": false, "comment_id": 232143, "creation_date": 1230913437, "score": 0, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}}, {"body": "On the other hand, 7 of the comments before this one were mine :)", "edited": false, "comment_id": 232691, "creation_date": 1230925611, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1230904713, "comment_count": 12, "score": 0, "owner": {"display_name": "Rauhotz", "reputation": 3635, "user_id": 48722, "user_type": "registered", "accept_rate": 59}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1230904757, "body": "<p><strong>Not all programmers are created equal</strong></p>\n\n<p>Quite often managers think that DeveloperA == DeveloperB simply because they have same level of experience and so on. In actual fact, the performance of one developer can be 10x or even 100x that of another.</p>\n\n<p>It's politically risky to talk about it, but sometimes I feel like pointing out that, even though several team members may <em>appear</em> to be of equal skill, it's not always the case. I have even seen cases where lead developers were 'beyond hope' and junior devs did all the actual work - I made sure they got the credit, though. :)</p>\n", "is_accepted": false, "tags": [], "answer_id": 406847, "down_vote_count": 6, "last_activity_date": 1233049817, "creation_date": 1230904757, "comment_count": 0, "score": 680, "owner": {"display_name": "Dmitri Nesteruk", "reputation": 8707, "user_id": 9476, "user_type": "registered", "accept_rate": 66}, "last_editor": {"display_name": "Dmitri Nesteruk", "reputation": 8707, "user_id": 9476, "user_type": "registered", "accept_rate": 66}, "last_edit_date": 1233049817, "up_vote_count": 686}, {"community_owned_date": 1230904763, "body": "<p><b>If you only know one language, no matter how well you know it, you're not a great programmer.</b></p>\n\n<p>There seems to be an attitude that says once you're really good at C# or Java or whatever other language you started out learning then that's all you need. I don't believe it- every language I have ever learned has taught me something new about programming that I have been able to bring back into my work with all the others. I think that anyone who restricts themselves to one language will never be as good as they could be.</p>\n\n<p>It also indicates to me a certain lack of inquistiveness and willingness to experiment that doesn't necessarily tally with the qualities I would expect to find in a really good programmer.</p>\n", "answer_id": 406848, "tags": [], "down_vote_count": 27, "last_activity_date": 1230904763, "creation_date": 1230904763, "comment_count": 0, "score": 542, "owner": {"display_name": "glenatron", "reputation": 6752, "user_id": 15394, "user_type": "registered", "accept_rate": 64}, "is_accepted": false, "up_vote_count": 569}, {"community_owned_date": 1230904781, "body": "<p>I often get shouted down when I claim that the <strong>code is merely an expression of my design</strong>.  I quite dislike the way I see so many developers design their system \"on the fly\" while coding it.</p>\n\n<p>The amount of time and effort wasted when one of these cowboys falls off his horse is amazing - and 9 times out of 10 the problem they hit would have been uncovered with just a little upfront design work.</p>\n\n<p>I feel that modern methodologies do not emphasize the importance of design in the overall software development process.  Eg, the importance placed on code reviews when you haven't even reviewed your design!  It's madness.</p>\n", "is_accepted": false, "tags": [], "answer_id": 406849, "down_vote_count": 2, "last_activity_date": 1260854455, "comments": [{"body": "I don&#39;t know, I&#39;ve seen an upfront design be a very good guide to development. I&#39;ve never seen it work out such that the upfront design is followed exactly. It seems in my experience that when the rubber hits the road, designs have to be reworked.", "edited": false, "comment_id": 231739, "creation_date": 1230905472, "score": 2, "owner": {"display_name": "Doug T.", "reputation": 36891, "user_id": 8123, "user_type": "registered", "accept_rate": 62}}, {"body": "fine with that, so you iterate... amend the design now that you have discovered something new and get on with the job.  Your code is, once again, an expression of your design.  It&#39;s developers that think that a design follows code the urk me.", "edited": false, "comment_id": 231773, "creation_date": 1230905986, "score": 0, "owner": {"display_name": "Daniel Paull", "reputation": 4454, "user_id": 43066, "user_type": "registered"}}, {"body": "I wish I was allowed to design before I code.  In this job it&#39;s &quot;I have an idea&quot; from somoene followed by a directive to get something in a demo ASAP.", "edited": false, "comment_id": 231858, "creation_date": 1230907612, "score": 0, "owner": {"display_name": "David", "reputation": 713, "user_id": 15891, "user_type": "registered", "accept_rate": 57}}, {"body": "Much of my design is noted in header files and/or a few diagrams on a white board.  I&#39;m not saying anything about the how formal your design should be, or how to do it, but for the love of God, get your thoughts sorted before coding!", "edited": false, "comment_id": 231869, "creation_date": 1230907843, "score": 0, "owner": {"display_name": "Daniel Paull", "reputation": 4454, "user_id": 43066, "user_type": "registered"}}, {"body": "I&#39;ve been irritated by the opposite, too much value placed in the design. The mantra &quot;reuse the design not the code&quot; forgets the time spent on implementing, testing, debugging and generally hardening the codebase. You cannot just throw that amount of work out.", "edited": false, "comment_id": 232317, "creation_date": 1230917035, "score": 1, "owner": {"display_name": "JeffV", "reputation": 10811, "user_id": 445087, "user_type": "registered", "accept_rate": 62}}, {"body": "@Daniel: I think I agree with you. At the same time, it&#39;s important to be ready and able to revise the design and the code late and often. That takes skill that, I&#39;m afraid, is not taught.", "edited": false, "comment_id": 232513, "creation_date": 1230921533, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "@Mike - I&#39;m not saying that we all return to a waterfall model.  Quite the opposite - as a developer you should expect things to change, so design your system to cater for change (eg, minimise coupling) and expect unexpected iterations that affect your design.  You are right - this is not taught.", "edited": false, "comment_id": 233387, "creation_date": 1230943908, "score": 0, "owner": {"display_name": "Daniel Paull", "reputation": 4454, "user_id": 43066, "user_type": "registered"}}, {"body": "So if you have to iterate anyway, the choice to design first or code first is essentially the same thing.", "edited": false, "comment_id": 237085, "creation_date": 1231130454, "score": 0, "owner": {"display_name": "Kendall Helmstetter Gelner", "reputation": 59340, "user_id": 6330, "user_type": "registered", "accept_rate": 80}}, {"body": "@Kendall: you are kidding, right?  Perhaps you are thinking of a proof by induction for your statement, but I&#39;d hope that the number of iterations to write a bit of code that is closed against change is small.  In that case, I believe that design first is far more efficient.", "edited": false, "comment_id": 237107, "creation_date": 1231131930, "score": 0, "owner": {"display_name": "Daniel Paull", "reputation": 4454, "user_id": 43066, "user_type": "registered"}}, {"body": "I believe in iterative design. If you invest too much time upfront in design, you won&#39;t have the time to do the necessary rewrite (which always happens).", "edited": false, "comment_id": 915962, "creation_date": 1247098144, "score": 2, "owner": {"display_name": "quant_dev", "reputation": 3379, "user_id": 59557, "user_type": "registered", "accept_rate": 91}}], "creation_date": 1230904781, "comment_count": 10, "score": 26, "owner": {"display_name": "Daniel Paull", "reputation": 4454, "user_id": 43066, "user_type": "registered"}, "last_editor": {"display_name": "Jim Ferrans", "reputation": 15469, "user_id": 45935, "user_type": "registered", "accept_rate": 92}, "last_edit_date": 1260854455, "up_vote_count": 28}, {"community_owned_date": 1230905001, "body": "<p><strong>Performance <em>does</em> matter.</strong></p>\n", "is_accepted": false, "tags": [], "answer_id": 406857, "down_vote_count": 15, "last_activity_date": 1231517982, "creation_date": 1230905001, "comment_count": 0, "score": 537, "owner": {"display_name": "Daniel Paull", "reputation": 4454, "user_id": 43066, "user_type": "registered"}, "last_editor": {"display_name": "David Basarab", "reputation": 30732, "user_id": 2469, "user_type": "registered", "accept_rate": 98}, "last_edit_date": 1231517982, "up_vote_count": 552}, {"community_owned_date": 1230905580, "body": "<p><strong>You don't have to program everything</strong></p>\n\n<p>I'm getting tired that everything, but then everything needs to be stuffed in a program, like that is always faster. everything needs to be webbased, evrything needs to be done via a computer. Please, just use your pen and paper. it's faster and less maintenance.</p>\n", "is_accepted": false, "tags": [], "answer_id": 406876, "down_vote_count": 2, "last_activity_date": 1235725343, "comments": [{"body": "+1 sorta. I use my tablet when I can like pen and paper because sometimes its just easier to write than use a piece of software.", "edited": false, "comment_id": 231876, "creation_date": 1230908023, "score": 0, "owner": {"display_name": "percent20", "reputation": 1587, "user_id": 23571, "user_type": "registered", "accept_rate": 78}}, {"body": "Do you mean &quot;everything&quot; and not &quot;anything&quot;?", "edited": false, "comment_id": 232272, "creation_date": 1230915892, "score": 0, "owner": {"display_name": "Adam Bellaire", "reputation": 50568, "user_id": 21632, "user_type": "registered", "accept_rate": 100}}, {"body": "Well, he sayd &quot;you don&#39;t have to program&quot; and I completely agree - nobody has forced me to program, I just happen to like it. Sorry, but no controversy here.", "edited": false, "comment_id": 234572, "creation_date": 1231009929, "score": 0, "owner": {"display_name": "Rene Saarsoo", "reputation": 6862, "user_id": 15982, "user_type": "registered", "accept_rate": 61}}, {"body": "No, no, I have to program lots of things.", "edited": false, "comment_id": 243750, "creation_date": 1231318165, "score": 0, "owner": {"display_name": "postfuturist", "reputation": 11180, "user_id": 1892, "user_type": "registered", "accept_rate": 75}}, {"body": "You don&#39;t have to program everything", "edited": false, "comment_id": 2554244, "creation_date": 1270034337, "score": 0, "owner": {"display_name": "Anil", "reputation": 314, "user_id": 296382, "user_type": "registered", "accept_rate": 25}}, {"body": "+1 for low-tech. Sometimes an Excel spreadsheet will do the trick just fine instead of coding an expensive CRUD.", "edited": false, "comment_id": 2614648, "creation_date": 1270780819, "score": 0, "owner": {"display_name": "Mauricio Scheffer", "reputation": 75814, "user_id": 21239, "user_type": "registered", "accept_rate": 82}}], "creation_date": 1230905580, "comment_count": 6, "score": 37, "owner": {"display_name": "Mafti", "reputation": 433, "user_id": 15981, "user_type": "registered", "accept_rate": 50}, "last_editor": {"display_name": "Aaron Digulla", "reputation": 178090, "user_id": 34088, "user_type": "registered", "accept_rate": 78}, "last_edit_date": 1235725343, "up_vote_count": 39}, {"community_owned_date": 1230905727, "body": "<p><strong>Code == Design</strong></p>\n\n<p>I'm no fan of sophisticated UML diagrams and endless code documentation. In a high level language, your code should be readable and understandable as is. Complex documentation and diagrams aren't really any more user friendly.</p>\n\n<p><hr /></p>\n\n<p>Here's an article on the topic of <a href=\"http://www.developerdotstar.com/mag/articles/reeves_design_main.html\" rel=\"nofollow\">Code as Design</a>.</p>\n", "is_accepted": false, "tags": [], "answer_id": 406883, "down_vote_count": 12, "last_activity_date": 1232686142, "creation_date": 1230905727, "comment_count": 0, "score": 197, "owner": {"display_name": "Jon B", "reputation": 30155, "user_id": 27414, "user_type": "registered", "accept_rate": 76}, "last_editor": {"display_name": "Jon B", "reputation": 30155, "user_id": 27414, "user_type": "registered", "accept_rate": 76}, "last_edit_date": 1232686142, "up_vote_count": 209}, {"community_owned_date": 1230905772, "body": "<p><strong>Opinion: Unit tests don't need to be written up front, and sometimes not at all.</strong></p>\n\n<p>Reasoning: Developers suck at testing their own code. We do. That's why we generally have test teams or QA groups.</p>\n\n<p>Most of the time the code we write is to intertwined with other code to be tested separately, so we end up jumping through patterned hoops to provide testability. Not that those patterns are bad, but they can sometimes add unnecessary complexity, all for the sake of unit testing...</p>\n\n<p>... which often doesn't work anyway. To write a comprehensive unit test requires alot of time. Often more time than we're willing to give. And the more comprehensive the test, the more brittle it becomes if the interface of the thing it's testing changes, forcing a rewrite of a test that no longer compiles.</p>\n", "answer_id": 406884, "tags": [], "down_vote_count": 13, "last_activity_date": 1230905772, "comments": [{"body": "Yes. And code can only be tested if it has room to fail. Simple structures without inconsistent states have nothing to unit test.", "edited": false, "comment_id": 231803, "creation_date": 1230906477, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "Yeah, unit tests up front don&#39;t really make sense.  If I wrote it down, I thought about the possibility.  If I thought about the possibility, unless I&#39;m a complete moron it&#39;ll at least work the first time around where the test would apply.  Testing needs to catch what I DIDN&#39;T think about!", "edited": false, "comment_id": 231898, "creation_date": 1230908458, "score": 3, "owner": {"display_name": "Gene Roberts", "reputation": 1119, "user_id": 47544, "user_type": "registered"}}, {"body": "Phoenix - you have a point about only catching what you didn&#39;t think about but I disagree with your overall point.  The value of the tests is that they form a spec.  Later, when I make a &quot;small change&quot; - the tests tell me I&#39;m still Ok.", "edited": false, "comment_id": 231925, "creation_date": 1230909190, "score": 1, "owner": {"display_name": "Mark Brittingham", "reputation": 20417, "user_id": 15592, "user_type": "registered", "accept_rate": 88}}, {"body": "I worked a company that wanted 95% test coverage, even for classes containing which contained fields to assign and no business logic whatsoever. The code produced at that company was horrible. My current company does not write any unit tests, relying instead on intense QA, and the code is top-notch.", "edited": false, "comment_id": 232397, "creation_date": 1230918849, "score": 0, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}, {"body": "I write unit tests when I think I need them, but more importantly I write random test drivers, because my code might work fine in 100% of predictable cases. It&#39;s the unpredictable cases I&#39;m worried about.", "edited": false, "comment_id": 232455, "creation_date": 1230920147, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "In my current project, I&#39;ve introduced up-front unit tests, and code quality has improved drastically. People had to be convinced at first, but soon noticed the positive effects themselves. So my experience says you&#39;re wrong. And PhoenixRedeemer, you ARE a complete moron... just like everyone else.", "edited": false, "comment_id": 234442, "creation_date": 1231005299, "score": 0, "owner": {"display_name": "Michael Borgwardt", "reputation": 211236, "user_id": 16883, "user_type": "registered", "accept_rate": 83}}, {"body": "@Brazzy: Why weren&#39;t your devs writing better code to start with? Notice my opinion says you don&#39;t &quot;need&quot; to write tests up front. I&#39;m not saying you shouldn&#39;t, just that you should think about why you&#39;re writing that way.", "edited": false, "comment_id": 235102, "creation_date": 1231029217, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "@brazzy: Hey, complete morons rule! :) I&#39;ve seen code that is improved by unit tests, because it needed them. I&#39;ve seen code that didn&#39;t need many unit tests, because it had few invalid states. My code tends to need randomly generated tests, due to the problem space.", "edited": false, "comment_id": 237901, "creation_date": 1231164675, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "Unit tests are also about managing change. It&#39;s not the code that you are writing right now that needs the tests, but the code after the next iteration of change that will need it.  How can you re-factor code if you have no way to prove that what it did before the change is still what it does after?", "edited": false, "comment_id": 239787, "creation_date": 1231209591, "score": 5, "owner": {"display_name": "Greg Domjan", "reputation": 6714, "user_id": 37558, "user_type": "registered", "accept_rate": 68}}, {"body": "@Greg: While it is true to say how can you refactor if you can&#39;t prove you didn&#39;t break stuff, but then I do write tests designed to show changes after a refactor. My opinion of tests is mainly confined to their use up front. Tests are very useful when refactoring.", "edited": false, "comment_id": 240871, "creation_date": 1231249075, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "Everyone writes the unit test that checks open() fails if the file doesn&#39;t exit.  No one writes the unit test for what happens if the username is 100characters on a tablet PC with a right-left language and a turkish keyboard.", "edited": false, "comment_id": 252562, "creation_date": 1231522950, "score": 5, "owner": {"display_name": "Martin Beckett", "reputation": 65002, "user_id": 10897, "user_type": "registered", "accept_rate": 88}}, {"body": "I think this misses the point of test driven development, which hurts the argument. It isn&#39;t about testing edge cases, it is about driving design.", "edited": false, "comment_id": 613689, "creation_date": 1241029745, "score": 1, "owner": {"display_name": "Yishai", "reputation": 48897, "user_id": 77779, "user_type": "registered", "accept_rate": 90}}, {"body": "You don&#39;t need to catch every edge case. If you are testing the best case and a few common errors, when an edge case pops up you can write a test for it, fix it, AND ensure that all you don&#39;t introduce new bugs. Apart from that, writing tests first forces you to think about what you are trying to acheive, and how. It helps you write small maintainable methods. I don&#39;t see how any programmer with a desire to write good software could be against this.", "edited": false, "comment_id": 928233, "creation_date": 1247272926, "score": 1, "owner": {"display_name": "nitecoder", "reputation": 4743, "user_id": 60145, "user_type": "registered", "accept_rate": 44}}, {"body": "Although I agree that &quot;unit tests only catch the issues I&#39;ve thought about&quot;, there are many times where I&#39;m <i>positive</i> the code I just wrote satisfies a particular condition, yet the test reveals something I totally overlooked. Furthermore, the act of writing tests first forces you to think about all the edge cases in a manner that you might not have to as great a degree.", "edited": false, "comment_id": 1569961, "creation_date": 1257636735, "score": 0, "owner": {"display_name": "Ether", "reputation": 36938, "user_id": 40468, "user_type": "registered", "accept_rate": 60}}, {"body": "For me, an eye-opener about testing was this: you need to try out your code anyway - so why not do it in form of a test? Extensive testing is controversial, of course, but a little can get you a long way.", "edited": false, "comment_id": 1791530, "creation_date": 1260562583, "score": 1, "owner": {"display_name": "hstoerr", "reputation": 7437, "user_id": 21499, "user_type": "registered", "accept_rate": 55}}], "creation_date": 1230905772, "comment_count": 15, "score": 58, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}, "is_accepted": false, "up_vote_count": 71}, {"community_owned_date": 1230906071, "body": "<p><strong>It's ok to write garbage code once in a while</strong></p>\n\n<p>Sometimes a quick and dirty piece of garbage code is all that is needed to fulfill a particular task.  Patterns, ORMs, SRP, whatever...  Throw up a Console or Web App, write some inline sql ( feels good ), and blast out the requirement. </p>\n", "answer_id": 406891, "tags": [], "down_vote_count": 20, "last_activity_date": 1230906071, "creation_date": 1230906071, "comment_count": 0, "score": 236, "owner": {"display_name": "jfar", "reputation": 20275, "user_id": 25300, "user_type": "registered", "accept_rate": 74}, "is_accepted": false, "up_vote_count": 256}, {"community_owned_date": 1230906094, "body": "<p><strong>Manually halting a program is an effective, proven way to find performance problems.</strong></p>\n\n<p>Believable? Not to most. True? Absolutely.</p>\n\n<p><strong>Programmers are far more judgmental than necessary.</strong></p>\n\n<p>Witness all the things considered \"evil\" or \"horrible\" in these posts.</p>\n\n<p><strong>Programmers are data-structure-happy.</strong></p>\n\n<p>Witness all the discussions of classes, inheritance, private-vs-public, memory management, etc., versus how to analyze requirements.</p>\n", "is_accepted": false, "tags": [], "answer_id": 406893, "down_vote_count": 0, "last_activity_date": 1260854515, "comments": [{"body": "By manually halting you&#39;re acting as a simple sampling profiler, so there&#39;s certainly some logic behind it, but I tend to find that instrumenting profilers give better results on the whole (albeit with more performance impact on the running application).", "edited": false, "comment_id": 231894, "creation_date": 1230908395, "score": 0, "owner": {"display_name": "Greg Beech", "reputation": 65570, "user_id": 13552, "user_type": "registered", "accept_rate": 87}}, {"body": "Yes it is a sampling method. The difference is that you&#39;re trading precision of timing for precision of insight. Concern about slowing down the app is confusing means with ends. You&#39;re trying to find cycles spent for poor reasons. This does not require running fast.", "edited": false, "comment_id": 231912, "creation_date": 1230908876, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "I would humbly assert, from logic as well as experience, low-frequency sampling of the program state beats any profiler for the purpose of finding things that can be optimized. However, for asynchronous message-driven software, other methods are needed.", "edited": false, "comment_id": 231965, "creation_date": 1230909917, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "What I do think profilers are very good for is monitoring program health, to see if performance problems are creeping in as development proceeds.", "edited": false, "comment_id": 231978, "creation_date": 1230910210, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "The &quot;best&quot; way to analyze requirements varies both on who is giving them, and who is receiving them.  Therefore discussion around the &quot;best&quot; way to do that is not very quantifiable.", "edited": false, "comment_id": 237150, "creation_date": 1231134551, "score": 0, "owner": {"display_name": "Kendall Helmstetter Gelner", "reputation": 59340, "user_id": 6330, "user_type": "registered", "accept_rate": 80}}, {"body": "@Kendall: I&#39;ve never seen &quot;any&quot; work in how to analyze requirements, and propose and evaluate alternative solutions, let alone &quot;best&quot;. If we were doctors, we would know all about treatments but diagnosis would be &quot;obvious&quot;.", "edited": false, "comment_id": 237873, "creation_date": 1231163871, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1230906094, "comment_count": 6, "score": 5, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}, "last_editor": {"display_name": "Jim Ferrans", "reputation": 15469, "user_id": 45935, "user_type": "registered", "accept_rate": 92}, "last_edit_date": 1260854515, "up_vote_count": 5}, {"community_owned_date": 1230906109, "body": "<p><strong>There is no \"one size fits all\" approach to development</strong></p>\n\n<p>I'm surprised that this is a controversial opinion, because it seems to me like common sense. However, there are many entries on popular blogs promoting the \"one size fits all\" approach to development so I think I may actually be in the minority.</p>\n\n<p>Things I've seen being touted as <em>the</em> correct approach for <em>any</em> project - before any information is known about it - are things like the use of Test Driven Development (TDD), Domain Driven Design (DDD), Object-Relational Mapping (ORM), Agile (capital A), Object Orientation (OO), etc. etc. encompassing everything from methodologies to architectures to components. All with nice marketable acronyms, of course.</p>\n\n<p>People even seem to go as far as putting badges on their blogs such as \"I'm Test Driven\" or similar, as if their strict adherence to a single approach whatever the details of the project project is actually a <em>good thing</em>. </p>\n\n<p>It isn't. </p>\n\n<p>Choosing the correct methodologies and architectures and components, etc., is something that should be done on a <em>per-project</em> basis, and depends not only on the type of project you're working on and its unique requirements, but also the size and ability of the team you're working with.</p>\n", "answer_id": 406895, "tags": [], "down_vote_count": 1, "last_activity_date": 1230906109, "creation_date": 1230906109, "comment_count": 0, "score": 152, "owner": {"display_name": "Greg Beech", "reputation": 65570, "user_id": 13552, "user_type": "registered", "accept_rate": 87}, "is_accepted": false, "up_vote_count": 153}, {"community_owned_date": 1230906149, "body": "<p>Before January 1st 1970, true and false were the other way around...</p>\n", "is_accepted": false, "tags": [], "answer_id": 406898, "down_vote_count": 2, "last_activity_date": 1230935423, "comments": [{"body": "<a href=\"http://en.wikipedia.org/wiki/Humour#Understanding_humour\" rel=\"nofollow\">en.wikipedia.org/wiki/Humour#Understanding_humour</a>", "edited": false, "comment_id": 233880, "creation_date": 1230977587, "score": 1, "owner": {"display_name": "annakata", "reputation": 47432, "user_id": 13018, "user_type": "registered", "accept_rate": 73}}, {"body": "Oh man, this is the funniest thing I&#39;ve seen on SO in a long time.", "edited": false, "comment_id": 262088, "creation_date": 1231867496, "score": 0, "owner": {"display_name": "MusiGenesis", "reputation": 52525, "user_id": 14606, "user_type": "registered", "accept_rate": 74}}, {"body": "LOL.. am tweeting this.", "edited": false, "comment_id": 1245430, "creation_date": 1252569126, "score": 0, "owner": {"display_name": "Amarghosh", "reputation": 37731, "user_id": 165297, "user_type": "registered", "accept_rate": 73}}, {"body": "I understand how *nix systems record time, and how true and false are represented. But, could someone explain this joke to me, I don&#39;t get it? Thanks.", "edited": false, "comment_id": 2283806, "creation_date": 1266893707, "score": 0, "owner": {"display_name": "Matt Blaine", "reputation": 1754, "user_id": 16272, "user_type": "registered"}}, {"body": "I don&#39;t get it ._.", "edited": false, "comment_id": 2677438, "creation_date": 1271542596, "score": 0, "owner": {"display_name": "user216441", "user_type": "does_not_exist"}}, {"body": "it&#39;s like particles and anti-particles: for an arbitrary system (like a computer) it doesn&#39;t actually matter what label you ascribe to each value, the two things are defined by each other. Kaons spoil the metaphor a bit, but it&#39;s just a joke so you&#39;ll have to learn to let it go.", "edited": false, "comment_id": 2681365, "creation_date": 1271619037, "score": 0, "owner": {"display_name": "annakata", "reputation": 47432, "user_id": 13018, "user_type": "registered", "accept_rate": 73}}], "creation_date": 1230906149, "comment_count": 6, "score": 38, "owner": {"display_name": "annakata", "reputation": 47432, "user_id": 13018, "user_type": "registered", "accept_rate": 73}, "last_editor": {"display_name": "annakata", "reputation": 47432, "user_id": 13018, "user_type": "registered", "accept_rate": 73}, "last_edit_date": 1230935423, "up_vote_count": 40}, {"community_owned_date": 1230906286, "body": "<p>Regurgitating well known sayings by programming greats out of context with the zeal of a fanatic and the misplaced assumption that they are ironclad rules really gets my goat.  For example 'premature optimization is the root of all evil' as covered by <a href=\"http://stackoverflow.com/questions/385506/when-is-optimisation-premature#385825\">this thread</a>.</p>\n\n<p>IMO, many technical problems and solutions are very context sensitive and the notion of global best practices is a fallacy.</p>\n", "answer_id": 406902, "tags": [], "down_vote_count": 1, "last_activity_date": 1230906286, "comments": [{"body": "There are two types of optimisation, by architecture and by code.  Architecural optimisation is clearly needed before you write code.  However the term &#39;premature optimization&#39; really applies to efforts to write code optimally instead of simply.  This is evil.", "edited": false, "comment_id": 232545, "creation_date": 1230922125, "score": 3, "owner": {"display_name": "AnthonyWJones", "reputation": 134121, "user_id": 17516, "user_type": "registered", "accept_rate": 79}}, {"body": "I am often called in to straighten out big messes that were architected ostensibly with the objective of &quot;performance&quot;.", "edited": false, "comment_id": 232586, "creation_date": 1230923193, "score": 1, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "@Mike:  There has to be some understanding of volumes and response requirements before the app is developed.  Such things have to be considered in the inital archecture.  Of course specific performance choices need to be justified.", "edited": false, "comment_id": 232868, "creation_date": 1230929563, "score": 1, "owner": {"display_name": "AnthonyWJones", "reputation": 134121, "user_id": 17516, "user_type": "registered", "accept_rate": 79}}, {"body": "@Mike, as I mentioned, it&#39;s all to do with context.  I work in the geospatial domain, where the default complexity of many problems is O(n^3).  In this arena, optimization is a must, and it has to happen at design time.  Analysing underperforming code with a profiler is rarely helpful.", "edited": false, "comment_id": 234077, "creation_date": 1230991490, "score": 1, "owner": {"display_name": "Shane MacLaughlin", "reputation": 13668, "user_id": 22564, "user_type": "registered", "accept_rate": 79}}], "creation_date": 1230906286, "comment_count": 4, "score": 28, "owner": {"display_name": "Shane MacLaughlin", "reputation": 13668, "user_id": 22564, "user_type": "registered", "accept_rate": 79}, "is_accepted": false, "up_vote_count": 29}, {"community_owned_date": 1230906623, "body": "<p>That most language proponents make a lot of noise.</p>\n", "answer_id": 406914, "tags": [], "down_vote_count": 1, "last_activity_date": 1230906623, "comments": [{"body": "Controversial, and simultaneously axiomatic. Nice.", "edited": false, "comment_id": 232647, "creation_date": 1230925054, "score": 2, "owner": {"display_name": "ChrisA", "reputation": 3163, "user_id": 24867, "user_type": "registered", "accept_rate": 77}}, {"body": "+1 for both @Varun Mahajan &amp; ChrisA!", "edited": false, "comment_id": 609885, "creation_date": 1240951553, "score": 0, "owner": {"display_name": "Stu Thompson", "reputation": 20094, "user_id": 2961, "user_type": "registered", "accept_rate": 81}}], "creation_date": 1230906623, "comment_count": 2, "score": 9, "owner": {"display_name": "Varun Mahajan", "reputation": 1744, "user_id": 6613, "user_type": "registered", "accept_rate": 88}, "is_accepted": false, "up_vote_count": 10}, {"community_owned_date": 1230906874, "body": "<p>Here's one which has seemed obvious to me for many years but is anathema to everyone else: <strong>it is almost always a mistake to switch off C (or C++) assertions with <code>NDEBUG</code> in 'release' builds.</strong> (The sole exceptions are where the time or space penalty is unacceptable).  </p>\n\n<p>Rationale:  If an assertion fails, your program has entered a state which </p>\n\n<ul>\n<li>has never been tested</li>\n<li>the developer was unable to code a recovery strategy for</li>\n<li>the developer has effectively documented as being inconceivable.</li>\n</ul>\n\n<p>Yet somehow 'industry best practice' is that the thing should just muddle on and hope for the best when it comes to live runs with your customers' data. </p>\n", "is_accepted": false, "tags": [], "answer_id": 406930, "down_vote_count": 1, "last_activity_date": 1231534265, "comments": [{"body": "&quot;has never been tested&quot; You do pre-release testing with assertions on and accept the assertion being triggered as passing the test? Weird idea. If you do that than I agree with you but I don&#39;t understand why you are doing this.", "edited": false, "comment_id": 234038, "creation_date": 1230989049, "score": 0, "owner": {"display_name": "jwpfox", "reputation": 1170, "user_id": 18665, "user_type": "registered"}}, {"body": "No, I&#39;m just assuming that a failed assertion during testing causes a build to be rejected.  Therefore, if one happens in the wild, the program has necessarily entered a state outside of test coverage.", "edited": false, "comment_id": 234048, "creation_date": 1230989825, "score": 0, "owner": {"display_name": "fizzer", "reputation": 8764, "user_id": 18167, "user_type": "registered", "accept_rate": 85}}, {"body": "If during testing your assertions never failed and it does fail during production code, there is a problem with testing, but nevertheless, the error should be logged and the applications should end. Assertions or code that warrants the same should be in production. I agree.", "edited": false, "comment_id": 237645, "creation_date": 1231157097, "score": 0, "owner": {"display_name": "David Rodr\u00edguez - dribeas", "reputation": 137526, "user_id": 36565, "user_type": "registered"}}, {"body": "The problem is when the action of doing the assertion costs something that would otherwise slow down your code.  If it is not in a hot path, I totally agree, the asserts should always be on.", "edited": false, "comment_id": 739007, "creation_date": 1243735670, "score": 1, "owner": {"display_name": "nosatalian", "reputation": 1956, "user_id": 110296, "user_type": "registered", "accept_rate": 83}}, {"body": "++ I&#39;ve followed this path, in the spirit of &quot;hope for the best - plan for the worst&quot;. We test to the very best of our ability, but never assume we have found <i>every</i> possible problem. Assert (or throwing an exception) is a way of guarding against doing further damage if a problem occurs (heaven forbid).", "edited": false, "comment_id": 2489930, "creation_date": 1269293381, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "It depends. Software that controls pacemakers or nuclear power stations should not be written like that.", "edited": false, "comment_id": 3386431, "creation_date": 1279400650, "score": 0, "owner": {"display_name": "MarkJ", "reputation": 23308, "user_id": 15639, "user_type": "registered", "accept_rate": 67}}], "creation_date": 1230906874, "comment_count": 6, "score": 17, "owner": {"display_name": "fizzer", "reputation": 8764, "user_id": 18167, "user_type": "registered", "accept_rate": 85}, "last_editor": {"display_name": "David Basarab", "reputation": 30732, "user_id": 2469, "user_type": "registered", "accept_rate": 98}, "last_edit_date": 1231534265, "up_vote_count": 18}, {"community_owned_date": 1230907274, "body": "<p><strong>Opinion: That frameworks and third part components should be only used as a last resort.</strong></p>\n\n<p>I often see programmers immediately pick a framework to accomplish a task without learning the underlying approach it takes to work.  Something will inevitably break, or we'll find a limition we didn't account for and we'll be immediately stuck and have to rethink major part of a system.  Frameworks are fine to use as long it is carefully thought out.</p>\n", "is_accepted": false, "tags": [], "answer_id": 406943, "down_vote_count": 4, "last_activity_date": 1231002708, "comments": [{"body": "+1 for the most stunning spelling of &#39;inevitably&#39; ever.", "edited": false, "comment_id": 232637, "creation_date": 1230924804, "score": 0, "owner": {"display_name": "ChrisA", "reputation": 3163, "user_id": 24867, "user_type": "registered", "accept_rate": 77}}, {"body": "I disagree, how many StringUtils classes you have in your project? I once found project that had 5 of them. Most of that stuff could be replaced by third part lib.", "edited": false, "comment_id": 233600, "creation_date": 1230954264, "score": 0, "owner": {"display_name": "IAdapter", "reputation": 19424, "user_id": 30453, "user_type": "registered", "accept_rate": 82}}, {"body": "Frameworks, yes.  Useless overhead, many times.  Third party components, no!  Portions of the task already completed, tested and debugged by thousands of other people!", "edited": false, "comment_id": 233925, "creation_date": 1230980692, "score": 0, "owner": {"display_name": "skiphoppy", "reputation": 20237, "user_id": 18103, "user_type": "registered", "accept_rate": 67}}, {"body": "@skiphoppy -- I can&#39;t help it.  I really am a roll your own type of guy at heart.  I will fully admit that I might be jaded as places I&#39;ve worked at the past tried to buy the absolute cheapest things possible.  It bit us in the end.", "edited": false, "comment_id": 234346, "creation_date": 1231002882, "score": 0, "owner": {"display_name": "Kevin", "reputation": 64892, "user_id": 1942, "user_type": "registered", "accept_rate": 88}}, {"body": "Joel in defence of not-invented here syndrome: <a href=\"http://www.joelonsoftware.com/articles/fog0000000007.html\" rel=\"nofollow\">joelonsoftware.com/articles/fog0000000007.html</a>", "edited": false, "comment_id": 299667, "creation_date": 1233057491, "score": 1, "owner": {"display_name": "MarkJ", "reputation": 23308, "user_id": 15639, "user_type": "registered", "accept_rate": 67}}, {"body": "+1 disagree completly :)", "edited": false, "comment_id": 769860, "creation_date": 1244346855, "score": 3, "owner": {"display_name": "ykaganovich", "reputation": 9480, "user_id": 10026, "user_type": "registered", "accept_rate": 64}}], "creation_date": 1230907274, "comment_count": 6, "score": 23, "owner": {"display_name": "Kevin", "reputation": 64892, "user_id": 1942, "user_type": "registered", "accept_rate": 88}, "last_editor": {"display_name": "Kevin", "reputation": 64892, "user_id": 1942, "user_type": "registered", "accept_rate": 88}, "last_edit_date": 1231002708, "up_vote_count": 27}, {"community_owned_date": 1230907295, "body": "<p><strong>Opinion: Never ever have different code between \"debug\" and \"release\" builds</strong></p>\n\n<p>The main reason being that release code almost never gets tested. Better to have the same code running in test as it is in the wild.</p>\n", "answer_id": 406945, "tags": [], "down_vote_count": 5, "last_activity_date": 1230907295, "comments": [{"body": "I released something week before last that I&#39;d only tested in debug mode.  Unfortunately, while it worked just fine in debug, with no complaints, it failed in release mode.", "edited": false, "comment_id": 233105, "creation_date": 1230935439, "score": 0, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}}, {"body": "The only thing I differ between Debug/Release builds is the default logging level. Anything else always comes back to bite you.", "edited": false, "comment_id": 233146, "creation_date": 1230936334, "score": 0, "owner": {"display_name": "devstuff", "reputation": 6305, "user_id": 41321, "user_type": "registered"}}, {"body": "ummm - what about asserts?  Do you either not use them, or do you leave them in the release build?", "edited": false, "comment_id": 233389, "creation_date": 1230943987, "score": 0, "owner": {"display_name": "Daniel Paull", "reputation": 4454, "user_id": 43066, "user_type": "registered"}}, {"body": "Again, I don&#39;t tend to use them. If you&#39;re asserting something in debug shouldn&#39;t you have it fail in release too? Use an exception if it&#39;s critical, or don&#39;t use an assert (or not care if the assert doesn&#39;t make it to release).", "edited": false, "comment_id": 233749, "creation_date": 1230964779, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "@Cameron MacFarland - a good point; code with assertions in Debug mode either ends up not handling the failure condition in Release mode, or with a second failure-handling path which only works in Release mode.", "edited": false, "comment_id": 233990, "creation_date": 1230984626, "score": 0, "owner": {"display_name": "user23743", "user_type": "does_not_exist"}}, {"body": "It would be like writing to different applications.  you&#39;re debug version would be nicely debugged, and your release version wouldn&#39;t. Tragic!", "edited": false, "comment_id": 234788, "creation_date": 1231017403, "score": 0, "owner": {"display_name": "Jeremy", "reputation": 16448, "user_id": 9266, "user_type": "registered", "accept_rate": 65}}, {"body": "@Daniel Paull, if there is something fishy it is often better to stop the processing than having corrupt data.", "edited": false, "comment_id": 236487, "creation_date": 1231104881, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "Agreed: Exceptions &gt; Asserts.", "edited": false, "comment_id": 243716, "creation_date": 1231317021, "score": 0, "owner": {"display_name": "postfuturist", "reputation": 11180, "user_id": 1892, "user_type": "registered", "accept_rate": 75}}, {"body": "Agree: there are some very nasty bugs in there that could be real detrimental to your rep!", "edited": false, "comment_id": 296056, "creation_date": 1232957347, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "Hmmm. So, release code almost never gets tested, right? No offence Cameron, but remind me never to use any of your software", "edited": false, "comment_id": 299608, "creation_date": 1233055990, "score": 0, "owner": {"display_name": "MarkJ", "reputation": 23308, "user_id": 15639, "user_type": "registered", "accept_rate": 67}}, {"body": "@MarkJ: That&#39;s what I&#39;m saying, you should be testing the code that goes out the door, and not have a difference between &quot;Release&quot; that is not tested, and &quot;Debug&quot; that is tested, but never released.", "edited": false, "comment_id": 299926, "creation_date": 1233064236, "score": 1, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "Asserts &amp; exceptions have different purposes.  Exception are for user errors -- things that &quot;shouldn&#39;t happen&quot;.  Asserts are for pre-conditions -- things that &quot;CANNOT happen&quot;.  Asserts bring the app to a crashing halt saying &quot;You&#39;ve got a big problem -- fix this now!!!&quot;", "edited": false, "comment_id": 372625, "creation_date": 1234970918, "score": 0, "owner": {"display_name": "James Curran", "reputation": 64499, "user_id": 12725, "user_type": "registered", "accept_rate": 75}}, {"body": "@James: Exceptions also bring the app crashing down. Also what happens when a user sees an assert error? Are they supposed to fix it?", "edited": false, "comment_id": 375407, "creation_date": 1235024262, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "All development and testing should be done on the release build, but a debug build should exist to assist in debugging. (Hello #ifdef!)", "edited": false, "comment_id": 577547, "creation_date": 1240162473, "score": 0, "owner": {"display_name": "rpetrich", "reputation": 27796, "user_id": 4007, "user_type": "registered"}}, {"body": "You just need to switch.  Our QA uses debugging builds during development but switches to release towards the end.  There are certain levels of sanity checking that you would like to be performed as much as possible before shipping, but cannot afford to ship due to performance reasons.", "edited": false, "comment_id": 738974, "creation_date": 1243734738, "score": 4, "owner": {"display_name": "nosatalian", "reputation": 1956, "user_id": 110296, "user_type": "registered", "accept_rate": 83}}], "creation_date": 1230907295, "comment_count": 15, "score": 68, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}, "is_accepted": false, "up_vote_count": 73}, {"community_owned_date": 1230907307, "body": "<p><strong><a href=\"http://apocalisp.wordpress.com/2008/12/04/no-such-thing/\" rel=\"nofollow\">There is no such thing as Object-Oriented programming.</a></strong></p>\n", "is_accepted": false, "tags": [], "answer_id": 406946, "down_vote_count": 2, "last_activity_date": 1230908691, "comments": [{"body": "The problem I have with that article is that it argues that OOP doesn&#39;t model the real world properly and so it doesn&#39;t exist. I agree that OOP is a poor real-world model but that doesn&#39;t mean it doesn&#39;t exist.", "edited": false, "comment_id": 231863, "creation_date": 1230907690, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "@Cameron MacFarland: That&#39;s not what the article argues at all. It argues that there&#39;s no distinction between &quot;OOP&quot; and other kinds of programming, other than a rhetorical one.", "edited": false, "comment_id": 231902, "creation_date": 1230908629, "score": 0, "owner": {"display_name": "Apocalisp", "reputation": 25008, "user_id": 3434, "user_type": "registered", "accept_rate": 90}}, {"body": "Why is there no reference to ADT which I believe OOP was sprung from?", "edited": false, "comment_id": 232578, "creation_date": 1230922981, "score": 0, "owner": {"display_name": "epatel", "reputation": 36102, "user_id": 842, "user_type": "registered", "accept_rate": 67}}, {"body": "@Apocalisp: You&#39;re right, I only skimmed the article. Now that I&#39;ve read it properly, he compared making distinctions between code styles with making distinctions about race by using the argument made by capitalist libertarians, who believe in things that lead to slavery and killing poor people.", "edited": false, "comment_id": 233760, "creation_date": 1230965776, "score": 1, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "See I told you it was controversial. Enough to draw an ad hominem with a non-sequitur and a straw man in a single sentence. I&#39;m impressed.", "edited": false, "comment_id": 234664, "creation_date": 1231013232, "score": 1, "owner": {"display_name": "Apocalisp", "reputation": 25008, "user_id": 3434, "user_type": "registered", "accept_rate": 90}}, {"body": "@Cameron, actually liberals are the one killing poor people by telling them that they don&#39;t need to be responsible for their life, they just need to do what &#39;superior&#39; liberals tell them to do.  Liberalism is all about emotional and intellectual ego.", "edited": false, "comment_id": 241548, "creation_date": 1231260989, "score": 0, "owner": {"display_name": "Lance Roberts", "reputation": 12787, "user_id": 13295, "user_type": "registered", "accept_rate": 92}}, {"body": "@Apocalisp: You impress easy. &quot;Valid concepts are arrived at by induction&quot; completely ignores Kant&#39;s idea of a priori concept, which is what OOP and Smurfs would be considered. Restricting concepts to facts of reality is itself a straw man argument.", "edited": false, "comment_id": 251866, "creation_date": 1231512175, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "&quot;It is a useless distinction, in exactly the same way that \u201crace\u201d is a useless distinction.&quot; - And nationality, religion, sex, occupation. They are all useless distinctions if you follow the logic of the Ayn Rand article.", "edited": false, "comment_id": 251953, "creation_date": 1231513814, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "@Cameron: You&#39;ve hit the nail on the head. I&#39;m deliberately and completely in defiance of Kant because his ideas are drivel. To think is to think about something.", "edited": false, "comment_id": 251965, "creation_date": 1231513927, "score": 0, "owner": {"display_name": "Apocalisp", "reputation": 25008, "user_id": 3434, "user_type": "registered", "accept_rate": 90}}, {"body": "&quot;Java is object-disoriented&quot; -- me", "edited": false, "comment_id": 258939, "creation_date": 1231781202, "score": 0, "owner": {"display_name": "Svante", "reputation": 28616, "user_id": 31615, "user_type": "registered"}}, {"body": "Nice answer...  &quot;No such thing as OOP&quot;...  And it&#39;s easy to prove.  Just look at the assembly generated from any C++ compiler.  I don&#39;t see any OOP in there...  :)", "edited": false, "comment_id": 266755, "creation_date": 1231976807, "score": 0, "owner": {"display_name": "LarryF", "reputation": 3059, "user_id": 18518, "user_type": "registered", "accept_rate": 67}}, {"body": "There needs to be an Object-Action Oriented Language. Actions are not Objects. It makes me angry when I write a void to modify an Object. ARRRGH............................", "edited": false, "comment_id": 709884, "creation_date": 1243102820, "score": 0, "owner": {"display_name": "WolfmanDragon", "reputation": 3819, "user_id": 13491, "user_type": "registered", "accept_rate": 100}}, {"body": "@epatel: perhaps because the idea that OOP was sprung from ADT is wrong. See &quot;OOP vs ADTs&quot; (<a href=\"http://www.cs.utexas.edu/~wcook/papers/OOPvsADT/CookOOPvsADT90.pdf\" rel=\"nofollow\">cs.utexas.edu/~wcook/papers/OOPvsADT/CookOOPvsADT90.pdf</a>) and &quot;On Understanding Data Abstraction, Revisited&quot; (<a href=\"http://www.cs.utexas.edu/~wcook/Drafts/2009/essay.pdf\" rel=\"nofollow\">cs.utexas.edu/~wcook/Drafts/2009/essay.pdf</a>) by William R. Cook.", "edited": false, "comment_id": 1559577, "creation_date": 1257474050, "score": 0, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}], "creation_date": 1230907307, "comment_count": 13, "score": 7, "owner": {"display_name": "Apocalisp", "reputation": 25008, "user_id": 3434, "user_type": "registered", "accept_rate": 90}, "last_editor": {"display_name": "Apocalisp", "reputation": 25008, "user_id": 3434, "user_type": "registered", "accept_rate": 90}, "last_edit_date": 1230908691, "up_vote_count": 9}, {"community_owned_date": 1230907390, "body": "<p><strong>If you're a developer, you should be able to write code</strong></p>\n\n<p>I did quite a bit of interviewing last year, and for my part of the interview I was supposed to test the way people thought, and how they implemented simple-to-moderate algorithms on a white board. I'd initially started out with questions like:</p>\n\n<blockquote>\n  <p>Given that Pi can be estimated using the function 4 * (1 - 1/3 + 1/5 - 1/7 + ...) with more terms giving greater accuracy, write a function that calculates Pi to an accuracy of 5 decimal places.</p>\n</blockquote>\n\n<p>It's a problem that should make you think, but shouldn't be out of reach to a seasoned developer (it can be answered in about 10 lines of C#). However, many of our (supposedly pre-screened by the agency) candidates couldn't even begin to answer it, or even explain how they might go about answering it. So after a while I started asking simpler questions like:</p>\n\n<blockquote>\n  <p>Given the area of a circle is given by Pi times the radius squared, write a function to calculate the area of a circle.</p>\n</blockquote>\n\n<p>Amazingly, more than half the candidates couldn't write this function in <em>any</em> language (I can read most popular languages so I let them use any language of their choice, including pseudo-code). We had \"C# developers\" who could not write this function in C#.</p>\n\n<p>I was surprised by this. I had always thought that developers should be able to write code. It seems that, nowadays, this is a controversial opinion. Certainly it is amongst interview candidates!</p>\n\n<p><hr /></p>\n\n<p><strong>Edit:</strong></p>\n\n<p>There's a lot of discussion in the comments about whether the first question is a good or bad one, and whether you should ask questions as complex as this in an interview. I'm not going to delve into this here (that's a whole new question) apart from to say <em>you're largely missing the point of the post</em>. </p>\n\n<p>Yes, I said people couldn't make any headway with this, but the second question is <em>trivial</em> and many people couldn't make any headway with that one either! <em>Anybody</em> who calls themselves a developer should be able to write the answer to the second one in a few seconds without even thinking. And many can't.</p>\n", "is_accepted": false, "tags": [], "answer_id": 406948, "down_vote_count": 8, "last_activity_date": 1231456582, "creation_date": 1230907390, "comment_count": 0, "score": 342, "owner": {"display_name": "Greg Beech", "reputation": 65570, "user_id": 13552, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "Greg Beech", "reputation": 65570, "user_id": 13552, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1231456582, "up_vote_count": 350}, {"community_owned_date": 1230907425, "body": "<p><strong>Opinion: explicit variable declaration is a great thing.</strong>  </p>\n\n<p>I'll never understand the \"wisdom\" of letting the developer waste costly time tracking down runtime errors caused by variable name typos instead of simply letting the compiler/interpreter catch them.</p>\n\n<p>Nobody's ever given me an explanation better than \"well it saves time since I don't have to write 'int i;'.\"  Uhhhhh... yeah, sure, but how much time does it take to track down a runtime error?  </p>\n", "is_accepted": false, "tags": [], "answer_id": 406951, "down_vote_count": 1, "last_activity_date": 1231524096, "comments": [{"body": "What&#39;s your view on whether the <i>type</i> of the variable should be explicit or not? (Thinking of &quot;var&quot; in C#.)", "edited": false, "comment_id": 231855, "creation_date": 1230907565, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Good one. If you have to work with legacy Fortran code, you wouldn&#39;t believe the headaches caused by this issue.", "edited": false, "comment_id": 231889, "creation_date": 1230908321, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "I actually wanted to write this same opinion, as well. IMHO, this is the major drawback of both Python and Ruby, for no good reason at all. Perl at least offers <code>use strict</code>.", "edited": false, "comment_id": 231999, "creation_date": 1230910588, "score": 2, "owner": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}}, {"body": "Explicit declaration is good, to avoid typos.  Assigning types to variables is frequently premature optimization.", "edited": false, "comment_id": 232083, "creation_date": 1230912480, "score": 2, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}}, {"body": "Yup.  <i>ONE</i> bug hunt involving an l (between k and m) becoming a 1 (between 0 and 2) wasted a lifetime of declaring variables.", "edited": false, "comment_id": 233680, "creation_date": 1230959635, "score": 5, "owner": {"display_name": "Loren Pechtel", "reputation": 5985, "user_id": 10659, "user_type": "registered", "accept_rate": 56}}, {"body": "Anything else is not a real language. Now THAT&#39;S controversial.", "edited": false, "comment_id": 255335, "creation_date": 1231630267, "score": 1, "owner": {"display_name": "Andrei Taranchenko", "reputation": 828, "user_id": 53687, "user_type": "registered", "accept_rate": 100}}, {"body": "Controversial... but true!!", "edited": false, "comment_id": 299621, "creation_date": 1233056431, "score": 1, "owner": {"display_name": "MarkJ", "reputation": 23308, "user_id": 15639, "user_type": "registered", "accept_rate": 67}}, {"body": "I remember learning Visual Basic 6 in high school. If OPTION EXPLICIT was not the first line in each source file, we would fail.", "edited": false, "comment_id": 482395, "creation_date": 1237611639, "score": 1, "owner": {"display_name": "rlbond", "reputation": 28556, "user_id": 72631, "user_type": "registered", "accept_rate": 90}}], "creation_date": 1230907425, "comment_count": 8, "score": 72, "owner": {"display_name": "John Booty", "reputation": 1363, "user_id": 46947, "user_type": "registered", "accept_rate": 90}, "last_editor": {"display_name": "David Basarab", "reputation": 30732, "user_id": 2469, "user_type": "registered", "accept_rate": 98}, "last_edit_date": 1231524096, "up_vote_count": 73}, {"community_owned_date": 1230907459, "body": "<p>That (at least during initial design), every Database Table (well, almost every one) should be clearly defined to contain some clearly understanable business entity or system-level domain abstraction, and that whether or not you use it as a a primary key and as Foreign Keys in other dependant tables, some column (attribute) or subset of the table attributes should be clearly defined to represent a unique key for that table (entity/abstraction).  This is the only way to ensure that the overall table structure represents a logically consistent representation of the complete system data structure, without overlap or misunbderstood flattening.  I am a firm believeer in using non-meaningful surrogate keys for Pks and Fks and join functionality, (for performance, ease of use, and other reasons), but I beleive the tendency in this direction has taken the database community too far away from the original Cobb principles, and we jhave lost much of the benefits (of database consistency) that natural keys provided.  </p>\n\n<p>So why not use both?</p>\n", "answer_id": 406952, "tags": [], "down_vote_count": 1, "last_activity_date": 1230907459, "creation_date": 1230907459, "comment_count": 0, "score": 1, "owner": {"display_name": "Charles Bretana", "reputation": 71330, "user_id": 32632, "user_type": "registered", "accept_rate": 75}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1230907694, "body": "<p>Whenever you expose a mutable class to the outside world, you should provide events to make it possible to observe its mutation. The extra effort may also convince you to make it immutable after all.</p>\n", "answer_id": 406959, "tags": [], "down_vote_count": 0, "last_activity_date": 1230907694, "creation_date": 1230907694, "comment_count": 0, "score": 4, "owner": {"display_name": "Alexey Romanov", "reputation": 48968, "user_id": 9204, "user_type": "registered", "accept_rate": 83}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1230907817, "body": "<p><strong>Opinion: SQL is code.  Treat it as such</strong></p>\n\n<p>That is, just like your C#, Java, or other favorite object/procedure language, develop a formatting style that is readable and maintainable.  </p>\n\n<p>I hate when I see sloppy free-formatted SQL code.  If you scream when you see both styles of curly braces on a page, why or why don't you scream when you see free formatted SQL or SQL that obscures or obfuscates the JOIN condition?</p>\n", "is_accepted": false, "tags": [], "answer_id": 406965, "down_vote_count": 5, "last_activity_date": 1282059936, "creation_date": 1230907817, "comment_count": 0, "score": 382, "owner": {"display_name": "MustStayAnonymous", "user_type": "does_not_exist"}, "last_editor": {"display_name": "Timwi", "reputation": 34968, "user_id": 33225, "user_type": "registered", "accept_rate": 93}, "last_edit_date": 1282059936, "up_vote_count": 387}, {"community_owned_date": 1230908028, "body": "<p>MVC for the web should be far simpler than traditional MVC.  </p>\n\n<p>Traditional MVC involves code that \"listens\" for \"events\" so that the view can continually be updated to reflect the current state of the model.  In the web paradigm however, the web server already does the listening, and the request is the event.  Therefore MVC for the web need only be a specific instance of the mediator pattern: controllers mediating between views and the model.  If a web framework is crafted properly, a re-usable core should probably not be more than 100 lines.  That core need only implement the \"page controller\" paradigm but should be extensible so as to be able to support the \"front controller\" paradigm.</p>\n\n<p>Below is a method that is the crux of my own framework, used successfully in an embedded consumer device manufactured by a Fortune 100 network hardware manufacturer, for a Fortune 50 media company.  My approach has been likened to Smalltalk by a former Smalltalk programmer and author of an Oreilly book about the most prominent Java web framework ever; furthermore I have ported the same framework to mod_python/psp.</p>\n\n<pre><code>static function sendResponse(IBareBonesController $controller) {\n  $controller-&gt;setMto($controller-&gt;applyInputToModel());\n  $controller-&gt;mto-&gt;applyModelToView();\n}\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 406971, "down_vote_count": 1, "last_activity_date": 1230908745, "comments": [{"body": "Your bio is scary - all washed up at 20! Here is my own anti-MVC screed. <a href=\"http://stackoverflow.com/questions/371898/how-does-differential-execution-work\" title=\"how does differential execution work\">stackoverflow.com/questions/371898/&hellip;</a>", "edited": false, "comment_id": 1542617, "creation_date": 1257274849, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1230908028, "comment_count": 1, "score": 3, "owner": {"display_name": "George Jempty", "reputation": 4670, "user_id": 34806, "user_type": "registered", "accept_rate": 94}, "last_editor": {"display_name": "George Jempty", "reputation": 4670, "user_id": 34806, "user_type": "registered", "accept_rate": 94}, "last_edit_date": 1230908745, "up_vote_count": 4}, {"community_owned_date": 1230908144, "body": "<p><strong><a href=\"http://www.codinghorror.com/blog/archives/000660.html\" rel=\"nofollow\">Source Control: Anything But SourceSafe</a></strong></p>\n\n<p>Also: <strong>Exclusive locking is evil</strong>.</p>\n\n<p>I once worked somewhere where they argued that exclusive locks meant that you were guaranteeing that people were not overwriting someone else's changes when you checked in. The problem was that in order to get any work done, if a file was locked devs would just change their local file to writable and merging (or overwriting) the source control with their version when they had the chance. </p>\n", "is_accepted": false, "tags": [], "answer_id": 406980, "down_vote_count": 1, "last_activity_date": 1231889236, "comments": [{"body": "I&#39;ve always local-mirrored the code. Then I would do the merging with Windiff and an emacs-macro, then lock it only long enough to check in the changes. I hated it when people would lock a file, then go on vacation.", "edited": false, "comment_id": 232209, "creation_date": 1230914458, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "I used to think that it was impossible to work in a team without file locks in your SCM.  But after working with Subversion in four companies (and rolling it out myself in two of them, I find merging (auto when possible, manual when not) much better 99% of the time.", "edited": false, "comment_id": 233631, "creation_date": 1230955828, "score": 0, "owner": {"display_name": "dj_segfault", "reputation": 7605, "user_id": 14924, "user_type": "registered", "accept_rate": 100}}, {"body": "Not controversial. Nobody used SourceSafe by choice.", "edited": false, "comment_id": 262045, "creation_date": 1231866830, "score": 6, "owner": {"display_name": "MusiGenesis", "reputation": 52525, "user_id": 14606, "user_type": "registered", "accept_rate": 74}}, {"body": "@MusiGenesis: Yes they do. They exist.", "edited": false, "comment_id": 264256, "creation_date": 1231925595, "score": 3, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "My company is still using SourceSafe. The main reasons are a) General inertia and b) The devs are scared of the idea of working without exclusive locks.", "edited": false, "comment_id": 265594, "creation_date": 1231956716, "score": 3, "owner": {"display_name": "T.E.D.", "reputation": 28709, "user_id": 29639, "user_type": "registered", "accept_rate": 76}}, {"body": "My personal feeling is that the ability to merge code files should be a skill all programmers need, like all programmers need to know how to compile their code. It&#39;s part of what we do as a byproduct of using source control.", "edited": false, "comment_id": 266850, "creation_date": 1231980769, "score": 2, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "@MusiGenesis: I&#39;ve headed a move away from SourceSafe in two different companies over the last 5 years, and in both cases the reason for using SourceSafe was ignorance of the alternatives.", "edited": false, "comment_id": 295981, "creation_date": 1232953038, "score": 0, "owner": {"display_name": "scraimer", "reputation": 8235, "user_id": 54491, "user_type": "registered", "accept_rate": 92}}, {"body": "SourceSafe doesn&#39;t even work on anything based on IIS7. So soon enough it&#39;s going to be pretty much redundant.", "edited": false, "comment_id": 503816, "creation_date": 1238168227, "score": 0, "owner": {"display_name": "Ed Woodcock", "reputation": 5680, "user_id": 70847, "user_type": "registered", "accept_rate": 84}}, {"body": "Just to be pedantic...while exclusive locks were the default until recently, SourceSafe has actually supported edit-merge-commit mode since 1998.", "edited": false, "comment_id": 793603, "creation_date": 1244787106, "score": 1, "owner": {"display_name": "Richard Berg", "reputation": 15603, "user_id": 74439, "user_type": "registered", "accept_rate": 88}}, {"body": "@Ed - SourceSafe can work with IIS7 if you have WebDAV installed.  The WebDAV plugin didn&#39;t ship with Vista but it&#39;s available as a free plugin, and also comes with Win2008.  That said, I hope as much as anyone that it finally fizzles out.  There are far better tools on the market (free &amp; otherwise).", "edited": false, "comment_id": 793607, "creation_date": 1244787196, "score": 0, "owner": {"display_name": "Richard Berg", "reputation": 15603, "user_id": 74439, "user_type": "registered", "accept_rate": 88}}, {"body": "@Richard: Yes but nobody who uses Source Unsafe uses it in Merge mode because they&#39;re afraid to, etc.", "edited": false, "comment_id": 794517, "creation_date": 1244805534, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "worked very well for many years for us.", "edited": false, "comment_id": 1319693, "creation_date": 1253779383, "score": 0, "owner": {"display_name": "peterchen", "reputation": 24528, "user_id": 31317, "user_type": "registered", "accept_rate": 82}}, {"body": "MKS baby! Finally just killing it off now.", "edited": false, "comment_id": 1342376, "creation_date": 1254193456, "score": 0, "owner": {"display_name": "TJR", "reputation": 1180, "user_id": 728, "user_type": "registered", "accept_rate": 91}}, {"body": "I would never want to put my precious source in something notorious for corrupting files. Had to use it once due to a lack of alternatives, got burnt.", "edited": false, "comment_id": 1785812, "creation_date": 1260497585, "score": 0, "owner": {"display_name": "Oorang", "reputation": 3866, "user_id": 102270, "user_type": "registered", "accept_rate": 88}}, {"body": "@MusiGenesis we do at my work place, but I don&#39;t particularly enjoy it.  I&#39;m much happier with SVN.", "edited": false, "reply_to_user": {"display_name": "MusiGenesis", "reputation": 52525, "user_id": 14606, "user_type": "registered", "accept_rate": 74}, "comment_id": 3065149, "creation_date": 1276026939, "score": 0, "owner": {"display_name": "RavB", "reputation": 1114, "user_id": 340574, "user_type": "registered", "accept_rate": 78}}], "creation_date": 1230908144, "comment_count": 15, "score": 60, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}, "last_editor": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}, "last_edit_date": 1231889236, "up_vote_count": 61}, {"community_owned_date": 1230908599, "body": "<p><strong>Arrays should by default be 1-based rather than 0-based.</strong>  This is not necessarily the case with system implementation languages, but languages like Java swallowed more C oddities than they should have.  \"Element 1\" should be the first element, not the second, to avoid confusion.</p>\n\n<p>Computer science is not software development.  You wouldn't hire an engineer who studied only physics, after all.</p>\n\n<p>Learn as much mathematics as is feasible.  You won't use most of it, but you need to be able to think that way to be good at software.</p>\n\n<p>The single best programming language yet standardized is Common Lisp, even if it is verbose and has zero-based arrays.  That comes largely from being designed as a way\nto write computations, rather than as an abstraction of a von Neumann machine.</p>\n\n<p>At least 90% of all comparative criticism of programming languages can be reduced to \"Language A has feature C, and I don't know how to do C or something equivalent in Language B, so Language A is better.\"</p>\n\n<p>\"Best practices\" is the most impressive way to spell \"mediocrity\" I've ever seen.</p>\n", "is_accepted": false, "tags": [], "answer_id": 407002, "down_vote_count": 6, "last_activity_date": 1231534933, "comments": [{"body": "Your last sencence is +1. The rest is IMHO wrong because zero-based indices are very useful because make cause the indices of a container of size N to be the set of integers in the half-open interval [0, N[. This has some nice mathematical/algorithmic/practical consequences.", "edited": false, "comment_id": 231916, "creation_date": 1230909000, "score": 0, "owner": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}}, {"body": "Personally, I haven&#39;t seen as much use for the half-open intervals as you have.  If you could leave a pointer in a comment, I&#39;d be interested.", "edited": false, "comment_id": 232005, "creation_date": 1230910742, "score": 0, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}}, {"body": "+1 because A) I disagree with paragraph 1, so I guess it answers the question, and, 2) I like the other paragraphs :)", "edited": false, "comment_id": 232142, "creation_date": 1230913430, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "Should array indices start at 0 or 1? My compromise of 0.5 was rejected without, I thought, proper consideration. - Stan Kelly-Bootle", "edited": false, "comment_id": 232362, "creation_date": 1230918022, "score": 0, "owner": {"display_name": "Gavin Miller", "reputation": 25223, "user_id": 33226, "user_type": "registered", "accept_rate": 82}}, {"body": "Yup, +1 for your final sentence.", "edited": false, "comment_id": 232684, "creation_date": 1230925564, "score": 0, "owner": {"display_name": "user23743", "user_type": "does_not_exist"}}, {"body": "+1 for your comment about Common Lisp", "edited": false, "comment_id": 233376, "creation_date": 1230943271, "score": 0, "owner": {"display_name": "Technical Bard", "reputation": 1631, "user_id": 40529, "user_type": "registered", "accept_rate": 92}}, {"body": "+1 for learning math, -1 for saying Lisp is best (it takes more than parentheses to make a good language)", "edited": false, "comment_id": 241483, "creation_date": 1231259859, "score": 0, "owner": {"display_name": "Lance Roberts", "reputation": 12787, "user_id": 13295, "user_type": "registered", "accept_rate": 92}}, {"body": "in smalltalk arrays start with 1", "edited": false, "comment_id": 295138, "creation_date": 1232909168, "score": 0, "owner": {"display_name": "nes1983", "reputation": 7768, "user_id": 52573, "user_type": "registered", "accept_rate": 85}}, {"body": "It&#39;s just a convention and it doesn&#39;t matter.", "edited": false, "comment_id": 296255, "creation_date": 1232965152, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "Can&#39;t agree with the 1-based arrays, either. Would make add/remove elements much more complex (because you&#39;d have to rebase your indexes during the operation). I&#39;d opt for -1 being the last element in an array, though :)", "edited": false, "comment_id": 407202, "creation_date": 1235750045, "score": 1, "owner": {"display_name": "Aaron Digulla", "reputation": 178090, "user_id": 34088, "user_type": "registered", "accept_rate": 78}}, {"body": "What&#39;s the difference between 0-based and 1-based arrays for add/remove?  Python&#39;s notation using negative numbers for measuring from the end is kinda neat.", "edited": false, "comment_id": 407476, "creation_date": 1235753667, "score": 0, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}}], "creation_date": 1230908599, "comment_count": 11, "score": 5, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}, "last_editor": {"display_name": "David Basarab", "reputation": 30732, "user_id": 2469, "user_type": "registered", "accept_rate": 98}, "last_edit_date": 1231534934, "up_vote_count": 11}, {"community_owned_date": 1230908772, "body": "<p><strong>All variables/properties should be <code>readonly</code>/<code>final</code> by default.</strong></p>\n\n<p>The reasoning is a bit analogous to the <code>sealed</code> argument for classes, put forward by Jon. One entity in a program should have one job, and one job only. In particular, it makes absolutely no sense for most variables and properties to ever change value. There are basically two exceptions.</p>\n\n<ol>\n<li><p>Loop variables. But then, I argue that the variable actually doesn't change value at all. Rather, it goes out of scope at the end of the loop and is re-instantiated in the next turn. Therefore, immutability would work nicely with loop variables and everyone who tries to change a loop variable's value by hand should go straight to hell.</p></li>\n<li><p>Accumulators. For example, imagine the case of summing over the values in an array, or even a list/string that accumulates some information about something else.</p>\n\n<p>Today, there are better means to accomplish the same goal. Functional languages have higher-order functions, Python has list comprehension and .NET has LINQ. In all these cases, there is no need for a mutable accumulator / result holder.</p>\n\n<p>Consider the special case of string concatenation. In many environments (.NET, Java), strings are actually immutables. Why then allow an assignment to a string variable at all? Much better to use a builder class (i.e. a <code>StringBuilder</code>) all along.</p></li>\n</ol>\n\n<p>I realize that most languages today just aren't built to acquiesce in my wish. In my opinion, all these languages are fundamentally flawed for this reason. They would lose nothing of their expressiveness, power, and ease of use if they would be changed to treat all variables as read-only by default and didn't allow any assignment to them after their initialization.</p>\n", "is_accepted": false, "tags": [], "answer_id": 407007, "down_vote_count": 9, "last_activity_date": 1230910859, "comments": [{"body": "Most functional languages are just like this; for example F# explicitly requires you to declare something as &quot;mutable&quot; if you want to be able to change it.", "edited": false, "comment_id": 231956, "creation_date": 1230909725, "score": 0, "owner": {"display_name": "Greg Beech", "reputation": 65570, "user_id": 13552, "user_type": "registered", "accept_rate": 87}}, {"body": "Functional languages are just superior that way. Of the non-functional languages, Nemerle seems to be the only one offering this feature.", "edited": false, "comment_id": 232008, "creation_date": 1230910785, "score": 1, "owner": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}}, {"body": "I like the bit in SICP where the authors dismiss &#39;looping constructs such as do, repeat, until, for, and while&#39; as a language defect.", "edited": false, "comment_id": 232042, "creation_date": 1230911664, "score": 0, "owner": {"display_name": "fizzer", "reputation": 8764, "user_id": 18167, "user_type": "registered", "accept_rate": 85}}, {"body": "Disagree but made me think. Interesting.", "edited": false, "comment_id": 232337, "creation_date": 1230917483, "score": 5, "owner": {"display_name": "Steve B.", "reputation": 26500, "user_id": 19479, "user_type": "registered", "accept_rate": 72}}, {"body": "I personally like this. &quot;Everything is immutable&quot; makes multithreaded code a lot easier to write: locks are no longer needed since you never have to worry about another thread changing your object under your feet, so a whole class of errors related to race-conditions and deadlocking cease to exist.", "edited": false, "comment_id": 232433, "creation_date": 1230919495, "score": 1, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}, {"body": "There&#39;s no such thing as a free lunch. Immutability despite its many benefits will have a cost.  Generally I like the idea, in the same way I like the idea of functional programming.  Can I get my head round that, no.  Am I particular thick, may be, but I don&#39;t think so.", "edited": false, "comment_id": 232888, "creation_date": 1230929963, "score": 0, "owner": {"display_name": "AnthonyWJones", "reputation": 134121, "user_id": 17516, "user_type": "registered", "accept_rate": 79}}, {"body": "@AnthonyWJones: what costs does immutable-by-default have?", "edited": false, "comment_id": 232987, "creation_date": 1230931513, "score": 2, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}, {"body": "This makes me wonder what my code would be like and how I would need to change my understanding of programming paradigms.  Could I deal with immutable variables?  I can&#39;t begin to grasp the extent of the repercussions of doing this in C#, but I can&#39;t imagine anything good coming of it.", "edited": false, "comment_id": 233227, "creation_date": 1230937974, "score": 0, "owner": {"display_name": "BenAlabaster", "reputation": 22192, "user_id": 40650, "user_type": "registered", "accept_rate": 91}}, {"body": "The  thing I don&#39;t like about immutability is the amount of copying required.", "edited": false, "comment_id": 233417, "creation_date": 1230945432, "score": 0, "owner": {"display_name": "TraumaPony", "reputation": 6920, "user_id": 18658, "user_type": "registered", "accept_rate": 53}}, {"body": "I though this was too much when I read it in Effective Java: Favor immutability. Then, when applied it make totally sense. Apps are MUCH easier to create and maintain using immutability. The only extra thing needed is a macro template to &quot;code&quot; the copy methods just as TraumaPony pointed out.", "edited": false, "comment_id": 233611, "creation_date": 1230954826, "score": 0, "owner": {"display_name": "OscarRyz", "reputation": 96957, "user_id": 20654, "user_type": "registered", "accept_rate": 81}}, {"body": "Language constructs can&#39;t take care of all accumulator cases.  Sometimes what you are adding up isn&#39;t a simple list.  It also could make hairy logic in some cases as you can&#39;t have a default value.", "edited": false, "comment_id": 233676, "creation_date": 1230959476, "score": 0, "owner": {"display_name": "Loren Pechtel", "reputation": 5985, "user_id": 10659, "user_type": "registered", "accept_rate": 56}}, {"body": "@TraumaPony: The nice thing about immutability is that in (almost?) all cases copying can be replaced by simple aliasing. This <i>does</i> require some changes in data structures, though.", "edited": false, "comment_id": 233896, "creation_date": 1230979097, "score": 0, "owner": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}}, {"body": "Another case that can&#39;t be immutable: Any sort of iterative calculation or calculation within a loop.  More generally, the data you are working on.  How well would Microsoft Immutable Word sell??", "edited": false, "comment_id": 234651, "creation_date": 1231012947, "score": 0, "owner": {"display_name": "Loren Pechtel", "reputation": 5985, "user_id": 10659, "user_type": "registered", "accept_rate": 56}}, {"body": "@Princess: immutable-by-default has a comprehension cost. It&#39;s much more difficult to think about (not reason about, think about) immutable-by-default objects/variables/what-have-you.", "edited": false, "comment_id": 234791, "creation_date": 1231017497, "score": 1, "owner": {"display_name": "Jeff Hubbard", "reputation": 6242, "user_id": 8844, "user_type": "registered"}}, {"body": "I agree that variables should be readonly whenever possible.  It lets the compiler optimize and it lets the developer know the value never changes after a certain point.", "edited": false, "comment_id": 234795, "creation_date": 1231017617, "score": 0, "owner": {"display_name": "Jeremy", "reputation": 16448, "user_id": 9266, "user_type": "registered", "accept_rate": 65}}, {"body": "@Loren: about your \u201cother case\u201d: how is that different from a special accumulator? It is actually just that, and well covered by many frameworks, such as LINQ. Notice that any kind of user interaction rarely benefits from immutability so Immutable Word is probably not a good idea.", "edited": false, "comment_id": 236471, "creation_date": 1231104211, "score": 0, "owner": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}}, {"body": "@Jeff: I think this is <i>at least</i> debatable. Programming in general has a comprehension cost, any style of programming does. But I doubt that immutable-by-default incurs <i>any</i> additional comprehension cost at all, especially since it&#39;s much closer to the mathematical use of variables in equations.", "edited": false, "comment_id": 236473, "creation_date": 1231104306, "score": 5, "owner": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}}, {"body": "@Loren Pectel, I think that databases should be immutable too.", "edited": false, "comment_id": 236478, "creation_date": 1231104416, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "There&#39;s an obvious cost in complexifying and slowing down the code, to a huge degree.  This idea must have been thought of by those who don&#39;t have to do too much math programming.", "edited": false, "comment_id": 239710, "creation_date": 1231206922, "score": 0, "owner": {"display_name": "Lance Roberts", "reputation": 12787, "user_id": 13295, "user_type": "registered", "accept_rate": 92}}, {"body": "@Lance, The opposite is true. Immutability actually helps the compiler a great deal in producing <i>more efficient</i> code because it can apply many more automated optimizations. This style of coding works perfectly with \u201cmath programming\u201d (I guess you mean arithmetically dense code).", "edited": false, "comment_id": 240240, "creation_date": 1231228630, "score": 0, "owner": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}}, {"body": "I want an immutable apple.  When I take a bite of the apple I get your apple with the bite taken out of it, and can give my apple to the next person who wants a whole apple. It&#39;s all so simple!", "edited": false, "comment_id": 243362, "creation_date": 1231301786, "score": 1, "owner": {"display_name": "Greg Domjan", "reputation": 6714, "user_id": 37558, "user_type": "registered", "accept_rate": 68}}, {"body": "@Greg, Things always change, we developers are the orchestrators and conductors of this change, because we change and shape the future with our ideas and our code. That&#39;s the reason we want immutability!", "edited": false, "comment_id": 243634, "creation_date": 1231313399, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "Yes, and we&#39;ll only access read-only databases, stored on read-only media. Maybe once our programs have no mutable state, and therefore accomplish nothing we can move on to truly pure functional programming where nothing happens and the compiler with the best optimization outputs nothing.", "edited": false, "comment_id": 243741, "creation_date": 1231317992, "score": 10, "owner": {"display_name": "postfuturist", "reputation": 11180, "user_id": 1892, "user_type": "registered", "accept_rate": 75}}, {"body": "Might be little hard to animate anything if variables describing object to animate were immutable.", "edited": false, "comment_id": 1226866, "creation_date": 1252268562, "score": 0, "owner": {"display_name": "Kamil Szot", "reputation": 5296, "user_id": 166921, "user_type": "registered", "accept_rate": 75}}, {"body": "@Kamil: no, not at all. In fact, <code>Point</code> objects in .NET <i>are</i> immutable, and animate just fine. You just need to create a new object for each animation position \u2013 which <i>sounds</i> inefficient but really isn\u2019t necessarily.", "edited": false, "comment_id": 1228260, "creation_date": 1252306544, "score": 1, "owner": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}}, {"body": "Interestingly, in Java even loop variables can be final: for (final item : list) { ... }  Took me a while to discover that.", "edited": false, "comment_id": 1791547, "creation_date": 1260562726, "score": 0, "owner": {"display_name": "hstoerr", "reputation": 7437, "user_id": 21499, "user_type": "registered", "accept_rate": 55}}, {"body": "He&#39;s not saying that all variables should be final, he&#39;s saying all variables should be final <i>by default</i>. That&#39;s reasonable.", "edited": false, "comment_id": 4275860, "creation_date": 1287715749, "score": 0, "owner": {"display_name": "Craig P. Motlin", "reputation": 13460, "user_id": 23572, "user_type": "registered", "accept_rate": 64}}], "creation_date": 1230908772, "comment_count": 27, "score": 58, "owner": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}, "last_editor": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}, "last_edit_date": 1230910859, "up_vote_count": 67}, {"community_owned_date": 1230908920, "body": "<p><b>Unit Testing won't help you write good code</b></p>\n\n<p>The only reason to have Unit tests is to make sure that code that already works doesn't break.  Writing tests first, or writing code to the tests is ridiculous.  If you write to the tests before the code, you won't even know what the edge cases are. You could have code that passes the tests but still fails in unforeseen circumstances.</p>\n\n<p>And furthermore, good developers will keep cohesion low, which will make the addition of new code unlikely to cause problems with existing stuff.</p>\n\n<p>In fact, I'll generalize that even further, </p>\n\n<p><b>Most \"Best Practices\" in Software Engineering are there to keep bad programmers from doing too much damage</b>. </p>\n\n<p>They're there to hand-hold bad developers and keep them from making dumbass mistakes. Of course, since most developers are bad, this is a good thing, but good developers should get a pass.</p>\n", "answer_id": 407014, "tags": [], "down_vote_count": 58, "last_activity_date": 1230908920, "creation_date": 1230908920, "comment_count": 0, "score": 262, "owner": {"display_name": "Chad Okere", "reputation": 3440, "user_id": 48839, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 320}, {"community_owned_date": 1230908976, "body": "<p>My one:</p>\n\n<p><strong>Long switch statements are your friends. Really. At least in C#.</strong></p>\n\n<p>People tend to avoid and discourage others to use long switch statements beause they are \"unmanagable\" and \"have bad performance characteristics\".</p>\n\n<p>Well, the thing is that in C#, switch statements are always compiled automagically to hash jump tables so actually using them is the <em>Best Thing To Do\u2122</em> in terms of performance if you need simple branching to multiple branches. Also, if the case statements are organized and grouped intelligently (for example in alphabetical order), they are not unmanageable at all.</p>\n", "answer_id": 407019, "tags": [], "down_vote_count": 4, "last_activity_date": 1230908976, "comments": [{"body": "Define long. I&#39;ve seen a 13,000 line switch statement (admittedly it was C++ but still...)", "edited": false, "comment_id": 231933, "creation_date": 1230909282, "score": 2, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "Well, (in c#) if the switch statement is generated (as opposed to manually edited), I see nothing wrong with a 13K line switch statement to be honest. It&#39;s going to end up as a hashtable anyway.", "edited": false, "comment_id": 231945, "creation_date": 1230909592, "score": 0, "owner": {"display_name": "Tamas Czinege", "reputation": 58565, "user_id": 8954, "user_type": "registered", "accept_rate": 93}}, {"body": "Of course, if it has 13K lines because there is loads of code in each &quot;case&quot; clause, that&#39;s totally different. It should be refactored then.", "edited": false, "comment_id": 231953, "creation_date": 1230909693, "score": 2, "owner": {"display_name": "Tamas Czinege", "reputation": 58565, "user_id": 8954, "user_type": "registered", "accept_rate": 93}}, {"body": "Ever wondered why there is no &quot;switch&quot; statement in python?", "edited": false, "comment_id": 231967, "creation_date": 1230909948, "score": 0, "owner": {"display_name": "Christopher Mahan", "reputation": 4630, "user_id": 479, "user_type": "registered", "accept_rate": 68}}, {"body": "Actually, I do.  Was it either that or if, and replacing all if&#39;s with switch&#39;s would have been a bit too verbose, even for python?", "edited": false, "comment_id": 232214, "creation_date": 1230914549, "score": 0, "owner": {"display_name": "JB.", "reputation": 15139, "user_id": 12274, "user_type": "registered", "accept_rate": 88}}, {"body": "What I want a compiler to do is generate good assembly code for me, and switch is how I tell it I want a jump table. That said, it&#39;s easy to think you&#39;re doing things for &quot;performance&quot; reasons when in fact you&#39;ll never notice the difference.", "edited": false, "comment_id": 232234, "creation_date": 1230914966, "score": 1, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "@Mike: if you you have a switch statement with thousands of cases, you <i>will</i> notice the performance difference between a jump table and a series of if-else statements.", "edited": false, "comment_id": 232295, "creation_date": 1230916403, "score": 0, "owner": {"display_name": "Tamas Czinege", "reputation": 58565, "user_id": 8954, "user_type": "registered", "accept_rate": 93}}, {"body": "How can you have thousands of cases? I can&#39;t imagine it, do you have an example?", "edited": false, "comment_id": 236460, "creation_date": 1231103795, "score": 1, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "@tuinstoel: It&#39;s not that hard to imagine it if you try. Before the rise of floating point units, it was a common practice to keep trigonometric functions in lookup tables. I think that keeping the results of complex math functions in premade lookup tables still makes sense today.", "edited": false, "comment_id": 237828, "creation_date": 1231162912, "score": 2, "owner": {"display_name": "Tamas Czinege", "reputation": 58565, "user_id": 8954, "user_type": "registered", "accept_rate": 93}}, {"body": "Great answer. Agree completely.", "edited": false, "comment_id": 306874, "creation_date": 1233221217, "score": 0, "owner": {"display_name": "Jonathan C Dickinson", "reputation": 4450, "user_id": 24064, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1230908976, "comment_count": 10, "score": 9, "owner": {"display_name": "Tamas Czinege", "reputation": 58565, "user_id": 8954, "user_type": "registered", "accept_rate": 93}, "is_accepted": false, "up_vote_count": 13}, {"community_owned_date": 1230909451, "body": "<p><strong>Software development is just a job</strong></p>\n\n<p>Don't get me wrong, I enjoy software development a lot. I've written a blog for the last few years on the subject. I've spent enough time on here to have >5000 reputation points. And I work in a start-up doing typically 60 hour weeks for much less money than I could get as a contractor because the team is fantastic and the work is interesting.</p>\n\n<p>But in the grand scheme of things, it is just a job.</p>\n\n<p>It ranks in importance below many things such as family, my girlfriend, friends, happiness etc., and below other things I'd rather be doing if I had an unlimited supply of cash such as riding motorbikes, sailing yachts, or snowboarding.</p>\n\n<p>I think sometimes a lot of developers forget that developing is just something that allows us to have the more important things in life (and to have them by doing something we enjoy) rather than being the end goal in itself.</p>\n", "answer_id": 407051, "tags": [], "down_vote_count": 41, "last_activity_date": 1230909451, "creation_date": 1230909451, "comment_count": 0, "score": 186, "owner": {"display_name": "Greg Beech", "reputation": 65570, "user_id": 13552, "user_type": "registered", "accept_rate": 87}, "is_accepted": false, "up_vote_count": 227}, {"community_owned_date": 1230910009, "body": "<p><strong>Singletons are not evil</strong></p>\n\n<p>There is a place for singletons in the real world, and methods to get around them (i.e. monostate pattern) are simply singletons in disguise. For instance, a Logger is a perfect candidate for a singleton. Addtionally, so is a message pump. My current app uses distributed computing, and different objects need to be able to send appropriate messages. There should only be one message pump, and everyone should be able to access it. The alternative is passing an object to my message pump everywhere it might be needed and hoping that a new developer doesn't new one up without thinking and wonder why his messages are going nowhere. The uniqueness of the singleton is the most important part, not its availability. The singleton has its place in the world.</p>\n", "answer_id": 407096, "tags": [], "down_vote_count": 7, "last_activity_date": 1230910009, "comments": [{"body": "+1 because I disagree so strongly.  Singletons (the design pattern) make testing such a nightmare they should never be used.  Note that singletons (an object only instantiated once) are fine, but they should be passed in through dependency injection.", "edited": false, "comment_id": 232501, "creation_date": 1230921301, "score": 9, "owner": {"display_name": "Craig P. Motlin", "reputation": 13460, "user_id": 23572, "user_type": "registered", "accept_rate": 64}}, {"body": "A logger is certainly not a perfect candidate for a singleton. You may want to have two loggers. I&#39;ve been in that exact situation before. It may be a good candidate for being <i>global</i>, but certainly not for being forced into &quot;one instance only&quot;. Very few things require that constraint.", "edited": false, "comment_id": 235137, "creation_date": 1231030788, "score": 2, "owner": {"display_name": "jalf", "reputation": 161685, "user_id": 33213, "user_type": "registered", "accept_rate": 81}}, {"body": "The way I figure it, I&#39;ve used some singletons in one project, and I might well do so again before I retire.  Not the most widely useable patterns, but valuable for some things.", "edited": false, "comment_id": 251890, "creation_date": 1231512577, "score": 1, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}}, {"body": "I really recommend reading <a href=\"http://misko.hevery.com/2008/08/25/root-cause-of-singletons/\" rel=\"nofollow\">misko.hevery.com/2008/08/25/root-cause-of-singletons</a> to you.", "edited": false, "comment_id": 319499, "creation_date": 1233606785, "score": 1, "owner": {"display_name": "balu", "reputation": 938, "user_id": 36253, "user_type": "registered", "accept_rate": 60}}, {"body": "I would like to add that in C++, the singleton pattern is extremely important due to the static initialization fiasco.", "edited": false, "comment_id": 482400, "creation_date": 1237611929, "score": 0, "owner": {"display_name": "rlbond", "reputation": 28556, "user_id": 72631, "user_type": "registered", "accept_rate": 90}}, {"body": "Logging is the only common use of the singleton pattern, all others uses are mostly bad.", "edited": false, "comment_id": 1153300, "creation_date": 1251073155, "score": 0, "owner": {"display_name": "Emmanuel Caradec", "reputation": 1464, "user_id": 4508, "user_type": "registered", "accept_rate": 74}}, {"body": "I have never found a case of singleton that could not be substituted for a static, besides in languages that do not have a proper static inicialization time, bringing static fiasco.", "edited": false, "comment_id": 1475134, "creation_date": 1256240129, "score": 0, "owner": {"display_name": "kurast", "reputation": 997, "user_id": 150533, "user_type": "registered", "accept_rate": 88}}], "creation_date": 1230910009, "comment_count": 7, "score": 35, "owner": {"display_name": "Steve", "reputation": 5408, "user_id": 48552, "user_type": "registered", "accept_rate": 77}, "is_accepted": false, "up_vote_count": 42}, {"community_owned_date": 1230910682, "body": "<p>Rob Pike wrote: \"Data dominates. If you've chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.\" </p>\n\n<p>And since these days any serious data is in the millions of records, I content that good data modeling is the most important programming skill (whether using a rdbms or something like sqlite or amazon simpleDB or google appengine data storage.)  </p>\n\n<p>Fancy search and sorting algorithms aren't needed any more when the data, all the data, is stored in such a data storage system.</p>\n", "answer_id": 407142, "tags": [], "down_vote_count": 0, "last_activity_date": 1230910682, "comments": [{"body": "It depends on the rawness of your original data. If the data is accumuleted by data entry in a UI it is true. But if you do something like Text Mining you need to process your data first, algos become more important.", "edited": false, "comment_id": 232025, "creation_date": 1230911231, "score": 1, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "tuinstoel: ok, but text mining is eminently parallelisable, so the algo should be ultra simple and then be run by a few hundreds or thousand processes. Image processing needs solid algos though.", "edited": false, "comment_id": 232068, "creation_date": 1230912227, "score": 0, "owner": {"display_name": "Christopher Mahan", "reputation": 4630, "user_id": 479, "user_type": "registered", "accept_rate": 68}}, {"body": "I would agree if you also mean that data should be kept as minimal and normalized as reasonable. I see far too much data structure whose ostensible purpose is &quot;better performance&quot; that causes the opposite.", "edited": false, "comment_id": 232124, "creation_date": 1230913148, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "+1 If I was speaking to an assembly of CS Freshmen my first advice would be to &quot;Know Thou Data_Structures&quot; Amen Brother.", "edited": false, "comment_id": 709888, "creation_date": 1243102950, "score": 1, "owner": {"display_name": "WolfmanDragon", "reputation": 3819, "user_id": 13491, "user_type": "registered", "accept_rate": 100}}, {"body": "Brooks, in &quot;The Mythical Man-Month&quot;, had a comment that he&#39;d be confused if you hid your tables and showed him your flow charts, but if you showed him your tables he wouldn&#39;t need to see your flow charts.  This should give you an idea of how old this idea is.", "edited": false, "comment_id": 1422171, "creation_date": 1255469956, "score": 1, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}}], "creation_date": 1230910682, "comment_count": 5, "score": 9, "owner": {"display_name": "Christopher Mahan", "reputation": 4630, "user_id": 479, "user_type": "registered", "accept_rate": 68}, "is_accepted": false, "up_vote_count": 9}, {"community_owned_date": 1230911263, "body": "<p><strong>Junior programmers should be assigned to doing object/ module design and design maintenance for several months before they are allowed to actually write or modify code.</strong></p>\n\n<p>Too many programmers/developers make it to the 5 and 10 year marks without understanding the elements of good design. It can be crippling later when they want to advance beyond just writing and maintaining code.</p>\n", "answer_id": 407189, "tags": [], "down_vote_count": 2, "last_activity_date": 1230911263, "comments": [{"body": "I will tell you from having dealt with entry-level and junior developers that they learn precisely nothing by performing &quot;maintanence and bug fixes&quot;, they never develop any skills. Letting juniors build an app something from scratch teaches them an incredible amount in a short period of time.", "edited": false, "comment_id": 232447, "creation_date": 1230920000, "score": 2, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}, {"body": "Quite so.  Aptitude has very little to do with experience, which often just entrenches bad habits.", "edited": false, "comment_id": 233087, "creation_date": 1230934908, "score": 0, "owner": {"display_name": "ChrisA", "reputation": 3163, "user_id": 24867, "user_type": "registered", "accept_rate": 77}}, {"body": "I would say the exact opposite.  Let them write implementations of existing interfaces, that must pass existing unit tests.  They will pick up some design skills just by working with the senior developer&#39;s designs for a few months.", "edited": false, "comment_id": 274063, "creation_date": 1232213896, "score": 1, "owner": {"display_name": "finnw", "reputation": 27950, "user_id": 12048, "user_type": "registered", "accept_rate": 94}}, {"body": "Have to agree with finnw.", "edited": false, "comment_id": 374733, "creation_date": 1235002362, "score": 0, "owner": {"display_name": "Lawrence Dol", "reputation": 33129, "user_id": 8946, "user_type": "registered", "accept_rate": 84}}, {"body": "@Juliet,  absolute rubbish.  When I was an entry-level developer I did maintenance and bug fixwork and learnt directly why consistency and separation of concerns is so essential in software.  Maintaining code with &quot;issues&quot; it THE best way to improve your own designs.", "edited": false, "comment_id": 1065441, "creation_date": 1249570554, "score": 0, "owner": {"display_name": "Ash", "reputation": 35511, "user_id": 5023, "user_type": "registered", "accept_rate": 85}}, {"body": "i agree this is very controversial lol", "edited": false, "comment_id": 1302350, "creation_date": 1253544316, "score": 0, "owner": {"display_name": "Egg", "reputation": 200, "user_id": 78688, "user_type": "registered", "accept_rate": 100}}, {"body": "Nothing teaches you the value of doing things the right way like the pain of doing things the wrong way and then having to live with the results.", "edited": false, "comment_id": 1558571, "creation_date": 1257460321, "score": 0, "owner": {"display_name": "Jeremy Friesner", "reputation": 21474, "user_id": 131930, "user_type": "registered", "accept_rate": 93}}], "creation_date": 1230911263, "comment_count": 7, "score": 11, "owner": {"display_name": "kloucks", "reputation": 1511, "user_id": 20186, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 13}, {"community_owned_date": 1230913824, "body": "<p><strong>(Unnamed) tuples are evil</strong></p>\n\n<ul>\n<li>If you're using tuples as a container for several objects with unique meanings, use a class instead.</li>\n<li>If you're using them to hold several objects that should be accessible by index, use a list.</li>\n<li><p>If you're using them to return multiple values from a method, use Out parameters instead (this does require that your language supports pass-by-reference)</p></li>\n<li><p>If it's part of a code obfuscation strategy, keep using them!</p></li>\n</ul>\n\n<p>I see people using tuples just because they're too lazy to bother giving NAMES to their objects. Users of the API are then forced to access items in the tuple based on a meaningless index instead of a useful name.</p>\n", "answer_id": 407333, "tags": [], "down_vote_count": 1, "last_activity_date": 1230913824, "comments": [{"body": "I&#39;m glad you qualified this. Thank goodness for Python 2.6 adding <a href=\"http://docs.python.org/library/collections.html#collections.namedtuple\" rel=\"nofollow\">named tuples</a>.", "edited": false, "comment_id": 557688, "creation_date": 1239679639, "score": 0, "owner": {"display_name": "bignose", "reputation": 7940, "user_id": 70157, "user_type": "registered", "accept_rate": 71}}, {"body": "Hey that&#39;s cool. I didn&#39;t know there was a such thing as a named tuple. I think for a tuple-perfect-storm you should design a GUI library in python that expects 2-tuples in x,y and y,x order in various places. :-)", "edited": false, "comment_id": 2560319, "creation_date": 1270081091, "score": 0, "owner": {"display_name": "Warren  P", "reputation": 26418, "user_id": 84704, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1230913824, "comment_count": 2, "score": 1, "owner": {"display_name": "Hermit", "reputation": 500, "user_id": 41804, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1230914305, "body": "<p><strong>Goto is OK!</strong> (is that controversial enough)<br />\nSometimes... so give us the choice! For example, BASH doesn't have goto. Maybe there is some internal reason for this but still.<br />\nAlso, <code>goto</code> is the building block of Assembly language. No if statements for you! :)</p>\n", "is_accepted": false, "tags": [], "answer_id": 407347, "down_vote_count": 1, "last_activity_date": 1234698446, "comments": [{"body": "bash has break n; and continue n; instead. imho the only reason to use goto is when you don&#39;t have those (or don&#39;t have labelled break/continue)", "edited": false, "comment_id": 232271, "creation_date": 1230915891, "score": 0, "owner": {"display_name": "Johannes Schaub - litb", "reputation": 296033, "user_id": 34509, "user_type": "registered", "accept_rate": 63}}, {"body": "In assembly everything is implemented as goto (jump/branch).  Most languages have if and some form of loop, but many are lacking try/catch or break/continue all of which can be implemented by the goto.  Admittedly it can be used really badly so be careful :)", "edited": false, "comment_id": 232555, "creation_date": 1230922333, "score": 0, "owner": {"display_name": "Cervo", "reputation": 2948, "user_id": 16219, "user_type": "registered"}}, {"body": "I see headaches in making gotos in a language that is parsed while running.", "edited": false, "comment_id": 233147, "creation_date": 1230936337, "score": 0, "owner": {"display_name": "Joshua", "reputation": 14708, "user_id": 14768, "user_type": "registered", "accept_rate": 87}}, {"body": "@Joshua, you mean interpreted languages? A language like Basic used to be a interpreted language and it certainly had the goto statement. How old are you?", "edited": false, "comment_id": 236464, "creation_date": 1231103969, "score": 2, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "@Joshua, I&#39;d say it was simpler. I wrote a simple interpreted language (by &quot;simple&quot;, I mean &quot;didn&#39;t really do anything at all&quot; :D) which had goto. No conditions though.", "edited": false, "comment_id": 362373, "creation_date": 1234698538, "score": 0, "owner": {"display_name": "Lucas Jones", "reputation": 13141, "user_id": 41981, "user_type": "registered", "accept_rate": 85}}, {"body": "and there are <code>cmp</code> statements (<code>if</code> statements) in Assembly - otherwise you&#39;d never know when to <code>jmp</code>", "edited": false, "comment_id": 1470568, "creation_date": 1256188583, "score": 0, "owner": {"display_name": "warren", "reputation": 13593, "user_id": 4418, "user_type": "registered", "accept_rate": 94}}, {"body": "I suppose.... :)", "edited": false, "comment_id": 1473959, "creation_date": 1256228608, "score": 0, "owner": {"display_name": "Lucas Jones", "reputation": 13141, "user_id": 41981, "user_type": "registered", "accept_rate": 85}}], "creation_date": 1230914305, "comment_count": 7, "score": 5, "owner": {"display_name": "Lucas Jones", "reputation": 13141, "user_id": 41981, "user_type": "registered", "accept_rate": 85}, "last_editor": {"display_name": "Lucas Jones", "reputation": 13141, "user_id": 41981, "user_type": "registered", "accept_rate": 85}, "last_edit_date": 1234698446, "up_vote_count": 6}, {"community_owned_date": 1230914411, "body": "<p><strong>Readability is the most important aspect of your code.</strong></p>\n\n<p>Even more so than correctness.  If it's readable, it's easy to fix.  It's also easy to optimize, easy to change, easy to understand.  And hopefully other developers can learn something from it too.</p>\n", "answer_id": 407351, "tags": [], "down_vote_count": 13, "last_activity_date": 1230914411, "creation_date": 1230914411, "comment_count": 0, "score": 354, "owner": {"display_name": "Craig P. Motlin", "reputation": 13460, "user_id": 23572, "user_type": "registered", "accept_rate": 64}, "is_accepted": false, "up_vote_count": 367}, {"community_owned_date": 1230914777, "body": "<p><strong>System.Data.DataSet Rocks!</strong></p>\n\n<p>Strongly-typed DataSets are better, in my opinion, than custom DDD objects for most business applications.</p>\n\n<p>Reasoning: We're bending over backwards to figure out Unit of Work on custom objects, LINQ to SQL, Entity Framework and it's adding complexity. Use a nice code generator from somewhere to generate the data layer and the Unit of Work sits on the object collections (DataTable and DataSet)--no mystery.</p>\n", "answer_id": 407374, "tags": [], "down_vote_count": 0, "last_activity_date": 1230914777, "comments": [{"body": "You&#39;ve obviously never used a DataSet then :P", "edited": false, "comment_id": 235481, "creation_date": 1231057432, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "I have to disagree. IMO the DataSet is overkill for the vast majority of operations. And before it&#39;s asked, yes, I have used it.", "edited": false, "comment_id": 235639, "creation_date": 1231065780, "score": 0, "owner": {"display_name": "Mike Hofer", "reputation": 7420, "user_id": 47580, "user_type": "registered", "accept_rate": 98}}, {"body": "By the same reasoning, LINQ to SQL, Entity Framework, NHibernate, etc. are also overkill for the &quot;vast majority&quot; of operations. BTW, did you mean the &quot;vast majority&quot; of all operations or the &quot;vast majority&quot; of places where I&#39;d use DDD?", "edited": false, "comment_id": 253228, "creation_date": 1231534415, "score": 0, "owner": {"display_name": "Mark A Johnson", "reputation": 584, "user_id": 45720, "user_type": "registered", "accept_rate": 41}}], "creation_date": 1230914777, "comment_count": 3, "score": 0, "owner": {"display_name": "Mark A Johnson", "reputation": 584, "user_id": 45720, "user_type": "registered", "accept_rate": 41}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1230914880, "body": "<h1>Using Stored Procedures</h1>\n\n<p>Unless you are writing a large procedural function composed of non-reusable SQL queries, please move your stored procedures of the database and into version control. </p>\n", "is_accepted": false, "tags": [], "answer_id": 407379, "down_vote_count": 1, "last_activity_date": 1230935237, "comments": [{"body": "I concur: you can&#39;t version stored procedures, and having 200+ stored procedures in a large project becomes a maintenance nightmare. Embedded SQL is ok for small projects, but I&#39;d rather use an ORM to write my queries for me.", "edited": false, "comment_id": 232273, "creation_date": 1230915910, "score": 0, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}, {"body": "Princess: I must disagree with your statement that you can&#39;t version stored procedures. I version them myself by keeping the SQL for them in source code control. If you make a change to the database, re-export the script for it and check it into the repository.", "edited": false, "comment_id": 232419, "creation_date": 1230919266, "score": 0, "owner": {"display_name": "Mike Hofer", "reputation": 7420, "user_id": 47580, "user_type": "registered", "accept_rate": 98}}, {"body": "I agree about versioning stored procedures.  If you are writing SP, you need to take it upon yourself to version them in source control.", "edited": false, "comment_id": 232624, "creation_date": 1230924240, "score": 0, "owner": {"display_name": "casperOne", "reputation": 53532, "user_id": 50776, "user_type": "moderator", "accept_rate": 78}}, {"body": "Out of <i>your</i> database?  There speaks a 1970s DBA", "edited": false, "comment_id": 233091, "creation_date": 1230934997, "score": 0, "owner": {"display_name": "ChrisA", "reputation": 3163, "user_id": 24867, "user_type": "registered", "accept_rate": 77}}, {"body": "We can version SPs. The build process moves them from source control into the database.", "edited": false, "comment_id": 233143, "creation_date": 1230936266, "score": 0, "owner": {"display_name": "Joshua", "reputation": 14708, "user_id": 14768, "user_type": "registered", "accept_rate": 87}}, {"body": "In DB2/400 stored procedures are an interface to native code on the system... In other words, hard to move over to the calling system.", "edited": false, "comment_id": 1482098, "creation_date": 1256327043, "score": 0, "owner": {"display_name": "Thorbj\u00f8rn Ravn Andersen", "reputation": 43814, "user_id": 53897, "user_type": "registered", "accept_rate": 57}}], "creation_date": 1230914880, "comment_count": 6, "score": 10, "owner": {"display_name": "Shawn", "reputation": 8946, "user_id": 26, "user_type": "registered", "accept_rate": 72}, "last_editor": {"display_name": "Shawn", "reputation": 8946, "user_id": 26, "user_type": "registered", "accept_rate": 72}, "last_edit_date": 1230935237, "up_vote_count": 11}, {"community_owned_date": 1230915721, "body": "<p>I've been burned for broadcasting these opinions in public before, but here goes:</p>\n\n<p><b>Well-written code in dynamically typed languages follows static-typing conventions</b></p>\n\n<p>Having used Python, PHP, Perl, and a few other dynamically typed languages, I find that well-written code in these languages follows static typing conventions, for example:</p>\n\n<ul>\n<li><p>Its considered bad style to re-use a variable with different types (for example, its bad style to take a list variable and assign an int, then assign the variable a bool in the same method). Well-written code in dynamically typed languages doesn't mix types.</p></li>\n<li><p>A type-error in a statically typed language is still a type-error in a dynamically typed language.</p></li>\n<li><p>Functions are generally designed to operate on a single datatype at a time, so that a function which accepts a parameter of type <code>T</code> can only sensibly be used with objects of type <code>T</code> or subclasses of <code>T</code>.</p></li>\n<li><p>Functions designed to operator on many different datatypes are written in a way that constrains parameters to a well-defined interface. In general terms, if two objects of types <code>A</code> and <code>B</code> perform a similar function, but aren't subclasses of one another, then they almost certainly implement the same interface.</p></li>\n</ul>\n\n<p>While dynamically typed languages certainly provide more than one way to crack a nut, most well-written, idiomatic code in these languages pays close attention to types just as rigorously as code written in statically typed languages.</p>\n\n<p><b>Dynamic typing does not reduce the amount of code programmers need to write</b></p>\n\n<p>When I point out how peculiar it is that so many static-typing conventions cross over into dynamic typing world, I usually add \"so why use dynamically typed languages to begin with?\". \nThe immediate response is something along the lines of being able to write more terse, expressive code, because dynamic typing allows programmers to omit type annotations and explicitly defined interfaces. However, I think the most popular statically typed languages, such as C#, Java, and Delphi, are bulky by design, not as a result of their type systems.</p>\n\n<p>I like to use languages with a <em>real</em> type system like OCaml, which is not only statically typed, but its type inference and structural typing allow programmers to omit most type annotations and interface definitions.</p>\n\n<p>The existence of the ML family of languages demostrates that we can enjoy the benefits of static typing with all the brevity of writing in a dynamically typed language. I actually use OCaml's REPL for ad hoc, throwaway scripts in exactly the same way everyone else uses Perl or Python as a scripting language.</p>\n", "answer_id": 407415, "tags": [], "down_vote_count": 3, "last_activity_date": 1230915721, "comments": [{"body": "100% right. If only the Python developers would finally acknowledge this and change their otherwise exceptional language accordingly. Thanks for posting this.", "edited": false, "comment_id": 252987, "creation_date": 1231530623, "score": 7, "owner": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}}, {"body": "But there is already one statically-typed Python-like language. Tt&#39;s called C# ;-)", "edited": false, "comment_id": 327575, "creation_date": 1233788891, "score": 0, "owner": {"display_name": "zuber", "reputation": 1990, "user_id": 9812, "user_type": "registered"}}, {"body": "C# is python-like? Maybe you meant Boo ;)", "edited": false, "comment_id": 328183, "creation_date": 1233803674, "score": 0, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}, {"body": "If anyone says dynamic typing is more terse, just point them to Haskell =). I agree with all but your 3rd bullet point. Dynamic code often accepts parameters that can be one of two types. For example, Prototype functions accept either HTMLElements, or strings which you can use $() to look up to get HTMLElements. A good static typing system will allow you to do this =).", "edited": false, "comment_id": 636991, "creation_date": 1241594212, "score": 3, "owner": {"display_name": "Claudiu", "reputation": 73067, "user_id": 15055, "user_type": "registered", "accept_rate": 81}}, {"body": "#2 is only true if you follow #1, which in my opinion is unnecessary. If it&#39;s clear what the code does, then it is correct. I have a code I use a lot that reads in data from a tab delimited file, and parses that into an array of floats. Why do I need a different variable for each step of the process? The data(as the variable is called) is still the data in each step.", "edited": false, "comment_id": 646226, "creation_date": 1241746709, "score": 3, "owner": {"display_name": "notJim", "reputation": 6017, "user_id": 19370, "user_type": "registered", "accept_rate": 84}}], "creation_date": 1230915721, "comment_count": 5, "score": 80, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}, "is_accepted": false, "up_vote_count": 83}, {"community_owned_date": 1230916682, "body": "<p><strong>Code layout does matter</strong></p>\n\n<p>Maybe specifics of brace position should remain purely religious arguments - but it doesn't mean that all layout styles are equal, or that there are no objective factors at all!</p>\n\n<p>The trouble is that the uber-rule for layout, namely: \"be consistent\", sound as it is, is used as a crutch by many to never try to see if their default style can be improved on - and that, furthermore, it <em>doesn't even matter</em>.</p>\n\n<p>A few years ago I was studying Speed Reading techniques, and some of the things I learned about how the eye takes in information in \"fixations\", can most optimally scan pages, and the role of subconsciously picking up context, got me thinking about how this applied to code - and writing code with it in mind especially.</p>\n\n<p>It led me to a style that tended to be columnar in nature, with identifiers logically grouped and aligned where possible (in particular I became strict about having each method argument on its own line). However, rather than long columns of unchanging structure it's actually beneficial to vary the structure in blocks so that you end up with rectangular islands that the eye can take in in a single fixture - even if you don't consciously read every character.</p>\n\n<p>The net result is that, once you get used to it (which typically takes 1-3 days) it becomes pleasing to the eye, easier and faster to comprehend, and is less taxing on the eyes and brain because it's laid out in a way that makes it easier to take in.</p>\n\n<p>Almost without exception, everyone I have asked to try this style (including myself) initially said, \"ugh I hate it!\", but after a day or two said, \"I love it - I'm finding it hard not to go back and rewrite all my old stuff this way!\".</p>\n\n<p>I've been hoping to find the time to do more controlled experiments to collect together enough evidence to write a paper on, but as ever have been too busy with other things. However this seemed like a good opportunity to mention it to people interested in controversial techniques :-)</p>\n\n<p>[Edit]</p>\n\n<p>I finally got around to blogging about this (after many years parked in the \"meaning to\" phase): <a href=\"http://www.levelofindirection.com/journal/2009/9/24/code-formatting-in-c-part-one.html\" rel=\"nofollow\">Part one</a>, <a href=\"http://www.levelofindirection.com/journal/2009/10/5/code-formatting-in-c-part-two.html\" rel=\"nofollow\">Part two</a>, <a href=\"http://www.levelofindirection.com/journal/2009/11/11/code-formatting-in-c-part-three.html\" rel=\"nofollow\">Part three</a>.</p>\n", "is_accepted": false, "tags": [], "answer_id": 407446, "down_vote_count": 0, "last_activity_date": 1271670763, "comments": [{"body": "Generally when things are aligned in a columnar way it creates a maintenance burden for a developer.  Ie aligning the data type and identifier in a method declaration... Line1(int id,) line 2(char id,) ... making sure the data type, variable name, and even commas all are in a column is a MESS", "edited": false, "comment_id": 232561, "creation_date": 1230922502, "score": 0, "owner": {"display_name": "Cervo", "reputation": 2948, "user_id": 16219, "user_type": "registered"}}, {"body": "it usually just takes a couple of extra keypresses, if that.I didn&#39;t go into too many specifics, but I usually only break it into two columns for alignment purposes (usually type - id). I have some other rules to ease the burden where parantheses are concerned. The biggest obstacle I have [cont...]", "edited": false, "comment_id": 233116, "creation_date": 1230935673, "score": 0, "owner": {"display_name": "philsquared", "reputation": 14749, "user_id": 32136, "user_type": "registered", "accept_rate": 65}}, {"body": "[...cont] is fighting against auto-formatting editors. In fact, unless it&#39;s easy to disable I usually give up in those circumstances and &quot;go with the flow&quot;. But with especially verbose languages like C++ I still prefer it.", "edited": false, "comment_id": 233123, "creation_date": 1230935760, "score": 0, "owner": {"display_name": "philsquared", "reputation": 14749, "user_id": 32136, "user_type": "registered", "accept_rate": 65}}, {"body": "Interesting.  I would like to see some examples.  Do you have a blog?", "edited": false, "comment_id": 233127, "creation_date": 1230935877, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "Well, I have: <a href=\"http://www.levelofindirection.com\" rel=\"nofollow\">levelofindirection.com</a> (yes, it forwards to blogspot - the pun <i>was</i> intended), and also <a href=\"http://organic-programming.blogspot.com\" rel=\"nofollow\">organic-programming.blogspot.com</a> . However, you&#39;ll notice neither have been updated for quite a while - due in large part to <a href=\"http://www.vconqr.com\" rel=\"nofollow\">vconqr.com</a> ;-) [cont...]", "edited": false, "comment_id": 234311, "creation_date": 1231001960, "score": 0, "owner": {"display_name": "philsquared", "reputation": 14749, "user_id": 32136, "user_type": "registered", "accept_rate": 65}}, {"body": "[...cont] - and I don&#39;t mention the layout stuff on either. I&#39;ll consider myself prodded - again!", "edited": false, "comment_id": 234314, "creation_date": 1231001991, "score": 0, "owner": {"display_name": "philsquared", "reputation": 14749, "user_id": 32136, "user_type": "registered", "accept_rate": 65}}, {"body": "Code formatting matters so much, it doesn&#39;t matter at all.  By that I mean that editors should always reformat code when you load it, and SCM systems should reformat to a canonical style on checkin.  Then everyone sees the code the way that works best for them.", "edited": false, "comment_id": 237097, "creation_date": 1231131220, "score": 0, "owner": {"display_name": "Kendall Helmstetter Gelner", "reputation": 59340, "user_id": 6330, "user_type": "registered", "accept_rate": 80}}, {"body": "@Kendall: Sounds nice.  It&#39;s hard, though, because you have to be able to specify the exact formatting of every possible bit of code, including code that isn&#39;t legal in the language!", "edited": false, "comment_id": 238349, "creation_date": 1231172700, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "This is a pretty much standard opinion. Or, at least, it should be. If this is controversial, then there is a problem.", "edited": false, "comment_id": 1066152, "creation_date": 1249576981, "score": 0, "owner": {"display_name": "Eduardo Le\u00f3n", "reputation": 6485, "user_id": 46571, "user_type": "registered", "accept_rate": 93}}, {"body": "<a href=\"http://en.wikipedia.org/wiki/One_True_Brace#Variant:_1TBS\" rel=\"nofollow\">1TBS</a> and <a href=\"http://nickgravgaard.com/elastictabstops/\" rel=\"nofollow\">elastic tabs</a>, or death. ps: @Kendall - but yes, sounds nice :)", "edited": false, "reply_to_user": {"display_name": "Kendall Helmstetter Gelner", "reputation": 59340, "user_id": 6330, "user_type": "registered", "accept_rate": 80}, "comment_id": 4706886, "creation_date": 1291252761, "score": 0, "owner": {"display_name": "zanlok", "reputation": 1258, "user_id": 512671, "user_type": "registered"}}], "creation_date": 1230916682, "comment_count": 10, "score": 72, "owner": {"display_name": "philsquared", "reputation": 14749, "user_id": 32136, "user_type": "registered", "accept_rate": 65}, "last_editor": {"display_name": "philsquared", "reputation": 14749, "user_id": 32136, "user_type": "registered", "accept_rate": 65}, "last_edit_date": 1271670763, "up_vote_count": 72}, {"community_owned_date": 1230916825, "body": "<p>The ability to create UML diagrams similar to pretzels with mad cow disease is not actually a useful software development skill.</p>\n\n<p>The whole point of diagramming code is to visualise connections, to see the shape of a design. But once you pass a certain rather low level of complexity, the visualisation is too much to process mentally. Making connections pictorially is only simple if you stick to straight lines, which typically makes the diagram much harder to read than if the connections were cleverly grouped and routed along the cardinal directions.</p>\n\n<p>Use diagrams only for broad communication purposes, and only when they're understood to be lies.</p>\n", "answer_id": 407454, "tags": [], "down_vote_count": 0, "last_activity_date": 1230916825, "creation_date": 1230916825, "comment_count": 0, "score": 10, "owner": {"display_name": "RoadWarrior", "reputation": 12619, "user_id": 13118, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 10}, {"community_owned_date": 1230916826, "body": "<p>How about this one:</p>\n\n<p><strong>Garbage collectors actually hurt programmers' productivity and make resource leaks harder to find and fix</strong></p>\n\n<p>Note that I am talking about resouces in general, and not only memory.</p>\n", "answer_id": 407455, "tags": [], "down_vote_count": 8, "last_activity_date": 1230916826, "comments": [{"body": "Would you mind justifying that?", "edited": false, "comment_id": 232464, "creation_date": 1230920298, "score": 0, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}, {"body": "I&#39;ve seen 50mb leaked bescause some library programmer hooked an event and didn&#39;t make absolutely sure to unhook it.", "edited": false, "comment_id": 233160, "creation_date": 1230936581, "score": 0, "owner": {"display_name": "Joshua", "reputation": 14708, "user_id": 14768, "user_type": "registered", "accept_rate": 87}}, {"body": "now imagine you have 8gb ram", "edited": false, "comment_id": 233612, "creation_date": 1230954885, "score": 0, "owner": {"display_name": "IAdapter", "reputation": 19424, "user_id": 30453, "user_type": "registered", "accept_rate": 82}}, {"body": "8gb RAM is nothing to a repetitive leak on a server under high load.", "edited": false, "comment_id": 237121, "creation_date": 1231133178, "score": 0, "owner": {"display_name": "Kendall Helmstetter Gelner", "reputation": 59340, "user_id": 6330, "user_type": "registered", "accept_rate": 80}}, {"body": "I guess it refers to RIIA idiom. In that case I must adhere to the proposal. RIIA is a solution for all resources, GC is a partial solution for memory resources only.", "edited": false, "comment_id": 237887, "creation_date": 1231164297, "score": 1, "owner": {"display_name": "David Rodr\u00edguez - dribeas", "reputation": 137526, "user_id": 36565, "user_type": "registered"}}, {"body": "+1 to that. Before GC, programmers took care of leaks before deployment. These days, applications are deployed and then when a 100 users are using the application, we discover that we&#39;ve run out of database connections.", "edited": false, "comment_id": 243982, "creation_date": 1231325931, "score": 1, "owner": {"display_name": "Agnel Kurian", "reputation": 17838, "user_id": 45603, "user_type": "registered", "accept_rate": 89}}, {"body": "Anyone who expects garbage collection to handle all resource management has desperately misunderstood garbage collection. GC is only for managing <i>memory</i>", "edited": false, "comment_id": 285312, "creation_date": 1232577044, "score": 0, "owner": {"display_name": "benjismith", "reputation": 9995, "user_id": 22979, "user_type": "registered", "accept_rate": 67}}, {"body": "I&#39;d give a +1 if you had said: &quot;GC because it&#39;s not available for all resoures; only memory. So you can leak DB connections.&quot; GC has solved 100 issues and introduced 20 new ones, so it&#39;s still an advantage.", "edited": false, "comment_id": 407215, "creation_date": 1235750211, "score": 1, "owner": {"display_name": "Aaron Digulla", "reputation": 178090, "user_id": 34088, "user_type": "registered", "accept_rate": 78}}, {"body": "Which &quot;100 issues&quot;? It has solved only one - memory management, and IMHO even that poorly.", "edited": false, "comment_id": 407574, "creation_date": 1235754691, "score": 0, "owner": {"display_name": "Nemanja Trifunovic", "reputation": 19014, "user_id": 8899, "user_type": "registered"}}, {"body": "Wait, memory management needed to be solved?", "edited": false, "comment_id": 1971643, "creation_date": 1263246544, "score": 2, "owner": {"display_name": "GManNickG", "reputation": 189384, "user_id": 87234, "user_type": "registered", "accept_rate": 94}}], "creation_date": 1230916826, "comment_count": 10, "score": 10, "owner": {"display_name": "Nemanja Trifunovic", "reputation": 19014, "user_id": 8899, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 18}, {"community_owned_date": 1230917255, "body": "<p><strong>SQL could and should have been done better.</strong>  Because its original spec was limited, various venders have been extending the language in different directions for years.  SQL that is written for MS-SQL is different than SQL for Oracle, IBM, MySQL, Sybase, etc.  Other serious languages (take C++ for example) were carefully standardized so that C++ written under one compiler will generally compile unmodified under another.  Why couldn't SQL have been designed and standardized better?</p>\n\n<p><strong>HTML was a seriously broken choice as a browser display language.</strong>  We've spent years extending it through CSS, XHTML, Javascript, Ajax, Flash, etc. in order to make a useable UI, and the result is still not as good as your basic thick-client windows app.  Plus, a competent web programmer now needs to know three or four languages in order to make a decent UI.</p>\n\n<p>Oh yeah.  Hungarian notation is an abomination.</p>\n", "is_accepted": false, "tags": [], "answer_id": 407484, "down_vote_count": 2, "last_activity_date": 1240353546, "comments": [{"body": "+1 for the abomination.  Anything that&#39;s harder to read than write has got to be wrong.", "edited": false, "comment_id": 232659, "creation_date": 1230925216, "score": 0, "owner": {"display_name": "ChrisA", "reputation": 3163, "user_id": 24867, "user_type": "registered", "accept_rate": 77}}, {"body": "This is a statement that two things that had been around for a long time, and have been heavily used, would be much better done if they&#39;d known then what we know now.  That is much closer to being a tautology than a controversy.", "edited": false, "comment_id": 1422134, "creation_date": 1255469595, "score": 0, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}}, {"body": "html layout is a lot easier than assembling widgets in C++", "edited": false, "comment_id": 1560344, "creation_date": 1257488666, "score": 1, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}], "creation_date": 1230917255, "comment_count": 3, "score": 12, "owner": {"display_name": "Kluge", "reputation": 2205, "user_id": 8752, "user_type": "registered"}, "last_editor": {"display_name": "Kluge", "reputation": 2205, "user_id": 8752, "user_type": "registered"}, "last_edit_date": 1240353546, "up_vote_count": 14}, {"community_owned_date": 1230917563, "body": "<p><strong>Globals and/or Singletons are not inherently evil</strong></p>\n\n<p>I come from more of a sysadmin, shell, Perl (and my \"real\" programming), PHP type background; last year I was thrown into a Java development gig.</p>\n\n<p>Singletons are evil. Globals are so evil they are not even allowed. Yet, Java has things like AOP, and now various \"Dependency Injection\" frameworks (we used Google Guice). AOP less so, but DI things for sure give you what? Globals. Uhh, thanks.</p>\n", "answer_id": 407500, "tags": [], "down_vote_count": 1, "last_activity_date": 1230917563, "comments": [{"body": "I think you have some misconceptions about DI.  You should watch Misko Hevery&#39;s Clean Code talks.", "edited": false, "comment_id": 232507, "creation_date": 1230921437, "score": 0, "owner": {"display_name": "Craig P. Motlin", "reputation": 13460, "user_id": 23572, "user_type": "registered", "accept_rate": 64}}, {"body": "I agree about globals.  The problem is not the concept of a global itself, but what type of thing is made global.  Used correctly, globals are very powerful.", "edited": false, "comment_id": 232959, "creation_date": 1230930949, "score": 0, "owner": {"display_name": "Gene Roberts", "reputation": 1119, "user_id": 47544, "user_type": "registered"}}, {"body": "Perhaps I am. But if you had globals, you wouldn&#39;t need DI. I&#39;m entirely prepared to believe that I&#39;m mis-understanding a technology that solves a self-imposed problem.", "edited": false, "comment_id": 235361, "creation_date": 1231046682, "score": 0, "owner": {"display_name": "Jeff Warnica", "reputation": 496, "user_id": 321668, "user_type": "registered"}}, {"body": "We use Globals all the time in java, every time we use a final public static in place of a Constant (C, C++, C#). I think the thought is that if it needs to be global then it should be a static. I can (Mostly) agree with this.", "edited": false, "comment_id": 511573, "creation_date": 1238440916, "score": 0, "owner": {"display_name": "WolfmanDragon", "reputation": 3819, "user_id": 13491, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1230917563, "comment_count": 4, "score": 6, "owner": {"display_name": "Jeff Warnica", "reputation": 496, "user_id": 321668, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1230917672, "body": "<p><strong>The class library guidelines for implementing IDisposable are wrong.</strong></p>\n\n<p>I don't share this too often, but I believe that the guidance for the default implementation for <code>IDisposable</code> is completely wrong.</p>\n\n<p>My issue isn't with the overload of <code>Dispose</code> and then removing the item from finalization, but rather, I despise how there is a call to release the managed resources in the finalizer.  I personally believe that an exception should be thrown (and yes, with all the nastiness that comes from throwing it on the finalizer thread).</p>\n\n<p>The reasoning behind it is that if you are a client or server of <code>IDisposable</code>, there is an understanding that you can't simply leave the object lying around to be finalized.  If you do, this is a design/implementation flaw (depending on how it is left lying around  and/or how it is exposed), as you are not aware of the lifetime of instances that you should be aware of.</p>\n\n<p>I think that this type of bug/error is on the level of race conditions/synchronization to resources.  Unfortunately, with calling the overload of <code>Dispose</code>, that error is never materialized.</p>\n\n<p>Edit:  I've written a blog post on the subject if anyone is interested:</p>\n\n<p><a href=\"http://www.caspershouse.com/post/A-Better-Implementation-Pattern-for-IDisposable.aspx\" rel=\"nofollow\">http://www.caspershouse.com/post/A-Better-Implementation-Pattern-for-IDisposable.aspx</a></p>\n", "is_accepted": false, "tags": [], "answer_id": 407503, "down_vote_count": 0, "last_activity_date": 1231217842, "comments": [{"body": "I like it!  Now I wish that all the IDisposable objects in the framework would do this.", "edited": false, "comment_id": 233112, "creation_date": 1230935623, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "On a related note, MemoryStream is disposable but safe to leak. Think about it.", "edited": false, "comment_id": 233163, "creation_date": 1230936696, "score": 0, "owner": {"display_name": "Joshua", "reputation": 14708, "user_id": 14768, "user_type": "registered", "accept_rate": 87}}, {"body": "Joshua:  The fact that MemoryStream is disposable is an implementation detail, and as we all know, it&#39;s not good practice to rely on implementation details if you don&#39;t have to.  It could very easily be changed to use a unmanaged memory pointer for it&#39;s buffer in the future. Think about that. =)", "edited": false, "comment_id": 233349, "creation_date": 1230941927, "score": 0, "owner": {"display_name": "casperOne", "reputation": 53532, "user_id": 50776, "user_type": "moderator", "accept_rate": 78}}, {"body": "I would prefer that all types that implement IDisposable were forced to be stack allocated, or some similar concept.", "edited": false, "comment_id": 233409, "creation_date": 1230945226, "score": 0, "owner": {"display_name": "Daniel Paull", "reputation": 4454, "user_id": 43066, "user_type": "registered"}}], "creation_date": 1230917672, "comment_count": 4, "score": 4, "owner": {"display_name": "casperOne", "reputation": 53532, "user_id": 50776, "user_type": "moderator", "accept_rate": 78}, "last_editor": {"display_name": "casperOne", "reputation": 53532, "user_id": 50776, "user_type": "moderator", "accept_rate": 78}, "last_edit_date": 1231217842, "up_vote_count": 4}, {"community_owned_date": 1230917749, "body": "<p><strong>SESE (Single Entry Single Exit) is not law</strong></p>\n\n<p>Example:</p>\n\n<pre><code>public int foo() {\n   if( someCondition ) {\n      return 0;\n   }\n\n   return -1;\n}\n</code></pre>\n\n<p>vs:</p>\n\n<pre><code>public int foo() {\n   int returnValue = -1;\n\n   if( someCondition ) {\n      returnValue = 0;\n   }\n\n   return returnValue;\n}\n</code></pre>\n\n<p>My team and I have found that abiding by this all the time is actually counter-productive in many cases. </p>\n", "is_accepted": false, "tags": [], "answer_id": 407507, "down_vote_count": 1, "last_activity_date": 1284637643, "comments": [{"body": "If only I knew what SESE is?", "edited": false, "comment_id": 233079, "creation_date": 1230934621, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "I found it: Single Entry Single Exit !!", "edited": false, "comment_id": 233154, "creation_date": 1230936430, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "what the hell is SESE?", "edited": false, "comment_id": 233565, "creation_date": 1230952803, "score": 1, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "I guess, that in other words it is &quot;function should have only one return statement&quot; - never agreed with that one.", "edited": false, "comment_id": 234655, "creation_date": 1231013078, "score": 0, "owner": {"display_name": "Rene Saarsoo", "reputation": 6862, "user_id": 15982, "user_type": "registered", "accept_rate": 61}}, {"body": "Moreover, an exception is just another exit point. When functions are short and error-safe (-&gt; finally, RAII), there is no need to follow SESE.", "edited": false, "comment_id": 244460, "creation_date": 1231336878, "score": 4, "owner": {"display_name": "Luc Hermitte", "reputation": 16439, "user_id": 15934, "user_type": "registered"}}, {"body": "Agreed. I cringe at the 100+ loc methods I&#39;ve seen that carry a return value from the first line all the way to the bottom just to adhere to SESE. There is something to be said for exiting when you find the answer.", "edited": false, "comment_id": 252855, "creation_date": 1231528483, "score": 5, "owner": {"display_name": "Rontologist", "reputation": 2535, "user_id": 13925, "user_type": "registered"}}, {"body": "wow .. whoever came up with SESE must be a world class idiot", "edited": false, "comment_id": 263964, "creation_date": 1231911849, "score": 6, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "Totally agree on that one, I was about to add it onto this post, you beat me to it ;)", "edited": false, "comment_id": 322906, "creation_date": 1233689911, "score": 0, "owner": {"display_name": "dbones", "reputation": 2425, "user_id": 47642, "user_type": "registered", "accept_rate": 74}}, {"body": "Wait people actually do this?  Why can&#39;t you just search for &quot;return&quot;?", "edited": false, "comment_id": 738980, "creation_date": 1243734849, "score": 2, "owner": {"display_name": "nosatalian", "reputation": 1956, "user_id": 110296, "user_type": "registered", "accept_rate": 83}}, {"body": "SESE is law in unmanaged code, but in managed code it isn&#39;t, some post somewhere here in SO explains it better", "edited": false, "comment_id": 915992, "creation_date": 1247099028, "score": 1, "owner": {"display_name": "Jader Dias", "reputation": 27851, "user_id": 48465, "user_type": "registered", "accept_rate": 98}}, {"body": "I&#39;d like to see that post, but admittedly, my opinion comes from a strict managed code domain.", "edited": false, "comment_id": 916113, "creation_date": 1247102990, "score": 0, "owner": {"display_name": "javamonkey79", "reputation": 7698, "user_id": 27657, "user_type": "registered", "accept_rate": 65}}, {"body": "This might be useful when your debugger only has a maximum of two breakpoints. Very common in embedded hardware environments.", "edited": false, "comment_id": 988569, "creation_date": 1248305821, "score": 0, "owner": {"display_name": "Casey", "reputation": 27638, "user_id": 64313, "user_type": "registered", "accept_rate": 64}}, {"body": "I think SESE is a great example of a solution in search of a problem", "edited": false, "comment_id": 1469769, "creation_date": 1256171070, "score": 9, "owner": {"display_name": "Kevin Laity", "reputation": 1710, "user_id": 55896, "user_type": "registered", "accept_rate": 74}}, {"body": "SESE dates back to 1960s and structured programming.  it made a lot of sense then.  single entry is pretty much guaranteed today, clinging to single exit just betrays low iq.", "edited": false, "comment_id": 1808835, "creation_date": 1260848154, "score": 3, "owner": {"display_name": "just somebody", "reputation": 10815, "user_id": 209605, "user_type": "registered", "accept_rate": 62}}, {"body": "It only makes sense if it&#39;s SESRP: Single Entry, Single Return Point.  This was important in languages like BASIC where you could GOTO here, there, and everywhere.  Better practice was to always return where you came from, using GOSUB instead of GOTO.  With modern programming languages this isn&#39;t so much of an issue...which seems to be how the sensible &quot;return where you came from&quot; morphed into the awful &quot;exit from only one point of the method&quot;.", "edited": false, "comment_id": 1815101, "creation_date": 1260912587, "score": 0, "owner": {"display_name": "Kyralessa", "reputation": 97118, "user_id": 5486, "user_type": "registered", "accept_rate": 59}}, {"body": "I was running PMD on a project and came here to post this after an annoying set of &#39;OnlyOneReturn&#39; point <i>violations</i> popped up.", "edited": false, "comment_id": 4692094, "creation_date": 1291155731, "score": 0, "owner": {"display_name": "Tom Neyland", "reputation": 4221, "user_id": 64301, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1230917749, "comment_count": 16, "score": 102, "owner": {"display_name": "javamonkey79", "reputation": 7698, "user_id": 27657, "user_type": "registered", "accept_rate": 65}, "last_editor": {"display_name": "strager", "reputation": 49749, "user_id": 39992, "user_type": "registered", "accept_rate": 82}, "last_edit_date": 1284637643, "up_vote_count": 103}, {"community_owned_date": 1230918178, "body": "<p><b>Null references should be removed from OO languages</b></p>\n\n<p>Coming from a Java and C# background, where its normal to return null from a method to indicate a failure, I've come to conclude that nulls cause a lot of avoidable problems. Language designers can remove a whole class of errors relate to NullRefernceExceptions if they simply eliminate null references from code.</p>\n\n<p>Additionally, when I call a method, I have no way of knowing whether that method can return null references unless I actually dig in the implementation. I'd like to see more languages follow F#'s model for handling nulls: F# doesn't allow programmers to return null references (at least for classes compiled in F#), instead it requires programmers to represent empty objects using <code>option</code> types. The nice thing about this design is how useful information, such as whether a function can return null references, is propagated through the type system: functions which return a type <code>'a</code> have a different return type than functions which return <code>'a option</code>.</p>\n", "answer_id": 407519, "tags": [], "down_vote_count": 4, "last_activity_date": 1230918178, "comments": [{"body": "An interesting link to confirm your point of view: <a href=\"http://sadekdrobi.com/2008/12/22/null-references-the-billion-dollar-mistake/\" rel=\"nofollow\">sadekdrobi.com/2008/12/22/&hellip;</a>", "edited": false, "comment_id": 232378, "creation_date": 1230918427, "score": 2, "owner": {"display_name": "Nemanja Trifunovic", "reputation": 19014, "user_id": 8899, "user_type": "registered"}}, {"body": "Nemanja: Fascinating find, too bad I can&#39;t upvote comments :)", "edited": false, "comment_id": 232472, "creation_date": 1230920451, "score": 0, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}, {"body": "I would rather have &quot;non-nullable reference types&quot; (with compiler checking) than completely remove null.", "edited": false, "comment_id": 232482, "creation_date": 1230920762, "score": 19, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I have to agree with Jon; &quot;null&quot; is frequently a valid state and indicates something completely different from zero or empty. Eliminating it would be a mistake IMO; but for those cases where it&#39;s not appropriate, a non-nullable object type would be nice.", "edited": false, "comment_id": 232636, "creation_date": 1230924787, "score": 1, "owner": {"display_name": "Mike Hofer", "reputation": 7420, "user_id": 47580, "user_type": "registered", "accept_rate": 98}}, {"body": "Correction: a non-nullable reference.", "edited": false, "comment_id": 232640, "creation_date": 1230924839, "score": 0, "owner": {"display_name": "Mike Hofer", "reputation": 7420, "user_id": 47580, "user_type": "registered", "accept_rate": 98}}, {"body": "I disagree, but then I use Objective-C where nil is quite a handy concept.", "edited": false, "comment_id": 232665, "creation_date": 1230925273, "score": 0, "owner": {"display_name": "user23743", "user_type": "does_not_exist"}}, {"body": "This is like prohibiting zero to prevent divide-by-zero errors. Nulls happen in real-world situations and forbidding them would force everyone to hand roll their own ad hoc implementations.", "edited": false, "comment_id": 232982, "creation_date": 1230931465, "score": 4, "owner": {"display_name": "Dour High Arch", "reputation": 13607, "user_id": 22437, "user_type": "registered", "accept_rate": 88}}, {"body": "I really like Scala&#39;s approach to this: there is no null, and if you want the same effect you have to wrap it in an Option[T] object (either Some[T] or None) which forces you to notice and check it. No more accidental nulls.", "edited": false, "comment_id": 250614, "creation_date": 1231470942, "score": 0, "owner": {"display_name": "Marcus Downing", "reputation": 5723, "user_id": 1000, "user_type": "registered", "accept_rate": 68}}, {"body": "I don&#39;t necessarily agree that they should be removed, but I do think the Null Object Pattern should be preferred over checking for null every four lines in your code.", "edited": false, "comment_id": 253498, "creation_date": 1231539656, "score": 1, "owner": {"display_name": "moffdub", "reputation": 3907, "user_id": 10759, "user_type": "registered", "accept_rate": 43}}, {"body": "Princess, if you like Nemanja&#39;s link you can edit your answer and include it", "edited": false, "comment_id": 299637, "creation_date": 1233056865, "score": 0, "owner": {"display_name": "MarkJ", "reputation": 23308, "user_id": 15639, "user_type": "registered", "accept_rate": 67}}, {"body": "Agree with Jon.  It should be possible to have the language enforce that a given variable can never be assigned null.", "edited": false, "comment_id": 1481576, "creation_date": 1256320742, "score": 0, "owner": {"display_name": "Thorbj\u00f8rn Ravn Andersen", "reputation": 43814, "user_id": 53897, "user_type": "registered", "accept_rate": 57}}, {"body": "The problem is your strongly typed language, not null.  In a language where null is a valid value and calling any method on null returns null is great.", "edited": false, "comment_id": 2677841, "creation_date": 1271549906, "score": 0, "owner": {"display_name": "drawnonward", "reputation": 40773, "user_id": 306253, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1230918178, "comment_count": 12, "score": 37, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}, "is_accepted": false, "up_vote_count": 41}, {"community_owned_date": 1230918405, "body": "<p><strong>Opinion:</strong> Data driven design puts the cart before the horse. It should be eliminated from our thinking forthwith.</p>\n\n<p>The vast majority of software isn't about the data, it's about the business problem we're trying to solve for our customers. It's about a <em>problem domain</em>, which involves objects, rules, flows, cases, and relationships. </p>\n\n<p>When we start our design with the data, and model the rest of the system after the data and the relationships between the data (tables, foreign keys, and x-to-x relationships), we constrain the entire application to how the data is stored in and retrieved from the database. Further, we expose the database architecture to the software.</p>\n\n<p>The database schema is an implementation detail. We should be free to change it without having to significantly alter the design of our software at all. The business layer should never have to know how the tables are set up, or if it's pulling from a view or a table, or getting the table from dynamic SQL or a stored procedure. And that type of code should <strong><em>never</em></strong> appear in the presentation layer.</p>\n\n<p>Software is about solving business problems. We deal with users, cars, accounts, balances, averages, summaries, transfers, animals, messsages, packages, carts, orders, and all sorts of other real tangible objects, and the actions we can perform on them. We need to <em>save</em>, <em>load</em>, <em>update</em>, <em>find</em>, and <em>delete</em> those items as needed. Sometimes, we have to do those things in special ways. </p>\n\n<p>But there's no real compelling reason that we should take the work that should be done in the database and move it away from the data and put it in the source code, potentially on a separate machine (introducing network traffic and degrading performance). Doing so means turning our backs on the decades of work that has already been done to improve the performance of stored procedures and functions built into databases. The argument that stored procedures introduce \"yet another API\" to be manged is specious: of course it does; that API is a facade that shields you from the database schema, including the intricate details of primary and foreign keys, transactions, cursors, and so on, and it prevents you from having to splice SQL together in your source code.</p>\n\n<p>Put the horse back in front of the cart. Think about the problem domain, and design the solution around it. Then, derive the data from the problem domain. </p>\n", "answer_id": 407532, "tags": [], "down_vote_count": 5, "last_activity_date": 1230918405, "comments": [{"body": "I agree with the principal, but the problem is in real world IT development you often have existing data stores that you must make use of - while total constraint to existing code might be bad you can save a ton of development effort if you conform to data standards that exist when you can.", "edited": false, "comment_id": 237125, "creation_date": 1231133332, "score": 1, "owner": {"display_name": "Kendall Helmstetter Gelner", "reputation": 59340, "user_id": 6330, "user_type": "registered", "accept_rate": 80}}, {"body": "Hey, someone who understands the real purpose of stored procedures!", "edited": false, "comment_id": 259096, "creation_date": 1231783479, "score": 0, "owner": {"display_name": "Lurker Indeed", "reputation": 956, "user_id": 16951, "user_type": "registered", "accept_rate": 80}}, {"body": "Hmmm.  Take the data out of a system and what do you have?  A system that computes nothing.  Put bad data into your system and what happens?  Crash.  Analogy: Bake your bricks (create strong data types) and mix your cement (enforce the constraints), then design/build your system with perfect blocks.", "edited": false, "comment_id": 570738, "creation_date": 1239936800, "score": 2, "owner": {"display_name": "Triynko", "reputation": 6695, "user_id": 88409, "user_type": "registered", "accept_rate": 45}}], "creation_date": 1230918405, "comment_count": 3, "score": 5, "owner": {"display_name": "Mike Hofer", "reputation": 7420, "user_id": 47580, "user_type": "registered", "accept_rate": 98}, "is_accepted": false, "up_vote_count": 10}, {"community_owned_date": 1230919233, "body": "<p><strong>PHP sucks ;-)</strong></p>\n\n<p>The proof is in the pudding.</p>\n", "answer_id": 407569, "tags": [], "down_vote_count": 57, "last_activity_date": 1230919233, "creation_date": 1230919233, "comment_count": 0, "score": 268, "owner": {"display_name": "Doubting Thomas", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 325}, {"community_owned_date": 1230919521, "body": "<p><strong>You need to watch out for Object-Obsessed Programmers.</strong></p>\n\n<p>e.g. if you write a class that models built-in types such as ints or floats, you may be an object-obsessed programmer.</p>\n", "answer_id": 407583, "tags": [], "down_vote_count": 0, "last_activity_date": 1230919521, "comments": [{"body": "If your language claims to be OO but has built-in types that are syntactically and semantically different from objects, and you think this is just fine, you may be a Java or C++ programmer.", "edited": false, "comment_id": 232771, "creation_date": 1230927208, "score": 2, "owner": {"display_name": "Barry Brown", "reputation": 10921, "user_id": 17312, "user_type": "registered", "accept_rate": 70}}, {"body": "@Barry!  What about us Objective-C programmers!  That might be us too!", "edited": false, "comment_id": 237128, "creation_date": 1231133405, "score": 0, "owner": {"display_name": "Kendall Helmstetter Gelner", "reputation": 59340, "user_id": 6330, "user_type": "registered", "accept_rate": 80}}, {"body": "C++ is multiparadigm, and as such it can decide to use whatever types it wants :P", "edited": false, "comment_id": 237946, "creation_date": 1231165754, "score": 1, "owner": {"display_name": "David Rodr\u00edguez - dribeas", "reputation": 137526, "user_id": 36565, "user_type": "registered"}}, {"body": "Object orientation is a means to a goal and not a goal in and of itself.", "edited": false, "comment_id": 296229, "creation_date": 1232964663, "score": 6, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}], "creation_date": 1230919521, "comment_count": 4, "score": 33, "owner": {"display_name": "Ferruccio", "reputation": 59500, "user_id": 4086, "user_type": "registered", "accept_rate": 89}, "is_accepted": false, "up_vote_count": 33}, {"community_owned_date": 1230920848, "body": "<p><strong>Print statements are a valid way to debug code</strong></p>\n\n<p>I believe it is perfectly fine to debug your code by littering it with <code>System.out.println</code> (or whatever print statement works for your language).  Often, this can be quicker than debugging, and you can compare printed outputs against other runs of the app.</p>\n\n<p>Just make sure to remove the print statements when you go to production (or better, turn them into logging statements)</p>\n", "is_accepted": false, "tags": [], "answer_id": 407637, "down_vote_count": 12, "last_activity_date": 1230929119, "creation_date": 1230920848, "comment_count": 0, "score": 488, "owner": {"display_name": "David Koelle", "reputation": 11418, "user_id": 2197, "user_type": "registered", "accept_rate": 77}, "last_editor": {"display_name": "David Koelle", "reputation": 11418, "user_id": 2197, "user_type": "registered", "accept_rate": 77}, "last_edit_date": 1230929119, "up_vote_count": 500}, {"community_owned_date": 1230924312, "body": "<p>I think that using regions in C# is totally acceptable to collapse your code while in VS. Too many people try to say it hides your code and makes it hard to find things. But if you use them properly they can be very helpful to identify sections of code.</p>\n", "answer_id": 407790, "tags": [], "down_vote_count": 1, "last_activity_date": 1230924312, "comments": [{"body": "IMHO Regions are great for one thing... visualizing code rot.", "edited": false, "comment_id": 232912, "creation_date": 1230930214, "score": 0, "owner": {"display_name": "Gavin Miller", "reputation": 25223, "user_id": 33226, "user_type": "registered", "accept_rate": 82}}, {"body": "Hah LFSR.  Jeremy, your code is too big.", "edited": false, "comment_id": 233110, "creation_date": 1230935557, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "Never gotten used to them, don&#39;t use them, but it may just be me.", "edited": false, "comment_id": 296930, "creation_date": 1232984324, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "Regions is the thing I miss most about VS (I use Eclipse). so instead of using regions, we make Method that have calls to methods that have calls to methods............. just so we can read the darned things. Regions are GOOD! +1", "edited": false, "comment_id": 511560, "creation_date": 1238440652, "score": 0, "owner": {"display_name": "WolfmanDragon", "reputation": 3819, "user_id": 13491, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1230924312, "comment_count": 4, "score": 6, "owner": {"display_name": "Jeremy Reagan", "reputation": 683, "user_id": 18411, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1230924409, "body": "<p><strong>Relational databases are awful for web applications.</strong></p>\n\n<p>For example:</p>\n\n<ul>\n<li>threaded comments</li>\n<li>tag clouds</li>\n<li>user search</li>\n<li>maintaining record view counts</li>\n<li>providing undo / revision tracking</li>\n<li>multi-step wizards</li>\n</ul>\n", "is_accepted": false, "tags": [], "answer_id": 407796, "down_vote_count": 2, "last_activity_date": 1231520865, "comments": [{"body": "+1 always surprised that OODBs didn&#39;t take off for web apps", "edited": false, "comment_id": 232658, "creation_date": 1230925205, "score": 0, "owner": {"display_name": "user23743", "user_type": "does_not_exist"}}, {"body": "The reason OODB didn&#39;t take off for web apps is because web apps are the single area where scalability and speed matter most - and OODB fall flat when load gets high.   That&#39;s why MySQL took off instead of something more robust like Postgres, because of sheer read speed and scalability.", "edited": false, "comment_id": 237131, "creation_date": 1231133503, "score": 1, "owner": {"display_name": "Kendall Helmstetter Gelner", "reputation": 59340, "user_id": 6330, "user_type": "registered", "accept_rate": 80}}, {"body": "kendall, that&#39;s just trash. the biggest databases in the world have traditionally been oodbs. they handle all kinds of workload.", "edited": false, "comment_id": 553298, "creation_date": 1239530543, "score": 1, "owner": {"display_name": "nes1983", "reputation": 7768, "user_id": 52573, "user_type": "registered", "accept_rate": 85}}, {"body": "Only deep ignorance can prevent someone to implement such things even in SQL, which is a badly designed language and not faithful to relational data model.", "edited": false, "comment_id": 1559125, "creation_date": 1257467313, "score": 0, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}], "creation_date": 1230924409, "comment_count": 4, "score": 8, "owner": {"display_name": "Mike Judge", "user_type": "does_not_exist"}, "last_editor": {"display_name": "Alex B", "reputation": 14455, "user_id": 6180, "user_type": "registered", "accept_rate": 83}, "last_edit_date": 1231520865, "up_vote_count": 10}, {"community_owned_date": 1230924611, "body": "<p>To Be A Good Programmer really requires working in multiple aspects of the field:  Application development, Systems (Kernel) work, User Interface Design, Database, and so on.  There are certain approaches common to all, and certain approaches that are specific to one aspect of the job.  You need to learn how to program Java like a Java coder, not like a C++ coder and vice versa.  User Interface design is really hard, and uses a different part of your brain than coding, but implementing that UI in code is yet another skill as well.  It is not just that there is no \"one\" approach to coding, but there is not just one type of coding.</p>\n", "answer_id": 407802, "tags": [], "down_vote_count": 1, "last_activity_date": 1230924611, "creation_date": 1230924611, "comment_count": 0, "score": 2, "owner": {"display_name": "admiyo", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1230926535, "body": "<p>Not very controversial AFAIK but...\n<strong>AJAX was around way before the term was coined and everyone needs to 'let it go'.</strong>  People were using it for all sorts of things.  No one really cared about it though.</p>\n\n<p>Then suddenly POW!  Someone coined the term and everyone jumped on the AJAX bandwagon.  Suddenly people are now experts in AJAX, as if 'experts' in dynamically loading data weren't around before.  I think its one of the biggest contributing factors that is leading to the brutal destruction of the internet.  That and \"Web 2.0\".</p>\n", "answer_id": 407880, "tags": [], "down_vote_count": 0, "last_activity_date": 1230926535, "comments": [{"body": "Couldn&#39;t agree with this more! It shows just how fashion conscious our industry really is.  When I looked into what all the AJAX fuss was about I discovered I had already been doing it for 2 years.  But it takes a marketing style buzzword to make stuff happen.", "edited": false, "comment_id": 232984, "creation_date": 1230931486, "score": 1, "owner": {"display_name": "AnthonyWJones", "reputation": 134121, "user_id": 17516, "user_type": "registered", "accept_rate": 79}}, {"body": "A vision on the history of AJAX: <a href=\"http://www.theregister.co.uk/2008/11/27/microsoft_ignored_ajax/\" rel=\"nofollow\">theregister.co.uk/2008/11/27/microsoft_ignored_ajax</a>", "edited": false, "comment_id": 233798, "creation_date": 1230969258, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "I remember when it was called DHTML :P", "edited": false, "comment_id": 252674, "creation_date": 1231525303, "score": 1, "owner": {"display_name": "Kronikarz", "reputation": 1394, "user_id": 1536, "user_type": "registered", "accept_rate": 58}}], "creation_date": 1230926535, "comment_count": 3, "score": 5, "owner": {"display_name": "Dalin Seivewright", "reputation": 913, "user_id": 29053, "user_type": "registered", "accept_rate": 87}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1230927822, "body": "<p>Not everything needs to be encapsulated into its own method. Some times it is ok to have a method do more then one thing.</p>\n", "answer_id": 407932, "tags": [], "down_vote_count": 3, "last_activity_date": 1230927822, "comments": [{"body": "reminds me of an old manager of mine who abstracted himself out of a job.  He spent months abstracting an app to make it &quot;perfect&quot; but in the end got nothing done.", "edited": false, "comment_id": 378860, "creation_date": 1235083056, "score": 0, "owner": {"display_name": "Neil N", "reputation": 15715, "user_id": 55164, "user_type": "registered", "accept_rate": 93}}], "creation_date": 1230927822, "comment_count": 1, "score": 0, "owner": {"display_name": "Jeremy Reagan", "reputation": 683, "user_id": 18411, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1230928117, "body": "<p><strong>You must know how to type to be a programmer.</strong></p>\n\n<p>It's controversial among people who don't know how to type, but who insist that they can two-finger hunt-and-peck as fast as any typist, or that they don't really need to spend that much time typing, or that Intellisense relieves the need to type...</p>\n\n<p>I've never met anyone who <em>does</em> know how to type, but insists that it doesn't make a difference.</p>\n\n<p>See also:  <a href=\"http://steve-yegge.blogspot.com/2008/09/programmings-dirtiest-little-secret.html\" rel=\"nofollow\">Programming's Dirtiest Little Secret</a></p>\n", "answer_id": 407939, "tags": [], "down_vote_count": 10, "last_activity_date": 1230928117, "comments": [{"body": "I know how to type (was an army teleprinterist) but I insist it makes no difference whatsoever.", "edited": false, "comment_id": 232965, "creation_date": 1230931034, "score": 1, "owner": {"display_name": "Nemanja Trifunovic", "reputation": 19014, "user_id": 8899, "user_type": "registered"}}, {"body": "Nemanja-&gt;&quot;no difference whatsoever&quot;?! I just got 70wpm on an online test.  I could see how someone could scrape by at 20-30wpm, but if they are using two fingers, plugging away at 5wpm (yes, I&#39;ve worked with people like that), it&#39;s holding them back.", "edited": false, "comment_id": 233045, "creation_date": 1230933803, "score": 4, "owner": {"display_name": "KeyserSoze", "reputation": 2225, "user_id": 14116, "user_type": "registered"}}, {"body": "No difference whatsoever. I don&#39;t even know what is my current wpm level, because i completely lost interest in it. Surely, it is useful to type quickly when you are writing documentation or ansering e-mails, but for coding? Nah. Thinking takes time, typing is insignificant.", "edited": false, "comment_id": 233074, "creation_date": 1230934356, "score": 7, "owner": {"display_name": "Nemanja Trifunovic", "reputation": 19014, "user_id": 8899, "user_type": "registered"}}, {"body": "Well, if your typing is so bad that you are thinking about typing, that&#39;s time you could have spent thinking about the problem you are working on.  And if your typing speed is a bottleneck in recording ideas, you may have to throttle your thinking until your output buffer is flushed.", "edited": false, "comment_id": 233397, "creation_date": 1230944502, "score": 2, "owner": {"display_name": "KeyserSoze", "reputation": 2225, "user_id": 14116, "user_type": "registered"}}, {"body": "@Nemanja Trifunovic - I hear what you are saying but, respectfully, I think you are dead wrong. Being able to type makes a huge difference.", "edited": false, "comment_id": 234057, "creation_date": 1230990217, "score": 2, "owner": {"display_name": "jwpfox", "reputation": 1170, "user_id": 18665, "user_type": "registered"}}, {"body": "@keysersoze: I have never worked on a project when typing speed made any difference. Even when I write code from scratch and not fighting some crazy frameworks, a good editor makes typing skill almost worthless. With vim I usually just type a couple of letters before pressing Ctrl+P.", "edited": false, "comment_id": 235247, "creation_date": 1231039138, "score": 1, "owner": {"display_name": "Nemanja Trifunovic", "reputation": 19014, "user_id": 8899, "user_type": "registered"}}, {"body": "@duncan: No hard feelings, but you are dead wrong - it makes no difference :)", "edited": false, "comment_id": 235248, "creation_date": 1231039174, "score": 1, "owner": {"display_name": "Nemanja Trifunovic", "reputation": 19014, "user_id": 8899, "user_type": "registered"}}, {"body": "Even though I never learned to touch type my typing is very quick, and optimized towards writing code - not english.  I always felt touch typists must be at a little bit of disadvantage, considering the heavy use of symbols in coding which touch typing is not optimized for.", "edited": false, "comment_id": 237093, "creation_date": 1231130909, "score": 1, "owner": {"display_name": "Kendall Helmstetter Gelner", "reputation": 59340, "user_id": 6330, "user_type": "registered", "accept_rate": 80}}, {"body": "I know how to type. After twenty years of typing my index and middle fingers know where all the keys are, so I don&#39;t have to look down at keyboard all that often. But I had this argument in a different context long back: a colleague argued that camel case is [contd...]", "edited": false, "comment_id": 243699, "creation_date": 1231316513, "score": 0, "owner": {"display_name": "Miserable Variable", "reputation": 19097, "user_id": 18573, "user_type": "registered", "accept_rate": 58}}, {"body": "[...contd] better then underscores because it is easier to type. My argument is that you are not supposed to write code at speed of typing.", "edited": false, "comment_id": 243700, "creation_date": 1231316545, "score": 0, "owner": {"display_name": "Miserable Variable", "reputation": 19097, "user_id": 18573, "user_type": "registered", "accept_rate": 58}}, {"body": "I don&#39;t mind looking at the keyboard once in a while to relieve eye strain. You HAVE to change your focus at times. If you are a good typist, chances are you either have glasses or contacts.", "edited": false, "comment_id": 255329, "creation_date": 1231630037, "score": 0, "owner": {"display_name": "Andrei Taranchenko", "reputation": 828, "user_id": 53687, "user_type": "registered", "accept_rate": 100}}, {"body": "While I can&#39;t touch type and confirm this I do suspect that it helps. I have encountered many situations where slow typing speed gets in the way. Sadly learning is mind-numbingly dull. Yes, I know there are all kinds of fun games to help you, but it&#39;s still dull for me. Still trying though...", "edited": false, "comment_id": 258018, "creation_date": 1231760195, "score": 0, "owner": {"display_name": "Manos Dilaverakis", "reputation": 4284, "user_id": 41348, "user_type": "registered", "accept_rate": 93}}, {"body": "+1. I repeatedly see people make tons of mistake because they are watching their keyboard instead of watching the code on their screen. Most common are syntax and code-formatting issues, but also real bugs that aren&#39;t caught by the compiler.", "edited": false, "comment_id": 410021, "creation_date": 1235818336, "score": 2, "owner": {"display_name": "flodin", "reputation": 2978, "user_id": 66620, "user_type": "registered", "accept_rate": 86}}, {"body": "You must be using some ridiculously verbose language like Java.  Thinking is the bottleneck when programming, not typing.", "edited": false, "comment_id": 738972, "creation_date": 1243734641, "score": 1, "owner": {"display_name": "nosatalian", "reputation": 1956, "user_id": 110296, "user_type": "registered", "accept_rate": 83}}, {"body": "I agree here.  Though thinking is important, watching the screen is key.", "edited": false, "comment_id": 846427, "creation_date": 1245799651, "score": 1, "owner": {"display_name": "Chet", "reputation": 5059, "user_id": 112614, "user_type": "registered", "accept_rate": 82}}, {"body": "I agree that thought is the limiting factor behind programming, but who codes from the hip so much that they design the software as they type it? While I&#39;m coding/typing, I have largely already designed the software... as a result, my thinking easily keeps up with my 80wpm+ typing speed.", "edited": false, "comment_id": 980001, "creation_date": 1248201223, "score": 0, "owner": {"display_name": "SnOrfus", "reputation": 7513, "user_id": 48553, "user_type": "registered", "accept_rate": 81}}, {"body": "I can&#39;t think faster then I type. I am hunt and peck, using six fingers and the thumbs. Problem is not that I wouldn&#39;t benefit from ten finger, but that trying to train it slows me down to much.", "edited": false, "comment_id": 1319684, "creation_date": 1253779212, "score": 1, "owner": {"display_name": "peterchen", "reputation": 24528, "user_id": 31317, "user_type": "registered", "accept_rate": 82}}, {"body": "The strange thing is that hunters and peckers are just a hair&#39;s breadth away from full blown ten finger typing. After using a keyboard for years you know exactly where the keys are - you just don&#39;t know where your hands are without looking. And that&#39;s only a little bit of technique. BTW: using a Kinesis contoured keyboard helps a LOT. And using an english keyboard instead of a localized one.", "edited": false, "comment_id": 1791438, "creation_date": 1260561759, "score": 0, "owner": {"display_name": "hstoerr", "reputation": 7437, "user_id": 21499, "user_type": "registered", "accept_rate": 55}}, {"body": "Yeah, Steve Yegge surely DOES know how to type...", "edited": false, "comment_id": 1809713, "creation_date": 1260863228, "score": 0, "owner": {"display_name": "Headcrab", "reputation": 1629, "user_id": 45269, "user_type": "registered", "accept_rate": 65}}, {"body": "@hstoerr: When I first took a typing course, in sixth grade, I cheated and looked at my fingers.  I was the fastest one in the class, the star pupil.  Only I didn&#39;t really know how to type.  Luckily, in seventh grade, I took typing again and this time did it right.  It&#39;s the only useful thing I learned in junior high.  (Well, that and &quot;Always carry your books in a backpack so they can&#39;t get knocked out of your hands and scattered down the hall.&quot;)", "edited": false, "comment_id": 1815016, "creation_date": 1260911871, "score": 2, "owner": {"display_name": "Kyralessa", "reputation": 97118, "user_id": 5486, "user_type": "registered", "accept_rate": 59}}, {"body": "The way I look at it, if you don&#39;t know how to type, how much programming experience could you really have? So yeah, I think a good programmer is one who knows how to type.", "edited": false, "comment_id": 2282240, "creation_date": 1266875497, "score": 0, "owner": {"display_name": "NickC", "reputation": 17866, "user_id": 143295, "user_type": "registered", "accept_rate": 73}}, {"body": "I disagree. I never took any typing lessons, but spending most of my life behind a computer has made me remember where all the keys are so I can quickly type without looking at the keyboard. Maybe my hands aren&#39;t placed in the optimal position as you would learn in a typing lesson, or I don&#39;t use a DVORAK keyboard, but my typing is fine. And I sure don&#39;t want to type faster than I can think.", "edited": false, "comment_id": 3482435, "creation_date": 1280329368, "score": 0, "owner": {"display_name": "Dennis", "reputation": 9699, "user_id": 72321, "user_type": "registered", "accept_rate": 77}}, {"body": "I generally type with 4 fingers or so and I&#39;ve tested my typing speed - 90 wpm.", "edited": false, "comment_id": 3658736, "creation_date": 1282041865, "score": 0, "owner": {"display_name": "Jake Petroules", "reputation": 8046, "user_id": 343845, "user_type": "registered", "accept_rate": 98}}, {"body": "Since when does wpm matter when programming? Programming requires thought, not just mindless typing.", "edited": false, "comment_id": 3903063, "creation_date": 1284391333, "score": 0, "owner": {"display_name": "pondpad", "reputation": 303, "user_id": 395886, "user_type": "unregistered", "accept_rate": 82}}, {"body": "Typing is mindless by definition.  If you&#39;re not typing, but hunt-and-pecking, you&#39;re using up brain cells to type that you could otherwise be using to think about your program.", "edited": false, "comment_id": 3908425, "creation_date": 1284434520, "score": 0, "owner": {"display_name": "Kyralessa", "reputation": 97118, "user_id": 5486, "user_type": "registered", "accept_rate": 59}}, {"body": "-1 for dead wrong: you don&#39;t need to type at all to be a programmer. Then, +2 for what it really means: you must know how to type to be a <b><i>good</i></b> programmer. When I interview people I&#39;d pass immediately if they can&#39;t touch type.", "edited": false, "comment_id": 3960907, "creation_date": 1284921306, "score": 0, "owner": {"display_name": "Geoffrey Zheng", "reputation": 3934, "user_id": 62479, "user_type": "registered", "accept_rate": 68}}], "creation_date": 1230928117, "comment_count": 26, "score": 95, "owner": {"display_name": "Kyralessa", "reputation": 97118, "user_id": 5486, "user_type": "registered", "accept_rate": 59}, "is_accepted": false, "up_vote_count": 105}, {"community_owned_date": 1230929280, "body": "<p>Every developer should spend several weeks, or even months, developing paper-based systems <em>before</em> they start building electronic ones. They should also then be forced to <em>use</em> their systems.</p>\n\n<p>Developing a good paper-based system is <strong>hard work</strong>. It forces you to take into account human nature (cumbersome processes get ignored, ones that are too complex tend to break down), and teaches you to appreciate the value of simplicity (new work goes in <strong>this</strong> tray, work for QA goes in <strong>this</strong> tray, archiving goes in <strong>this</strong> box).</p>\n\n<p>Once you've worked out how to build a system on paper, it's often a lot easier to build an effective computer system - one that people will actually want to (and be able to) <em>use</em>.</p>\n\n<p>The systems we develop are not manned by an army of perfectly-trained automata; real people use them, real people who are trained by managers who are also real people and have far too little time to waste training them how to jump through your hoops.</p>\n\n<p>In fact, for my second point:</p>\n\n<p>Every developer should be required to run an interactive training course to show users how to use their software.</p>\n", "answer_id": 407973, "tags": [], "down_vote_count": 3, "last_activity_date": 1230929280, "comments": [{"body": "Programming has a lot in common with cleaning your room.  The same principles of organization apply.", "edited": false, "comment_id": 236379, "creation_date": 1231099862, "score": 1, "owner": {"display_name": "Alex Baranosky", "reputation": 13127, "user_id": 47630, "user_type": "registered", "accept_rate": 80}}, {"body": "Maybe... rather than dealing with your accounts as bits of paper you abstract them into folders, and encapsulate them in a filing cabinet or box. If you find a way to unit test laundry, let me know!", "edited": false, "comment_id": 240981, "creation_date": 1231251137, "score": 0, "owner": {"display_name": "Keith Williams", "reputation": 1249, "user_id": 50189, "user_type": "registered", "accept_rate": 64}}, {"body": "Generally having a plan before building a web site/ desktop app/ house/ nuclear sub is always a good idea!  Mapping things out, either with a sketches on a pad of paper, a wireframe, visio, work flow, mind map, whatever. And the training users...I see this missed by even the most brillant programmers.  User acceptance in the long run determins your apps success.  If they don&#39;t understand it, no matter what it does or how well it is done, your app will fail.", "edited": false, "comment_id": 857804, "creation_date": 1245966397, "score": 0, "owner": {"display_name": "infocyde", "reputation": 2260, "user_id": 99392, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1230929280, "comment_count": 3, "score": 12, "owner": {"display_name": "Keith Williams", "reputation": 1249, "user_id": 50189, "user_type": "registered", "accept_rate": 64}, "is_accepted": false, "up_vote_count": 15}, {"community_owned_date": 1230929480, "body": "<p><strong>\"Googling it\" is okay!</strong></p>\n\n<p>Yes, I know it offends some people out there that their years of intense memorization and/or glorious stacks of programming books are starting to fall by the wayside to a resource that anyone can access within seconds, but you shouldn't hold that against people that use it.</p>\n\n<p>Too often I hear googling answers to problems the result of criticism, and it really is without sense.  First of all, it must be conceded that everyone needs materials to reference.  You don't know everything and you will need to look things up.  Conceding that, does it really matter where you got the information?  Does it matter if you looked it up in a book, looked it up on Google, or heard it from a talking frog that you hallucinated?  No.  A right answer is a right answer.</p>\n\n<p>What is important is that you understand the material, use it as the means to an end of a successful programming solution, and the client/your employer is happy with the results.</p>\n\n<p>(although if you are getting answers from hallucinatory talking frogs, you should probably get some help all the same)</p>\n", "is_accepted": false, "tags": [], "answer_id": 407985, "down_vote_count": 3, "last_activity_date": 1230930759, "creation_date": 1230929480, "comment_count": 0, "score": 712, "owner": {"display_name": "Gene Roberts", "reputation": 1119, "user_id": 47544, "user_type": "registered"}, "last_editor": {"display_name": "Gene Roberts", "reputation": 1119, "user_id": 47544, "user_type": "registered"}, "last_edit_date": 1230930759, "up_vote_count": 715}, {"community_owned_date": 1230933199, "body": "<p><strong>If you have any idea how to program you are not fit to place a button on a form</strong></p>\n\n<p>Is that controversial enough? ;)</p>\n\n<p>No matter how hard we try, it's almost impossible to have appropriate empathy with 53 year old Doris who has to use our order-entry software.  We simply cannot grasp the mental model of what she imagines is going on inside the computer, because we don't need to imagine: we <em>know</em> whats going on, or have a very good idea.</p>\n\n<p><a href=\"http://www.interaction-design.org/encyclopedia/interaction%5Fdesign.html\" rel=\"nofollow\">Interaction Design</a> should be done by non-programmers.  Of course, this is never actually going to happen.  Contradictorily I'm quite glad about that; I like UI design even though deep down I know I'm unsuited to it.</p>\n\n<p>For further info, read the book <a href=\"http://www.cooper.com/insights/books/\" rel=\"nofollow\">The Inmates Are Running the Asylum</a>.  Be warned, I found this book upsetting and insulting; it's a difficult read if you are a developer that cares about the user's experience.</p>\n", "is_accepted": false, "tags": [], "answer_id": 408120, "down_vote_count": 7, "last_activity_date": 1248835326, "comments": [{"body": "Excellent point. I re-learn this point the hard way every time I try to teach my parents (in their early 70s) how to use something on the computer or their cell phones.", "edited": false, "comment_id": 262074, "creation_date": 1231867226, "score": 0, "owner": {"display_name": "MusiGenesis", "reputation": 52525, "user_id": 14606, "user_type": "registered", "accept_rate": 74}}, {"body": "I disagree. I don&#39;t think they are mutually exclusive. To take the opposite, people who have never used a computer before are the best interface designers.", "edited": false, "comment_id": 262565, "creation_date": 1231876065, "score": 4, "owner": {"display_name": "James McMahon", "reputation": 18241, "user_id": 20774, "user_type": "registered", "accept_rate": 92}}, {"body": "I disagree, but only in the sense that most interface design decisions seem to be made by management.", "edited": false, "comment_id": 263360, "creation_date": 1231890952, "score": 0, "owner": {"display_name": "Dave", "reputation": 501, "user_id": 28757, "user_type": "registered", "accept_rate": 91}}, {"body": "I&#39;d say they&#39;re definitely not mutually exclusive. I would more likely say that management should never decide where to put the button. I&#39;ve had some of the most complicated interfaces ever created that way.", "edited": false, "comment_id": 523345, "creation_date": 1238697780, "score": 1, "owner": {"display_name": "Sam Erwin", "reputation": 320, "user_id": 18224, "user_type": "registered"}}, {"body": "I wish I could upvote this twice. Yes, it&#39;s not universally true, but programmers tend to have the completely wrong mindset to design UI. We are too forgiving of interface flaws when it gives power and flexibility that end users don&#39;t need.", "edited": false, "comment_id": 635103, "creation_date": 1241549728, "score": 0, "owner": {"display_name": "Robert J. Walker", "reputation": 4351, "user_id": 4287, "user_type": "registered", "accept_rate": 96}}, {"body": "I hope you don&#39;t let Doris take the wheel when you start up your IDE...", "edited": false, "comment_id": 689794, "creation_date": 1242742637, "score": 0, "owner": {"display_name": "James Jones", "reputation": 3758, "user_id": 84088, "user_type": "registered", "accept_rate": 76}}, {"body": "That&#39;s one of my favorite books. Should be a must read - particularly for programmers who think they are web designers...", "edited": false, "comment_id": 789617, "creation_date": 1244731798, "score": 0, "owner": {"display_name": "CMPalmer", "reputation": 5270, "user_id": 14894, "user_type": "registered", "accept_rate": 88}}, {"body": "This is like saying &quot;If you know anything about how a car works, you should not be allowed to design the interior.&quot; There is an entire discipline around UI design and if you are doing things just based on your mental model of some imaginary elderly user, then you are not doing it correctly. No one can account for everyone&#39;s mental model. Applying extensive research, best practices, statistical analysis, and user testing are the ways to get to your desired result. Programmers can learn this discipline too.", "edited": false, "comment_id": 818301, "creation_date": 1245269703, "score": 0, "owner": {"display_name": "Ben Reierson", "reputation": 679, "user_id": 83302, "user_type": "registered"}}, {"body": "@Ben: no you can&#39;t account for &quot;everyones&quot; mental model but its a sure thing that the developers mental model is entirely different from everyone else.  Thats why an Interaction design professional will invent a person that best represents the typical user.  If a system has users of very different persona (e.g., in addition to Doris we may invent Jeff the IT admin guy) then good interaction design will use Jeff as the target audience for the tasks he is likely to engage in.", "edited": false, "comment_id": 818657, "creation_date": 1245273944, "score": 0, "owner": {"display_name": "AnthonyWJones", "reputation": 134121, "user_id": 17516, "user_type": "registered", "accept_rate": 79}}, {"body": "Interaction Design by users is what gave MySpace its reputation for vomit-inducing pages.", "edited": false, "comment_id": 956151, "creation_date": 1247757534, "score": 9, "owner": {"display_name": "Kelly S. French", "reputation": 8435, "user_id": 135078, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1230933199, "comment_count": 10, "score": 40, "owner": {"display_name": "AnthonyWJones", "reputation": 134121, "user_id": 17516, "user_type": "registered", "accept_rate": 79}, "last_editor": {"display_name": "eswald", "reputation": 4322, "user_id": 21229, "user_type": "registered"}, "last_edit_date": 1248835326, "up_vote_count": 47}, {"community_owned_date": 1230933921, "body": "<p><strong>Don't use stored procs in your database.</strong></p>\n\n<p>The reasons they were originally good - security, abstraction, single connection - can all be done in your middle tier with ORMs that integrate lots of other advantages.</p>\n\n<p>This one is definitely controversial.  Every time I bring it up, people tear me apart.</p>\n", "is_accepted": false, "tags": [], "answer_id": 408141, "down_vote_count": 2, "last_activity_date": 1346549927, "comments": [{"body": "I completely agree with you. I tell management that it&#39;s yet another programming language. C#, JavaScript, HTML, CSS, and now Transact-SQL/PLSQL? (html and css are not really languages, just more syntax to know (and css is a bitch to do well)).", "edited": false, "comment_id": 233444, "creation_date": 1230947192, "score": 0, "owner": {"display_name": "Christopher Mahan", "reputation": 4630, "user_id": 479, "user_type": "registered", "accept_rate": 68}}, {"body": "I worked on a project that I consider to be an exception to this rule, but it did mean constantly hitting against all the reasons I mostly agree with you. They&#39;re not a good solution, 99% of the time.", "edited": false, "comment_id": 250618, "creation_date": 1231471058, "score": 0, "owner": {"display_name": "Marcus Downing", "reputation": 5723, "user_id": 1000, "user_type": "registered", "accept_rate": 68}}, {"body": "SQL is just another language?  Tough to reason with that mindset.", "edited": false, "comment_id": 259076, "creation_date": 1231783245, "score": 0, "owner": {"display_name": "Lurker Indeed", "reputation": 956, "user_id": 16951, "user_type": "registered", "accept_rate": 80}}, {"body": "SPROCs eliminate SQL injection attacks. In MSSQL they are pre-compiled (and hence faster). @Christopher, can you give me the address of any websites that you built? I want to make some money :P.", "edited": false, "comment_id": 306905, "creation_date": 1233222667, "score": 0, "owner": {"display_name": "Jonathan C Dickinson", "reputation": 4450, "user_id": 24064, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1230933921, "comment_count": 4, "score": 11, "owner": {"display_name": "lfonlfonlfon", "user_type": "does_not_exist"}, "last_editor": {"display_name": "Bill the Lizard", "reputation": 182561, "user_id": 1288, "user_type": "registered", "accept_rate": 94}, "last_edit_date": 1346549927, "up_vote_count": 13}, {"community_owned_date": 1230934318, "body": "<p>QA should know the code (indirectly) better than development. QA gets paid to find things development didn't intend to happen, and they often do. :) (Btw, I'm a developer who just values good QA guys a whole bunch -- far to few of them... far to few).</p>\n", "answer_id": 408153, "tags": [], "down_vote_count": 0, "last_activity_date": 1230934318, "creation_date": 1230934318, "comment_count": 0, "score": 4, "owner": {"display_name": "sam", "reputation": 1801, "user_id": 42059, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1230934409, "body": "<p><strong>Programmers who don't code in their spare time for fun will never become as good as those that do.</strong></p>\n\n<p>I think even the smartest and most talented people will never become truly good programmers unless they treat it as more than a job. Meaning that they do little projects on the side, or just mess with lots of different languages and ideas in their spare time.</p>\n\n<p>(Note: I'm not saying good programmers do nothing else than programming, but they do more than program from 9 to 5)</p>\n", "is_accepted": false, "tags": [], "answer_id": 408158, "down_vote_count": 37, "last_activity_date": 1271543643, "creation_date": 1230934409, "comment_count": 0, "score": 877, "owner": {"display_name": "rustyshelf", "reputation": 19472, "user_id": 6044, "user_type": "registered", "accept_rate": 86}, "last_editor": {"display_name": "wvdschel", "reputation": 6491, "user_id": 2018, "user_type": "registered", "accept_rate": 86}, "last_edit_date": 1271543643, "up_vote_count": 914}, {"community_owned_date": 1230934670, "body": "<p>Exceptions considered harmful.</p>\n", "answer_id": 408164, "tags": [], "down_vote_count": 3, "last_activity_date": 1230934670, "comments": [{"body": "Checked exceptions.  Unchecked exceptions are fantastic and do a great job of stabilizing your app.", "edited": false, "comment_id": 252609, "creation_date": 1231523753, "score": 4, "owner": {"display_name": "Bill K", "reputation": 37999, "user_id": 12943, "user_type": "registered", "accept_rate": 90}}], "creation_date": 1230934670, "comment_count": 1, "score": 1, "owner": {"display_name": "Jim In Texas", "reputation": 810, "user_id": 15079, "user_type": "registered", "accept_rate": 77}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1230934793, "body": "<p><strong>Software Architects/Designers are Overrated</strong></p>\n\n<p>As a developer, I hate the idea of Software Architects. They are basically people that no longer code full time, read magazines and articles, and then tell you how to design software. Only people that actually write software full time for a living should be doing that. I don't care if you were the worlds best coder 5 years ago before you became an Architect, your opinion is useless to me.</p>\n\n<p>How's that for controversial?</p>\n\n<p>Edit (to clarify): I think most Software Architects make great Business Analysts (talking with customers, writing requirements, tests, etc), I simply think they have no place in designing software, high level or otherwise.</p>\n", "is_accepted": false, "tags": [], "answer_id": 408171, "down_vote_count": 19, "last_activity_date": 1231047956, "creation_date": 1230934793, "comment_count": 0, "score": 165, "owner": {"display_name": "rustyshelf", "reputation": 19472, "user_id": 6044, "user_type": "registered", "accept_rate": 86}, "last_editor": {"display_name": "rustyshelf", "reputation": 19472, "user_id": 6044, "user_type": "registered", "accept_rate": 86}, "last_edit_date": 1231047956, "up_vote_count": 184}, {"community_owned_date": 1230934843, "body": "<p>Although I'm in full favor of Test-Driven Development (TDD), I think there's a vital step before developers even start the full development cycle of prototyping a solution to the problem.</p>\n\n<p>We too often get caught up trying to follow our TDD practices for a solution that may be misdirected because we don't know the domain well enough. Simple prototypes can often elucidate these problems.</p>\n\n<p>Prototypes are great because you can quickly churn through and throw away more code than when you're writing tests first (sometimes). You can then begin the development process with a blank slate but a better understanding.</p>\n", "answer_id": 408172, "tags": [], "down_vote_count": 0, "last_activity_date": 1230934843, "comments": [{"body": "I don&#39;t know how controversial that opinion is. What you describe seems to be the well-known \u201cSpike Solution\u201d pattern <a href=\"http://c2.com/xp/SpikeSolution.html\" rel=\"nofollow\">c2.com/xp/SpikeSolution.html</a> and is a good pattern to have.", "edited": false, "comment_id": 557776, "creation_date": 1239682284, "score": 0, "owner": {"display_name": "bignose", "reputation": 7940, "user_id": 70157, "user_type": "registered", "accept_rate": 71}}], "creation_date": 1230934843, "comment_count": 1, "score": 4, "owner": {"display_name": "mtodd", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1230934935, "body": "<p><strong>\"Java Sucks\"</strong> - yeah, I know that opinion is definitely not held by all :)</p>\n\n<p>I have that opinion because the majority of Java applications I've seen are memory hogs, run slowly, horrible user interface and so on.</p>\n\n<p>G-Man</p>\n", "is_accepted": false, "tags": [], "answer_id": 408175, "down_vote_count": 19, "last_activity_date": 1231534233, "comments": [{"body": "I think what you&#39;re trying to say is Swing sucks (as in JAVA UIs). Java back ends don&#39;t suck at all...unless that&#39;s the controversial bit ;)", "edited": false, "comment_id": 233656, "creation_date": 1230958028, "score": 2, "owner": {"display_name": "rustyshelf", "reputation": 19472, "user_id": 6044, "user_type": "registered", "accept_rate": 86}}, {"body": "You don&#39;t have to be a Java partisan to appreciate an application like JEdit. Java has some serious crushing deficiencies, but so does every other language. Those of Java are just easier to recognize.", "edited": false, "comment_id": 233691, "creation_date": 1230960313, "score": 0, "owner": {"display_name": "dreftymac", "reputation": 9567, "user_id": 42223, "user_type": "registered", "accept_rate": 74}}, {"body": "+1 cause I agree, java sucks.", "edited": false, "comment_id": 292931, "creation_date": 1232777455, "score": 0, "owner": {"display_name": "UnkwnTech", "reputation": 26274, "user_id": 115, "user_type": "registered", "accept_rate": 98}}, {"body": "I a C# fanboy, but I admire quite a few Java apps as being very well done.", "edited": false, "comment_id": 359236, "creation_date": 1234556055, "score": 0, "owner": {"display_name": "Neil N", "reputation": 15715, "user_id": 55164, "user_type": "registered", "accept_rate": 93}}, {"body": "I think what you are trying to say is that the barrier for Java coding is so low that there are many sucky Java &quot;programmers&quot; out there writing complete crap.", "edited": false, "comment_id": 374813, "creation_date": 1235004267, "score": 9, "owner": {"display_name": "Lawrence Dol", "reputation": 33129, "user_id": 8946, "user_type": "registered", "accept_rate": 84}}, {"body": "I agree that most Java desktop apps I&#39;ve seen suck. But I wouldn&#39;t say the same of server apps.", "edited": false, "comment_id": 446777, "creation_date": 1236761482, "score": 1, "owner": {"display_name": "Sergio Acosta", "reputation": 6965, "user_id": 2954, "user_type": "registered", "accept_rate": 85}}, {"body": "You]re going to blame a programming language for &#39;horrible user interfaces&#39;? Surely that is a fault of the UI designer.  And while I&#39;m sure Java has its share of poorly coded software that runs slowly and consumes too much memory, it is not at all hard to write Java programs that run efficiently and use memory only as needed. Having worked on a Java based web crawler capable of crawling 100s of millions of URIs I can attest to this.", "edited": false, "comment_id": 738716, "creation_date": 1243723301, "score": 3, "owner": {"display_name": "Kris", "reputation": 9650, "user_id": 73652, "user_type": "registered", "accept_rate": 88}}, {"body": "Java as a programming language is lacking a lot of features that you really want to make your life simpler. Java as a development platform rocks, as it got a great set of libraries and a nice community.", "edited": false, "comment_id": 4488685, "creation_date": 1289504788, "score": 0, "owner": {"display_name": "Knubo", "reputation": 4433, "user_id": 217672, "user_type": "registered"}}, {"body": "Java does suck. Get to know .NET, Visual Studio, then you will never again want to code for Java.", "edited": false, "comment_id": 4949276, "creation_date": 1293113450, "score": 0, "owner": {"display_name": "Smur", "reputation": 1562, "user_id": 254131, "user_type": "registered", "accept_rate": 89}}], "creation_date": 1230934935, "comment_count": 9, "score": 47, "owner": {"display_name": "GeoffreyF67", "reputation": 3268, "user_id": 46782, "user_type": "registered", "accept_rate": 78}, "last_editor": {"display_name": "David Basarab", "reputation": 30732, "user_id": 2469, "user_type": "registered", "accept_rate": 98}, "last_edit_date": 1231534233, "up_vote_count": 66}, {"community_owned_date": 1230935155, "body": "<p><strong>Two lines of code is too many.</strong></p>\n\n<p>If a method has a second line of code, it is a code smell.  Refactor.</p>\n", "answer_id": 408183, "tags": [], "down_vote_count": 32, "last_activity_date": 1230935155, "comments": [{"body": "Or you could make your entire program one (reaaaly long) line of code. That&#39;s always fun.", "edited": false, "comment_id": 233490, "creation_date": 1230949481, "score": 3, "owner": {"display_name": "Kiv", "reputation": 12027, "user_id": 49559, "user_type": "registered", "accept_rate": 93}}, {"body": "BAKA!!  even in a functional language, like haskell, you can have several lines in a function!", "edited": false, "comment_id": 233502, "creation_date": 1230950061, "score": 0, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "When one combines the rule that a class should fit on the screen and every method has only one line a class can contain only approximately 7 lines of code.", "edited": false, "comment_id": 233513, "creation_date": 1230950535, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "I&#39;m amused that this is currently the lowest-ranked answer; I think I&#39;ve succeeded at the &quot;controversial&quot; part.", "edited": false, "comment_id": 234528, "creation_date": 1231008503, "score": 7, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "It is indeed controversial, so I up.", "edited": false, "comment_id": 236447, "creation_date": 1231102938, "score": 1, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "I agree completely, when will people see the light?  I use Perl so I don&#39;t know how to write a function with more than one line of code, also, what is this &quot;Refactor&quot; thing you speak of? :-O", "edited": false, "comment_id": 237086, "creation_date": 1231130473, "score": 6, "owner": {"display_name": "Robert Gamble", "reputation": 51437, "user_id": 25222, "user_type": "registered"}}, {"body": "You must be a functional programmer... but one line per function is still a little extreme ;)", "edited": false, "comment_id": 263743, "creation_date": 1231902634, "score": 3, "owner": {"display_name": "paxos1977", "reputation": 33012, "user_id": 14069, "user_type": "registered", "accept_rate": 79}}, {"body": "I&#39;m sorry this is nonsense. -1 from me", "edited": false, "comment_id": 267444, "creation_date": 1232009880, "score": 0, "owner": {"display_name": "Friedrich", "reputation": 4337, "user_id": 15068, "user_type": "registered", "accept_rate": 88}}, {"body": "It&#39;s not controversial - it&#39;s inane.", "edited": false, "comment_id": 374815, "creation_date": 1235004302, "score": 23, "owner": {"display_name": "Lawrence Dol", "reputation": 33129, "user_id": 8946, "user_type": "registered", "accept_rate": 84}}, {"body": "That depends on your definition of &quot;line&quot;. For some methods even a single line is too much.", "edited": false, "comment_id": 765466, "creation_date": 1244220927, "score": 1, "owner": {"display_name": "G B", "reputation": 1487, "user_id": 113644, "user_type": "registered", "accept_rate": 86}}, {"body": "No method I&#39;ve ever written (as far as I recall) has just one line of code =)", "edited": false, "comment_id": 1322328, "creation_date": 1253809248, "score": 0, "owner": {"display_name": "Jader Dias", "reputation": 27851, "user_id": 48465, "user_type": "registered", "accept_rate": 98}}, {"body": "int screwYou() { printf(&quot;This is balls...\\n&quot;); }", "edited": false, "comment_id": 1422182, "creation_date": 1255470034, "score": 0, "owner": {"display_name": "Jasarien", "reputation": 39277, "user_id": 76559, "user_type": "registered", "accept_rate": 92}}, {"body": "Typically, when I write a <i>VOID</i> dummy method, just due to formatting conventions, it takes at least two lines. Non-void functions typically take three lines. Of ocurse, like Kiv said, you can have 10.000 characters in a single line - so &quot;lines&quot; might not be the best metric for program size counting.", "edited": false, "comment_id": 1434885, "creation_date": 1255630677, "score": 0, "owner": {"display_name": "luiscubal", "reputation": 10472, "user_id": 32775, "user_type": "registered", "accept_rate": 92}}, {"body": "This is controversial because I do not think you can apply this type of statement to all languages.", "edited": false, "comment_id": 4057039, "creation_date": 1285771480, "score": 0, "owner": {"display_name": "atconway", "reputation": 6172, "user_id": 410937, "user_type": "registered", "accept_rate": 90}}, {"body": "@atconway: C++ fails, because you can&#39;t do anything useful in one statement. Perl fails because even one line is confusing.  (To all: there is sanity behind this, but I was going for shock value.)", "edited": false, "reply_to_user": {"display_name": "atconway", "reputation": 6172, "user_id": 410937, "user_type": "registered", "accept_rate": 90}, "comment_id": 4089558, "creation_date": 1286074606, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}], "creation_date": 1230935155, "comment_count": 15, "score": -12, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}, "is_accepted": false, "up_vote_count": 20}, {"community_owned_date": 1230935243, "body": "<p><strong>Classes should fit on the screen.</strong></p>\n\n<p>If you have to use the scroll bar to see all of your class, your class is too big.  </p>\n\n<p>Code folding and miniature fonts are cheating.</p>\n", "answer_id": 408185, "tags": [], "down_vote_count": 7, "last_activity_date": 1230935243, "comments": [{"body": "You must have a really large screen then. Do you also think, that class can have no more than 3 or 4 methods, because no more clearly fits on the 41 lines that fit on my screen. Voting up, because this is really controversial.", "edited": false, "comment_id": 234620, "creation_date": 1231011614, "score": 4, "owner": {"display_name": "Rene Saarsoo", "reputation": 6862, "user_id": 15982, "user_type": "registered", "accept_rate": 61}}, {"body": "Rene: thanks for disagreeing with me without dismissing my answer out of hand.  I sense an open mind.", "edited": false, "comment_id": 234680, "creation_date": 1231013866, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "I have to disagree as well. I write a lot of Python classes and not many of them fit on my screen. Of course, I&#39;m not counting my netbook&#39;s screen because that would just be unfair to me. =P", "edited": false, "comment_id": 237566, "creation_date": 1231153930, "score": 1, "owner": {"display_name": "sli", "reputation": 753, "user_id": 13876, "user_type": "registered", "accept_rate": 100}}, {"body": "Screen size varies widely depending on your visual acuity. I keep my screens running at 1680&#215;1250, and use Consolas 8pt. What I can see on one screen is likely <i>much</i> more than a guy running at 640&#215;480 using Courier New 10pt.", "edited": false, "comment_id": 240687, "creation_date": 1231244659, "score": 0, "owner": {"display_name": "Mike Hofer", "reputation": 7420, "user_id": 47580, "user_type": "registered", "accept_rate": 98}}, {"body": "Make that, &quot;Screen capacity varies widely depending on your visual acuity and display settings.&quot; :-) Not enough coffee yet. :-)", "edited": false, "comment_id": 240690, "creation_date": 1231244731, "score": 0, "owner": {"display_name": "Mike Hofer", "reputation": 7420, "user_id": 47580, "user_type": "registered", "accept_rate": 98}}, {"body": "@Mike: it&#39;s true, screen capacity varies.  To follow my guideline, you have to decide which screen you want to fit on.  On a team, you have to make that decision together.  Still, the principle is sound: I want to be able to look at a whole class and comprehend it in its entirety, without scrolling.", "edited": false, "comment_id": 241277, "creation_date": 1231256421, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "This might be quite challenging to implement in some languages that are more verbose (require more plumbing), but I admire the general sentiment.", "edited": false, "comment_id": 242811, "creation_date": 1231282418, "score": 0, "owner": {"display_name": "Rob Williams", "reputation": 6575, "user_id": 26682, "user_type": "registered"}}, {"body": "@Rob: thanks, and you&#39;re right.  In some languages you can Extract Class and get some compactness, hopefully for the benefit of your code.  In others (C++ I&#39;m looking at you!) even simple classes have to work very hard to function.", "edited": false, "comment_id": 243464, "creation_date": 1231305919, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "Do you have any other rules to go with this? The list of classes in an API should fit on one screen?  What is it in the class that you need to see anyway, surely the name tells you all about what it can do! What need for to look at the methods on a list.", "edited": false, "comment_id": 243599, "creation_date": 1231311905, "score": 0, "owner": {"display_name": "Greg Domjan", "reputation": 6714, "user_id": 37558, "user_type": "registered", "accept_rate": 68}}, {"body": "Some other rules that may fit: &quot;Methods should have one statement&quot; and &quot;blocks should have only one statement&quot; and &quot;switch cases much be trivial&quot; and &quot;each &#39;enum&#39; type should be mentioned in a conditional only once&quot;.  :-)", "edited": false, "comment_id": 246549, "creation_date": 1231373169, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "Ouch.  It can be hard enough to make a method fit on the screen, never mind an entire class (my main language is Java BTW)", "edited": false, "comment_id": 273962, "creation_date": 1232210747, "score": 0, "owner": {"display_name": "finnw", "reputation": 27950, "user_id": 12048, "user_type": "registered", "accept_rate": 94}}, {"body": "For some of my classes, I can barely fit the member list on the screen. If an obect is to represent something, it should do so in its entirety. Breaking it up into many smaller classes is just adding visual complexity (right click &gt; go to definition - ad nauseum) where it need not exist.", "edited": false, "comment_id": 292319, "creation_date": 1232749912, "score": 9, "owner": {"display_name": "SnOrfus", "reputation": 7513, "user_id": 48553, "user_type": "registered", "accept_rate": 81}}, {"body": "@SnOrfus: I bet that there are bits of self-contained, general-purpose, reusable bits of functionality in those big classes, that would make COMPLETE SENSE as a new class.  You wouldn&#39;t be confused when looking at a reference to one, because the name and its functionality would be obvious.", "edited": false, "comment_id": 293686, "creation_date": 1232821705, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "I think this is baiting.  The implication is that a class should have a limit to the number of attributes it can have because their declaration eats into the space for method bodies.  This sounds like a language troll as in, any language that can&#39;t fit a class onto one screen isn&#39;t fit to use.  Try coding something complex like the contact details for a person which includes an international address including phone numbers, email, fax, etc.", "edited": false, "comment_id": 956287, "creation_date": 1247758660, "score": 1, "owner": {"display_name": "Kelly S. French", "reputation": 8435, "user_id": 135078, "user_type": "registered", "accept_rate": 100}}, {"body": "r u talking abt classes in c++ where function body is declared outside the class? then may be u r right...", "edited": false, "comment_id": 1245523, "creation_date": 1252570684, "score": 0, "owner": {"display_name": "Amarghosh", "reputation": 37731, "user_id": 165297, "user_type": "registered", "accept_rate": 73}}, {"body": "@Amarghosh No, that&#39;s not what I&#39;m talking about. It&#39;s not possible to do this in C++ because the language is too complex and unwieldy.  Also, I wish you would write Englis.", "edited": false, "comment_id": 1249656, "creation_date": 1252616339, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "Not if you&#39;re programming for a mobile phone.", "edited": false, "comment_id": 1851457, "creation_date": 1261416510, "score": 1, "owner": {"display_name": "Daniel Daranas", "reputation": 16413, "user_id": 96780, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1230935243, "comment_count": 17, "score": 15, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}, "is_accepted": false, "up_vote_count": 22}, {"community_owned_date": 1230935762, "body": "<h3>Explicit <code>self</code> in Python's method declarations is poor design choice.</h3>\n\n<p>Method calls got syntactic sugar, but declarations didn't. It's a leaky abstraction (by design!) that causes annoying errors, including runtime errors with apparent off-by-one error in reported number of arguments.</p>\n", "is_accepted": false, "tags": [], "answer_id": 408194, "down_vote_count": 3, "last_activity_date": 1232573262, "comments": [{"body": "I&#39;ve certainly forgotten to type &quot;self&quot; many times myself, but what would you have done instead?   You can&#39;t just imply self in all method declarations because of classmethods and staticmethods.", "edited": false, "comment_id": 233482, "creation_date": 1230949090, "score": 0, "owner": {"display_name": "Kiv", "reputation": 12027, "user_id": 49559, "user_type": "registered", "accept_rate": 93}}, {"body": "I often mistype it as <code>slef</code> and I get errors because <code>self</code> is undeclared", "edited": false, "comment_id": 235264, "creation_date": 1231039823, "score": 0, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "I think that <code>def</code> in <code>class</code> should imply <code>self</code>, and other types of methods could use different/additional keyword, like <code>defstatic</code>/<code>static def</code>.", "edited": false, "comment_id": 238169, "creation_date": 1231170075, "score": 0, "owner": {"display_name": "porneL", "reputation": 53366, "user_id": 27009, "user_type": "registered", "accept_rate": 89}}, {"body": "It&#39;s actually due to an implementation problem early on in the language design -- apparently Guido and team could not figure out how to bind the implicit self parameter to its enclosing environment, short of just passing it explicitly.  Hope I got that right, not a compiler/translator guru.", "edited": false, "comment_id": 462699, "creation_date": 1237175124, "score": 1, "owner": {"display_name": "cygil", "reputation": 2316, "user_id": 42076, "user_type": "registered"}}, {"body": "Please read around and reconsider your opinion: <a href=\"http://effbot.org/pyfaq/why-must-self-be-used-explicitly-in-method-definitions-and-calls.htm\" rel=\"nofollow\">effbot.org/pyfaq/&hellip;</a> and <a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=214325\" rel=\"nofollow\">artima.com/weblogs/viewpost.jsp?thread=214325</a> are two good places to start.", "edited": false, "comment_id": 576501, "creation_date": 1240102219, "score": 0, "owner": {"display_name": "WhatIsHeDoing", "reputation": 391, "user_id": 85662, "user_type": "registered"}}, {"body": "@Daz: links you&#39;ve given talk about either body of a function (but I&#39;m talking about declaration of arguments) or semantics of functions being 1st class (which is completely orthogonal issue to the syntax).", "edited": false, "comment_id": 703307, "creation_date": 1242951011, "score": 0, "owner": {"display_name": "porneL", "reputation": 53366, "user_id": 27009, "user_type": "registered", "accept_rate": 89}}], "creation_date": 1230935762, "comment_count": 6, "score": 10, "owner": {"display_name": "porneL", "reputation": 53366, "user_id": 27009, "user_type": "registered", "accept_rate": 89}, "last_editor": {"display_name": "porneL", "reputation": 53366, "user_id": 27009, "user_type": "registered", "accept_rate": 89}, "last_edit_date": 1232573262, "up_vote_count": 13}, {"community_owned_date": 1230935762, "body": "<p>Primitive data types are premature optimization.</p>\n\n<p>There are languages that get by with just one data type, the scalar, and they do just fine.  Other languages are not so fortunate.  Developers just throw \"int\" and \"double\" in because they have to write in something.</p>\n\n<p>What's important is not how big the data types are, but what the data is used for.  If you have a day of the month variable, it doesn't matter much if it's signed or unsigned, or whether it's char, short, int, long, long long, float, double, or long double.  It does matter that it's a day of the month, and not a month, or day of week, or whatever.  See Joel's column on making things that are wrong look wrong; Hungarian notation <strong>as originally proposed</strong> was a Good Idea.  As used in practice, it's mostly useless, because it says the wrong thing.</p>\n", "answer_id": 408195, "tags": [], "down_vote_count": 2, "last_activity_date": 1230935762, "comments": [{"body": "It makes programs quite quite slower. Compare python to C or C++ and you&#39;ll see a huge performance difference when working with integers. It will avoid overflows at the expense of full checking all the time. That is a source of premature-pessimization in many cases.", "edited": false, "comment_id": 237863, "creation_date": 1231163637, "score": 0, "owner": {"display_name": "David Rodr\u00edguez - dribeas", "reputation": 137526, "user_id": 36565, "user_type": "registered"}}, {"body": "In at least Common Lisp, you can specify data types later, once you get the program working correctly.  That&#39;s how CMU Common Lisp beat out a Fortran compiler in a number-crunching contest once.", "edited": false, "comment_id": 252133, "creation_date": 1231516672, "score": 1, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}}, {"body": "That&#39;s basically Alan Perlis: &quot;Functions delay binding: data structures induce binding. Moral: Structure data late in the programming process.&quot;", "edited": false, "comment_id": 1808585, "creation_date": 1260843437, "score": 0, "owner": {"display_name": "just somebody", "reputation": 10815, "user_id": 209605, "user_type": "registered", "accept_rate": 62}}], "creation_date": 1230935762, "comment_count": 3, "score": 5, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1230937359, "body": "<p>We do a lot of development here using a Model-View-Controller framework we built. I'm often telling my developers that we need to violate the rules of the MVC design pattern to make the site run faster. This is a hard sell for developers, who are usually unwilling to sacrifice well-designed code for anything. But performance is our top priority in building web applications, so sometimes we have to make concessions in the framework.</p>\n\n<p>For example, the view layer should never talk directly to the database, right? But if you are generating large reports, the app will use a lot of memory to pass that data up through the model and controller layers. If you have a database that supports cursors, it can make the app a lot faster to hit the database directly from the view layer.</p>\n\n<p>Performance trumps development standards, that's my controversial view.</p>\n", "answer_id": 408247, "tags": [], "down_vote_count": 0, "last_activity_date": 1230937359, "comments": [{"body": "An excellent example of how sometimes rules are made to be broken.   Do everything right but be prepared to do some things wrong from necessity.", "edited": false, "comment_id": 237145, "creation_date": 1231134183, "score": 0, "owner": {"display_name": "Kendall Helmstetter Gelner", "reputation": 59340, "user_id": 6330, "user_type": "registered", "accept_rate": 80}}, {"body": "Interesting point!", "edited": false, "comment_id": 296260, "creation_date": 1232965259, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "Performance trumps development standards -- if it is too poor to stand. As long as performance is not a problem, there is no need to fix it.", "edited": false, "comment_id": 406891, "creation_date": 1235746425, "score": 1, "owner": {"display_name": "Aaron Digulla", "reputation": 178090, "user_id": 34088, "user_type": "registered", "accept_rate": 78}}, {"body": "Don&#39;t forget, what is considered &quot;right&quot; in terms of development standards was just somebody&#39;s common-sense temporary opinion that happened to get picked up by a lot of people. It is not a commandment from &quot;on high&quot; - common sense can change but is always useful. Good work.", "edited": false, "comment_id": 2166083, "creation_date": 1265471806, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1230937359, "comment_count": 4, "score": 8, "owner": {"display_name": "jjriv", "reputation": 51, "user_id": 50996, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 8}, {"community_owned_date": 1230937544, "body": "<p>I believe the use of try/catch exception handling is worse than the use of simple return codes and associated common messaging structures to ferry useful error messages.</p>\n\n<p>Littering code with try/catch blocks is not a solution.</p>\n\n<p>Just passing exceptions up the stack hoping whats above you will do the right thing or\ngenerate an informative error is not a solution.</p>\n\n<p>Thinking you have any chance of systematically verifying the proper exception handlers are avaliable to address anything that could go wrong in either transparent or opague objects is not realistic. (Think also in terms of late bindings/external libraries and unecessary dependancies between unrelated functions in a call stack as system evolves)</p>\n\n<p>Use of return codes are simple, can be easily systematically verified for coverage and if handled properly forces developers to generate useful error messages rather than the all-too-common stack dumps and obscure I/O exceptions that are \"exceptionally\" meaningless to even the most clueful of end users.</p>\n\n<p>--</p>\n\n<p>My final objection is the use of garbage collected languages.  Don't get me wrong.. I love them in some circumstances but in general for server/MC systems they have no place in my view.</p>\n\n<p>GC is not infallable - even extremely well designed GC algorithms can hang on to objects too long or even forever based on non-obvious circular refrences in their dependancy graphs.</p>\n\n<p>Non-GC systems following a few simple patterns and use of memory accounting tools don't have this problem but do require more work in design and test upfront than GC environments.  The tradeoff here is that memory leaks are extremely easy to spot during testing in Non-GC while finding GC related problem conditions is a much more difficult proposition.</p>\n\n<p>Memory is cheap but what happens when you leak expensive objects such as transaction handles, synchronization objects, socket connections...etc.  In my environment the very thought that you can just sit back and let the language worry about this for you is unthinkable without significant fundental changes in software description.</p>\n", "answer_id": 408257, "tags": [], "down_vote_count": 3, "last_activity_date": 1230937544, "comments": [{"body": "Return codes have the problem of coupling too many elements of a chain of calls to understand what they mean.   That is to say, that everything between a called function and something that might handle an error has to understand the return codes, at least to pass them along - that can be a mess.", "edited": false, "comment_id": 237148, "creation_date": 1231134336, "score": 0, "owner": {"display_name": "Kendall Helmstetter Gelner", "reputation": 59340, "user_id": 6330, "user_type": "registered", "accept_rate": 80}}, {"body": "My general advice is to follow a convention and don&#39;t fall into the trap of attempting to have them indiciate specific error conditions.  At each level you should take steps to ensure meaning is normalized. (Which ususally isn&#39;t hard/necessary if you follow a convention)", "edited": false, "comment_id": 237211, "creation_date": 1231137239, "score": 1, "owner": {"display_name": "Einstein", "reputation": 3214, "user_id": 41898, "user_type": "unregistered"}}, {"body": "Good error code compared with bad exception code is better. But then again, there is good exception handling code, where exceptions are thrown and caught only where it makes sense... good exception code separates error handling from the error, and need not be replicated in each function of the stack", "edited": false, "comment_id": 238661, "creation_date": 1231179815, "score": 0, "owner": {"display_name": "David Rodr\u00edguez - dribeas", "reputation": 137526, "user_id": 36565, "user_type": "registered"}}, {"body": "If a GC platform is not right for your particular situation, use good judgmenet and don&#39;t use it. It&#39;s as simple as that.", "edited": false, "comment_id": 2710164, "creation_date": 1271925560, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}], "creation_date": 1230937544, "comment_count": 4, "score": 8, "owner": {"display_name": "Einstein", "reputation": 3214, "user_id": 41898, "user_type": "unregistered"}, "is_accepted": false, "up_vote_count": 11}, {"community_owned_date": 1230938426, "body": "<p><strong>Excessive HTML in PHP files: sometimes necessary</strong></p>\n\n<p><strong>Excessive Javascript in PHP files: trigger the raptor attack</strong></p>\n\n<p>While I have a hard time figuring out all your switching between <strong>echo</strong>ing and ?>&lt; ?php 'ing html (after all, php is just a processor for html), lines and lines of javascript added in make it a completely unmaintainable mess.</p>\n\n<p>People have to grasp this: They are two separate programming languages. Pick one to be your primary language. Then go on and find a quick, clean and easily maintainable way to make your primary include the secondary language.</p>\n\n<p><strong>The reason why you jump between PHP, Javascript and HTML all the time is because you are bad at all three of them.</strong></p>\n\n<p>Ok, maybe its not exactly controversial. I had the impression this was a general frustration venting topic :)</p>\n", "answer_id": 408289, "tags": [], "down_vote_count": 0, "last_activity_date": 1230938426, "comments": [{"body": "What?  To build a dynamic, server-side generated website you&#39;ll need all three (Unless you use another system.) For PHP, you&#39;ve got your templating, server power etc.  For HTML you have the basis of the actual site. JS: Dynamically loaded content, special features (syntax highlighting).", "edited": false, "comment_id": 253241, "creation_date": 1231534778, "score": 0, "owner": {"display_name": "Dalin Seivewright", "reputation": 913, "user_id": 29053, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1230938426, "comment_count": 1, "score": 3, "owner": {"display_name": "skore", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1230940169, "body": "<p><strong>Opinion: developers should be testing their own code</strong></p>\n\n<p>I've seen too much crap handed off to test only to have it not actually fix the bug in question, incurring communication overhead and fostering irresponsible practices. </p>\n", "is_accepted": false, "tags": [], "answer_id": 408333, "down_vote_count": 1, "last_activity_date": 1231520418, "comments": [{"body": "+1.  This a matter of ownership, we tend to care better for things we own than the things we don&#39;t.  Want proof?  Take a look at your company vehicles.", "edited": false, "comment_id": 234069, "creation_date": 1230990930, "score": 0, "owner": {"display_name": "AnthonyWJones", "reputation": 134121, "user_id": 17516, "user_type": "registered", "accept_rate": 79}}, {"body": "It also comes with the onus that people reporting bugs can report in sufficient detail so that it can be reproduced and tested to be proven fixed.  It sucks to be so maligned when you reproduce a defect according to description, fix it, and find that the tester still has issues you didn&#39;t.", "edited": false, "comment_id": 243609, "creation_date": 1231312262, "score": 0, "owner": {"display_name": "Greg Domjan", "reputation": 6714, "user_id": 37558, "user_type": "registered", "accept_rate": 68}}, {"body": "I think testing and developing are different skills, they should be done by those who are good at them.  Isolating testers from developers and making it hard for testers to get ther bugs fixed: no excuse.", "edited": false, "comment_id": 408168, "creation_date": 1235763263, "score": 1, "owner": {"display_name": "Benjamin Confino", "reputation": 1345, "user_id": 54645, "user_type": "registered", "accept_rate": 100}}, {"body": "But they shouldn&#39;t be the only ones to test their code.", "edited": false, "comment_id": 1319691, "creation_date": 1253779344, "score": 0, "owner": {"display_name": "peterchen", "reputation": 24528, "user_id": 31317, "user_type": "registered", "accept_rate": 82}}, {"body": "Sounds like bad developers to me.  I&#39;d file this under not all lazy developers are good developers.", "edited": false, "comment_id": 1420607, "creation_date": 1255454724, "score": 1, "owner": {"display_name": "gradbot", "reputation": 9894, "user_id": 17919, "user_type": "registered", "accept_rate": 90}}, {"body": "+1 for controversy: I&#39;m only going to test the things I think to test for, and if I design the particular method... I&#39;ve already thought of everything that can go wrong (from my point of view). A good tester will see another point of view -&gt; like your users.", "edited": false, "comment_id": 1428319, "creation_date": 1255548117, "score": 2, "owner": {"display_name": "SnOrfus", "reputation": 7513, "user_id": 48553, "user_type": "registered", "accept_rate": 81}}], "creation_date": 1230940169, "comment_count": 6, "score": 64, "owner": {"display_name": "Kevin Davis", "reputation": 1610, "user_id": 49993, "user_type": "registered", "accept_rate": 78}, "last_editor": {"display_name": "Alex B", "reputation": 14455, "user_id": 6180, "user_type": "registered", "accept_rate": 83}, "last_edit_date": 1231520418, "up_vote_count": 65}, {"community_owned_date": 1230940910, "body": "<p><strong>Web applications suck</strong></p>\n\n<p>My Internet connection is veeery slow. My experience with almost every Web site that is not Google is, at least, frustrating. Why doesn't anybody write desktop apps anymore? Oh, I see. Nobody wants to be bothered with learning how operating systems work. At least, not Windows. The last time you had to handle <code>WM_PAINT</code>, your head exploded. Creating a worker thread to perform a long task (I mean, doing it the Windows way) was totally beyond you. What the hell was a callback? Oh, my God!</p>\n\n<p><hr /></p>\n\n<p><strong>Garbage collection sucks</strong></p>\n\n<p>No, it actually doesn't. But it makes the programmers suck like nothing else. In college, the first language they taught us was Visual Basic (the original one). After that, there was another course where the teachers <em>pretended</em> they taught us C++. But the damage was done. Nobody actually knew how to use this esoteric keyword <code>delete</code> did. After testing our programs, we either got invalid address exceptions or memory leaks. Sometimes, we got both. Among the 1% of my faculty who can actually program, only one who can manage his memory by himself (at least, he pretends) and he's writing this rant. The rest write their programs in VB.NET, which, by definition, is a bad language.</p>\n\n<p><hr /></p>\n\n<p><strong>Dynamic typing suck</strong></p>\n\n<p>Unless you're using assembler, of course (that's the kind of dynamic typing that actually deserves praise). What I meant is <em>the overhead imposed by dynamic, interpreted languages makes them suck</em>. And don't come with that silly argument that <em>different tools are good for different jobs</em>. C is the right language for almost everything (it's fast, powerful and portable), and, when it isn't (it's not fast enough), there's always inline assembly.</p>\n\n<p><hr /></p>\n\n<p>I might come up with more rants, but that will be later, not now.</p>\n", "answer_id": 408352, "tags": [], "down_vote_count": 8, "last_activity_date": 1230940910, "comments": [{"body": "C may be fast to execute, but dynamic, interpreted languages are faster to develop in. I think you&#39;re being a little close-minded here.", "edited": false, "comment_id": 233487, "creation_date": 1230949388, "score": 1, "owner": {"display_name": "Kiv", "reputation": 12027, "user_id": 49559, "user_type": "registered", "accept_rate": 93}}, {"body": "C is NOT the right tool for everything! it&#39;s not the tool for web development! there&#39;s <i>that</i> at least!", "edited": false, "comment_id": 233556, "creation_date": 1230952347, "score": 0, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "What are dynamic, interpreted languages good for, besides Web development? Note, I happen to hate Web apps.", "edited": false, "comment_id": 233593, "creation_date": 1230953968, "score": 0, "owner": {"display_name": "Eduardo Le\u00f3n", "reputation": 6485, "user_id": 46571, "user_type": "registered", "accept_rate": 93}}, {"body": "Sure, dynamic languages should be burned. From now on I shall always compile my shell scripts to machine code.", "edited": false, "comment_id": 234672, "creation_date": 1231013484, "score": 1, "owner": {"display_name": "Rene Saarsoo", "reputation": 6862, "user_id": 15982, "user_type": "registered", "accept_rate": 61}}, {"body": "Dynamic languages are good for different jobs. They tend to be ideal for quick and dirty throw away scripts for admin stuff, as well they tend to be better geared for applications that require a lot of string manipulation and need to be developed quickly.", "edited": false, "comment_id": 252840, "creation_date": 1231528322, "score": 0, "owner": {"display_name": "Rontologist", "reputation": 2535, "user_id": 13925, "user_type": "registered"}}, {"body": "That&#39;s 3 opinions in one answer, and they&#39;re all dupes", "edited": false, "comment_id": 274096, "creation_date": 1232214932, "score": 3, "owner": {"display_name": "finnw", "reputation": 27950, "user_id": 12048, "user_type": "registered", "accept_rate": 94}}, {"body": "What do you mean by dupes?", "edited": false, "comment_id": 274896, "creation_date": 1232252949, "score": 0, "owner": {"display_name": "Eduardo Le\u00f3n", "reputation": 6485, "user_id": 46571, "user_type": "registered", "accept_rate": 93}}], "creation_date": 1230940910, "comment_count": 7, "score": 9, "owner": {"display_name": "Eduardo Le\u00f3n", "reputation": 6485, "user_id": 46571, "user_type": "registered", "accept_rate": 93}, "is_accepted": false, "up_vote_count": 17}, {"community_owned_date": 1230941255, "body": "<p>Never make up your mind on an issue before thoroughly considering said issue. No programming standard EVER justifies approaching an issue in a poor manner. If the standard demands a class to be written, but after careful thought, you deem a static method to be more appropriate, always go with the static method. Your own discretion is always better than even the best forward thinking of whoever wrote the standard. Standards are great if you're working in a team, but rules are meant to be broken (in good taste, of course).</p>\n", "answer_id": 408361, "tags": [], "down_vote_count": 0, "last_activity_date": 1230941255, "creation_date": 1230941255, "comment_count": 0, "score": 1, "owner": {"display_name": "Davis Gallinghouse", "reputation": 183, "user_id": 51058, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1230942874, "body": "<p><strong>C++ is one of the WORST programming languages - EVER.</strong></p>\n\n<p>It has all of the hallmarks of something designed by committee - it does not do any given job well, and does some jobs (like OO) terribly. It has a \"kitchen sink\" desperation to it that just won't go away.</p>\n\n<p>It is a horrible \"first language\" to learn to program with. You get no elegance, no assistance (from the language). Instead you have bear traps and mine fields (memory management, templates, etc.).</p>\n\n<p>It is not a good language to try to learn OO concepts. It behaves as \"C with a class wrapper\" instead of a proper OO language.</p>\n\n<p>I could go on, but will leave it at that for now. I have never liked programming in C++, and although I \"cut my teeth\" on FORTRAN, I totally loved programming in C. I still think C was one of the great \"classic\" languages. Something that C++ is certainly NOT, in my opinion.</p>\n\n<p>Cheers,</p>\n\n<p>-R</p>\n\n<p>EDIT: To respond to the comments on teaching C++. You can teach C++ in two ways - either teaching it as C \"on steroids\" (start with variables, conditions, loops, etc), or teaching it as a pure \"OO\" language (start with classes, methods, etc). You can find teaching texts that use one or other of these approaches. I prefer the latter approach (OO first) as it does emphasize the capabilities of C++ as an OO language (which was the original design emphasis of C++). If you want to teach C++ \"as C\", then I think you should teach C, not C++.</p>\n\n<p>But the problem with C++ as a first language in my experience is that the language is simply too BIG to teach in one semester, plus most \"intro\" texts try and cover everything. It is simply not possible to cover all the topics in a \"first language\" course. You have to at least split it into 2 semesters, and then it's no longer \"first language\", IMO.</p>\n\n<p>I do teach C++, but only as a \"new language\" - that is, you must be proficient in some prior \"pure\" language (not scripting or macros) before you can enroll in the course. C++ is a very fine \"second language\" to learn, IMO.</p>\n\n<p>-R</p>\n\n<p>'Nother Edit: (to Konrad)</p>\n\n<p>I do not at all agree that C++ \"is superior in every way\" to C. I spent years coding C programs for microcontrollers and other embedded applications. The C compilers for these devices are highly optimized, often producing code as good as hand-coded assembler. When you move to C++, you gain a tremendous overhead imposed by the compiler in order to manage language features you may not use. In embedded applications, you gain little by adding classes and such, IMO. What you need is tight, clean code. You can write it in C++, but then you're really just writing C, and the C compilers are more optimized in these applications.</p>\n\n<p>I wrote a MIDI engine, first in C, later in C++ (at the vendor's request) for an embedded controller (sound card). In the end, to meet the performance requirements (MIDI timings, etc) we had to revert to pure C for all of the core code. We were able to use C++ for the high-level code, and having classes was very sweet - but we needed C to get the performance at the lower level. The C code was an order of magnitude faster than the C++ code, but hand coded assembler was only slightly faster than the compiled C code. This was back in the early 1990s, just to place the events properly.</p>\n\n<p>-R</p>\n", "is_accepted": false, "tags": [], "answer_id": 408396, "down_vote_count": 39, "last_activity_date": 1271131546, "comments": [{"body": "I would upvote if it wasn&#39;t for the &quot;it&#39;s a horrible first language&quot;, I think it sucks but it&#39;s a good first language, particularly because it does suck, then one can appreciate the need for better languages!", "edited": false, "comment_id": 233546, "creation_date": 1230952126, "score": 0, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "It&#39;s very difficult to create usable classes in C++, but once you create them, life is very easy. Way easier than using plain C. What I do is the following: I implement the functionality in C, then wrap it using C++ classes.", "edited": false, "comment_id": 233606, "creation_date": 1230954729, "score": 0, "owner": {"display_name": "Eduardo Le\u00f3n", "reputation": 6485, "user_id": 46571, "user_type": "registered", "accept_rate": 93}}, {"body": "The way I see it, a lot of misgivings about C++ stem from the fact that C++ is generally taught wrong. One typically needs to unlearn a lot of C before one can grok C++ well. Learning C++ after C never seems a good idea to me.", "edited": false, "comment_id": 233878, "creation_date": 1230977435, "score": 0, "owner": {"display_name": "PlagueHammer", "reputation": 13048, "user_id": 2288585, "user_type": "registered", "accept_rate": 63}}, {"body": "And I think that C++ is superior to C in every way, except that it unfortunately was designed to be \u201cbackwards\u201d compatible to C.", "edited": false, "comment_id": 233979, "creation_date": 1230983852, "score": 1, "owner": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}}, {"body": "I think C++ is a good example of &quot;design by committee&quot; done <i>RIGHT</i>. It&#39;s a mess in many ways, and for many purposes, it&#39;s a lousy languages. But if you bother to really learn it, there&#39;s a remarkably expressive and elegant language hidden within. It&#39;s just a shame that few people discover it.", "edited": false, "comment_id": 235140, "creation_date": 1231030904, "score": 8, "owner": {"display_name": "jalf", "reputation": 161685, "user_id": 33213, "user_type": "registered", "accept_rate": 81}}, {"body": "Yea - that &quot;elegant language, hidden within&quot; ... IS C!!! ;-)", "edited": false, "comment_id": 236357, "creation_date": 1231099065, "score": 29, "owner": {"display_name": "Huntrods", "reputation": 2377, "user_id": 33977, "user_type": "registered", "accept_rate": 38}}, {"body": "I&#39;ve got another bone to pick with you: \u201cYou can teach C++ in two ways\u201d \u2013 this is wrong. Apparently you have only ever used C++ in two ways, without unlocking its true potential. This also explains your microcontroller related experience: C is <i>no</i> faster than (well-written) C++.", "edited": false, "comment_id": 236461, "creation_date": 1231103826, "score": 1, "owner": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}}, {"body": "+1: Of all the languages I&#39;ve ever played with, C++ is the only one which has made me sick every time I&#39;ve approached it.  I&#39;ve had a book on C++ for years, I pick it up every once in a while and tell myself &quot;it really can&#39;t be that bad&quot; and read until my eyes bleed, I&#39;ve made it to page 47.", "edited": false, "comment_id": 237065, "creation_date": 1231129103, "score": 1, "owner": {"display_name": "Robert Gamble", "reputation": 51437, "user_id": 25222, "user_type": "registered"}}, {"body": "There is a third approach to learning C++: Accelerated C++ takes it. It builds from the very beginning (variables, functions) but using real C++ elements (STL). I recommend it for anyone who wants another view into C++.", "edited": false, "comment_id": 237599, "creation_date": 1231155264, "score": 1, "owner": {"display_name": "David Rodr\u00edguez - dribeas", "reputation": 137526, "user_id": 36565, "user_type": "registered"}}, {"body": "@dribeas: I appreciate the recommendation, it looks like a good book.  I doubt I&#39;ll ever be able to &quot;appreciate&quot; what C++ has to offer but if I ever recover from my previous experiences I will take you up on your recommendation.", "edited": false, "comment_id": 243548, "creation_date": 1231310341, "score": 0, "owner": {"display_name": "Robert Gamble", "reputation": 51437, "user_id": 25222, "user_type": "registered"}}, {"body": "Okay, if C++ code was ten times slower than C code, what sort of Mickey Mouse compilers were you using?  Or what idiotic code conventions were you required to use?  Were you asked to do exception specifications, for example (almost always a bad idea)?", "edited": false, "comment_id": 251869, "creation_date": 1231512187, "score": 5, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}}, {"body": "Just throwing this out there, but the Programming Language benchmark game has quite a few examples of C++ being faster then C.", "edited": false, "comment_id": 262550, "creation_date": 1231875832, "score": 0, "owner": {"display_name": "James McMahon", "reputation": 18241, "user_id": 20774, "user_type": "registered", "accept_rate": 92}}, {"body": "&quot;When you move to C++, you gain a tremendous overhead imposed by the compiler in order to manage language features you may not use. In embedded applications, you gain little by adding classes and such, IMO. What you need is tight, clean code.&quot; - who says you <i>have</i> to use classes, rtti and whatnot?", "edited": false, "comment_id": 282666, "creation_date": 1232514189, "score": 1, "owner": {"display_name": "Johannes Schaub - litb", "reputation": 296033, "user_id": 34509, "user_type": "registered", "accept_rate": 63}}, {"body": "you don&#39;t <i>have</i> to use those features. if you only use the C subset, then C++ is equally fast as C. then, you can selectively pick those C++ features <i>you</i> like. some vector sugar here, some other stuff there. isn&#39;t that nice?", "edited": false, "comment_id": 282669, "creation_date": 1232514343, "score": 3, "owner": {"display_name": "Johannes Schaub - litb", "reputation": 296033, "user_id": 34509, "user_type": "registered", "accept_rate": 63}}, {"body": "and i agree it&#39;s all but a nice first language. it&#39;s not wise to teach it first IMHO. and it&#39;s good that it&#39;s compatible to C. nuff said :)", "edited": false, "comment_id": 282672, "creation_date": 1232514392, "score": 1, "owner": {"display_name": "Johannes Schaub - litb", "reputation": 296033, "user_id": 34509, "user_type": "registered", "accept_rate": 63}}, {"body": "Well said. Also read &#39;Worse is Better&#39;", "edited": false, "comment_id": 411893, "creation_date": 1235904805, "score": 0, "owner": {"display_name": "Vardhan", "reputation": 2422, "user_id": 414441, "user_type": "registered", "accept_rate": 47}}, {"body": "I agree  that it&#39;s got a whole raft of problems. but worst ever? Ever seen intercal? BFUNGE? assembly language?", "edited": false, "comment_id": 635786, "creation_date": 1241559512, "score": 0, "owner": {"display_name": "Brian Postow", "reputation": 4161, "user_id": 53491, "user_type": "registered", "accept_rate": 61}}, {"body": "Regarding your anecdote about C++ being an order of magnitude slower, keep in mind that C++ compilers of the &#39;80s are not the same as C++ compilers of today.", "edited": false, "comment_id": 646217, "creation_date": 1241746422, "score": 0, "owner": {"display_name": "notJim", "reputation": 6017, "user_id": 19370, "user_type": "registered", "accept_rate": 84}}, {"body": "I agree that it&#39;s the worst language ever.  Except for all the others.", "edited": false, "comment_id": 815119, "creation_date": 1245235066, "score": 1, "owner": {"display_name": "Kaz Dragon", "reputation": 4023, "user_id": 24913, "user_type": "registered", "accept_rate": 71}}, {"body": "I don&#39;t agree that its the worst language; I do agree that its a bad language; I also agree that its a bad first language. C++ is powerful and has a lot of features that are very useful. This makes C++ a good choice - sometimes. C++ also has a lot of hidden evil (lots of undefined behavior that looks perfectly fine..) which makes it a bad language and definitely a bad first language.", "edited": false, "comment_id": 970942, "creation_date": 1248079528, "score": 0, "owner": {"display_name": "Dan", "reputation": 4947, "user_id": 21037, "user_type": "registered", "accept_rate": 100}}, {"body": "@david-basarab - C++ compilers are now much better! I use c++ not only for MIDI but for audio DSP algorithms - utilizing C++ templates makes it very powerful to make tunable compile time parameters such as buffer size and layout which allows for automatic SSE/altivec optimizations. The benefit of C++ now is not the language which is always a template-puzzle nowadays, but because the compilers available are better at optimizing real time functions than Haskell, Ada, Scheme and Scala are", "edited": false, "comment_id": 1115865, "creation_date": 1250472839, "score": 1, "owner": {"display_name": "jdkoftinoff", "reputation": 1728, "user_id": 32198, "user_type": "registered"}}, {"body": "-1. C++ is still the most powerful multi-paradigm widely available language there is. It&#39;s the most adaptable of them all, therefore it can solve many different problems, which in some applications is <i>very</i> useful. It might not be best at each specific thing, but overall, it&#39;s seldom a really bad choice.", "edited": false, "comment_id": 1145964, "creation_date": 1250878475, "score": 4, "owner": {"display_name": "Macke", "reputation": 15050, "user_id": 72312, "user_type": "registered", "accept_rate": 83}}, {"body": "C++ is like Democracy, &quot;Many forms of Government have been tried, and will be tried in this world of sin and woe. No one pretends that democracy is perfect or all-wise. Indeed, it has been said that democracy is the worst form of government except all those other forms that have been tried from time to time.&quot; -Sir Winston Churchill", "edited": false, "comment_id": 1420493, "creation_date": 1255453915, "score": 1, "owner": {"display_name": "gradbot", "reputation": 9894, "user_id": 17919, "user_type": "registered", "accept_rate": 90}}, {"body": "C++ is massive, and massively popular.  Like all languages, it has applications for which is it well suited, and applications for which it is poorly suited.", "edited": false, "comment_id": 3065082, "creation_date": 1276026512, "score": 0, "owner": {"display_name": "RavB", "reputation": 1114, "user_id": 340574, "user_type": "registered", "accept_rate": 78}}, {"body": "+1 For second language. I learned Java first and a bit of C one year later. I&#39;m glad I learned the low-level C stuff because it makes me a better high-level programmer, but I&#39;m also glad I didn&#39;t have to start with C.", "edited": false, "comment_id": 3311211, "creation_date": 1278670891, "score": 0, "owner": {"display_name": "Bart van Heukelom", "reputation": 14256, "user_id": 85821, "user_type": "registered", "accept_rate": 72}}, {"body": "What about Objective-C? And I totally agree with you, Huntrods.", "edited": false, "comment_id": 4912120, "creation_date": 1292855802, "score": 0, "owner": {"display_name": "user142019", "user_type": "does_not_exist"}}], "creation_date": 1230942874, "comment_count": 26, "score": 102, "owner": {"display_name": "Huntrods", "reputation": 2377, "user_id": 33977, "user_type": "registered", "accept_rate": 38}, "last_editor": {"display_name": "Nick Heiner", "reputation": 29333, "user_id": 147601, "user_type": "registered", "accept_rate": 63}, "last_edit_date": 1271131546, "up_vote_count": 141}, {"community_owned_date": 1230946561, "body": "<p>Preconditions for arguments to methods/functions should be part of the language rather than programmers checking it always.</p>\n", "answer_id": 408450, "tags": [], "down_vote_count": 0, "last_activity_date": 1230946561, "comments": [{"body": "I like it, but it is controversial?", "edited": false, "comment_id": 234969, "creation_date": 1231023184, "score": 1, "owner": {"display_name": "erikkallen", "reputation": 19451, "user_id": 47161, "user_type": "registered", "accept_rate": 66}}], "creation_date": 1230946561, "comment_count": 1, "score": 9, "owner": {"display_name": "kal", "reputation": 6746, "user_id": 43756, "user_type": "registered", "accept_rate": 63}, "is_accepted": false, "up_vote_count": 9}, {"community_owned_date": 1230947436, "body": "<p><strong>There's an awful lot of bad teaching out there.</strong></p>\n\n<p>We developers like to feel smugly superior when Joel says there's a part of the brain for understanding pointers that some people are just born without. The topics many of us discuss here and are passionate about <em>are</em> esoteric, but sometimes that's only because we make them so.</p>\n", "is_accepted": false, "tags": [], "answer_id": 408460, "down_vote_count": 1, "last_activity_date": 1233789789, "comments": [{"body": "Those who can&#39;t do, teach.  By that logic, the people who can&#39;t program are the ones teaching us how to program.  I&#39;ve experienced it myself where the professors I&#39;ve had have admitted to being unable to do the problems and exercises they assign.    Protip: Take the classes with the teachers contracted by the university, not tenure (or tenure-pathed) professors.", "edited": false, "comment_id": 3065202, "creation_date": 1276027230, "score": 0, "owner": {"display_name": "RavB", "reputation": 1114, "user_id": 340574, "user_type": "registered", "accept_rate": 78}}], "creation_date": 1230947436, "comment_count": 1, "score": 33, "owner": {"display_name": "Brian Willis", "reputation": 7178, "user_id": 118, "user_type": "registered"}, "last_editor": {"display_name": "Brian Willis", "reputation": 7178, "user_id": 118, "user_type": "registered"}, "last_edit_date": 1233789789, "up_vote_count": 34}, {"community_owned_date": 1230949555, "body": "<p>The best code is often the code you don't write.  As programmers we want to solve every problem by writing some cool method.  Anytime we can solve a problem and still give the users 80% of what they want without introducing more code to maintain and test we have provided waaaay more value.</p>\n", "answer_id": 408500, "tags": [], "down_vote_count": 1, "last_activity_date": 1230949555, "comments": [{"body": "It reminds me of a quote (I can&#39;t remember who said it though) - &quot;Measuring a program by lines of code is like measuring a plane by weight.&quot;", "edited": false, "comment_id": 234220, "creation_date": 1230997732, "score": 0, "owner": {"display_name": "Cristi\u00e1n Romo", "reputation": 3223, "user_id": 1256, "user_type": "registered", "accept_rate": 91}}, {"body": "@Cristi&#225;n: It was Bill Gates who said that.", "edited": false, "comment_id": 256088, "creation_date": 1231681399, "score": 0, "owner": {"display_name": "Dan Dyer", "reputation": 34649, "user_id": 5171, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1230949555, "comment_count": 2, "score": 15, "owner": {"display_name": "Todd Friedlich", "reputation": 454, "user_id": 21816, "user_type": "registered", "accept_rate": 50}, "is_accepted": false, "up_vote_count": 16}, {"community_owned_date": 1230950271, "body": "<p><strong>C (or C++) should be the first programming language</strong></p>\n\n<p>The first language should NOT be the easy one, it should be one that sets up the student's mind and prepare it for serious computer science.<br />\nC is perfect for that, it forces students to think about memory and all the low level stuff, and at the same time they can learn how to structure their code (it has functions!)</p>\n\n<p>C++ has the added advantage that it really sucks :) thus the students will understand why people had to come up with Java and C#</p>\n", "is_accepted": false, "tags": [], "answer_id": 408510, "down_vote_count": 5, "last_activity_date": 1231218068, "comments": [{"body": "so everybody should suffer, because you have suffered? its always nice to learn useless things, but come on.", "edited": false, "comment_id": 233621, "creation_date": 1230955210, "score": 1, "owner": {"display_name": "IAdapter", "reputation": 19424, "user_id": 30453, "user_type": "registered", "accept_rate": 82}}, {"body": "Not really, I really loved C++ back in the day, I was in denial when I heard from a prof that it&#39;s the worst language he&#39;s ever seen.", "edited": false, "comment_id": 233803, "creation_date": 1230970738, "score": 0, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "+1: Everyone should learn C first because programming isn&#39;t for everyone and it isn&#39;t for anyone that can&#39;t grasp C.", "edited": false, "comment_id": 237084, "creation_date": 1231130311, "score": 9, "owner": {"display_name": "Robert Gamble", "reputation": 51437, "user_id": 25222, "user_type": "registered"}}, {"body": "Blast them with raw machine code. Suffer!!! The assembler course was the most fun in had (during class time) in university.", "edited": false, "comment_id": 306894, "creation_date": 1233222045, "score": 0, "owner": {"display_name": "Jonathan C Dickinson", "reputation": 4450, "user_id": 24064, "user_type": "registered", "accept_rate": 100}}, {"body": "Mythology. Before encountering C I learned the assembly of 2/3 CPUs and familiarized with others. Some CPUs are a pleasure to program because of their orthogonal instruction sets, others are a pain but less idiosyncratic than C. C fails for its intended use, i.e. a portable assembly.", "edited": false, "comment_id": 1558767, "creation_date": 1257462340, "score": 0, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}, {"body": ".. and I find pathetic the elitism that too many programmers show.", "edited": false, "comment_id": 1558776, "creation_date": 1257462455, "score": 0, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}, {"body": "My university taught programming almost exclusively in Java. I felt simultaneously aroused and cheated when I finally got around to learning C and C++.", "edited": false, "comment_id": 1775894, "creation_date": 1260391844, "score": 0, "owner": {"display_name": "iandisme", "reputation": 3947, "user_id": 136790, "user_type": "registered", "accept_rate": 78}}, {"body": "I disagree. Its hard to get first-timers excited about memory allocation.. Start with a language where you can get near instant gratification. The web languages are good for this.", "edited": false, "comment_id": 1841191, "creation_date": 1261214088, "score": 0, "owner": {"display_name": "Matt", "reputation": 5035, "user_id": 145435, "user_type": "registered", "accept_rate": 70}}, {"body": "@Matt: you&#39;re not supposed to agree ;)", "edited": false, "comment_id": 1841270, "creation_date": 1261216382, "score": 0, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "I did a lot of teaching introductory CS. What I found was most useful was first a few weeks on a decimal machine simulator, to set up the basic mental framework of addresses, memory, instructions, and stepwise execution. Then we did Basic (sorry), then Pascal. I like C (and C++) but those are hell to teach to newbies, because there are too many subtle ways for students to get confused, like the difference between pointers and array referencing, and nested types. It&#39;s not acceptable to say &quot;sink or swim&quot; - they pay tuition.", "edited": false, "comment_id": 2381560, "creation_date": 1268057928, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1230950271, "comment_count": 10, "score": 19, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}, "last_editor": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}, "last_edit_date": 1231218068, "up_vote_count": 24}, {"community_owned_date": 1230950364, "body": "<p>A random collection of Cook's aphorisms...</p>\n\n<ul>\n<li><p>The hardest language to learn is your second.</p></li>\n<li><p>The hardest OS to learn is your second one - especially if your first was an IBM mainframe.</p></li>\n<li><p>Once you've learned several seemingly different languages,\nyou finally realize that all programming\nlanguages are the same - just minor differences in syntax.</p></li>\n<li><p>Although one can be quite productive and marketable without having learned any assembly,\nno one will ever have a visceral understanding of computing without it.</p></li>\n<li><p>Debuggers are the final refuge for programmers who don't really know\nwhat they're doing in the first place.</p></li>\n<li><p>No OS will ever be stable if it doesn't make use of hardware memory management.</p></li>\n<li><p>Low level systems programming is much, much easier than applications programming.</p></li>\n<li><p>The programmer who has a favorite language is just playing.</p></li>\n<li><p>Write the User's Guide FIRST!</p></li>\n<li><p>Policy and procedure are intended for those who lack the initiative to perform otherwise.</p></li>\n<li><p>(The Contractor's Creed):\nTell'em what they need.\nGive'em what they want.\nMake sure the check clears.</p></li>\n<li><p>If you don't find programming fun, get out of it or accept that although you may make a\nliving at it, you'll never be more than average.</p></li>\n<li><p>Just as the old farts have to learn the .NET method names,\nyou'll have to learn the library calls.  But there's nothing new there.<br />\nThe life of a programmer is one of constantly adapting to different environments,\nand the more tools you have hung on your belt, the more versatile and marketable you'll be.</p></li>\n<li><p>You may piddle around a bit with little code chunks near the beginning to try out some ideas,\nbut, in general, one doesn't start coding in earnest until you KNOW how the whole program or\napp is going to be layed out, and you KNOW that the whole thing is going to work EXACTLY as\nadvertised.  For most projects with at least some degree of complexity,\nI generally end up spending 60 to 70 percent of the time up front just percolating ideas.</p></li>\n<li><p>Understand that programming has little to do with language and everything to do with algorithm.\nAll of those nifty geegaws with memorable acronyms that folks have come up with over the years\nare just different ways of skinning the implementation cat.  When you strip away all the\nOOPiness, RADology, Development Methodology 37, and Best Practice 42, you still have to deal\nwith the basic building blocks of:</p>\n\n<ul>\n<li>assignments</li>\n<li>conditionals</li>\n<li>iterations</li>\n<li>control flow</li>\n<li>I/O</li>\n</ul></li>\n</ul>\n\n<p>Once you can truly wrap yourself around that, you'll eventually get to the point where you\nsee (from a programming standpoint) little difference between writing an inventory app for\nan auto parts company, a graphical real-time TCP performance analyzer, a mathematical model\nof a stellar core, or an appointments calendar.</p>\n\n<ul>\n<li>Beginning programmers work with small chunks of code.  As they gain experience,\nthey work with ever increasingly large chunks of code.<br />\nAs they gain even more experience, they work with small chunks of code.</li>\n</ul>\n", "is_accepted": false, "tags": [], "answer_id": 408512, "down_vote_count": 0, "last_activity_date": 1231008023, "comments": [{"body": "&quot;Once you&#39;ve learned several seemingly different languages, you finally realize that all programming languages are the same - just minor differences in syntax.&quot; - you just broke many hearts, some people learn new language every year.", "edited": false, "comment_id": 233625, "creation_date": 1230955461, "score": 0, "owner": {"display_name": "IAdapter", "reputation": 19424, "user_id": 30453, "user_type": "registered", "accept_rate": 82}}, {"body": "And it gets easier and easier, doesn&#39;t, doesn&#39;t it?", "edited": false, "comment_id": 233725, "creation_date": 1230963223, "score": 0, "owner": {"display_name": "cookre", "reputation": 683, "user_id": 39195, "user_type": "registered"}}, {"body": "&quot;you finally realize that all programming languages are the same&quot; -- you hear that a lot from people who have only programmed in C#, C++, flavors of VB, Java, and maybe Python. Then you finally learn Haskell, Ocaml, Erlang, Prolog, and Lisp, and you feel like an idiot for having missed so much.", "edited": false, "comment_id": 235265, "creation_date": 1231039838, "score": 3, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}, {"body": "It&#39;s always nice to have lots of toys, but we know they all serve the same purpose - to entertain us in some way.    Likewise with every programming language I&#39;ve seen over the past forty some odd years.  As mentioned above, it&#39;s all about algorithm - not syntax.", "edited": false, "comment_id": 236462, "creation_date": 1231103835, "score": 1, "owner": {"display_name": "cookre", "reputation": 683, "user_id": 39195, "user_type": "registered"}}, {"body": "@cookre: try to use algorithms designed to be expressed in an imperative programming language (PL) with a pure lazy functional PL like Haskell or in a (constraint) logic PL like Prolog (and derivatives) or in a PL designed for fault tolerance and massive concurrency, like Erlang and you will discover that semantics differences are all that really counts.", "edited": false, "comment_id": 1558907, "creation_date": 1257464067, "score": 0, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}], "creation_date": 1230950364, "comment_count": 5, "score": 11, "owner": {"display_name": "cookre", "reputation": 683, "user_id": 39195, "user_type": "registered"}, "last_editor": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}, "last_edit_date": 1231008023, "up_vote_count": 11}, {"community_owned_date": 1230952533, "body": "<p>According to the amount of feedback I've gotten, my most controversial opinion, apparently, is that <a href=\"http://www.billthelizard.com/2008/12/books-programmers-dont-really-read.html\" rel=\"nofollow\">programmers don't always read the books they claim to have read</a>.  This is followed closely by my opinion that <a href=\"http://www.billthelizard.com/2008/12/education-vs-experience.html\" rel=\"nofollow\">a programmer with a formal education is better than the same programmer who is self-taught</a> (but not necessarily better than <em>a different</em> programmer who is self-taught).</p>\n", "is_accepted": false, "tags": [], "answer_id": 408539, "down_vote_count": 0, "last_activity_date": 1231022333, "comments": [{"body": "I&#39;m proud to say I&#39;ve read all the programming books I own. Even the monsterous Programming Python and Programming Perl.", "edited": false, "comment_id": 237615, "creation_date": 1231155745, "score": 0, "owner": {"display_name": "sli", "reputation": 753, "user_id": 13876, "user_type": "registered", "accept_rate": 100}}, {"body": "I have a B.A. in English. It is likely that I&#39;m a better programmer for it. Is that what you mean?", "edited": false, "comment_id": 253792, "creation_date": 1231548067, "score": 0, "owner": {"display_name": "postfuturist", "reputation": 11180, "user_id": 1892, "user_type": "registered", "accept_rate": 75}}, {"body": "You over-estimate the value of education. I&#39;ve been a full time programmer for 15 years and am self-taught. When I meet developers who are fresh out of school, I sometimes wonder if there whole education wasn&#39;t a big waste of time. They know next to nothing about &quot;the real world&quot;, can seldomly work independently and their skills are average at best.", "edited": false, "comment_id": 2710195, "creation_date": 1271925833, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "@Seventh Element: I would expect someone fresh out of school with no work experience to have average skills.  Comparing a fresh graduate to someone with 15 years of work experience is comparing apples to oranges.  I worked as a programmer for 8 years before going back to school to get my degree.  I think I have a pretty strong grasp of the value of my education <i>to me</i>.  You get out of it what you put into it.", "edited": false, "reply_to_user": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}, "comment_id": 2711599, "creation_date": 1271938441, "score": 0, "owner": {"display_name": "Bill the Lizard", "reputation": 182561, "user_id": 1288, "user_type": "registered", "accept_rate": 94}}], "creation_date": 1230952533, "comment_count": 4, "score": 6, "owner": {"display_name": "Bill the Lizard", "reputation": 182561, "user_id": 1288, "user_type": "registered", "accept_rate": 94}, "last_editor": {"display_name": "Bill the Lizard", "reputation": 182561, "user_id": 1288, "user_type": "registered", "accept_rate": 94}, "last_edit_date": 1231022333, "up_vote_count": 6}, {"community_owned_date": 1230954774, "body": "<p>The best programmers trace all their code in the debugger and test all paths.</p>\n\n<p>Well... the OP said controversial!</p>\n", "answer_id": 408569, "tags": [], "down_vote_count": 2, "last_activity_date": 1230954774, "comments": [{"body": "Please justify your position.  Note: test all paths requires that you only write paths you can test.  Mindless error handlers go away.", "edited": false, "comment_id": 234411, "creation_date": 1231004503, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "Ever heard of unit tests? Using unit tests you don&#39;t need to &quot;test all paths&quot; after each change you made to the code. (Anyway, I think it&#39;s is impossible to test all paths except in a tiny little application)", "edited": false, "comment_id": 1622488, "creation_date": 1258371706, "score": 0, "owner": {"display_name": "Stefan Steinegger", "reputation": 41258, "user_id": 2658202, "user_type": "registered", "accept_rate": 92}}, {"body": "A corollary: The fewer paths a piece of code has the better.", "edited": false, "comment_id": 1808259, "creation_date": 1260838122, "score": 0, "owner": {"display_name": "dan-gph", "reputation": 6682, "user_id": 60620, "user_type": "registered", "accept_rate": 82}}], "creation_date": 1230954774, "comment_count": 3, "score": 8, "owner": {"display_name": "Enigme", "reputation": 16, "user_id": 18245, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 10}, {"community_owned_date": 1230958435, "body": "<p><strong>The more process you put around programming, the worse the code becomes</strong></p>\n\n<p>I have noticed something in my 8 or so years of programming, and it seems ridiculous. It's that the only way to get quality is to employ quality developers, and remove as much process and formality from them as you can. Unit testing, coding standards, code/peer reviews, etc only reduce quality, not increase it. It sounds crazy, because the opposite should be true (more unit testing should lead to better code, great coding standards should lead to more readable code, code reviews should improve the quality of code) but it's not.</p>\n\n<p>I think it boils down to the fact we call it \"Software Engineering\" when really it's design and not engineering at all.</p>\n\n<p><hr></p>\n\n<p>Some numbers to substantiate this statement:</p>\n\n<blockquote>\n  <p>From the Editor</p>\n  \n  <p>IEEE Software, November/December 2001</p>\n  \n  <h2><a href=\"http://www.stevemcconnell.com/ieeesoftware/eic14.htm\" rel=\"nofollow\">Quantifying Soft Factors</a></h2>\n  \n  <p>by <em>Steve McConnell</em></p>\n  \n  <p>...</p>\n  \n  <p><strong>Limited Importance of Process Maturity</strong></p>\n  \n  <p>...\n  In comparing medium-size projects\n  (100,000 lines of code), the one with\n  the worst process will require 1.43\n  times as much effort as the one with\n  the best process, all other things\n  being equal. In other words, <strong>the\n  maximum influence of process maturity\n  on a project\u2019s productivity is 1.43</strong>. ...</p>\n  \n  <p>... What Clark doesn\u2019t emphasize is that\n  for a program of 100,000 lines of\n  code, several human-oriented factors\n  influence productivity more than\n  process does. ...</p>\n  \n  <p>... The seniority-oriented factors alone\n  (AEXP, LTEX, PEXP) exert an influence\n  of 3.02. <strong>The seven\n  personnel-oriented factors\n  collectively</strong> (ACAP, AEXP, LTEX,\n  PCAP, PCON, PEXP, and SITE <strong>\u00a7</strong>) <strong>exert a\n  staggering influence range of 25.8!</strong>\n  This simple fact accounts for much of\n  the reason that non-process-oriented\n  organizations such as Microsoft,\n  Amazon.com, and other entrepreneurial\n  powerhouses can experience\n  industry-leading productivity while\n  seemingly shortchanging process. ...</p>\n  \n  <p><strong>The Bottom Line</strong></p>\n  \n  <p>... It turns out that trading process\n  sophistication for staff continuity,\n  business domain experience, private\n  offices, and other human-oriented\n  factors is a sound economic tradeoff.\n  Of course, the best organizations\n  achieve high motivation and process\n  sophistication at the same time, and\n  that is the key challenge for any\n  leading software organization.</p>\n</blockquote>\n\n<p><strong>\u00a7</strong> Read the article for an explanation of these acronyms.</p>\n", "is_accepted": false, "tags": [], "answer_id": 408623, "down_vote_count": 4, "last_activity_date": 1257450242, "comments": [{"body": "It sounds like you&#39;re seeing process being used to compensate for poor programmers, not to enhance great developers.  This is why the Agile Manifest says &quot;Individuals and interactions over processes and tools&quot;.   Instead of adding process for poor programmers, add it when # of programmers grows.", "edited": false, "comment_id": 234409, "creation_date": 1231004440, "score": 4, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "@jay not quite. I think that process even put around the best developers causes a decrease in code quality. I would liken it to meeting a famous painter, and then telling him the rules he needs to abide by to make a good painting. It might make sense to you, but it&#39;s ridiculous.", "edited": false, "comment_id": 235665, "creation_date": 1231066763, "score": 1, "owner": {"display_name": "rustyshelf", "reputation": 19472, "user_id": 6044, "user_type": "registered", "accept_rate": 86}}, {"body": "I suspect great painters have their own processes.", "edited": false, "comment_id": 236404, "creation_date": 1231100578, "score": 0, "owner": {"display_name": "Alex Baranosky", "reputation": 13127, "user_id": 47630, "user_type": "registered", "accept_rate": 80}}, {"body": "Process takes away energy that makes code better - that applies to coders good and bad.  Some process is useful but process breeds process and you always end up with too much.", "edited": false, "comment_id": 237112, "creation_date": 1231132199, "score": 0, "owner": {"display_name": "Kendall Helmstetter Gelner", "reputation": 59340, "user_id": 6330, "user_type": "registered", "accept_rate": 80}}, {"body": "@GordonG Perhaps I should have said the more &#39;external&#39; process...", "edited": false, "comment_id": 237291, "creation_date": 1231141648, "score": 0, "owner": {"display_name": "rustyshelf", "reputation": 19472, "user_id": 6044, "user_type": "registered", "accept_rate": 86}}, {"body": "I couldn&#39;t agree with you more! The arguments I&#39;ve gotten into with other programmers over their strict adherence to processes could fill a book the size of War And Peace. That includes both &quot;good&quot; and bad processes, though.", "edited": false, "comment_id": 237569, "creation_date": 1231154070, "score": 0, "owner": {"display_name": "sli", "reputation": 753, "user_id": 13876, "user_type": "registered", "accept_rate": 100}}, {"body": "I&#39;ve seen the opposite effect. I worked a company which used an Agile methodology, and the code quality was nightmarishly bad, beyond awful. I now work at a company with a very rigid process, lots of red tape around undocumented changes, and the resulting code is top notch.", "edited": false, "comment_id": 250539, "creation_date": 1231468651, "score": 0, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}, {"body": "One size does not fit all. Small project, small team in one location, experienced developers, domain expert on site, software not absolutely critical? (some software, if you have a bug someone might die.) Then yes, just run wild. If not, you need more process.", "edited": false, "comment_id": 299660, "creation_date": 1233057418, "score": 0, "owner": {"display_name": "MarkJ", "reputation": 23308, "user_id": 15639, "user_type": "registered", "accept_rate": 67}}, {"body": "If your processes make things harder, you&#39;re doing it wrong. It should be like a aircraft takeoff checklist, helps you remember to do stuff in the right order. Automate things: you&#39;re a software developer dammit. Make the easy thing the right thing.", "edited": false, "comment_id": 317172, "creation_date": 1233540046, "score": 3, "owner": {"display_name": "Tim Williscroft", "reputation": 3095, "user_id": 2789, "user_type": "registered", "accept_rate": 75}}], "creation_date": 1230958435, "comment_count": 9, "score": 24, "owner": {"display_name": "rustyshelf", "reputation": 19472, "user_id": 6044, "user_type": "registered", "accept_rate": 86}, "last_editor": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}, "last_edit_date": 1257450242, "up_vote_count": 28}, {"community_owned_date": 1230958461, "body": "<ul>\n<li><p><a href=\"http://xahlee.org/Periodic_dosage_dir/skami_prosa.html\" rel=\"nofollow\">Xah Lee: actually has some pretty noteworthy and legitimate viewpoints if you can filter out all the invective, and rationally evaluate statements without agreeing (or disagreeing) based solely on the personality behind the statements. A lot of my \"controversial\" viewpoints have been echoed by him, and other notorious \"trolls\" who have criticized languages or tools I use(d) on a regular basis.</p></li>\n<li><p>Documentation Generators</a>: ... the kind where the creator invented some custom-made especially-for-documenting-sourcecode roll-your-own syntax (including, but not limited to JavaDoc) are totally superfluous and a waste of time because:</p>\n\n<ul>\n<li>1) They are underused by the people who should be using them the most; and</li>\n<li>2) All of these mini-documentation-languages <em>all of them</em> could easily be replaced with YAML</li>\n</ul></li>\n</ul>\n", "answer_id": 408624, "tags": [], "down_vote_count": 1, "last_activity_date": 1230958461, "comments": [{"body": "Replace a markup language with YAML... you must be crazy.  Voting up for good controversy.", "edited": false, "comment_id": 234723, "creation_date": 1231015670, "score": 0, "owner": {"display_name": "Rene Saarsoo", "reputation": 6862, "user_id": 15982, "user_type": "registered", "accept_rate": 61}}], "creation_date": 1230958461, "comment_count": 1, "score": 1, "owner": {"display_name": "dreftymac", "reputation": 9567, "user_id": 42223, "user_type": "registered", "accept_rate": 74}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1230958876, "body": "<p><strong>Inheritance is evil and should be deprecated.</strong></p>\n\n<p>The truth is aggregation is better in all cases. Static typed OOP languages can't avoid inheritance, it's the only way to describe what method wants from a type. But dynamic languages and duck typing can live without it. Ruby mixins is much more powerful then inheritance and a lot more controllable.</p>\n", "answer_id": 408629, "tags": [], "down_vote_count": 4, "last_activity_date": 1230958876, "comments": [{"body": "When I teach this, I make a big point of telling people that I&#39;m only teaching it because they have to know the syntax to do it. There are other things we have to teach because there is special syntax involved, and people take what they learn from special syntax and use it all the time.", "edited": false, "comment_id": 233677, "creation_date": 1230959511, "score": 0, "owner": {"display_name": "brian d foy", "reputation": 79750, "user_id": 2766176, "user_type": "registered", "accept_rate": 67}}, {"body": "My controversial opinion in this regard is anyone who describes a technology as &quot;evil&quot; is evil. Patterns don&#39;t kill people, people kill people.", "edited": false, "comment_id": 233678, "creation_date": 1230959511, "score": 0, "owner": {"display_name": "dreftymac", "reputation": 9567, "user_id": 42223, "user_type": "registered", "accept_rate": 74}}, {"body": "I don&#39;t think I agree, but I found your post interesting: upvoted.", "edited": false, "comment_id": 234403, "creation_date": 1231004264, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "&quot;Static typed OOP languages can&#39;t avoid inheritance,&quot; -- OCaml is a statically typed OOP language, but it also supports structural typing ((<a href=\"http://en.wikipedia.org/wiki/Structural_type_system\" rel=\"nofollow\">en.wikipedia.org/wiki/Structural_type_system</a>), which is more or less &quot;duck typing for static languages&quot;. It also downplays the role of inheritance.", "edited": false, "comment_id": 235285, "creation_date": 1231040806, "score": 0, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}, {"body": "Even in statically typed languages inheritance is overused. Prefer composition to inheritance in each and any language.", "edited": false, "comment_id": 238676, "creation_date": 1231180136, "score": 0, "owner": {"display_name": "David Rodr\u00edguez - dribeas", "reputation": 137526, "user_id": 36565, "user_type": "registered"}}, {"body": "&quot;Static typed OOP languages can&#39;t avoid inheritance,&quot; Of course they can, with interfaces, delegations and programming by contract. Apart from that, and the &quot;in all cases&quot; part (I&#39;d have said &quot;in most cases&quot;), I agree.", "edited": false, "comment_id": 267454, "creation_date": 1232010217, "score": 0, "owner": {"display_name": "fbonnet", "reputation": 1958, "user_id": 54574, "user_type": "registered", "accept_rate": 50}}], "creation_date": 1230958876, "comment_count": 6, "score": 5, "owner": {"display_name": "vava", "reputation": 12700, "user_id": 6258, "user_type": "registered", "accept_rate": 70}, "is_accepted": false, "up_vote_count": 9}, {"community_owned_date": 1230959491, "body": "<p>Correct every defect when it's discovered. Not just \"severity 1\" defects; <strong>all</strong> defects.</p>\n\n<p>Establish a deployment mechanism that makes application updates immediately available to users, but allows them to choose when to accept these updates. Establish a direct communication mechanism with users that enables them to report defects, relate their experience with updates, and suggest improvements.</p>\n\n<p>With aggressive testing, many defects can be discovered during the iteration in which they are created; immediately correcting them reduces developer interrupts, a significant contributor to defect creation. Immediately correcting defects reported by users forges a constructive community, replacing product quality with product improvement as the main topic of conversation.  Implementing user-suggested improvements that are consistent with your vision and strategy produces community of enthusiastic evangelists.</p>\n", "is_accepted": false, "tags": [], "answer_id": 408640, "down_vote_count": 1, "last_activity_date": 1248836435, "comments": [{"body": "not really &quot;controversial&quot; - it&#39;s the standing practice everywhere I&#39;ve worked", "edited": false, "comment_id": 1470445, "creation_date": 1256185377, "score": 0, "owner": {"display_name": "warren", "reputation": 13593, "user_id": 4418, "user_type": "registered", "accept_rate": 94}}], "creation_date": 1230959491, "comment_count": 1, "score": 8, "owner": {"display_name": "Dave", "reputation": 559, "user_id": 22018, "user_type": "registered"}, "last_editor": {"display_name": "eswald", "reputation": 4322, "user_id": 21229, "user_type": "registered"}, "last_edit_date": 1248836435, "up_vote_count": 9}, {"community_owned_date": 1230960717, "body": "<p><strong>A degree in computer science does not---and is not supposed to---teach you to be a programmer.</strong></p>\n\n<p>Programming is a trade, computer science is a field of study.  You can be a great programmer and a poor computer scientist and a great computer scientist and an awful programmer.  It is important to understand the difference.</p>\n\n<p>If you want to be a programmer, learn Java.  If you want to be a computer scientist, learn at least three almost completely different languages.  e.g. (assembler, c, lisp, ruby, smalltalk)</p>\n", "is_accepted": false, "tags": [], "answer_id": 408660, "down_vote_count": 7, "last_activity_date": 1231446082, "comments": [{"body": "The first one is not really controversial, at least not in the CS field.", "edited": false, "comment_id": 234560, "creation_date": 1231009610, "score": 2, "owner": {"display_name": "wds", "reputation": 13116, "user_id": 10098, "user_type": "registered", "accept_rate": 82}}, {"body": "I disagree.  I know many people studying computer science that think they are getting a degree in programming.  Every time I hear whining about why CS programs don&#39;t teach everyone Java I offer up a pained sigh.", "edited": false, "comment_id": 236874, "creation_date": 1231119861, "score": 0, "owner": {"display_name": "Starkii", "reputation": 773, "user_id": 14720, "user_type": "registered"}}, {"body": "Java doesn&#39;t really teach you how to be a real programmer, since there&#39;s so much you can&#39;t learn with it.  It&#39;s like building a car with legos.", "edited": false, "comment_id": 239714, "creation_date": 1231207082, "score": 6, "owner": {"display_name": "Lance Roberts", "reputation": 12787, "user_id": 13295, "user_type": "registered", "accept_rate": 92}}, {"body": "I may agree with the first point, but saying that knowing only Java could make a programmer ..... that&#39;s a crime, punishable with death!!!", "edited": false, "comment_id": 243154, "creation_date": 1231294324, "score": 7, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "Can you move your second answer to another post so it can be rated separately.", "edited": false, "comment_id": 243591, "creation_date": 1231311427, "score": 0, "owner": {"display_name": "Greg Domjan", "reputation": 6714, "user_id": 37558, "user_type": "registered", "accept_rate": 68}}, {"body": "@Greg: Done. Thanks for the suggestion.", "edited": false, "comment_id": 249647, "creation_date": 1231447297, "score": 0, "owner": {"display_name": "Starkii", "reputation": 773, "user_id": 14720, "user_type": "registered"}}, {"body": "I agree with &quot;does not&quot;, but not with &quot;is not supposed to&quot;. Where else in academia are you supposed to learn to program? There is no analog in software to the Engineering disciplies (mechanical, electrical, civil etc.).", "edited": false, "comment_id": 262034, "creation_date": 1231866736, "score": 0, "owner": {"display_name": "MusiGenesis", "reputation": 52525, "user_id": 14606, "user_type": "registered", "accept_rate": 74}}, {"body": "@MusiGenesis: My local community college has an &quot;Associate in Applied Science Degree&quot; in &quot;Computer Programming&quot;.  (Washtenaw Community College) That is where I would go to be a programmer.  It is important not to confuse Computer Science with Computer Programmer.  They are <i>NOT</i> the same thing", "edited": false, "comment_id": 270415, "creation_date": 1232078870, "score": 0, "owner": {"display_name": "Starkii", "reputation": 773, "user_id": 14720, "user_type": "registered"}}, {"body": "@MusiGenesis: I&#39;ve actually just completed my degree in Engineering (Software). I&#39;m certainly not a computer scientist, and I don&#39;t want to be.", "edited": false, "comment_id": 438721, "creation_date": 1236602626, "score": 1, "owner": {"display_name": "ajlane", "reputation": 777, "user_id": 62891, "user_type": "registered", "accept_rate": 80}}, {"body": "A CS degree is indeed not a programming degree. But then again, a programming degree doesn&#39;t make you a good programmer either. Both can introduce you to the basics and some special subfields, but it&#39;s up to you to use that as one of many sources of information as you develop your skills. Now, you may be able to solve any problem your work poses to you using a single language, like Java. But is it the best way? Learning several different languages and paradigms can help expand your perception of how problems can be solved using program code, and allow you to create better solutions.", "edited": false, "comment_id": 635685, "creation_date": 1241557336, "score": 0, "owner": {"display_name": "Lucas Lindstr\u00f6m", "reputation": 922, "user_id": 50844, "user_type": "registered", "accept_rate": 75}}, {"body": "I disagree that CS does not teach you to be a programmer. It DOES and SHOULD do that - incidentally by teaching multiple languages, not one only - but that&#39;s not ALL it should do. CS degrees should also teach you about as many different areas of CS as possible, eg basic programming, functional languages, databases, cryptography, AI, language engineering (ie compilers/parsing), architecture and math-leaning areas like computer graphics and various algorithms.", "edited": false, "comment_id": 652606, "creation_date": 1241913849, "score": 3, "owner": {"display_name": "DisgruntledGoat", "reputation": 25603, "user_id": 37947, "user_type": "registered", "accept_rate": 98}}, {"body": "Programming is easier in some fields than in others.  Web development and most of the work you do in Information Systems is not hard.  If you have a bit of a knack for programming, you can do this stuff very well without a CS or engineering degree.  If you want to be a game programmer, write device drivers, work with embedded systems, or other things of the like, you&#39;ll need to know certain things from the degree.", "edited": false, "comment_id": 3065064, "creation_date": 1276026399, "score": 1, "owner": {"display_name": "RavB", "reputation": 1114, "user_id": 340574, "user_type": "registered", "accept_rate": 78}}, {"body": "I disagree. CS degree teaches you how to solve problems often using C/C++ (low level languages), it teaches you algorithm design, the theory behind OS, general algorithms used everywhere - all of these apply if you want to code. In other words, you get the basics - a foundation upon you can build by learning more languages. Knowing Java doesn&#39;t make you a programmer, in fact, it&#39;s the most ridiculous thing I have heard for awhile.", "edited": false, "comment_id": 4691170, "creation_date": 1291151561, "score": 0, "owner": {"display_name": "sarsnake", "reputation": 6307, "user_id": 57997, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1230960717, "comment_count": 13, "score": 115, "owner": {"display_name": "Starkii", "reputation": 773, "user_id": 14720, "user_type": "registered"}, "last_editor": {"display_name": "Starkii", "reputation": 773, "user_id": 14720, "user_type": "registered"}, "last_edit_date": 1231446082, "up_vote_count": 122}, {"community_owned_date": 1230964014, "body": "<p>Web services absolutely suck, and are not the way of the future.  They are ridiculously inefficient and they don't guarantee ordered delivery.  Web services should NEVER be used within a system where both client and server are being written.  They are mostly useful for micky mouse mash-up type applications.  They should definitely not be used for any kind of connection-oriented communication.</p>\n\n<p>This stance has gotten myself and colleagues into some very heated discussions, since web services is such a buzzy topic.  Any project that mandates the use of web services is doomed because it is clearly already having ridiculous demands pushed down from management.</p>\n", "answer_id": 408710, "tags": [], "down_vote_count": 0, "last_activity_date": 1230964014, "comments": [{"body": "My company writes auto-insurance software, and we rely on several off-site web services to verify VIN numbers and run OFAC checks on people. We also make some of our APIs available through web services to third-party vendors. How would you suggest our software be written without web services?", "edited": false, "comment_id": 235290, "creation_date": 1231041310, "score": 0, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}, {"body": "@Juliet: what in &quot; Web services should NEVER be used within a system <b>where both client and server are being written</b> &quot; do you not understand? It&#39;s clear that in your situation you don&#39;t control both parts of the system, so your rhetorical question is irrelevant.", "edited": false, "comment_id": 1559352, "creation_date": 1257470513, "score": 0, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}], "creation_date": 1230964014, "comment_count": 2, "score": 8, "owner": {"display_name": "Jesse Pepper", "reputation": 2148, "user_id": 43058, "user_type": "registered", "accept_rate": 47}, "is_accepted": false, "up_vote_count": 8}, {"community_owned_date": 1230967611, "body": "<p><strong>My controversial opinion: Object Oriented Programming is absolutely the worst thing that's ever happened to the field of software engineering.</strong></p>\n\n<p>The primary problem with OOP is the total lack of a rigorous definition that everyone can agree on. This easily leads to implementations that have logical holes in them, or language like Java that adhere to this bizarre religious dogma about what OOP means, while forcing the programmer into doing all these contortions and \"design patterns\" just to work around the limitations of a particular OOP system.</p>\n\n<p>So, OOP tricks the programmer into thinking they're making these huge productivity gains, that OOP is somehow a \"natural\" way to think, while forcing the programmer to type boatloads of unnecessary boilerplate.</p>\n\n<p>Then since nobody knows what OOP actually means, we get vast amounts of time wasted on petty arguments about whether language X or Y is \"truly OOP\" or not, what bizarre cargo cultish language features are absolutely \"essential\" for a language to be considered \"truly OOP\".</p>\n\n<p>Instead of demanding that this language or that language be \"truly oop\", we should be looking at what language features are shown by experiment, to <em>actually</em> increase productivity, instead of trying to force it into being some imagined ideal language, or indeed forcing our programs to conform to some platonic ideal of a \"truly object oriented program\".</p>\n\n<p>Instead of insisting that our programs conform to some platonic ideal of \"Truly object oriented\", how about we focus on adhering to good engineering principles, making our code easy to read and understand, and using the features of a language that are productive and helpful, regardless of whether they are \"OOP\" enough or not.</p>\n", "is_accepted": false, "tags": [], "answer_id": 408751, "down_vote_count": 14, "last_activity_date": 1251488481, "comments": [{"body": "It sounds like you&#39;re mixing programming methodologies and language design philosophies, while also recognizing the damage of zealotry. As a result, your potentially interesting thoughts are cluttered and unclear.", "edited": false, "comment_id": 234399, "creation_date": 1231004158, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "The &quot;Truly XYZ&quot; idiom is usually a case of the &quot;No True Scotsman&quot; fallacy. As far as the rest, have you read <a href=\"http://xahlee.org/Periodic_dosage_dir/t2/oop.html\" rel=\"nofollow\">xahlee.org/Periodic_dosage_dir/t2/oop.html</a>? Also, this seems very similar to a perlmonks post, have you written on this before?", "edited": false, "comment_id": 234581, "creation_date": 1231010493, "score": 0, "owner": {"display_name": "dreftymac", "reputation": 9567, "user_id": 42223, "user_type": "registered", "accept_rate": 74}}, {"body": "a Language is user interface that can make a programming methodology easier. An OOP language, therefore, is a language designed to make OOP programming easier, making them closely related subjects. This position was argued better by Apocalisp, elsewhere in this question.", "edited": false, "comment_id": 234943, "creation_date": 1231022355, "score": 0, "owner": {"display_name": "Breton", "reputation": 10548, "user_id": 51101, "user_type": "registered", "accept_rate": 62}}, {"body": "I&#39;ve never hear anyone pontificate on the phrase &quot;truly object oriented&quot; in the past 10 years I&#39;ve been programming. Never. Not even once. Are you actually quoting some obnoxious manager?", "edited": false, "comment_id": 235298, "creation_date": 1231041953, "score": 0, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}, {"body": "Anyone who started with java, or C++, and then tried lua, or javascript, or some other language that doesn&#39;t have some arbirary java feature. Anyone entrenched in the Java world who has a self superior view that singletons are a terrible idea. Anyone who&#39;s read teh GoF book and thought it was future", "edited": false, "comment_id": 236632, "creation_date": 1231110394, "score": 0, "owner": {"display_name": "Breton", "reputation": 10548, "user_id": 51101, "user_type": "registered", "accept_rate": 62}}, {"body": "Almost, IMHO. I think OOP is the ideal way to deal with some aspects of programming, but it&#39;s not what it&#39;s made out to be: It&#39;s not a replacement for every methodology and/or piece of code you ever come across; It&#39;s not immune from being taken too far; It&#39;s not your master; It&#39;s not irreplaceable.", "edited": false, "comment_id": 246221, "creation_date": 1231365852, "score": 0, "owner": {"display_name": "jTresidder", "reputation": 482, "user_id": 36365, "user_type": "registered"}}, {"body": "Do you come from a VB6 background and never embraced OOP?", "edited": false, "comment_id": 711013, "creation_date": 1243144096, "score": 0, "owner": {"display_name": "ChadD", "reputation": 5705, "user_id": 109676, "user_type": "registered", "accept_rate": 81}}, {"body": "Incorrect. There&#39;s nothing wrong with OOP, it&#39;s just a strategy. What the problem is, is the attitude that I should have &quot;embraced&quot; it, or the only alternative is I&#39;m some backwards beginner. It is not the end all be all, it is not a religion, and I don&#39;t have to be crucified in order to expunge me from the pool of programmers so that all &quot;right&quot; thinking programmers can live free of sin. I posted my answer to this question because it is the most controversial opinion I have. That was the question.", "edited": false, "comment_id": 716586, "creation_date": 1243304569, "score": 1, "owner": {"display_name": "Breton", "reputation": 10548, "user_id": 51101, "user_type": "registered", "accept_rate": 62}}, {"body": "the reason it&#39;s the worst thing to happen to programming is that it prevents programmers from looking at other solutions that may actually be better suited to the problem, and it prevents us from looking ot or accepting new paradigms that might be better suited to most problems.", "edited": false, "comment_id": 716591, "creation_date": 1243304736, "score": 1, "owner": {"display_name": "Breton", "reputation": 10548, "user_id": 51101, "user_type": "registered", "accept_rate": 62}}, {"body": "I hate when newcomers lecture me about the greatness of OOP when I program in OO languages from mid &#39;80s. They are totally blind to OOP shortcomings, they don&#39;t know that &quot;OOP&quot; is an ill-defined concept and, worst of all, they ignore a whole world of options w.r.t. programming paradigms.", "edited": false, "comment_id": 1559239, "creation_date": 1257468921, "score": 1, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}, {"body": "+1 Wish I could upvote more. This field is rife with bandwagons, gurus, &quot;right thinking&quot;, and occasionally good ideas made into religions. To a mechanical/electrical engineer (like me) this is so weird. I assume if something is true there&#39;s a scientific reason why. I also assume inventiveness is a good thing. Very little of that in this field.", "edited": false, "comment_id": 2253587, "creation_date": 1266505166, "score": 2, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1230967611, "comment_count": 11, "score": 20, "owner": {"display_name": "Breton", "reputation": 10548, "user_id": 51101, "user_type": "registered", "accept_rate": 62}, "last_editor": {"display_name": "Adam Neal", "reputation": 1682, "user_id": 13791, "user_type": "registered", "accept_rate": 88}, "last_edit_date": 1251488481, "up_vote_count": 34}, {"community_owned_date": 1230976020, "body": "<p><strong>UML diagrams are highly overrated</strong></p>\n\n<p>Of course there are useful diagrams e.g. <a href=\"http://en.wikipedia.org/wiki/Composite_pattern\" rel=\"nofollow\">class diagram for the Composite Pattern</a>, but many UML diagrams have absolutely no value.</p>\n", "is_accepted": false, "tags": [], "answer_id": 408824, "down_vote_count": 5, "last_activity_date": 1231417276, "creation_date": 1230976020, "comment_count": 0, "score": 384, "owner": {"display_name": "Ludwig Wensauer", "reputation": 1142, "user_id": 49786, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "John Topley", "reputation": 66220, "user_id": 1450, "user_type": "registered", "accept_rate": 98}, "last_edit_date": 1231417276, "up_vote_count": 389}, {"community_owned_date": 1230978225, "body": "<p><strong>You shouldn't settle on the first way you find to code something that \"works.\"</strong></p>\n\n<p>I really don't think this should be controversial, but it is.  People see an example from elsewhere in the code, from online, or from some old \"Teach yourself Advanced Power SQLJava#BeansServer in 3.14159 minutes\" book dated 1999, and they think they know something and they copy it into their code.  They don't walk through the example to find out what each line does.  They don't think about the design of their program and see if there might be a more organized or more natural way to do the same thing.  They don't make any attempt at keeping their skill sets up to date to learn that they are using ideas and methods deprecated in the last year of the previous millenium.  They don't seem to have the experience to learn that what they're copying has created specific horrific maintenance burdens for programmers for years and that they can be avoided with a little more thought.</p>\n\n<p>In fact, they don't even seem to recognize that there might be more than one way to do something.</p>\n\n<p>I come from the Perl world, where one of the slogans is \"There's More Than One Way To Do It.\" (TMTOWTDI)  People who've taken a cursory look at Perl have written it off as \"write-only\" or \"unreadable,\" largely because they've looked at crappy code written by people with the mindset I described above.  Those people have given zero thought to design, maintainability, organization, reduction of duplication in code, coupling, cohesion, encapsulation, etc.  They write crap.  Those people exist programming in every language, and easy to learn languages with many ways to do things give them plenty of rope and guns to shoot and hang themselves with.  Simultaneously.</p>\n\n<p>But if you hang around the Perl world for longer than a cursory look, and watch what the long-timers in the community are doing, you see a remarkable thing: the good Perl programmers spend some time seeking to find the <strong>best</strong> way to do something.  When they're naming a new module, they ask around for suggestions and bounce their ideas off of people.  They hand their code out to get looked at, critiqued, and modified.  If they have to do something nasty, they encapsulate it in the smallest way possible in a module for use in a more organized way.  Several implementations of the same idea might hang around for awhile, but they compete for mindshare and marketshare, and they compete by trying to do the best job, and a big part of that is by making themselves easily maintainable.  Really good Perl programmers seem to <strong>think</strong> <strong>hard</strong> about what they are doing and looking for the best way to do things, rather than just grabbing the first idea that flits through their brain.</p>\n\n<p>Today I program primarily in the Java world.  I've seen some really good Java code, but I see a lot of junk as well, and I see more of the mindset I described at the beginning: people settle on the first ugly lump of code that seems to work, without understanding it, without thinking if there's a better way.</p>\n\n<p>You will see both mindsets in every language.  I'm not trying to impugn Java specifically.  (Actually I really like it in some ways ... maybe that should be my real controversial opinion!)  But I'm coming to believe that every programmer needs to spend a good couple of years with a TMTOWTDI-style language, because even though conventional wisdom has it that this leads to chaos and crappy code, it actually seems to produce people who understand that you need to think about the repercussions of what you are doing instead of trusting your language to have been designed to make you do the right thing with no effort.</p>\n\n<p>I do think you can err too far in the other direction: i.e., perfectionism that totally ignores your true needs and goals (often the true needs and goals of your business, which is usually profitability).  But I don't think anyone can be a truly great programmer without learning to invest some greater-than-average effort in thinking about finding the best (or at least one of the best) way to code what they are doing.</p>\n", "answer_id": 408854, "tags": [], "down_vote_count": 0, "last_activity_date": 1230978225, "creation_date": 1230978225, "comment_count": 0, "score": 6, "owner": {"display_name": "skiphoppy", "reputation": 20237, "user_id": 18103, "user_type": "registered", "accept_rate": 67}, "is_accepted": false, "up_vote_count": 6}, {"community_owned_date": 1230978449, "body": "<p><strong>Variable_Names_With_Bloody_Underscores</strong></p>\n\n<p>or even worse</p>\n\n<p><strong>CAPITALIZED_VARIABLE_NAMES_WITH_BLOODY_UNDERSCORES</strong></p>\n\n<p>should be globally expunged... with prejudice! CamelCapsAreJustFine.\n(Glolbal constants not withstanding)</p>\n\n<p>GOTO statements are for use by developers under the age of 11</p>\n\n<p>Any language that does not support pointers is not worthy of the name</p>\n\n<p>.Net = .Bloat\nThe finest example of microsoft's efforts for web site development (Expressionless Web 2)\nis the finest example of slow bloated cr@pw@re ever written.\n(try Web Studio instead)</p>\n\n<p>Response:\nOK well let me address the Underscore issue a little. From the C link you provided:</p>\n\n<p>-Global constants should be all caps with '_' separators. \nThis I actually agree with because it is so BLOODY_OBVIOUS</p>\n\n<p>-Take for example NetworkABCKey. Notice how the C from ABC and K from key are confused. Some people don't mind this and others just hate it so you'll find different policies in different code so you never know what to call something. </p>\n\n<p>I fall into the former category. I choose names VERY carefully and if you cannot figure out in one glance that the K belongs to Key then english is probably not your first language.</p>\n\n<ul>\n<li><p>C Function Names</p>\n\n<ul>\n<li>In a C++ project there should be very few C functions.</li>\n<li>For C functions use the GNU convention of all lower case letters with '_' as the word delimiter. </li>\n</ul></li>\n</ul>\n\n<p>Justification</p>\n\n<pre><code>* It makes C functions very different from any C++ related names.\n</code></pre>\n\n<p>Example</p>\n\n<p>int\n   some_bloody_function()\n   {\n   }</p>\n\n<p>These \"standards\" and conventions are simply the arbitrary decisions handed down through time. I think that while they make a certain amount of logical sense, They clutter up code and make something that should be short and sweet to read, clumsy, long winded and cluttered.</p>\n\n<p>C has been adopted as the de-facto standard, not because it is friendly, but because it is pervasive. I can write 100 lines of C code in 20 with a syntactically friendly high level language.</p>\n\n<p>This makes the program flow easy to read, and as we all know, revisiting code after a year or more means following the breadcrumb trail all over the place. </p>\n\n<p>I do use underscores but for global variables only as they are few and far between and they stick out clearly. Other than that, a well thought out CamelCaps() function/ variable name has yet to let me down!</p>\n", "is_accepted": false, "tags": [], "answer_id": 408862, "down_vote_count": 8, "last_activity_date": 1257326268, "comments": [{"body": "Any justification for your positions?", "edited": false, "comment_id": 234394, "creation_date": 1231004016, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "So you see no value in using style (camelCase vs CamelCase vs ALL_CAPS) to indicate whether the reference is to a Class a variable an const or whatever? I can&#39;t agree. It seems you may not be aware of naming conventions as an idea. e.g. <a href=\"http://www.possibility.com/Cpp/CppCodingStandard.html#names\" rel=\"nofollow\">possibility.com/Cpp/CppCodingStandard.html#names</a>", "edited": false, "comment_id": 235721, "creation_date": 1231069484, "score": 0, "owner": {"display_name": "jwpfox", "reputation": 1170, "user_id": 18665, "user_type": "registered"}}], "creation_date": 1230978449, "comment_count": 2, "score": 5, "owner": {"display_name": "Mike Trader", "reputation": 2178, "user_id": 18749, "user_type": "registered", "accept_rate": 50}, "last_editor": {"display_name": "Mike Trader", "reputation": 2178, "user_id": 18749, "user_type": "registered", "accept_rate": 50}, "last_edit_date": 1257326268, "up_vote_count": 13}, {"community_owned_date": 1230979574, "body": "<p><strong>Requirements analysis, specification, design, and documentation will almost never fit into a \"template.\"</strong>  You are 100% of the time better off by starting with a blank document and beginning to type with a view of \"I will explain this in such a way that if I were dead and someone else read this document, they would know everything that I know and see and understand now\" and then organizing from there, letting section headings and such develop naturally and fit the task you are specifying, rather than being constrained to some business or school's idea of what your document should look like.  If you have to do a diagram, rather than using somebody's formal and incomprehensible system, you're often better off just drawing a diagram that makes sense, with a clear legend, which actually specifies the system you are trying to specify and communicates the information that the developer on the other end (often you, after a few years) needs to receive.</p>\n\n<p>[If you have to, once you've written the real documentation, you can often shoehorn it into whatever template straightjacket your organization is imposing on you.  You'll probably find yourself having to add section headings and duplicate material, though.]</p>\n\n<p>The only time templates for these kinds of documents make sense is when you have a large number of tasks which are very similar in nature, differing only in details.  \"Write a program to allow single-use remote login access through this modem bank, driving the terminal connection nexus with C-Kermit,\" \"Produce a historical trend and forecast report for capacity usage,\" \"Use this library to give all reports the ability to be faxed,\" \"Fix this code for the year 2000 problem,\" and \"Add database triggers to this table to populate a software product provided for us by a third-party vendor\" can <strong>not</strong> all be described by the same template, no matter what people may think.  And for the record, the requirements and design diagramming techniques that my college classes attempted to teach me and my classmates could not be used to specify a simple calculator program (and everyone knew it).</p>\n", "answer_id": 408877, "tags": [], "down_vote_count": 0, "last_activity_date": 1230979574, "creation_date": 1230979574, "comment_count": 0, "score": 9, "owner": {"display_name": "skiphoppy", "reputation": 20237, "user_id": 18103, "user_type": "registered", "accept_rate": 67}, "is_accepted": false, "up_vote_count": 9}, {"community_owned_date": 1230980023, "body": "<p><strong>A picture is <em>not</em> worth a thousand words.</strong></p>\n\n<p>Some pictures might be worth a thousand words.  Most of them are not.  This trite old aphorism is mostly untrue and is a pathetic excuse for many a lazy manager who did not want to read carefully created reports and documentation to say \"I need you to show me in a diagram.\"</p>\n\n<p>My wife studied for a linguistics major and saw several fascinating proofs against the conventional wisdom on pictures and logos: they do not break across language and cultural barriers, they usually do not communicate anywhere near as much information as correct text, they simply are no substitute for real communication.</p>\n\n<p>In particular, labeled bubbles connected with lines are useless if the lines are unlabeled and unexplained, and/or if every line has a different meaning instead of signifying the same relationship (unless distinguished from each other in some way).  If your lines sometimes signify relationships and sometimes indicate actions and sometimes indicate the passage of time, you're really hosed.</p>\n\n<p>Every good programmer knows you use the tool suited for the job at hand, right?  Not all systems are best specified and documented in pictures.  Graphical specification languages that can be automatically turned into provably-correct, executable code or whatever are a <strong>spectacular</strong> idea, if such things exist.  Use them when appropriate, not for everything under the sun.  Entity-Relationship diagrams are great.  But not everything can be summed up in a picture.</p>\n\n<p>Note: a <strong>table</strong> may be worth its weight in gold.  But a <strong>table</strong> is not the same thing as a <strong>picture</strong>.  And again, a well-crafted short prose paragraph may be far more suitable for the job at hand.</p>\n", "answer_id": 408891, "tags": [], "down_vote_count": 0, "last_activity_date": 1230980023, "comments": [{"body": "I don&#39;t agree that a picture is not worth a thousand words.  I do agree with the sentiment in the answer. Perhaps it would be better to ask &quot;Would you use a 1000 words when only a few (or even one) would do?&quot;.  Using an image instead of well choosen text is may effectively be just that.", "edited": false, "comment_id": 234062, "creation_date": 1230990391, "score": 0, "owner": {"display_name": "AnthonyWJones", "reputation": 134121, "user_id": 17516, "user_type": "registered", "accept_rate": 79}}, {"body": "Some words are worth thousands pictures. (What about sounds, music, odours, etc?)", "edited": false, "comment_id": 1091339, "creation_date": 1250041787, "score": 0, "owner": {"display_name": "moala", "reputation": 1784, "user_id": 54956, "user_type": "registered", "accept_rate": 74}}, {"body": "Yes but a 32,000 byte bitmap IS one thousand words. At least until you move to a 64-bit CPU.", "edited": false, "comment_id": 1563651, "creation_date": 1257527422, "score": 2, "owner": {"display_name": "Kelly S. French", "reputation": 8435, "user_id": 135078, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1230980023, "comment_count": 3, "score": 34, "owner": {"display_name": "skiphoppy", "reputation": 20237, "user_id": 18103, "user_type": "registered", "accept_rate": 67}, "is_accepted": false, "up_vote_count": 34}, {"community_owned_date": 1230980663, "body": "<p><strong>XML is highly overrated</strong></p>\n\n<p>I think too many jump onto the XML bandwagon before using their brains...\nXML for web stuff is great, as it's designed for it. Otherwise I think some <em>problem definition</em> and <em>design</em> thoughts should preempt any decision to use it. </p>\n\n<p>My 5 cents</p>\n", "answer_id": 408910, "tags": [], "down_vote_count": 15, "last_activity_date": 1230980663, "creation_date": 1230980663, "comment_count": 0, "score": 694, "owner": {"display_name": "Over Rated", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 709}, {"community_owned_date": 1230995364, "body": "<p>\"Good Coders Code and Great Coders Reuse It\" This is happening right now But \"Good Coder\" is the only <strong>ONE</strong> who enjoy that code.\n and \"Great Coders\" are for only to find out the bug in to that because they don't have the time to think and code. But they have time for find the bug in that code.</p>\n\n<p>so don't criticize!!!!!!!!</p>\n\n<p>Create your own code how <strong>YOU</strong> want.  </p>\n", "answer_id": 409172, "tags": [], "down_vote_count": 3, "last_activity_date": 1230995364, "comments": [{"body": "In the working world it is not an option to rewrite code &quot;the way you want it&quot; you have to deal with what is there regardless of who wrote it. The rest of your post is incomprehensible.", "edited": false, "comment_id": 235694, "creation_date": 1231068366, "score": 2, "owner": {"display_name": "jwpfox", "reputation": 1170, "user_id": 18665, "user_type": "registered"}}, {"body": "I totally disagree with you: do not reinvent the wheel, they say!", "edited": false, "comment_id": 1118420, "creation_date": 1250518973, "score": 0, "owner": {"display_name": "Luis Filipe", "reputation": 3853, "user_id": 20335, "user_type": "registered", "accept_rate": 95}}, {"body": "I totally agree that this is the most controversial statement.", "edited": false, "comment_id": 4631891, "creation_date": 1290637464, "score": 0, "owner": {"display_name": "nate c", "reputation": 4468, "user_id": 397474, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1230995364, "comment_count": 3, "score": -2, "owner": {"display_name": "Access Denied", "reputation": 523, "user_id": 45934, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1230998131, "body": "<p>Reuse of code is inversely proportional to its \"reusability\".  Simply because \"reusable\" code is more complex, whereas quick hacks are easy to understand, so they get reused.</p>\n\n<p>Software failures should take down the system, so that it can be examined and fixed.  Software attempting to handle failure conditions is often worse than crashing.  ie, is it better to have a system reset after crashing, or should it be indefinitely hung because the failure handler has a bug?</p>\n", "answer_id": 409251, "tags": [], "down_vote_count": 1, "last_activity_date": 1230998131, "comments": [{"body": "&quot;failures should take down the system&quot; - you&#39;re definitely on crack with this one! My entire system should <b><i>NEVER</i></b> die because <b>one</b> component hicoughed", "edited": false, "comment_id": 1470562, "creation_date": 1256188339, "score": 0, "owner": {"display_name": "warren", "reputation": 13593, "user_id": 4418, "user_type": "registered", "accept_rate": 94}}], "creation_date": 1230998131, "comment_count": 1, "score": 4, "owner": {"display_name": "Matthias Wandel", "reputation": 3451, "user_id": 20073, "user_type": "registered", "accept_rate": 76}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1230999739, "body": "<p><strong>It's okay to be Mort</strong></p>\n\n<p>Not everyone is a \"rockstar\" programmer; some of us do it because it's a good living, and we don't care about all the latest fads and trends; we just want to do our jobs.</p>\n", "answer_id": 409298, "tags": [], "down_vote_count": 2, "last_activity_date": 1230999739, "comments": [{"body": "I agree, with the caveat (and I&#39;m turning and looking in the direction of several teams in Redmond, Washington) that Mort is often unfairly scoped and not always well understood.", "edited": false, "comment_id": 744350, "creation_date": 1243883440, "score": 0, "owner": {"display_name": "Gabriel", "reputation": 1051, "user_id": 114054, "user_type": "registered"}}, {"body": "I&#39;m with you Wayne, though to stay in the industry, I think we all need to go Elvis and Einstein at times.  And we need to put in effort outside of work too.  I rested on my laurels for a while (got married, moved, had other stuff going on) and I can see tech moving beyond me and now I have to play catch up.  Tech is moving too fast for extra effort not to be put in. I&#39;m learning and doing side projects again, and I&#39;m having fun.  But I do resent the 14 hour a day folks. They will blossom, whither, and then fade. Balance is the key, but the day of being exclusively a Mort are numbered.", "edited": false, "comment_id": 857776, "creation_date": 1245965781, "score": 1, "owner": {"display_name": "infocyde", "reputation": 2260, "user_id": 99392, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1230999739, "comment_count": 2, "score": 21, "owner": {"display_name": "Wayne M", "reputation": 6803, "user_id": 40667, "user_type": "registered", "accept_rate": 86}, "is_accepted": false, "up_vote_count": 23}, {"community_owned_date": 1231000610, "body": "<p>Java is not the best thing out there. Just because it comes with an 'Enterprise' sticker does not make it good. Nor does it make it fast. Nor does it make it the answer to every question.</p>\n\n<p>Also, ROR is not all it is cracked up to be by the Blogsphere.</p>\n\n<p>While I am at it, OOP is not always good. In fact, I think it is usually bad.</p>\n", "answer_id": 409326, "tags": [], "down_vote_count": 1, "last_activity_date": 1231000610, "comments": [{"body": "oop is really bad for small-size software because it has so much overhead. but, my prof said that it&#39;s super good for large scale software, and I think you can tell by my wording that I don&#39;t know so I will just believe my prof until proven false =P", "edited": false, "comment_id": 307075, "creation_date": 1233228526, "score": 0, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}], "creation_date": 1231000610, "comment_count": 1, "score": 4, "owner": {"display_name": "Alex UK", "reputation": 59, "user_id": 51174, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1231002033, "body": "<p><strong>Opinion: most code out there is crappy, because that's what the programmers WANT it to be.</strong></p>\n\n<p>Indirectly, we have been nurturing a culture of extreme creativeness. It's not that I don't think problem solving has creative elements -- it does -- it's just that it's not even remotely the same as something like painting (see Paul Graham's famous \"Hackers and Painters\" essay). </p>\n\n<p>If we bend our industry towards that approach, ultimately it means letting every programmer go forth and whack out whatever highly creative, crazy stuff they want. Of course, for any sizable project, trying to put together dozens of unrelated, unstructured, unplanned bits into one final coherent bit won't work by definition. That's not a guess, or an estimate, it's the state of the industry that we face today. How many times have you seen sub-bits of functionality in a major program that were completely inconsistent with the rest of the code? It's so common now, it's a wonder anyone cause use any of these messes. </p>\n\n<p>Convoluted, complicated, ugly stuff that just keeps getting worse and more unstable. If we were building something physical, everyone on the planet would call us out on how horribly ugly and screwed up the stuff is, but because it more or less hidden by being virtual, we are able to get away with some of the worst manufacturing processing that our species will ever see. (Can you imagine a car where four different people designed the four different wheels, in four different ways?)</p>\n\n<p>But the sad part, the controversial part of it all, is that there is absolutely NO reason for it to be this way, other than historically the culture was towards more freedom and less organization, so we stayed that way (and probably got a lot worse). Software development is a joke, but it's a joke because that's what the programmers want it to be (but would never in a million years admit that it was true, a \"plot by management\" is a better reason for most people). </p>\n\n<p>How long will we keep shooting ourselves in the foot, before we wake up and realize that we the ones holding the gun, pointing it and also pulling the trigger?</p>\n\n<p>Paul.</p>\n", "is_accepted": false, "tags": [], "answer_id": 409362, "down_vote_count": 2, "last_activity_date": 1231023952, "comments": [{"body": "That&#39;s just a lesson one has to learn through time and experience. Nevertheless, the &quot;problem&quot; won&#39;t get fixed because the &quot;novices&quot; don&#39;t realize or call it out, and too many &quot;experienced&quot; suffer from &quot;not invented here&quot; syndrome. By the way, this influences <i>every</i> profession to some extent.", "edited": false, "comment_id": 235333, "creation_date": 1231044148, "score": 0, "owner": {"display_name": "dreftymac", "reputation": 9567, "user_id": 42223, "user_type": "registered", "accept_rate": 74}}, {"body": "You might want to check what the original meaning of &quot;shoot yourself in the foot&quot; means (as opposed to the &#39;new&#39; meaning) and then think if maybe creating a bit of pain and confusion for the return of long-term survival is what is going on here. There is a survival strategy in hard to maintain code.", "edited": false, "comment_id": 235703, "creation_date": 1231068707, "score": 0, "owner": {"display_name": "jwpfox", "reputation": 1170, "user_id": 18665, "user_type": "registered"}}, {"body": "That type of survival strategy only works in a few large static corporate environments. If hard-to-maintain code causes the project to fail and be disbanded, it provides no long term gain. But even if it works, it&#39;s a miserable existence ...", "edited": false, "comment_id": 236145, "creation_date": 1231090501, "score": 0, "owner": {"display_name": "Paul W Homer", "reputation": 2106, "user_id": 43371, "user_type": "registered", "accept_rate": 50}}, {"body": "Kudos for pointing this out. The truth is that sloppiness and heroism in software development are NOT self-evident. It&#39;s an effect of the (SW development) culture of the 60s/70s.", "edited": false, "comment_id": 237703, "creation_date": 1231159142, "score": 1, "owner": {"display_name": "Thorsten79", "reputation": 8151, "user_id": 19734, "user_type": "registered", "accept_rate": 92}}, {"body": "&quot;If we were building houses like we&#39;re building software, the first woodpecker would be the end of mankind.&quot; -- dunno who said that but he is still right ;)", "edited": false, "comment_id": 414698, "creation_date": 1236003250, "score": 0, "owner": {"display_name": "Aaron Digulla", "reputation": 178090, "user_id": 34088, "user_type": "registered", "accept_rate": 78}}, {"body": "You sense the disease but the diagnosis is incorrect: writing software is <b>not</b> a manufacturing process, period. It is a wrong analogy. &quot;Manufacturing&quot; is reproducing a physical &quot;thing&quot; n times, starting from a blueprint. Now this process is not perfect, so you need to control this process of reproduction. Writing software is more akin to design, i.e. producing the blueprint. Given the blueprint (the program) a computer perfectly reproduce it, i.e. it accurately solves every instance of the problem for which it was designed (it &quot;manufacture&quot; each solution, given the blueprint).", "edited": false, "comment_id": 1559683, "creation_date": 1257475805, "score": 0, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}, {"body": "Now, designing something in engineering disciplines is certainly a creative process but equally certainly it is <b>not</b> unconstrained, undisciplined. For example: structural engineers use math, sciences and other disciplines. Their practice is founded on knowledge, theory, experience. What you correctly describe, with an uneasy that I concur, is a field not even at a level of good craftsmanship, not engineering and certainly not art.", "edited": false, "comment_id": 1559726, "creation_date": 1257476727, "score": 0, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}], "creation_date": 1231002033, "comment_count": 7, "score": 4, "owner": {"display_name": "Paul W Homer", "reputation": 2106, "user_id": 43371, "user_type": "registered", "accept_rate": 50}, "last_editor": {"display_name": "Paul W Homer", "reputation": 2106, "user_id": 43371, "user_type": "registered", "accept_rate": 50}, "last_edit_date": 1231023952, "up_vote_count": 6}, {"community_owned_date": 1231002875, "body": "<p><strong>A Clever Programmer Is Dangerous</strong></p>\n\n<p>I have spent more time trying to fix code written by \"clever\" programmers. I'd rather have a good programmer than an exceptionally smart programmer who wants to prove how clever he is by writing code that only he (or she) can interpret. </p>\n", "answer_id": 409389, "tags": [], "down_vote_count": 3, "last_activity_date": 1231002875, "comments": [{"body": "Real clever programmers are those that find the good answer while making it maintainable. Either that or those who hide their names from comments so users won&#39;t backfire asking for changes.", "edited": false, "comment_id": 237865, "creation_date": 1231163712, "score": 1, "owner": {"display_name": "David Rodr\u00edguez - dribeas", "reputation": 137526, "user_id": 36565, "user_type": "registered"}}, {"body": "Real genius is seing how really complex things can be solved in a really simple way. People who write needlesly complex code are just assholes who want to feel superior to the world around them.", "edited": false, "comment_id": 296198, "creation_date": 1232963787, "score": 3, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "+1 Good programmers know their own limitations - if it&#39;s so clever you can only just understand it when you&#39;re writing it, well, it&#39;s probably wrong now, and you&#39;ll never understand it in 6 months time when it needs changing.", "edited": false, "comment_id": 299649, "creation_date": 1233057077, "score": 0, "owner": {"display_name": "MarkJ", "reputation": 23308, "user_id": 15639, "user_type": "registered", "accept_rate": 67}}, {"body": "&quot;Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.&quot; --unknown", "edited": false, "comment_id": 635096, "creation_date": 1241549612, "score": 17, "owner": {"display_name": "Robert J. Walker", "reputation": 4351, "user_id": 4287, "user_type": "registered", "accept_rate": 96}}, {"body": "Robert, great quote: BTW it&#39;s from Brian Kernighan not &quot;unknown&quot;", "edited": false, "comment_id": 744153, "creation_date": 1243880904, "score": 3, "owner": {"display_name": "MarkJ", "reputation": 23308, "user_id": 15639, "user_type": "registered", "accept_rate": 67}}], "creation_date": 1231002875, "comment_count": 5, "score": 43, "owner": {"display_name": "Tom Moseley", "reputation": 444, "user_id": 51185, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 46}, {"community_owned_date": 1231003834, "body": "<p><strong>If a developer cannot write clear, concise and grammatically correct comments then they should have to go back and take English 101.</strong>  </p>\n\n<p>We have developers and (the horror) architects who cannot write coherently.  When their documents are reviewed they say things like \"oh, don't worry about grammatical errors or spelling - that's not important\".  Then they wonder why their convoluted garbage documents become convoluted buggy code.</p>\n\n<p>I tell the interns that I mentor that if you can't communicate your great ideas verbally or in writing you may as well not have them.  </p>\n", "is_accepted": false, "tags": [], "answer_id": 409425, "down_vote_count": 2, "last_activity_date": 1285772158, "comments": [{"body": "I agree clear communication is important. But grammar is secondary.  Some people have poor grammar but can communicate clearly (I&#39;m thinking of some non-native English speakers) and some people have perfect grammar but can hardly communicate at all.", "edited": false, "comment_id": 255573, "creation_date": 1231645214, "score": 0, "owner": {"display_name": "John D. Cook", "reputation": 20363, "user_id": 25188, "user_type": "registered", "accept_rate": 89}}, {"body": "Ironically, there are many developers that think this is beneath them. Comments and documentation that looks like it&#39;s written by a retard should somehow convey that they are truly great hackers.", "edited": false, "comment_id": 296222, "creation_date": 1232964483, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "This isn&#39;t just about grammar and spelling either. It is possible to write something that has correct grammar and spelling yet is nearly impossible for others to understand (just as you can write a program that compiles and runs yet is impossible to understand the code). Being able to express yourself clearly in writing is very important. Having taught a comp-sci course that involves writing design documents for the last six years I&#39;ve found it distressing how few of my students seem to possess this ability. And it seems to be getting worse each year.", "edited": false, "comment_id": 738823, "creation_date": 1243727862, "score": 0, "owner": {"display_name": "Kris", "reputation": 9650, "user_id": 73652, "user_type": "registered", "accept_rate": 88}}, {"body": "@John D Cook  Poor grammar is most often detrimental for communication. These rules weren&#39;t invented for no reason (goes to check if there are no grammar mistaeks in those comment).", "edited": false, "comment_id": 915960, "creation_date": 1247098083, "score": 1, "owner": {"display_name": "quant_dev", "reputation": 3379, "user_id": 59557, "user_type": "registered", "accept_rate": 91}}, {"body": "&quot;If a developer cannot write <b>a</b> clear, concise and grammatical comment <b>s</b>...&quot;  Deliberate irony?", "edited": false, "comment_id": 3200463, "creation_date": 1277471925, "score": 1, "owner": {"display_name": "Mark Bannister", "reputation": 32201, "user_id": 359040, "user_type": "registered"}}, {"body": "Never ceases to amaze me how often I get to paste this: <a href=\"http://english.stackexchange.com/\">english.stackexchange.com</a>", "edited": false, "comment_id": 4795673, "creation_date": 1291905461, "score": 0, "owner": {"display_name": "Barrie Reader", "reputation": 6828, "user_id": 285178, "user_type": "registered", "accept_rate": 99}}], "creation_date": 1231003834, "comment_count": 6, "score": 31, "owner": {"display_name": "sbfoster", "user_type": "does_not_exist"}, "last_editor": {"display_name": "BBonifield", "reputation": 3772, "user_id": 241232, "user_type": "registered", "accept_rate": 67}, "last_edit_date": 1285772158, "up_vote_count": 33}, {"community_owned_date": 1231003973, "body": "<p><strong>Realizing sometimes good enough is good enough, is a major jump in your value as a programmer.</strong></p>\n\n<p>Note that when I say 'good enough', I mean 'good enough', not it's some crap that happens to work.  But then again, when you are under a time crunch, 'some crap that happens to work', may be considered 'good enough'.</p>\n", "answer_id": 409432, "tags": [], "down_vote_count": 0, "last_activity_date": 1231003973, "creation_date": 1231003973, "comment_count": 0, "score": 53, "owner": {"display_name": "John MacIntyre", "reputation": 9827, "user_id": 29043, "user_type": "registered", "accept_rate": 78}, "is_accepted": false, "up_vote_count": 53}, {"community_owned_date": 1231004347, "body": "<p><strong>Most consulting programmers suck</strong> and should not be allowed to write production code.</p>\n\n<p><em>IMHO-Probably about 60% or more</em></p>\n", "answer_id": 409443, "tags": [], "down_vote_count": 4, "last_activity_date": 1231004347, "comments": [{"body": "That is not controversial; that is fact!", "edited": false, "comment_id": 244387, "creation_date": 1231335092, "score": 0, "owner": {"display_name": "icelava", "reputation": 6320, "user_id": 2663, "user_type": "registered", "accept_rate": 80}}, {"body": "Most non-consulting programmers are stuck in a rut and live in a company bubble maintaining dinosaur code while never being exposed to anything that challenges there assumptions; except for the occasional outside consultant. How&#39;s that for controversial? ;-)", "edited": false, "comment_id": 296288, "creation_date": 1232966259, "score": 2, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "@Diego; true and consultants have an opportunity to become amazing programmers with everything they are exposed to.  But in my experience, I&#39;ve seen too much crap written by hacks who just picked up enough knowledge to make it work, knowing they&#39;d never have to maintain it, and they just don&#39;t care.", "edited": false, "comment_id": 297426, "creation_date": 1232993466, "score": 2, "owner": {"display_name": "John MacIntyre", "reputation": 9827, "user_id": 29043, "user_type": "registered", "accept_rate": 78}}, {"body": "I consulted for many years. There were cases where the company programmers were good but didn&#39;t understand how I was doing things, and so were inclined to criticize. Nevertheless, I&#39;m inclined to agree with you - there are half-hearted programmers in contracting positions.", "edited": false, "comment_id": 2381503, "creation_date": 1268057422, "score": 1, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1231004347, "comment_count": 4, "score": 12, "owner": {"display_name": "John MacIntyre", "reputation": 9827, "user_id": 29043, "user_type": "registered", "accept_rate": 78}, "is_accepted": false, "up_vote_count": 16}, {"community_owned_date": 1231004388, "body": "<p>Opinion: <strong>There should not be any compiler warnings, only errors</strong>. Or, formulated differently <strong>You should always compile your code with -Werror</strong>.</p>\n\n<p>Reason: Either the compiler thinks it is something which should be corrected, in case it should be an error, or it is not necessary to fix, in which case the compiler should just shut up.</p>\n", "answer_id": 409447, "tags": [], "down_vote_count": 3, "last_activity_date": 1231004388, "comments": [{"body": "I have to disagree.  A really good warning system will warn you about things that are probably bad code, but may not be depending on how you use them.  If you have lint set to full, I believe there are even cases where you can&#39;t get rid of all the warnings.", "edited": false, "comment_id": 252631, "creation_date": 1231524174, "score": 0, "owner": {"display_name": "Bill K", "reputation": 37999, "user_id": 12943, "user_type": "registered", "accept_rate": 90}}, {"body": "That would mean I would have to throw out my C# compiler.  I have 2 (AFAIK, unfixable) warnings about environment references (that are indeed set correctly) that don&#39;t appear to break anything.  Unless -Werror merely supresses warnings and doesn&#39;t turn them into errors &gt;_&gt;", "edited": false, "comment_id": 253227, "creation_date": 1231534392, "score": 0, "owner": {"display_name": "Dalin Seivewright", "reputation": 913, "user_id": 29053, "user_type": "registered", "accept_rate": 87}}, {"body": "Finally, someone disagrees. It wouldn&#39;t really be a controversial opinion otherwise, now would it?", "edited": false, "comment_id": 253536, "creation_date": 1231540555, "score": 0, "owner": {"display_name": "JesperE", "reputation": 38792, "user_id": 13051, "user_type": "registered", "accept_rate": 68}}, {"body": "Doesn&#39;t your C# compiler allow you to disable the warnings? If you know they are unfixable and &quot;safe&quot;, why should the compiler keep warning? And yes, -Werror turns all warnings into errors.", "edited": false, "comment_id": 253539, "creation_date": 1231540631, "score": 0, "owner": {"display_name": "JesperE", "reputation": 38792, "user_id": 13051, "user_type": "registered", "accept_rate": 68}}, {"body": "I try to get the warnings down to zero but some warnings are 50:50: They make sense in case A but not in case B. So I end up sprinkling my code with &quot;ignore warning&quot;... :(", "edited": false, "comment_id": 407227, "creation_date": 1235750431, "score": 0, "owner": {"display_name": "Aaron Digulla", "reputation": 178090, "user_id": 34088, "user_type": "registered", "accept_rate": 78}}, {"body": "Well, as long as I&#39;m the one writing the compiler, then I agree with you.  But is someone else wrote the compiler, I would the ability to disagree with them when they claim perfectly valid constructs are warning worthy.", "edited": false, "comment_id": 739049, "creation_date": 1243737616, "score": 0, "owner": {"display_name": "nosatalian", "reputation": 1956, "user_id": 110296, "user_type": "registered", "accept_rate": 83}}, {"body": "That is why most compilers allow you to disable warnings. That&#39;s fine. What I mean is that you either disable the warning or fix it. Don&#39;t just leave it there.", "edited": false, "comment_id": 740606, "creation_date": 1243797339, "score": 0, "owner": {"display_name": "JesperE", "reputation": 38792, "user_id": 13051, "user_type": "registered", "accept_rate": 68}}], "creation_date": 1231004388, "comment_count": 7, "score": 6, "owner": {"display_name": "JesperE", "reputation": 38792, "user_id": 13051, "user_type": "registered", "accept_rate": 68}, "is_accepted": false, "up_vote_count": 9}, {"community_owned_date": 1231004423, "body": "<p><strong>Most professional programmers suck</strong></p>\n\n<p>I have come across too many people doing this job for their living who were plain crappy at what they were doing. Crappy code, bad communication skills, no interest in new technology whatsoever. Too many, too many...</p>\n", "answer_id": 409448, "tags": [], "down_vote_count": 4, "last_activity_date": 1231004423, "creation_date": 1231004423, "comment_count": 0, "score": 149, "owner": {"display_name": "petr k.", "reputation": 5273, "user_id": 15497, "user_type": "registered", "accept_rate": 62}, "is_accepted": false, "up_vote_count": 153}, {"community_owned_date": 1231006688, "body": "<p><strong>A majority of the 'user-friendly' Fourth Generation Languages (SQL included) are worthless overrated pieces of rubbish that should have never made it to common use.</strong></p>\n\n<p>4GLs in general have a wordy and ambiguous syntax. Though 4GLs are supposed to allow 'non technical people' to write programs, you still need the 'technical' people to write and maintain them anyway.</p>\n\n<p>4GL programs in general are harder to write, harder to read and harder to optimize than.</p>\n\n<p>4GLs should be avoided as far as possible.</p>\n", "is_accepted": false, "tags": [], "answer_id": 409521, "down_vote_count": 5, "last_activity_date": 1256914835, "comments": [{"body": "&#39;non technical people&#39; never want to write code, but some people will never get it.", "edited": false, "comment_id": 239555, "creation_date": 1231200211, "score": 0, "owner": {"display_name": "IAdapter", "reputation": 19424, "user_id": 30453, "user_type": "registered", "accept_rate": 82}}, {"body": "&quot;harder to optimize than ...&quot; what?", "edited": false, "comment_id": 1521328, "creation_date": 1256914885, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "Interesting opinion, though a bit harsh, maybe.", "edited": false, "comment_id": 1521337, "creation_date": 1256914970, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "All 4GLs suck. Not a majority. 100%.", "edited": false, "comment_id": 2560341, "creation_date": 1270081440, "score": 0, "owner": {"display_name": "Warren  P", "reputation": 26418, "user_id": 84704, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1231006688, "comment_count": 4, "score": 5, "owner": {"display_name": "Alterlife", "reputation": 3162, "user_id": 36848, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}, "last_edit_date": 1256914835, "up_vote_count": 10}, {"community_owned_date": 1231011513, "body": "<p><strong>Don't comment your code</strong></p>\n\n<p>Comments are not code and therefore when things change it's very easy to not change the comment that explained the code.  Instead I prefer to refactor the crap out of code to a point that there is no reason for a comment.  An example:</p>\n\n<pre><code>if(data == null)  // First time on the page\n</code></pre>\n\n<p>to:</p>\n\n<pre><code>bool firstTimeOnPage = data == null;\nif(firstTimeOnPage)\n</code></pre>\n\n<p>The only time I really comment is when it's a TODO or explaining why</p>\n\n<pre><code>Widget.GetData(); // only way to grab data, TODO: extract interface or wrapper\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 409680, "down_vote_count": 6, "last_activity_date": 1231101239, "comments": [{"body": "Your &quot;explaining why&quot; rationale is also subject to change if the API you are working with, for example, gets updated or improved.", "edited": false, "comment_id": 235343, "creation_date": 1231044771, "score": 0, "owner": {"display_name": "dreftymac", "reputation": 9567, "user_id": 42223, "user_type": "registered", "accept_rate": 74}}, {"body": "In my small example I&#39;m trying to show why I already did what I did.  Like there&#39;s a better way to grab data, but this is the only way right now.  Kind of like a note to refactor or why something happened.  Also it&#39;s mainly related to my own code and not an external dependency.", "edited": false, "comment_id": 241588, "creation_date": 1231261875, "score": 0, "owner": {"display_name": "rball", "reputation": 3974, "user_id": 50711, "user_type": "registered", "accept_rate": 98}}, {"body": "Icky.  Don&#39;t declare a variable if you&#39;re only going to use it once.  Your suggestion is not much better than, &quot;int i,this_is_a_counter;&quot;.  If you&#39;re forced to <i>add</i> extra code to get rid of comments, you&#39;ve made things MORE complicated!", "edited": false, "comment_id": 259835, "creation_date": 1231798878, "score": 14, "owner": {"display_name": "Brian", "reputation": 15049, "user_id": 18192, "user_type": "registered", "accept_rate": 76}}, {"body": "I have to agree with Brian, nothing worst then having a bunch of one time use variables.", "edited": false, "comment_id": 262604, "creation_date": 1231876832, "score": 0, "owner": {"display_name": "James McMahon", "reputation": 18241, "user_id": 20774, "user_type": "registered", "accept_rate": 92}}, {"body": "I&#39;m sick of reading this crap. The reality is that the large majority of code out there is badly written, let alone reasonably refactored. If you can&#39;t write decent (understandable) code at least have the decency of adding comments.", "edited": false, "comment_id": 296219, "creation_date": 1232964358, "score": 2, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "Why are one-time variables bad? They explain what you do, they don&#39;t cost anything (if you have a half decent compiler), and you can easily use them again for the same thing. Without the firstTimeOnPage, I would be very likely to put in the if (data == null) condition somewhere else as well.", "edited": false, "comment_id": 688850, "creation_date": 1242727184, "score": 8, "owner": {"display_name": "erikkallen", "reputation": 19451, "user_id": 47161, "user_type": "registered", "accept_rate": 66}}, {"body": "-1: Comments are good. Comments are a cornerstone of code. I&#39;d rather spend 10 seconds reading a one-line comment than spend two hours trying to figure out what some really complex code does.", "edited": false, "comment_id": 1443372, "creation_date": 1255763835, "score": 0, "owner": {"display_name": "tsilb", "reputation": 4683, "user_id": 11112, "user_type": "registered", "accept_rate": 97}}, {"body": "You might spend 10 seconds reading a one-line comment and then 3 hours finding out that the comment is outdated and led you down the wrong path.  A well named variable or method is preferable, then I know what your intentions were and know that it hasn&#39;t changed.  Also easily refactorable.", "edited": false, "comment_id": 1452614, "creation_date": 1255967330, "score": 3, "owner": {"display_name": "rball", "reputation": 3974, "user_id": 50711, "user_type": "registered", "accept_rate": 98}}, {"body": "@brian, one time variables can give names to faceless expressions, which is nice, especially in long parameter lists.", "edited": false, "comment_id": 1481667, "creation_date": 1256321708, "score": 2, "owner": {"display_name": "Thorbj\u00f8rn Ravn Andersen", "reputation": 43814, "user_id": 53897, "user_type": "registered", "accept_rate": 57}}, {"body": "@rball: I agree and disagree, depending on how declarative or domain-specific the language is. You have a functional spec somewhere, if only in your head. If the language is declarative enough to directly encode the functional spec, then there&#39;s no need for comments. Usually, that is not the case, so IMO the purpose of comments is to express the mapping between implementation and functional spec, to the extent that the code itself is not able to. That way, when the spec changes, as it always does, you know what code to change.", "edited": false, "reply_to_user": {"display_name": "rball", "reputation": 3974, "user_id": 50711, "user_type": "registered", "accept_rate": 98}, "comment_id": 2419125, "creation_date": 1268415531, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1231011513, "comment_count": 10, "score": 21, "owner": {"display_name": "rball", "reputation": 3974, "user_id": 50711, "user_type": "registered", "accept_rate": 98}, "last_editor": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}, "last_edit_date": 1231101239, "up_vote_count": 27}, {"community_owned_date": 1231012568, "body": "<p><strong>Only write an abstraction if it's going to save 3X as much time later.</strong></p>\n\n<p>I see people write all these crazy abstractions sometimes and I think to myself, \"Why?\"</p>\n\n<p>Unless an abstraction is really going to save you time later or it's going to save the person maintaining your code time, it seems people are just writing spaghetti code more and more.</p>\n", "answer_id": 409710, "tags": [], "down_vote_count": 0, "last_activity_date": 1231012568, "comments": [{"body": "Yay!  Also look up &quot;YAGNI&quot;", "edited": false, "comment_id": 339086, "creation_date": 1234107844, "score": 1, "owner": {"display_name": "Bjarke Ebert", "reputation": 1063, "user_id": 31890, "user_type": "registered", "accept_rate": 100}}, {"body": "If you&#39;re writing abstraction using spaghetti code, then you&#39;re doing something very, very, wrong.", "edited": false, "comment_id": 408284, "creation_date": 1235764886, "score": 5, "owner": {"display_name": "JesperE", "reputation": 38792, "user_id": 13051, "user_type": "registered", "accept_rate": 68}}], "creation_date": 1231012568, "comment_count": 2, "score": 16, "owner": {"display_name": "Paul Mendoza", "reputation": 3146, "user_id": 29277, "user_type": "registered", "accept_rate": 78}, "is_accepted": false, "up_vote_count": 16}, {"community_owned_date": 1231014018, "body": "<p><strong>Bad Programmers are Language-Agnostic</strong></p>\n\n<p>A really bad programmer can write bad code in almost any language.</p>\n", "answer_id": 409752, "tags": [], "down_vote_count": 1, "last_activity_date": 1231014019, "comments": [{"body": "And good programmers just about the same.", "edited": false, "comment_id": 238375, "creation_date": 1231173198, "score": 0, "owner": {"display_name": "David Rodr\u00edguez - dribeas", "reputation": 137526, "user_id": 36565, "user_type": "registered"}}, {"body": "Yeah, that&#39;s why it&#39;s controversial :)", "edited": false, "comment_id": 238448, "creation_date": 1231174802, "score": 0, "owner": {"display_name": "CMS", "reputation": 380669, "user_id": 5445, "user_type": "registered"}}], "creation_date": 1231014019, "comment_count": 2, "score": 43, "owner": {"display_name": "CMS", "reputation": 380669, "user_id": 5445, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 44}, {"community_owned_date": 1231014622, "body": "<p>My controversial opinion? Java doesn't suck but Java API's do. Why do java libraries insist on making it hard to do simple tasks? And why, instead of fixing the APIs, do they create frameworks to help manage the boilerplate code? This opinion can apply to any language that requires 10 or more lines of code to read a line from a file.</p>\n", "is_accepted": false, "tags": [], "answer_id": 409763, "down_vote_count": 0, "last_activity_date": 1231016200, "creation_date": 1231014622, "comment_count": 0, "score": 10, "owner": {"display_name": "Jeremy Wall", "reputation": 12124, "user_id": 51233, "user_type": "registered"}, "last_editor": {"display_name": "Jeremy Wall", "reputation": 12124, "user_id": 51233, "user_type": "registered"}, "last_edit_date": 1231016200, "up_vote_count": 10}, {"community_owned_date": 1231014754, "body": "<p><strong>Architects that do not code are useless.</strong></p>\n\n<p>That sounds a little harsh, but it's not unreasonable. If you are the \"architect\" for a system, but do not have some amount of hands-on involvement with the technologies employed then how do you get the respect of the development team? How do you influence direction?</p>\n\n<p>Architects need to do a lot more (meet with stakeholders, negotiate with other teams, evaluate vendors, write documentation, give presentations, etc.) But, if you never see code checked in from by your architect... be wary!</p>\n", "is_accepted": false, "tags": [], "answer_id": 409770, "down_vote_count": 0, "last_activity_date": 1231101157, "comments": [{"body": "I think this was already covered.", "edited": false, "comment_id": 236419, "creation_date": 1231101280, "score": 2, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "Architects that <i>do</i> code are worse than those that don&#39;t.  i.e. their productivity is negative.", "edited": false, "comment_id": 273963, "creation_date": 1232210801, "score": 1, "owner": {"display_name": "finnw", "reputation": 27950, "user_id": 12048, "user_type": "registered", "accept_rate": 94}}, {"body": "Can we paraphrase... Architects need to respect coders?", "edited": false, "comment_id": 4005691, "creation_date": 1285272332, "score": 0, "owner": {"display_name": "gbn", "reputation": 229774, "user_id": 27535, "user_type": "registered", "accept_rate": 88}}], "creation_date": 1231014754, "comment_count": 3, "score": 61, "owner": {"display_name": "kstewart", "reputation": 452, "user_id": 51228, "user_type": "registered"}, "last_editor": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}, "last_edit_date": 1231101157, "up_vote_count": 61}, {"community_owned_date": 1231015006, "body": "<p><strong>Don't use inheritance unless you can explain why you need it.</strong></p>\n", "is_accepted": false, "tags": [], "answer_id": 409781, "down_vote_count": 2, "last_activity_date": 1231515884, "comments": [{"body": "Inheritance is the second strongest relationship in C++ and the strongest relationship in most other languages. It strongly couples your code with that of your ascendant. If you can just use it through interfaces go for it. Prefer composition over inheritance always.", "edited": false, "comment_id": 238379, "creation_date": 1231173323, "score": 0, "owner": {"display_name": "David Rodr\u00edguez - dribeas", "reputation": 137526, "user_id": 36565, "user_type": "registered"}}, {"body": "Most uses of inheritance as a form of reuse, overriding whatever is needed to change.  They generally don&#39;t know/care if they violate LSP, and can achieve what they need with composition.", "edited": false, "comment_id": 252096, "creation_date": 1231516022, "score": 0, "owner": {"display_name": "theschmitzer", "reputation": 3761, "user_id": 2167252, "user_type": "registered", "accept_rate": 67}}, {"body": "I tend to think that delegation is cleaner in most cases where people use inheritance (esp. lib development) because: - abstraction is better - coupling is looser  - maintenance is easier Delegation defines a contract between the delegating and the delegate that is easier to enforce among versions.", "edited": false, "comment_id": 267430, "creation_date": 1232009409, "score": 2, "owner": {"display_name": "fbonnet", "reputation": 1958, "user_id": 54574, "user_type": "registered", "accept_rate": 50}}, {"body": "He&#39;s not saying don&#39;t use inheritance at all, just don&#39;t use it if you can&#39;t explain why you need it.  If you&#39;re wanting to code an OO application and think throwing a little inheritance in here and there is just gonna make it OO, then you&#39;re dumb and should be fired from the ability program.", "edited": false, "comment_id": 308927, "creation_date": 1233261447, "score": 0, "owner": {"display_name": "Wes P", "reputation": 3633, "user_id": 13611, "user_type": "registered", "accept_rate": 72}}, {"body": "Like many other programming constructs, the purpose of inheritance is to avoid duplicated code.", "edited": false, "comment_id": 679016, "creation_date": 1242439963, "score": 0, "owner": {"display_name": "Kyralessa", "reputation": 97118, "user_id": 5486, "user_type": "registered", "accept_rate": 59}}, {"body": "interesting....", "edited": false, "comment_id": 738939, "creation_date": 1243733253, "score": 0, "owner": {"display_name": "Frank V", "reputation": 11440, "user_id": 18196, "user_type": "registered", "accept_rate": 96}}, {"body": "Or as Sutter and Alexandrescu said in C++ Coding Standards: Inherit an interface, not the implementation.", "edited": false, "comment_id": 1431809, "creation_date": 1255601709, "score": 0, "owner": {"display_name": "blwy10", "reputation": 3388, "user_id": 187854, "user_type": "registered"}}, {"body": "You should expand that to: &quot;Don&#39;t ever code <i>anything</i> that you can&#39;t explain.&quot; Everything you do in code should have a reason.", "edited": false, "comment_id": 1785804, "creation_date": 1260497404, "score": 8, "owner": {"display_name": "Oorang", "reputation": 3866, "user_id": 102270, "user_type": "registered", "accept_rate": 88}}], "creation_date": 1231015006, "comment_count": 8, "score": 88, "owner": {"display_name": "theschmitzer", "reputation": 3761, "user_id": 2167252, "user_type": "registered", "accept_rate": 67}, "last_editor": {"display_name": "theschmitzer", "reputation": 3761, "user_id": 2167252, "user_type": "registered", "accept_rate": 67}, "last_edit_date": 1231515884, "up_vote_count": 90}, {"community_owned_date": 1231016196, "body": "<ul>\n<li>Global variables are ok (there are times where it is a very good solution)</li>\n<li>gotos have their place, both are missed (i <em>rarely</em> use both.)</li>\n<li>defines/macros are wonderful but incredibly evil</li>\n<li><p>Singletons should NEVER be used*1</p>\n\n<p>and my most controversial yet...</p></li>\n<li><strong>COMMENTS ARE EVIL AND A WASTE OF TIME</strong></li>\n</ul>\n\n<hr>\n\n<p>*1 logging may be ok but i dont even do that. What if you would like to output log data on a  per thread basis. You want to know which thread is outputting that line, chances are you need a non static member unique to your own thread. So logging i see benefits of NOT using a singleton. Theres absolutely no reason to use them.</p>\n", "is_accepted": false, "tags": [], "answer_id": 409825, "down_vote_count": 25, "last_activity_date": 1292963190, "comments": [{"body": "Why are comments evil and a waste of time?", "edited": false, "comment_id": 235205, "creation_date": 1231035482, "score": 0, "owner": {"display_name": "Scotty Allen", "reputation": 4731, "user_id": 41177, "user_type": "registered", "accept_rate": 48}}, {"body": "Comments can be outdated very easily and may be hard to tell if a comment is outdated. It waste programming time if comment before the func is finish. it will be changed and more time will be spent. Func shouldnt need comments and should be readable via variable names. For API, there should be a man", "edited": false, "comment_id": 235466, "creation_date": 1231055464, "score": 1, "owner": {"display_name": "acidzombie24", "reputation": 34755, "user_id": 34537, "user_type": "registered", "accept_rate": 73}}, {"body": "A code in itself can easily explain HOW it does what it does, but it can&#39;t explain WHY something is done - comments can explain that.", "edited": false, "comment_id": 235515, "creation_date": 1231060366, "score": 0, "owner": {"display_name": "Rene Saarsoo", "reputation": 6862, "user_id": 15982, "user_type": "registered", "accept_rate": 61}}, {"body": "I agree with some of what you&#39;ve said, but I don&#39;t think you did a good job of presenting your ideas and justifying them, so downvoting.", "edited": false, "comment_id": 236413, "creation_date": 1231101135, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "There are some really good reasons for comments e.g explanation of intent, clarification, warning of consequences, TODO comments. But 98% of comments i&#39;ve read evil and a waste of time.", "edited": false, "comment_id": 237329, "creation_date": 1231143349, "score": 0, "owner": {"display_name": "Ludwig Wensauer", "reputation": 1142, "user_id": 49786, "user_type": "registered", "accept_rate": 100}}, {"body": "Comments are evil if you&#39;re often bored and need a 10 minute job to take all day. I prefer to find something new to tinker with :)", "edited": false, "comment_id": 246156, "creation_date": 1231365008, "score": 0, "owner": {"display_name": "jTresidder", "reputation": 482, "user_id": 36365, "user_type": "registered"}}, {"body": "Do you really believe this stuff or are you just trying to be provocative?", "edited": false, "comment_id": 297296, "creation_date": 1232991139, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "I believe in this stuff.", "edited": false, "comment_id": 299166, "creation_date": 1233035694, "score": 0, "owner": {"display_name": "acidzombie24", "reputation": 34755, "user_id": 34537, "user_type": "registered", "accept_rate": 73}}, {"body": "I was with you on gotos... but if you like globals so much, how can you hate the OO global singleton.", "edited": false, "comment_id": 326748, "creation_date": 1233778460, "score": 1, "owner": {"display_name": "Lawrence Dol", "reputation": 33129, "user_id": 8946, "user_type": "registered", "accept_rate": 84}}, {"body": "well, i didnt explain anything which is possibly why i am downvoted, controversial indeed.  I use globals as only quick debug and test cases that are NOT meant for production code. They should be deleted as soon as the problem/test is solved. Singleton do not look like test/temp code to delete.", "edited": false, "comment_id": 328284, "creation_date": 1233806687, "score": 1, "owner": {"display_name": "acidzombie24", "reputation": 34755, "user_id": 34537, "user_type": "registered", "accept_rate": 73}}, {"body": "... You believe in Globals but not Singletons?  How is that consistent?", "edited": false, "comment_id": 481283, "creation_date": 1237579841, "score": 7, "owner": {"display_name": "cwallenpoole", "reputation": 39310, "user_id": 57191, "user_type": "registered", "accept_rate": 98}}, {"body": "That&#39;s definitely controversial.", "edited": false, "comment_id": 676440, "creation_date": 1242396440, "score": 12, "owner": {"display_name": "C. Ross", "reputation": 12158, "user_id": 16487, "user_type": "registered", "accept_rate": 71}}, {"body": "Christopher W. Allen-Poole: My comment before yours -&gt; Singleton do not look like test/temp code to delete. I&#39;m repeating to avoid confusion. I am kind of glad i got into the negatives w/o meaning to :)", "edited": false, "comment_id": 768444, "creation_date": 1244295362, "score": 0, "owner": {"display_name": "acidzombie24", "reputation": 34755, "user_id": 34537, "user_type": "registered", "accept_rate": 73}}, {"body": "The only controversy here is how you qualify to answer questions on stack overflow.", "edited": false, "comment_id": 3148268, "creation_date": 1276892774, "score": 1, "owner": {"display_name": "Stefan Valianu", "reputation": 836, "user_id": 369345, "user_type": "registered", "accept_rate": 100}}, {"body": "lol @Stefan, I hope you are joking mate.", "edited": false, "reply_to_user": {"display_name": "Stefan Valianu", "reputation": 836, "user_id": 369345, "user_type": "registered", "accept_rate": 100}, "comment_id": 4932028, "creation_date": 1292986857, "score": 0, "owner": {"display_name": "Anonymous Type", "reputation": 2076, "user_id": 141720, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1231016196, "comment_count": 15, "score": -8, "owner": {"display_name": "acidzombie24", "reputation": 34755, "user_id": 34537, "user_type": "registered", "accept_rate": 73}, "last_editor": {"display_name": "acidzombie24", "reputation": 34755, "user_id": 34537, "user_type": "registered", "accept_rate": 73}, "last_edit_date": 1292963190, "up_vote_count": 17}, {"community_owned_date": 1231016212, "body": "<p><strong>If your text editor doesn't do good code completion, you're wasting everyone's time.</strong></p>\n\n<p>Quickly remembering thousands of argument lists, spellings, and return values (not to mention class structures and similarly complex organizational patterns) is a task computers are good at and people (comparatively) are not. I buy wholeheartedly that slowing yourself down a bit and avoiding the gadget/feature cult is a great way to increase efficiency and avoid bugs, but there is simply no benefit to spending 30 seconds hunting unnecessarily through sourcecode or docs when you could spend nil... especially if you just need a spelling (which is more often than we like to admit).</p>\n\n<p>Granted, if there isn't an editor that provides this functionality for your language, or the task is simple enough to knock out in the time it would take to load a heavier editor, nobody is going to tell you that Eclipse and 90 plugins is the right tool. But please don't tell me that the ability to H-J-K-L your way around like it's 1999 really saves you more time than hitting escape every time you need a method signature... even if you do feel less \"hacker\" doing it.</p>\n\n<p>Thoughts?</p>\n", "is_accepted": false, "tags": [], "answer_id": 409826, "down_vote_count": 7, "last_activity_date": 1248835957, "comments": [{"body": "IMHO, if you need so badly code completion, it&#39;s a code smell, or even a design smell : it indicates that the design has grown too complicated, too interdependent, too tightly coupled to other module&#39;s responsibilities. It&#39;s a bit controversial too: refactor it until it fits into your brain !", "edited": false, "comment_id": 236836, "creation_date": 1231117708, "score": 5, "owner": {"display_name": "vincent", "reputation": 2443, "user_id": 34871, "user_type": "registered"}}, {"body": "Code completion slows typing.  Even set to zero delay, there&#39;s the tiniest pause while you wait for code completion.  I agree that if you need code completion on your own code, that may well be a sign something needs simplification. But libraries are so large now, I think it helps more than hurts.", "edited": false, "comment_id": 237141, "creation_date": 1231134021, "score": 1, "owner": {"display_name": "Kendall Helmstetter Gelner", "reputation": 59340, "user_id": 6330, "user_type": "registered", "accept_rate": 80}}, {"body": "@vincent: Do you never use massive libraries (.NET Framework / Windows API etc)?", "edited": false, "comment_id": 237625, "creation_date": 1231156182, "score": 2, "owner": {"display_name": "erikkallen", "reputation": 19451, "user_id": 47161, "user_type": "registered", "accept_rate": 66}}, {"body": "I&#39;m using Django, and RoR before. Both encourage cohesion and small files.   At the same time I&#39;m helping out a beginner with VB.net, and I have to say VS is impressive, and it certainly influences the code style itself ; but code completion has to be a double-edged sword.  ( BTW, I <i>HATE</i> eclipse )", "edited": false, "comment_id": 239302, "creation_date": 1231193880, "score": 0, "owner": {"display_name": "vincent", "reputation": 2443, "user_id": 34871, "user_type": "registered"}}, {"body": "VS has really fast completion @Kendall: it doesn&#39;t impede my typing. Half the time I write Con.Wr[Down]( for Console.WriteLine(. That&#39;s 10 keystrokes less. @vincent, I agree, Eclipse needs to improve their code completion.", "edited": false, "comment_id": 306885, "creation_date": 1233221659, "score": 0, "owner": {"display_name": "Jonathan C Dickinson", "reputation": 4450, "user_id": 24064, "user_type": "registered", "accept_rate": 100}}, {"body": "Vim can do completion.", "edited": false, "comment_id": 389713, "creation_date": 1235400708, "score": 0, "owner": {"display_name": "saalaa", "reputation": 185, "user_id": 36797, "user_type": "registered"}}, {"body": "I work with only one other developer on a project with 240k lines of code and almost a thousand files. We couldn&#39;t live without code completion.", "edited": false, "comment_id": 1050365, "creation_date": 1249343236, "score": 0, "owner": {"display_name": "Matthew Iselin", "reputation": 6498, "user_id": 118364, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1231016212, "comment_count": 7, "score": 22, "owner": {"display_name": "KEM", "user_type": "does_not_exist"}, "last_editor": {"display_name": "eswald", "reputation": 4322, "user_id": 21229, "user_type": "registered"}, "last_edit_date": 1248835957, "up_vote_count": 29}, {"community_owned_date": 1231018163, "body": "<p><strong>You don't <em>always</em> need a database.</strong></p>\n\n<p>If you need to store less than a few thousand \"things\" and you don't need locking, flat files can work and are better in a lot of ways. They are more portable, and you can hand edit them in a pinch. If you have proper separation between your data and business logic, you can easily replace the flat files with a database if your app ever needs it. And if you design it with this in mind, it reminds you to have proper separation between your data and business logic.</p>\n\n<p>--<br />\nbmb</p>\n", "answer_id": 409882, "tags": [], "down_vote_count": 3, "last_activity_date": 1231018163, "comments": [{"body": "True, but Sqlite is very portable too. I&#39;m not gonna start with flat files if there is a change it should be moved to Sqlite.", "edited": false, "comment_id": 234942, "creation_date": 1231022244, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "There are other benefits of a DB. Shared access across a network for a client/server program. Easy access and manipulation of data (although technologies like LINQ help with that).", "edited": false, "comment_id": 235485, "creation_date": 1231057589, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "There are thousands of benefits of a database and reasons why we need them most of the time. But not <i>always</i>.", "edited": false, "comment_id": 236020, "creation_date": 1231084714, "score": 0, "owner": {"display_name": "bmb", "reputation": 3520, "user_id": 5298, "user_type": "registered"}}, {"body": "having a database from the start is easier than first having proper separation between data storage and biznis logic with flat files so that you can switch to a database later :)", "edited": false, "comment_id": 363087, "creation_date": 1234726947, "score": 0, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "Are you saying it&#39;s easier to do it wrong with a database than it is to do it right without one?", "edited": false, "comment_id": 363612, "creation_date": 1234745546, "score": 0, "owner": {"display_name": "bmb", "reputation": 3520, "user_id": 5298, "user_type": "registered"}}, {"body": "I am 100% convinced that developers over use databases.  The crutch that kills.", "edited": false, "comment_id": 509889, "creation_date": 1238413247, "score": 3, "owner": {"display_name": "Stu Thompson", "reputation": 20094, "user_id": 2961, "user_type": "registered", "accept_rate": 81}}, {"body": "@Stu Thompson, I&#39;m not. At work I&#39;m refactoring an application so that it stores its data in a database instead of xml files. It is a lot of work and I hope it is the last time that I have to do this.", "edited": false, "comment_id": 1326293, "creation_date": 1253871606, "score": 1, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "tuinstoel, don&#39;t blame XML files for a missing or poorly designed data access layer.", "edited": false, "comment_id": 1328595, "creation_date": 1253897627, "score": 0, "owner": {"display_name": "bmb", "reputation": 3520, "user_id": 5298, "user_type": "registered"}}, {"body": "@bmb, Even refactoring &#39;just&#39; a data access layer can be a lot of work. And it is totally unnecessary work.", "edited": false, "comment_id": 1331341, "creation_date": 1253950044, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}], "creation_date": 1231018163, "comment_count": 9, "score": 19, "owner": {"display_name": "bmb", "reputation": 3520, "user_id": 5298, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 22}, {"community_owned_date": 1231020496, "body": "<p><strong>Pagination is never what the user wants</strong></p>\n\n<p>If you start having the discussion about where to do pagination, in the database, in the business logic, on the client, etc. then you are asking the wrong question. If your app is giving back more data than the user needs, figure out a way for the user to narrow down what they need based on real criteria, not arbitrary sized chunks. And if the user really does want all those results, then <em>give them all the results.</em> Who are you helping by giving back 20 at a time? The server? Is that more important than your user?</p>\n\n<p>[EDIT: clarification, based on comments] </p>\n\n<p>As a real world example, let's look at <em>this</em> Stack Overflow question.  Let's say I have a controversial programming opinion.  Before I post, I'd like to see if there is already an answer that addresses the same opinion, so I can upvote it.  The only option I have is to click through every page of answers.</p>\n\n<p>I would prefer one of these options:</p>\n\n<ol>\n<li><p>Allow me to search through the answers (a way for me to narrow down what I need based on real criteria).</p></li>\n<li><p>Allow me to see all the answers so I can use my browser's \"find\" option (give me all the results).</p></li>\n</ol>\n\n<p>The same applies if I just want to find an answer I previously read, but can't find anymore.  I don't know when it was posted or how many votes it has, so the sorting options don't help.  And even if I did, I still have to play a guessing game to find the right page of results. The fact that the answers are paginated and I can directly click into one of a dozen pages <em>is no help at all</em>.</p>\n\n<p>--<br />\nbmb</p>\n", "is_accepted": false, "tags": [], "answer_id": 409971, "down_vote_count": 1, "last_activity_date": 1249499457, "comments": [{"body": "Google does pagination, Google is very popular.", "edited": false, "comment_id": 234937, "creation_date": 1231021917, "score": 13, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "Good point. I would argue that google is narrowing down what users need based on real criteria -- the criteria is &quot;ten best results.&quot; I&#39;m not saying that showing less than the full results is always bad, if you give the user what they want.", "edited": false, "comment_id": 234956, "creation_date": 1231022833, "score": 0, "owner": {"display_name": "bmb", "reputation": 3520, "user_id": 5298, "user_type": "registered"}}, {"body": "maybe you should give conrete example of a thing that&#39;s paginated but shouldn&#39;t. for example, how would you &quot;narrow down&quot; answers to this question?", "edited": false, "comment_id": 236358, "creation_date": 1231099090, "score": 2, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "@bmb: Where does this put this thread? @tuinstoel: I claim that nobody ever (i.e. about 0.1% of all page views, probably much more for image search) use more than the first page of results. Pagination done right.", "edited": false, "comment_id": 236424, "creation_date": 1231101455, "score": 0, "owner": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}}, {"body": "@Konrad Rudolph, Once of twice each year I search on my own name, I use all the page results (I&#39;m not famous). That is probably the only time I use all the pages.", "edited": false, "comment_id": 236433, "creation_date": 1231101947, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "Sometimes it&#39;s easier for the user to read if all the controls are visible at the same time (no scroll bars). But in any case, you have to ask: Should I use paging or scrollbars? Either way it&#39;s still a click to the user.", "edited": false, "comment_id": 609919, "creation_date": 1240952069, "score": 0, "owner": {"display_name": "Travis", "reputation": 4540, "user_id": 307338, "user_type": "registered", "accept_rate": 100}}, {"body": "@tuinstoel google does a lot of things but is not cooking fish. That google is doing pagination has no consequence in its popularity. Pagination is an antiquated model from books time. It will disappear soon in favor of ajax like refreshes, used by Google Reader for example.", "edited": false, "comment_id": 841491, "creation_date": 1245747678, "score": 5, "owner": {"display_name": "Elzo Valugi", "reputation": 12348, "user_id": 95353, "user_type": "registered", "accept_rate": 86}}, {"body": "I really, really hate the default 10 results from Google. I turn it up to 100 on every browser I use. I&#39;d probably turn it to 1000 if there were an option (and it still was speedy)", "edited": false, "comment_id": 944838, "creation_date": 1247601318, "score": 1, "owner": {"display_name": "nos", "reputation": 121550, "user_id": 126769, "user_type": "registered", "accept_rate": 94}}, {"body": "You&#39;ll have much more trouble coming up with those query-based requirements than just implementing a simple pagination system.  Sure, if you can suggest an alternative, go right ahead and reduce the number of items to return but not every problem will be as amenable.", "edited": false, "comment_id": 956116, "creation_date": 1247757265, "score": 0, "owner": {"display_name": "Kelly S. French", "reputation": 8435, "user_id": 135078, "user_type": "registered", "accept_rate": 100}}, {"body": "In the end pagination isn&#39;t really interesting. What&#39;s more important is the question: do you count all the search results and show the exact count or do you just provide an estimaton? Google shows only an estimation, showing only an approximation has great performance benefits. Ajax like refreshes don&#39;t change this.", "edited": false, "comment_id": 1060664, "creation_date": 1249496375, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "&quot;Who are you helping by giving back 20 at a time? The server? Is that more important than your user?&quot; If only 1% of users actually need this feature, then the server and thus the other 99% of users.", "edited": false, "comment_id": 1397309, "creation_date": 1255041485, "score": 0, "owner": {"display_name": "Brian Ortiz", "reputation": 1058, "user_id": 13395, "user_type": "registered", "accept_rate": 76}}, {"body": "Ortzinator, I would agree with you if I thought the number was really 99%. But since my (controversial) contention is that pagination is &quot;never&quot; what the user wants, then I think helping the server helps no one.  However, users who don&#39;t want all the results don&#39;t have to get them.  Then everyone is happy.", "edited": false, "comment_id": 1403197, "creation_date": 1255123099, "score": 0, "owner": {"display_name": "bmb", "reputation": 3520, "user_id": 5298, "user_type": "registered"}}, {"body": "I came across this answer while paging through and searching every answer to this question to see if anyone had already posted about anonymous functions.  Just sayin&#39;", "edited": false, "comment_id": 1427838, "creation_date": 1255544119, "score": 1, "owner": {"display_name": "Larry Lustig", "reputation": 32276, "user_id": 180368, "user_type": "registered", "accept_rate": 82}}, {"body": "So what about resultsets that have thousands or millions of results?  What if it&#39;s only hundreds but each one shows a bunch of detail?  Returning over 100K violates web best practices and such result sets could result in <i>huge</i> server loads.", "edited": false, "comment_id": 1443310, "creation_date": 1255761504, "score": 0, "owner": {"display_name": "tsilb", "reputation": 4683, "user_id": 11112, "user_type": "registered", "accept_rate": 97}}, {"body": "tsilb, then &quot;allow the user to narrow down what they need based on real criteria&quot;. The point here is not that subsets are always bad, it&#39;s that pagination is not a method of subsetting that helps anyone.  And huge server loads?  Boo hoo.  Did you build your app to make your server happy? Or your users?", "edited": false, "comment_id": 1444231, "creation_date": 1255791846, "score": 0, "owner": {"display_name": "bmb", "reputation": 3520, "user_id": 5298, "user_type": "registered"}}, {"body": "slashdot uses an approach where if you try to scroll below the last entry an extra set is added to the page.  I love it!", "edited": false, "comment_id": 1481545, "creation_date": 1256320487, "score": 0, "owner": {"display_name": "Thorbj\u00f8rn Ravn Andersen", "reputation": 43814, "user_id": 53897, "user_type": "registered", "accept_rate": 57}}, {"body": "Thorbj&#248;rn Ravn Andersen, that helps a little, but it would still be tedious if you want to use your browser&#39;s &quot;find&quot; function.", "edited": false, "comment_id": 1482874, "creation_date": 1256335282, "score": 0, "owner": {"display_name": "bmb", "reputation": 3520, "user_id": 5298, "user_type": "registered"}}], "creation_date": 1231020496, "comment_count": 17, "score": 63, "owner": {"display_name": "bmb", "reputation": 3520, "user_id": 5298, "user_type": "registered"}, "last_editor": {"display_name": "bmb", "reputation": 3520, "user_id": 5298, "user_type": "registered"}, "last_edit_date": 1249499457, "up_vote_count": 64}, {"community_owned_date": 1231028946, "body": "<p>I think its fine to use goto-statements, if you use them in a sane way (and a sane programming language). They can often make your code a lot easier to read and don't force you to use some twisted logic just to get one simple thing done.</p>\n", "answer_id": 410156, "tags": [], "down_vote_count": 2, "last_activity_date": 1231028946, "comments": [{"body": "The key concept is &quot;in a sane way&quot;. I would be shy of this idea if it were running for Grand Poo-Bah, but I understand Linus Torvalds agrees with it passionately :-)", "edited": false, "comment_id": 1521382, "creation_date": 1256915253, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1231028946, "comment_count": 1, "score": 1, "owner": {"display_name": "woop", "reputation": 36, "user_id": 51277, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1231029883, "body": "<p><strong>Use type inference anywhere and everywhere possible.</strong>  </p>\n\n<p>Edit: </p>\n\n<p>Here is a link to a blog entry I wrote several months ago about why I feel this way. </p>\n\n<p><a href=\"http://blogs.msdn.com/jaredpar/archive/2008/09/09/when-to-use-type-inference.aspx\" rel=\"nofollow\">http://blogs.msdn.com/jaredpar/archive/2008/09/09/when-to-use-type-inference.aspx</a></p>\n", "is_accepted": false, "tags": [], "answer_id": 410177, "down_vote_count": 0, "last_activity_date": 1231100911, "comments": [{"body": "I&#39;d love to see reasoning about this. Very controversial, and room for lots of good points from both sides.", "edited": false, "comment_id": 235115, "creation_date": 1231029951, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon, added a blog link to the reasons I feel this way.", "edited": false, "comment_id": 235130, "creation_date": 1231030668, "score": 0, "owner": {"display_name": "JaredPar", "reputation": 389992, "user_id": 23283, "user_type": "registered", "accept_rate": 100}}, {"body": "Jared, your blog post is about local variable declaration with <code>var</code>, but your title is much more general.  Please clarify.", "edited": false, "comment_id": 236411, "creation_date": 1231101065, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "@Jay, most of the problem with type inference is around &quot;var&quot; vs. overload resolution and generic method type inference.  I really should have added a sample or two to the article though it was discussed in the comments.", "edited": false, "comment_id": 239048, "creation_date": 1231188074, "score": 0, "owner": {"display_name": "JaredPar", "reputation": 389992, "user_id": 23283, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1231029883, "comment_count": 4, "score": 3, "owner": {"display_name": "JaredPar", "reputation": 389992, "user_id": 23283, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}, "last_edit_date": 1231100911, "up_vote_count": 3}, {"community_owned_date": 1231032263, "body": "<p><strong>C++ is a good language</strong></p>\n\n<p>I practically got lynched in another question a week or two back for saying that C++ wasn't a very nice language. So now I'll try saying the opposite. ;)</p>\n\n<p>No, seriously, the point I tried to make then, and will try again now, is that C++ has plenty of flaws. It's hard to deny that. It's so extremely complicated that learning it well is practically something you can dedicate your entire life to. It makes many common tasks needlessly hard, allows the user to plunge head-first into a sea of undefined behavior and unportable code, with no warnings given by the compiler.</p>\n\n<p>But it's not the useless, decrepit, obsolete, hated language that many people try to make it. It shouldn't be swept under the carpet and ignored. The world wouldn't be a better place without it. It has some unique strengths that, unfortunately, are hidden behind quirky syntax, legacy cruft and not least, bad C++ teachers. But they're there.</p>\n\n<p>C++ has many features that I desperately miss when programming in C# or other \"modern\" languages. There's a lot in it that C# and other modern languages could learn from.</p>\n\n<p>It's not blindly focused on OOP, but has instead explored and pioneered generic programming. It allows surprisingly expressive compile-time metaprogramming producing extremely efficient, robust <em>and</em> clean code. It took in lessons from functional programming almost a decade before C# got LINQ or lambda expressions.</p>\n\n<p>It allows you to catch a surprising number of errors at compile-time through static assertions and other metaprogramming tricks, which eases debugging vastly, and even beats unit tests in some ways. (I'd much rather catch an error at compile-time than afterwards, when I'm running my tests).</p>\n\n<p>Deterministic destruction of variables allows RAII, an extremely powerful little trick that makes try/finally blocks and C#'s <code>using</code> blocks redundant.</p>\n\n<p>And while some people accuse it of being \"design by committee\", I'd say yes, it is, and that's actually not a bad thing in this case. Look at Java's class library. How many classes have been deprecated again? How many should not be used? How many duplicate each others' functionality? How many are badly designed?</p>\n\n<p>C++'s standard library is much smaller, but on the whole, it's remarkably well designed, and except for one or two minor warts (<code>vector&lt;bool&gt;</code>, for example), its design still holds up very well. When a feature is added to C++ or its standard library, it is subjected to heavy scrutiny. Couldn't Java have benefited from the same? .NET too, although it's younger and was somewhat better designed to begin with, is still accumulating a good handful of classes that are out of sync with reality, or were badly designed to begin with.</p>\n\n<p><strong>C++ has plenty of strengths that no other language can match. It's a good language</strong></p>\n", "answer_id": 410225, "tags": [], "down_vote_count": 7, "last_activity_date": 1231032263, "comments": [{"body": "true dat. My main beef is that every 3rd party library has its own string class. I waste too much time converting between CString to std::string to WxString to char*. Can&#39;t everyone just use std::string or const char*.", "edited": false, "comment_id": 264934, "creation_date": 1231944212, "score": 1, "owner": {"display_name": "Doug T.", "reputation": 36891, "user_id": 8123, "user_type": "registered", "accept_rate": 62}}, {"body": "Not true &quot;C++ has plenty of strengths that no other language can match. It&#39;s a good language.&quot; EVERY language has strengths that no longer language can match (even LOLCODE, hey it&#39;s a lot of fun).", "edited": false, "comment_id": 306891, "creation_date": 1233221805, "score": 2, "owner": {"display_name": "Jonathan C Dickinson", "reputation": 4450, "user_id": 24064, "user_type": "registered", "accept_rate": 100}}, {"body": "Perhaps. But C++&#39;s strengths are a bit more commonly useful. Let me know when your language of choice supports compile-time metaprogramming or RAII.", "edited": false, "comment_id": 307133, "creation_date": 1233230471, "score": 2, "owner": {"display_name": "jalf", "reputation": 161685, "user_id": 33213, "user_type": "registered", "accept_rate": 81}}], "creation_date": 1231032263, "comment_count": 3, "score": 31, "owner": {"display_name": "jalf", "reputation": 161685, "user_id": 33213, "user_type": "registered", "accept_rate": 81}, "is_accepted": false, "up_vote_count": 38}, {"community_owned_date": 1231035274, "body": "<p><strong>A degree in Computer Science or other IT area DOES make you a more well rounded programmer</strong></p>\n\n<p>I don't care how many years of experience you have, how many blogs you've read, how many open source projects you're involved in.  A qualification (I'd recommend longer than 3 years) exposes you to a different way of thinking and gives you a great foundation.</p>\n\n<p>Just because you've written some better code than a guy with a BSc in Computer Science, does not mean you are better than him.  What you have he can pick up in an instant which is not the case the other way around.</p>\n\n<p>Having a qualification shows your commitment, the fact that you would go above and beyond experience to make you a better developer.  Developers which are good at what they do AND have a qualification can be very intimidating.</p>\n\n<p>I would not be surprized if this answer gets voted down.   </p>\n\n<p>Also, once you have a qualification, you slowly stop comparing yourself to those with qualifications (my experience).  You realize that it all doesn't matter at the end, as long as you can work well together.</p>\n\n<p>Always act mercifully towards other developers, irrespective of qualifications. </p>\n", "is_accepted": false, "tags": [], "answer_id": 410293, "down_vote_count": 13, "last_activity_date": 1231059714, "comments": [{"body": "&quot;degree in Computer Science or other IT area DOES make you more well rounded&quot; ... &quot;realize that it all doesn&#39;t matter at the end, as long as you can work well together&quot; &lt;- sounds a tiny bit inconsistent and self-contradictory.", "edited": false, "comment_id": 235338, "creation_date": 1231044508, "score": 0, "owner": {"display_name": "dreftymac", "reputation": 9567, "user_id": 42223, "user_type": "registered", "accept_rate": 74}}, {"body": "IT referring to the fact that the other guy has a degree.  It&#39;s strange, once you have a qualification, you might stop comparing yourself to others.", "edited": false, "comment_id": 235637, "creation_date": 1231065691, "score": 0, "owner": {"display_name": "Maltrap", "reputation": 1797, "user_id": 10644, "user_type": "registered", "accept_rate": 67}}, {"body": "Agree - qualifications are indicators of commitment. They can be more but if even if that&#39;s all they are then they have value. It is only those without pieces of paper who decry them. Those with them know the limits of their value but know their value too.", "edited": false, "comment_id": 235712, "creation_date": 1231068932, "score": 4, "owner": {"display_name": "jwpfox", "reputation": 1170, "user_id": 18665, "user_type": "registered"}}, {"body": "From past experience I&#39;d generally rather work with someone that at least has an EE degree, than someone who came into the field after college.", "edited": false, "comment_id": 237143, "creation_date": 1231134112, "score": 0, "owner": {"display_name": "Kendall Helmstetter Gelner", "reputation": 59340, "user_id": 6330, "user_type": "registered", "accept_rate": 80}}, {"body": "i would even say a good university degree. i met a programmer at my work who finished some small it-schoold i&#39;ve never heard of and didn&#39;t know how many different numbers can be written on 8 bits!", "edited": false, "comment_id": 237710, "creation_date": 1231159331, "score": 0, "owner": {"display_name": "agnieszka", "reputation": 4312, "user_id": 40872, "user_type": "registered", "accept_rate": 69}}, {"body": "A degree in ANY area (except maybe post-modern literary criticism) makes you a more well-rounded programmer, especially if it&#39;s in mathematics or science or engineering. Comp Sci and IT degrees tend to have incredibly narrow scope and focus.", "edited": false, "comment_id": 262062, "creation_date": 1231867098, "score": 1, "owner": {"display_name": "MusiGenesis", "reputation": 52525, "user_id": 14606, "user_type": "registered", "accept_rate": 74}}, {"body": "In the spirit of healthy discussion I&#39;ll just say that I vehemently disagree (and I&#39;ve got one). Past deliverables shows commitment, not that you lived somewhere for 4 years and read some books.", "edited": false, "comment_id": 292291, "creation_date": 1232749222, "score": 3, "owner": {"display_name": "SnOrfus", "reputation": 7513, "user_id": 48553, "user_type": "registered", "accept_rate": 81}}, {"body": "I don&#39;t believe in degrees as measurements of value or skill, but studying at a university gives you the opportunity to learn the foundations of many different fields that can be useful to you in a work situation. I&#39;m doubtful if being able to graduate is an acceptable proof that you&#39;ve learned anything, but I know that you CAN learn a lot of useful skills, if you&#39;re ambitious enough.", "edited": false, "comment_id": 635716, "creation_date": 1241557893, "score": 6, "owner": {"display_name": "Lucas Lindstr\u00f6m", "reputation": 922, "user_id": 50844, "user_type": "registered", "accept_rate": 75}}, {"body": "&quot;What you have he can pick up in an instant&quot; - Not necessarily. The ability to write good code is something that tends to come with experience, though some people pick it up quickly and some never seem to get there.  The guy with the CS degree will certainly be able to pick up the languages and APIs you use in an instant, but there&#39;s no guarantee he&#39;ll ever be a good programmer. And he certainly won&#39;t become one overnight if he&#39;s not one now.", "edited": false, "comment_id": 1117911, "creation_date": 1250512898, "score": 0, "owner": {"display_name": "Mark Baker", "reputation": 3223, "user_id": 11815, "user_type": "registered"}}, {"body": "I learned far more from my college library than the classes them selfs.", "edited": false, "comment_id": 1420504, "creation_date": 1255454001, "score": 0, "owner": {"display_name": "gradbot", "reputation": 9894, "user_id": 17919, "user_type": "registered", "accept_rate": 90}}, {"body": "Disagree - Self learning can be quite better than university learning. As for University, they make you think they way they want (as better marks for thinking their way). A self learner will think far better (for a given value of better) that a person teached to lern one way.  I&#39;m fascinated that you agree with me, btw: &quot;You realize that it all doesn&#39;t matter at the end, as long as you can work well together.&quot;", "edited": false, "comment_id": 2921105, "creation_date": 1274369721, "score": 0, "owner": {"display_name": "Random", "reputation": 483, "user_id": 240998, "user_type": "registered", "accept_rate": 85}}, {"body": "As someone about to complete a degree in Information Technology (with a specialization in Applications Development, no less), let me assure you that it is a small step above useless for someone interested in software development.  You&#39;re more than likely to learn UML and object-orientedness which is supposedly good, but beyond that you&#39;re on your own.", "edited": false, "comment_id": 3065129, "creation_date": 1276026817, "score": 0, "owner": {"display_name": "RavB", "reputation": 1114, "user_id": 340574, "user_type": "registered", "accept_rate": 78}}], "creation_date": 1231035274, "comment_count": 12, "score": 89, "owner": {"display_name": "Maltrap", "reputation": 1797, "user_id": 10644, "user_type": "registered", "accept_rate": 67}, "last_editor": {"display_name": "Maltrap", "reputation": 1797, "user_id": 10644, "user_type": "registered", "accept_rate": 67}, "last_edit_date": 1231059714, "up_vote_count": 102}, {"community_owned_date": 1231039087, "body": "<p><strong>New web projects should consider not using Java.</strong></p>\n\n<p>I've been using Java to do web development for over 10 years now.  At first, it was a step in the right direction compared to the available alternatives.  Now, there are better alternatives than Java.</p>\n\n<p>This is really just a specific case of the magic hammer approach to problem solving, but it's one that's really painful.</p>\n", "is_accepted": false, "tags": [], "answer_id": 410354, "down_vote_count": 2, "last_activity_date": 1231337419, "comments": [{"body": "Did you mean &quot;New web projects should <i>not</i> consider&quot; ?", "edited": false, "comment_id": 235336, "creation_date": 1231044364, "score": 2, "owner": {"display_name": "dreftymac", "reputation": 9567, "user_id": 42223, "user_type": "registered", "accept_rate": 74}}, {"body": "That doesn&#39;t sound very controversial to me.", "edited": false, "comment_id": 274126, "creation_date": 1232215789, "score": 0, "owner": {"display_name": "finnw", "reputation": 27950, "user_id": 12048, "user_type": "registered", "accept_rate": 94}}, {"body": "WOW! Some people in this thread really have extremist views! ;-)", "edited": false, "comment_id": 296305, "creation_date": 1232966699, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "This is absolutely not controversial. Perhaps you want to say <i>New web projects <b>should not</b> consider using Java</i>", "edited": false, "comment_id": 1584012, "creation_date": 1257855848, "score": 0, "owner": {"display_name": "flybywire", "reputation": 48624, "user_id": 63051, "user_type": "registered", "accept_rate": 96}}], "creation_date": 1231039087, "comment_count": 4, "score": 13, "owner": {"display_name": "pansapien", "reputation": 367, "user_id": 447824, "user_type": "registered"}, "last_editor": {"display_name": "pansapien", "reputation": 367, "user_id": 447824, "user_type": "registered"}, "last_edit_date": 1231337419, "up_vote_count": 15}, {"community_owned_date": 1231039957, "body": "<p><strong>Less code is better than more!</strong></p>\n\n<p>If the users say \"that's it?\", and your work remains invisible, it's done right.  Glory can be found elsewhere.</p>\n", "answer_id": 410385, "tags": [], "down_vote_count": 4, "last_activity_date": 1231039957, "creation_date": 1231039957, "comment_count": 0, "score": 274, "owner": {"display_name": "Jas Panesar", "reputation": 6029, "user_id": 35886, "user_type": "registered", "accept_rate": 88}, "is_accepted": false, "up_vote_count": 278}, {"community_owned_date": 1231043399, "body": "<p><strong>Developers are all different, and should be treated as such.</strong></p>\n\n<p>Developers don't fit into a box, and shouldn't be treated as such. The best language or tool for solving a problem has just as much to do with the developers as it does with the details of the problem being solved.</p>\n", "answer_id": 410464, "tags": [], "down_vote_count": 0, "last_activity_date": 1231043399, "comments": [{"body": "And therefore the bozo bit must be flipped for some :-D", "edited": false, "comment_id": 244390, "creation_date": 1231335135, "score": 0, "owner": {"display_name": "icelava", "reputation": 6320, "user_id": 2663, "user_type": "registered", "accept_rate": 80}}], "creation_date": 1231043399, "comment_count": 1, "score": 13, "owner": {"display_name": "commondream", "reputation": 444, "user_id": 50156, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 13}, {"community_owned_date": 1231045766, "body": "<p><strong>Test Constantly</strong></p>\n\n<p>You have to write tests, and you have to write them FIRST. Writing tests changes the way you write your code. It makes you think about what you want it to actually do before you just jump in and write something that does everything except what you want it to do. </p>\n\n<p>It also gives you goals. Watching your tests go green gives you that little extra bump of confidence that you're getting something accomplished.</p>\n\n<p>It also gives you a basis for writing tests for your edge cases. Since you wrote the code against tests to begin with, you probably have some hooks in your code to test with.</p>\n\n<p>There is not excuse not to test your code. If you don't you're just lazy. I also think you should test first, as the benefits outweigh the extra time it takes to code this way.</p>\n", "is_accepted": false, "tags": [], "answer_id": 410491, "down_vote_count": 7, "last_activity_date": 1242396252, "comments": [{"body": "OMG how did anyone down vote this. Amazing, i&#39;d + 1000 if i could", "edited": false, "comment_id": 235467, "creation_date": 1231055661, "score": 0, "owner": {"display_name": "acidzombie24", "reputation": 34755, "user_id": 34537, "user_type": "registered", "accept_rate": 73}}, {"body": "Sometimes, watching all your test go green gives you a FALSE confidence, while your code fails somewhere your test didn&#39;t anticipate.", "edited": false, "comment_id": 235488, "creation_date": 1231057741, "score": 1, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "@acidzombie24, you should vote for it if you think it is controversial, not when you agree it.", "edited": false, "comment_id": 235724, "creation_date": 1231069550, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "@Cameron MacFarland there is no excuse for not doing user testing. The point of the test isn&#39;t to cover every edge case from the beginning, it&#39;s to make sure your code meets the requirements for what it&#39;s supposed to do. No matter how much you test, you&#39;ll never cover everything that could happen.", "edited": false, "comment_id": 239605, "creation_date": 1231201606, "score": 0, "owner": {"display_name": "PJ Davis", "reputation": 766, "user_id": 39077, "user_type": "registered"}}, {"body": "@Cameron MacFarland, having a test suite helps you even when your code fails in the sense that you can easily add a new test case, correct the bug and remain sure that the bug will be detected if some dev introduce it again.", "edited": false, "comment_id": 241998, "creation_date": 1231268628, "score": 0, "owner": {"display_name": "Petar Repac", "reputation": 2703, "user_id": 21645, "user_type": "registered", "accept_rate": 64}}, {"body": "You&#39;re accruing &quot;offensive&quot; votes... suggest you remove the profanity.", "edited": false, "comment_id": 676398, "creation_date": 1242395969, "score": 2, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}], "creation_date": 1231045766, "comment_count": 6, "score": 8, "owner": {"display_name": "PJ Davis", "reputation": 766, "user_id": 39077, "user_type": "registered"}, "last_editor": {"display_name": "Joel Coehoorn", "reputation": 219888, "user_id": 3043, "user_type": "registered", "accept_rate": 71}, "last_edit_date": 1242396252, "up_vote_count": 15}, {"community_owned_date": 1231065207, "body": "<p><strong>Your job is to put yourself out of work.</strong></p>\n\n<p>When you're writing software for your employer, any software that you create is to be written in such a way that it can be picked up by any developer and understood with a minimal amount of effort. It is well designed, clearly and consistently written, formatted cleanly, documented where it needs to be, builds daily as expected, checked into the repository, and appropriately versioned. </p>\n\n<p>If you get hit by a bus, laid off, fired, or walk off the job, your employer should be able to replace you on a moment's notice, and the next guy could step into your role, pick up your code and be up and running within a week tops. If he or she can't do that, then you've failed miserably.</p>\n\n<p>Interestingly, I've found that having that goal has made me more valuable to my employers. The more I strive to be disposable, the more valuable I become to them.</p>\n", "answer_id": 410799, "tags": [], "down_vote_count": 0, "last_activity_date": 1231065207, "creation_date": 1231065207, "comment_count": 0, "score": 467, "owner": {"display_name": "Mike Hofer", "reputation": 7420, "user_id": 47580, "user_type": "registered", "accept_rate": 98}, "is_accepted": false, "up_vote_count": 467}, {"community_owned_date": 1231116079, "body": "<p>One I have been tossing around for a while: </p>\n\n<p><strong>The data is the system.</strong></p>\n\n<p>Processes and software are built for data, not the other way around.  </p>\n\n<p>Without data, the process/software has little value.  Data still has value without a process or software around it.</p>\n\n<p>Once we understand the data, what it does, how it interacts, the different forms it exists in at different stages, only then can a solution be built to support the system of data.</p>\n\n<p>Successful software/systems/processes seem to have an acute awareness, if not fanatical mindfulness of \"where\" the data is at in any given moment.  </p>\n", "answer_id": 412004, "tags": [], "down_vote_count": 1, "last_activity_date": 1231116079, "comments": [{"body": "Or to put it another way: &quot;Data outlives code&quot;.", "edited": false, "comment_id": 256091, "creation_date": 1231681497, "score": 0, "owner": {"display_name": "Dan Dyer", "reputation": 34649, "user_id": 5171, "user_type": "registered", "accept_rate": 100}}, {"body": "Hey, I like that a lot!  Thanks for sharing.", "edited": false, "comment_id": 258168, "creation_date": 1231765734, "score": 0, "owner": {"display_name": "Jas Panesar", "reputation": 6029, "user_id": 35886, "user_type": "registered", "accept_rate": 88}}, {"body": "It&#39;s an interesting idea but I think it depends what kind of program you&#39;re writing. Five worlds man. <a href=\"http://www.joelonsoftware.com/articles/FiveWorlds.html\" rel=\"nofollow\">joelonsoftware.com/articles/FiveWorlds.html</a>", "edited": false, "comment_id": 299651, "creation_date": 1233057145, "score": 0, "owner": {"display_name": "MarkJ", "reputation": 23308, "user_id": 15639, "user_type": "registered", "accept_rate": 67}}, {"body": "I couldn&#39;t agree more (granted I&#39;m a DBA so all we deal with is data).", "edited": false, "comment_id": 323981, "creation_date": 1233711837, "score": 0, "owner": {"display_name": "mrdenny", "reputation": 3720, "user_id": 4197, "user_type": "registered"}}, {"body": "The system also seems to lose it&#39;s way if the data is out.", "edited": false, "comment_id": 325716, "creation_date": 1233762937, "score": 0, "owner": {"display_name": "Jas Panesar", "reputation": 6029, "user_id": 35886, "user_type": "registered", "accept_rate": 88}}, {"body": "I&#39;d take the relations of the data into account, too, so &quot;The model is the system&quot;. I mean the second letter of a name is relatively useless without the rest and the first name needs the family name and the employee the department, etc.", "edited": false, "comment_id": 405859, "creation_date": 1235726889, "score": 0, "owner": {"display_name": "Aaron Digulla", "reputation": 178090, "user_id": 34088, "user_type": "registered", "accept_rate": 78}}], "creation_date": 1231116079, "comment_count": 6, "score": 30, "owner": {"display_name": "Jas Panesar", "reputation": 6029, "user_id": 35886, "user_type": "registered", "accept_rate": 88}, "is_accepted": false, "up_vote_count": 31}, {"community_owned_date": 1231118637, "body": "<p>Developers should be able to modify production code without getting permission from anyone as long as they document their changes and notify the appropriate parties.</p>\n", "answer_id": 412058, "tags": [], "down_vote_count": 9, "last_activity_date": 1231118637, "comments": [{"body": "What does this even mean? &quot;Hey, I just released a patch that deleted the customer&#39;s requested functionality because I felt like it but it&#39;s ok because I have documented it and told you that I did it.&quot; Is that the kind of thing you were suggesting?", "edited": false, "comment_id": 237038, "creation_date": 1231127331, "score": 0, "owner": {"display_name": "jwpfox", "reputation": 1170, "user_id": 18665, "user_type": "registered"}}, {"body": "This could happen if a programmer has poor judgement, but I ultimately believe developers have better judgement than they are given credit for.  They should be allowed to fix bugs without a bunch of friction.  I believe in trust over regulation with the developers I work with.", "edited": false, "comment_id": 244693, "creation_date": 1231341113, "score": 0, "owner": {"display_name": "Eric Mills", "reputation": 56, "user_id": 51472, "user_type": "registered"}}, {"body": "+1. Why the downvotes? Maybe doing the kind of work that demands that level of scrutiny removes the ability to see that there&#39;s more than one kind of coding environment? There&#39;s no manager to lean on when your world-view-interpreter algorithms are wonky.", "edited": false, "comment_id": 246135, "creation_date": 1231364629, "score": 0, "owner": {"display_name": "jTresidder", "reputation": 482, "user_id": 36365, "user_type": "registered"}}, {"body": "I could count on one hand the number of programmers I know that I would trust in that sort of environment - too many cowboys out there.", "edited": false, "comment_id": 247328, "creation_date": 1231400895, "score": 0, "owner": {"display_name": "Evan", "reputation": 10763, "user_id": 6277, "user_type": "registered", "accept_rate": 44}}, {"body": "Ok, I would start by modifying all the code you wrote. It would be interesting to see if you would still feel the same way.", "edited": false, "comment_id": 296312, "creation_date": 1232967179, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "@Eric Mills: Go work for a bank, or qualify your answer.  Maybe you are unaware or underestimating the impact erroneous (or even malicious) code changes can have on a company.  Hours of work lost, bazillions of space credits blown.  Careers have been destroyed over these kinds of things, people fired on the spot.  Probably not something you&#39;ll understand until you are personally responsible for an insanely important system...and some cowboy wants to tweak it at will.", "edited": false, "comment_id": 609756, "creation_date": 1240948760, "score": 4, "owner": {"display_name": "Stu Thompson", "reputation": 20094, "user_id": 2961, "user_type": "registered", "accept_rate": 81}}, {"body": "At least, in all systems i worked with, this logic would be a very bad policy. Could you provide us with an environment where you would like this to occur?", "edited": false, "comment_id": 1118430, "creation_date": 1250519155, "score": 0, "owner": {"display_name": "Luis Filipe", "reputation": 3853, "user_id": 20335, "user_type": "registered", "accept_rate": 95}}, {"body": "I wouldn&#39;t even want myself in that kind of environment. Forgetting matters of trust or judgment for a second, with any project with more than 1 dev you run into concurrency issues.  We both coded well, but our updates clashed . . . in production.  And do you truly think QA before release is useless?  Any important or sizable project has those checks for a reason.  Some non-important, non-sizable projects with 1 or 2 devs and a knowledgeable user base (e.g., some games) can and do practice this, but they are exceptions - not the rule.", "edited": false, "comment_id": 4931481, "creation_date": 1292980336, "score": 0, "owner": {"display_name": "Ethel Evans", "reputation": 610, "user_id": 506178, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1231118637, "comment_count": 8, "score": -4, "owner": {"display_name": "Eric Mills", "reputation": 56, "user_id": 51472, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1231130197, "body": "<p><strong>Uncommented code is the bane of humanity.</strong></p>\n\n<p>I think that comments are necessary for code.  They visually divide it up into logical parts, and provide an alternative representation when reading code.</p>\n\n<p>Documentation comments are the bare minimum, but using comments to split up longer functions helps when writing new code and allows quicker analysis when returning to existing code.</p>\n", "answer_id": 412279, "tags": [], "down_vote_count": 1, "last_activity_date": 1231130197, "comments": [{"body": "&quot;using comments to split up longer functions&quot; means your functions are too long.", "edited": false, "comment_id": 238180, "creation_date": 1231170269, "score": 0, "owner": {"display_name": "Jay Bazuzi", "reputation": 22862, "user_id": 5314, "user_type": "registered", "accept_rate": 40}}, {"body": "If you can&#39;t understand code WITHOUT comments, you can&#39;t understand it WITH, either.", "edited": false, "comment_id": 414701, "creation_date": 1236003299, "score": 0, "owner": {"display_name": "Aaron Digulla", "reputation": 178090, "user_id": 34088, "user_type": "registered", "accept_rate": 78}}, {"body": "Voted up, because this surely is controversial; I disagree with you :-) I&#39;m on the side that says \u201cDon&#39;t comment bad code, re-write it so it&#39;s clear\u201d. If your justification for comments is to break up code visually, that&#39;s far better done with separate well-named functions with whitespace between.", "edited": false, "comment_id": 557787, "creation_date": 1239682535, "score": 0, "owner": {"display_name": "bignose", "reputation": 7940, "user_id": 70157, "user_type": "registered", "accept_rate": 71}}], "creation_date": 1231130197, "comment_count": 3, "score": 4, "owner": {"display_name": "Jeff M", "reputation": 650, "user_id": 49758, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1231145337, "body": "<p>Hardcoding is good!</p>\n\n<p>Really ,more efficient and much easier to maintain in many cases!</p>\n\n<p>The number of times I've seen constants put into parameter files really how often will\nyou change the freezing point of water or the speed of light?</p>\n\n<p>For C programs just hard code these type of values into a header file, for java into a static class etc.</p>\n\n<p>When these parameters have a drastic effect on your programs behaviour you really want to do a regresion test on every change, this seems more natural with hard coded values. When things are stored in parameter/property files the temptation is to think \"this is not a program cahnge so I dont need to test it\".</p>\n\n<p>The other advantage is it stops people messing with vital values in the parameter/property files because there aren't any!</p>\n", "answer_id": 412591, "tags": [], "down_vote_count": 3, "last_activity_date": 1231145337, "comments": [{"body": "Q - &quot;how often will change the freezing point of water&quot; A - Every time you change altitude (barometric pressure) or salt density or... (assumptions start with those three letters for a reasons)", "edited": false, "comment_id": 240114, "creation_date": 1231222665, "score": 5, "owner": {"display_name": "jwpfox", "reputation": 1170, "user_id": 18665, "user_type": "registered"}}, {"body": "the speed of light depends on the medium it&#39;s traveling through", "edited": false, "comment_id": 243656, "creation_date": 1231314404, "score": 5, "owner": {"display_name": "Ferruccio", "reputation": 59500, "user_id": 4086, "user_type": "registered", "accept_rate": 89}}, {"body": "The assumption that a constant won&#39;t change (like in this post, indicated by the responses) is EXACTLY the problem and the reason you should just never hardcode.", "edited": false, "comment_id": 252624, "creation_date": 1231524073, "score": 2, "owner": {"display_name": "Bill K", "reputation": 37999, "user_id": 12943, "user_type": "registered", "accept_rate": 90}}], "creation_date": 1231145337, "comment_count": 3, "score": 1, "owner": {"display_name": "James Anderson", "reputation": 20231, "user_id": 38207, "user_type": "registered", "accept_rate": 83}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1231146353, "body": "<p>Having a process that involves code being approved before it is merged onto the main line is a terrible idea.  It breeds insecurity and laziness in developers, who, if they knew they could be screwing up dozens of people would be very careful about the changes they make, get lulled into a sense of not having to think about all the possible clients of the code they may be affecting.  The person going over the code is less likely to have thought about it as much as the person writing it, so it can actually lead to poorer quality code being checked in... though, yes, it will probably follow all the style guidelines and be well commented :)</p>\n", "answer_id": 412609, "tags": [], "down_vote_count": 0, "last_activity_date": 1231146353, "comments": [{"body": "Approvals are the bad thing? Or you just don&#39;t trust one person to do the approvals? I&#39;d say &quot;one person can never approve anything&quot;.  Meaningful approval means everybody should have the ability to black-ball, and approval should be by stake-holder consensus. Then everybody is to blame when it fails, which it still will. :-) How&#39;s that for punchy?", "edited": false, "comment_id": 2560308, "creation_date": 1270080952, "score": 0, "owner": {"display_name": "Warren  P", "reputation": 26418, "user_id": 84704, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1231146353, "comment_count": 1, "score": 1, "owner": {"display_name": "Jesse Pepper", "reputation": 2148, "user_id": 43058, "user_type": "registered", "accept_rate": 47}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1231148876, "body": "<p><strong>The worst thing about recursion is recursion.</strong></p>\n", "is_accepted": false, "tags": [], "answer_id": 412674, "down_vote_count": 3, "last_activity_date": 1231314169, "comments": [{"body": "But what about recursion?", "edited": false, "comment_id": 266773, "creation_date": 1231977505, "score": 2, "owner": {"display_name": "LarryF", "reputation": 3059, "user_id": 18518, "user_type": "registered", "accept_rate": 67}}, {"body": "Before you understand recursion, you must first understand recursion.", "edited": false, "comment_id": 711010, "creation_date": 1243143829, "score": 2, "owner": {"display_name": "ChadD", "reputation": 5705, "user_id": 109676, "user_type": "registered", "accept_rate": 81}}, {"body": "Recursion, n.  See recursion.", "edited": false, "comment_id": 1422178, "creation_date": 1255469987, "score": 0, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}}, {"body": "If that&#39;s what you reckon, you should check <a href=\"http://stackoverflow.com/questions/406760/whats-your-most-controversial-programming-opinion/412674#412674\">this</a> out.", "edited": false, "comment_id": 4922842, "creation_date": 1292931460, "score": 0, "owner": {"display_name": "Craig McQueen", "reputation": 16733, "user_id": 60075, "user_type": "registered", "accept_rate": 72}}], "creation_date": 1231148876, "comment_count": 4, "score": 11, "owner": {"display_name": "Mike", "reputation": 21, "user_id": 51350, "user_type": "registered"}, "last_editor": {"display_name": "Ferruccio", "reputation": 59500, "user_id": 4086, "user_type": "registered", "accept_rate": 89}, "last_edit_date": 1231314169, "up_vote_count": 14}, {"community_owned_date": 1231152775, "body": "<p><strong>Design Patterns are a symptom of Stone Age programming language design</strong></p>\n\n<p>They have their purpose. A lot of good software gets built with them. But the fact that there was a need to codify these \"recipes\" for psychological abstractions about how your code works/should work speaks to a lack of programming languages expressive enough to handle this abstraction for us. </p>\n\n<p>The remedy, I think, lies in languages that allow you to embed more and more of the design into the code, by defining language constructs that might not exist or might not have general applicability but really <em>really</em> make sense in situations your code deals with incessantly. The Scheme people have known this for years, and there are things possible with Scheme macros that would make most monkeys-for-hire piss their pants.</p>\n", "answer_id": 412783, "tags": [], "down_vote_count": 1, "last_activity_date": 1231152775, "comments": [{"body": "I agree with your general feeling. Try and see them as temporal observations.  See <a href=\"http://blog.plover.com/prog/design-patterns.html\" rel=\"nofollow\">blog.plover.com/prog/design-patterns.html</a> for example.", "edited": false, "comment_id": 244370, "creation_date": 1231334641, "score": 0, "owner": {"display_name": "JB.", "reputation": 15139, "user_id": 12274, "user_type": "registered", "accept_rate": 88}}], "creation_date": 1231152775, "comment_count": 1, "score": 30, "owner": {"display_name": "dwf", "reputation": 2278, "user_id": 50462, "user_type": "registered", "accept_rate": 75}, "is_accepted": false, "up_vote_count": 31}, {"community_owned_date": 1231154442, "body": "<p><strong>For a good programmer language is not a problem.</strong></p>\n\n<p>It may be not very controvertial but I hear a lot o whining from other programmers like \"why don't they all use delphi?\", \"C# sucks\", \"i would change company if they forced me to use java\" and so on.<br />\nWhat i think is that a good programmer is flexible and is able to write good programms in any programming language that he might have to learn in his life</p>\n", "answer_id": 412844, "tags": [], "down_vote_count": 1, "last_activity_date": 1231154442, "comments": [{"body": "On the other hand, I <i>would</i> change company if, say, I was told that the rest of my job (forever) would be in GWBasic. There&#39;s a significant difference in how easy it is to express designs in different languages.", "edited": false, "comment_id": 240298, "creation_date": 1231232146, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "yeah, of course it&#39;s not applicable to all situations. but still a programmer has to be flexible to some extent because this is what computer science is all about - constant change.", "edited": false, "comment_id": 244179, "creation_date": 1231330748, "score": 0, "owner": {"display_name": "agnieszka", "reputation": 4312, "user_id": 40872, "user_type": "registered", "accept_rate": 69}}, {"body": "Totally agreed. I hate those religious language wars :/", "edited": false, "comment_id": 244549, "creation_date": 1231338710, "score": 0, "owner": {"display_name": "driAn", "reputation": 2051, "user_id": 50430, "user_type": "registered", "accept_rate": 69}}, {"body": "While I agree that a good programmer can understand any language, working with it 40+ hours a week is a different story. I can understand VB.NET just fine, but I don&#39;t want to spend most of my day plowing through it!", "edited": false, "comment_id": 247088, "creation_date": 1231389302, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "I can agree with this.  The real truth here is that there is a tool for every job.  Sometimes that tool may be Perl.  Sometimes it may be vbScript, sometimes Java, sometimes C#, and sometime even C++...  The good developer knows WHICH tool is right for the job.", "edited": false, "comment_id": 266769, "creation_date": 1231977467, "score": 2, "owner": {"display_name": "LarryF", "reputation": 3059, "user_id": 18518, "user_type": "registered", "accept_rate": 67}}, {"body": "While it may be true that you can learn the <i>syntax</i> of a new language in a few hours, you can&#39;t learn a <i>language</i> in a few hours. It takes years to master a new language with all the corner cases, etc.", "edited": false, "comment_id": 406901, "creation_date": 1235746533, "score": 0, "owner": {"display_name": "Aaron Digulla", "reputation": 178090, "user_id": 34088, "user_type": "registered", "accept_rate": 78}}, {"body": "Lisp! Lisp! Lisp!", "edited": false, "comment_id": 1482117, "creation_date": 1256327320, "score": 0, "owner": {"display_name": "Thorbj\u00f8rn Ravn Andersen", "reputation": 43814, "user_id": 53897, "user_type": "registered", "accept_rate": 57}}, {"body": "&quot;A good carpenter can cut wood with a hammer...&quot; (I&#39;m sure: carpenters are much more knowledgeable than programmers.)", "edited": false, "comment_id": 1559069, "creation_date": 1257466434, "score": 0, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}], "creation_date": 1231154442, "comment_count": 8, "score": 9, "owner": {"display_name": "agnieszka", "reputation": 4312, "user_id": 40872, "user_type": "registered", "accept_rate": 69}, "is_accepted": false, "up_vote_count": 10}, {"community_owned_date": 1231164755, "body": "<p>Non-development staff should not be allowed to manage development staff.</p>\n\n<p>Correction: Staff with zero development experience should not be allowed to manage development staff.</p>\n", "is_accepted": false, "tags": [], "answer_id": 413202, "down_vote_count": 1, "last_activity_date": 1231385350, "comments": [{"body": "Better non-development staff with management skills than developer staff without management skills.", "edited": false, "comment_id": 238179, "creation_date": 1231170243, "score": 2, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "So you reckon every company that employs any developers should have a developer as CEO?", "edited": false, "comment_id": 274131, "creation_date": 1232215853, "score": 0, "owner": {"display_name": "finnw", "reputation": 27950, "user_id": 12048, "user_type": "registered", "accept_rate": 94}}, {"body": "Yes, if you going to manage people with a special skill set it would be helpful if you also had a background in that skill set.  Would you hire a CEO with no Management experience?", "edited": false, "comment_id": 287627, "creation_date": 1232645096, "score": 0, "owner": {"display_name": "Chris", "reputation": 3468, "user_id": 36269, "user_type": "registered", "accept_rate": 68}}, {"body": "C-level comparisons are weak.  More realistic would be &quot;Would you hire an untrained mechanic to manage mechanics?&quot;  Well...yes.  I&#39;m not saying that non-developers make better managers of developers, or that management &amp; development abilities are mutually exclusive, but rather <i>the ability to manage an employee is significantly more important to the ability to do the employee&#39;s work.</i>", "edited": false, "comment_id": 609841, "creation_date": 1240950333, "score": 3, "owner": {"display_name": "Stu Thompson", "reputation": 20094, "user_id": 2961, "user_type": "registered", "accept_rate": 81}}], "creation_date": 1231164755, "comment_count": 4, "score": 12, "owner": {"display_name": "Chris", "reputation": 3468, "user_id": 36269, "user_type": "registered", "accept_rate": 68}, "last_editor": {"display_name": "Chris", "reputation": 3468, "user_id": 36269, "user_type": "registered", "accept_rate": 68}, "last_edit_date": 1231385350, "up_vote_count": 13}, {"community_owned_date": 1231189883, "body": "<p><strong>VB sucks</strong><br />\nWhile not terribly controversial in general, when you work in a VB house it is</p>\n", "answer_id": 414548, "tags": [], "down_vote_count": 4, "last_activity_date": 1231189883, "comments": [{"body": "That this is not generally controversial shows how generally up themselves so many programmers are.  Have a preference - fine. But when it comes down to whether you have a word (that you don&#39;t even have to type) or a &#39;}&#39; to terminate a block, it&#39;s just a style choice...", "edited": false, "comment_id": 244498, "creation_date": 1231337755, "score": 2, "owner": {"display_name": "ChrisA", "reputation": 3163, "user_id": 24867, "user_type": "registered", "accept_rate": 77}}, {"body": "... plenty of VB programmers suck, though.  As do plenty of C# programmers.", "edited": false, "comment_id": 244501, "creation_date": 1231337787, "score": 0, "owner": {"display_name": "ChrisA", "reputation": 3163, "user_id": 24867, "user_type": "registered", "accept_rate": 77}}, {"body": "VB doesn&#39;t suck.  People who use VB like VBA suck.", "edited": false, "comment_id": 246959, "creation_date": 1231385400, "score": 0, "owner": {"display_name": "Chris", "reputation": 3468, "user_id": 36269, "user_type": "registered", "accept_rate": 68}}, {"body": "VB <i>does</i> suck.  So many things have been shoe-horned into what was originally a simple instructional language to allow novices to enter the domain of professionals that it&#39;s no longer appropriate for either novices nor professionals.", "edited": false, "comment_id": 251699, "creation_date": 1231509450, "score": 0, "owner": {"display_name": "P Daddy", "reputation": 16500, "user_id": 36388, "user_type": "registered", "accept_rate": 88}}, {"body": "It&#39;s not the language that sucks but a lot of the programmers that (used to) program in VB.", "edited": false, "comment_id": 296292, "creation_date": 1232966356, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}], "creation_date": 1231189883, "comment_count": 5, "score": 6, "owner": {"display_name": "rotard", "reputation": 632, "user_id": 38660, "user_type": "registered", "accept_rate": 67}, "is_accepted": false, "up_vote_count": 10}, {"community_owned_date": 1231190237, "body": "<p><strong>Generated documentation is nearly always totally worthless.</strong></p>\n\n<p>Or, as a corollary: <strong>Your API needs separate sets of documentation for maintainers and users.</strong></p>\n\n<p>There are really two classes of people who need to understand your API: maintainers, who must understand the minutiae of your implementation to be effective at their job, and users, who need a high-level overview, examples, and thorough details about the effects of each method they have access to.</p>\n\n<p>I have never encountered generated documentation that succeeded in either area.  Generally, when programmers write comments for tools to extract and make documentation out of, they aim for somewhere in the middle--just enough implementation detail to bore and confuse users yet not enough to significantly help maintainers, and not enough overview to be of any real assistance to users.</p>\n\n<p>As a maintainer, I'd <em>always</em> rather have clean, clear comments, unmuddled by whatever strange markup your auto-doc tool requires, that tell me why you wrote that weird switch statement the way you did, or what bug this seemingly-redundant parameter check fixes, or whatever else I need to know to actually keep the code clean and bug-free as I work on it.  I want this information right there in the code, adjacent to the code it's about, so I don't have to hunt down your website to find it in a state that lends itself to being read.</p>\n\n<p>As a user, I'd <em>always</em> rather have a thorough, well-organized document (a set of web pages would be ideal, but I'd settle for a well-structured text file, too) telling me how your API is architectured, what methods do what, and how I can accomplish what I want to use your API to do.  I don't want to see internally what classes you wrote to allow me to do work, or files they're in for that matter.  And I certainly don't want to have to download your source so I can figure out exactly what's going on behind the curtain.  If your documentation were good enough, I wouldn't have to.</p>\n\n<p>That's how I see it, anyway.</p>\n", "answer_id": 414564, "tags": [], "down_vote_count": 3, "last_activity_date": 1231190237, "comments": [{"body": "When I use Doxygen, I use /internal tags very often. This makes it easy to generate two sets of documentation exactly as you describe. (Of course, I also continue to use regular comments throughout code where required.)", "edited": false, "comment_id": 263693, "creation_date": 1231900736, "score": 0, "owner": {"display_name": "Zooba", "reputation": 7259, "user_id": 891, "user_type": "registered"}}, {"body": "I don&#39;t just like JavaDoc. I love it.", "edited": false, "comment_id": 296303, "creation_date": 1232966570, "score": 2, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}], "creation_date": 1231190237, "comment_count": 2, "score": 23, "owner": {"display_name": "chazomaticus", "reputation": 6286, "user_id": 30497, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 26}, {"community_owned_date": 1231193160, "body": "<p><strong>Extension Methods are the work of the Devil</strong></p>\n\n<p>Everyone seems to think that extension methods in .Net are the best thing since sliced bread. The number of developers singing their praises seems to rise by the minute but I'm afraid I can't help but despise them and unless someone can come up with a brilliant justification or example that I haven't already heard then I will never write one. I recently came across this <a href=\"http://stackoverflow.com/questions/271398/post-your-extension-goodies-for-c-net-codeplex-com-extensionoverflow\">thread</a> and I must say reading the examples of the highest voted extensions made me feel a little like vomiting (metaphorically of course).</p>\n\n<p>The main reasons given for their extensiony goodness are increased readability, improved OO-ness and the ability to chain method calls better.</p>\n\n<p>I'm afraid I have to differ, I find in fact that they, unequivocally, reduce readability and OO-ness by virtue of the fact that they are at their core a lie. If you need a utility method that acts upon an object then write a utility method that acts on that object don't lie to me. When I see aString.SortMeBackwardsUsingKlingonSortOrder then string should have that method because that is telling me something about the string object not something about the AnnoyingNerdReferences.StringUtilities class.</p>\n\n<p>LINQ was designed in such a way that chained method calls are necessary to avoid strange and uncomfortable expressions and the extension methods that arise from LINQ are understandable but in general chained method calls reduce readability and lead to code of the sort we see in obfuscated Perl contests.</p>\n\n<p>So, in short, extension methods are evil. Cast off the chains of Satan and commit yourself to extension free code.</p>\n", "answer_id": 414683, "tags": [], "down_vote_count": 3, "last_activity_date": 1231193160, "comments": [{"body": "I am still undecided but there seem to be genuine practical uses for extension methods.", "edited": false, "comment_id": 296883, "creation_date": 1232983366, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "I&#39;m totally with you, buddy.", "edited": false, "comment_id": 2106657, "creation_date": 1264774932, "score": 0, "owner": {"display_name": "Dan Tao", "reputation": 68996, "user_id": 105570, "user_type": "registered", "accept_rate": 67}}], "creation_date": 1231193160, "comment_count": 2, "score": 3, "owner": {"display_name": "Stephen Martin", "reputation": 5499, "user_id": 12845, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 6}, {"community_owned_date": 1231218817, "body": "<p>Don't worry too much about what language to learn, use the industry heavy weights like c# or python. Languages like Ruby are fun in the bedroom, but don't do squat in workplace scenarios. Languages like c# and Java can handle small to the very large software projects. If anyone says otherwise, then your talking about a scripting language. Period!</p>\n\n<p>Before starting a project, consider how much support and code samples are available on the net. Again, choosing a language like Ruby which has very few code samples on the web compared to Java for example, will only cause you grief further down the road when your stuck on a problem.</p>\n\n<p>You can't post a message on a forum and expect an answer back while your boss is asking you how your coding is going. What are you going to say? \"I'm waiting for someone to help me out on this forum\"</p>\n\n<p>Learn one language and learn it good. Learning multiple languages may carry over skills and practices, but you'll only even be OK at all of them. Be good at one. There are entire books dedicated to Threading in Java which, when you think about it, is only one namespace out of over 100.</p>\n\n<p>Master one or be ok at lots.</p>\n", "answer_id": 415540, "tags": [], "down_vote_count": 2, "last_activity_date": 1231218817, "creation_date": 1231218817, "comment_count": 0, "score": 0, "owner": {"display_name": "Vince Panuccio", "reputation": 6605, "user_id": 17211, "user_type": "registered", "accept_rate": 98}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1231262062, "body": "<p>This one is mostly web related but...</p>\n\n<p><strong>Use Tables for your web page layouts</strong></p>\n\n<p>If I was developing a gigantic site that needed to squeeze performance I might think about it, but nothing gives me an easier way to get a consistent look out on the browser than tables. The majority of applications that I develop are for around 100-1000 users and possible 100 at a time max.  The extra bloat of the tables aren't killing my server by any means.</p>\n", "answer_id": 417379, "tags": [], "down_vote_count": 4, "last_activity_date": 1231262062, "comments": [{"body": "Its not so much about code bloat but more about letting the page degrade gracefully.", "edited": false, "comment_id": 244011, "creation_date": 1231326785, "score": 2, "owner": {"display_name": "\u00d3lafur Waage", "reputation": 45164, "user_id": 22459, "user_type": "registered", "accept_rate": 90}}, {"body": "And you think div&#39;s and css does this? I don&#39;t.", "edited": false, "comment_id": 245947, "creation_date": 1231361629, "score": 0, "owner": {"display_name": "rball", "reputation": 3974, "user_id": 50711, "user_type": "registered", "accept_rate": 98}}, {"body": "I always try to make a layout that avoids tables, and I always fail. Div-based layouts just don&#39;t have the flexibility of a table. +1", "edited": false, "comment_id": 250689, "creation_date": 1231474540, "score": 1, "owner": {"display_name": "Marcus Downing", "reputation": 5723, "user_id": 1000, "user_type": "registered", "accept_rate": 68}}, {"body": "<a href=\"http://giveupandusetables.com/\" rel=\"nofollow\">giveupandusetables.com</a>. I have nothing to add. :)", "edited": false, "comment_id": 287632, "creation_date": 1232645286, "score": 0, "owner": {"display_name": "Tomalak", "reputation": 177949, "user_id": 18771, "user_type": "registered", "accept_rate": 84}}, {"body": "Marcus: Are you kidding? Use tables for what they were meant for - tabular data.", "edited": false, "comment_id": 529042, "creation_date": 1238849234, "score": 2, "owner": {"display_name": "Tom", "reputation": 1050, "user_id": 85008, "user_type": "unregistered", "accept_rate": 81}}, {"body": "Try using a screen reader with that table based layout. :(", "edited": false, "comment_id": 1964070, "creation_date": 1263160549, "score": 1, "owner": {"display_name": "spooner", "reputation": 185, "user_id": 133735, "user_type": "registered", "accept_rate": 75}}, {"body": "I&#39;m starting to believe in using CSS frameworks like blueprint and 960.  These seem to be giving me the consistency along with it being a lot easier to make the layout.  Seems to be meeting my needs so I&#39;m pretty jazzed.", "edited": false, "comment_id": 1970213, "creation_date": 1263235732, "score": 0, "owner": {"display_name": "rball", "reputation": 3974, "user_id": 50711, "user_type": "registered", "accept_rate": 98}}], "creation_date": 1231262062, "comment_count": 7, "score": 11, "owner": {"display_name": "rball", "reputation": 3974, "user_id": 50711, "user_type": "registered", "accept_rate": 98}, "is_accepted": false, "up_vote_count": 15}, {"community_owned_date": 1231275759, "body": "<p>That software can be bug free if you have the right tools and take the time to write it properly.</p>\n", "answer_id": 418150, "tags": [], "down_vote_count": 0, "last_activity_date": 1231275759, "comments": [{"body": "And what is about G&#246;del&#39;s completeness theorem?", "edited": false, "comment_id": 244462, "creation_date": 1231336917, "score": 0, "owner": {"display_name": "Vlad Gudim", "reputation": 11837, "user_id": 22088, "user_type": "registered", "accept_rate": 75}}, {"body": "Sorry I&#39;m not familiar with that one, and I&#39;ll have to read the Wikipedia page about 10 times more to make sense of it I feel.", "edited": false, "comment_id": 246072, "creation_date": 1231363625, "score": 0, "owner": {"display_name": "too much php", "reputation": 34623, "user_id": 28835, "user_type": "registered", "accept_rate": 62}}], "creation_date": 1231275759, "comment_count": 2, "score": 2, "owner": {"display_name": "too much php", "reputation": 34623, "user_id": 28835, "user_type": "registered", "accept_rate": 62}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1231311110, "body": "<p>Opinion: <strong>Not having function definitions, and return types can lead to flexible and readable code.</strong></p>\n\n<p>This opinion probably applies more to interpreted languages than compiled. Requiring a return type, and a function argument list, are great for things like intellisense to auto document your code, but they are also restrictions. </p>\n\n<p>Now don't get me wrong, I am not saying throw away return types, or argument lists. They have their place. And 90% of the time they are more of a benefit than a hindrance.</p>\n\n<p>There are times and places when this is useful. </p>\n", "answer_id": 419430, "tags": [], "down_vote_count": 1, "last_activity_date": 1231311110, "creation_date": 1231311110, "comment_count": 0, "score": 2, "owner": {"display_name": "J.J.", "reputation": 3656, "user_id": 21204, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1231317210, "body": "<p><strong>coding is not typing</strong></p>\n\n<p>It takes time to write the code. Most of the time in the editor window, you are just looking at the code, not actually typing. Not as often, but quite frequently, you are deleting what you have written. Or moving from one place to another. Or renaming. </p>\n\n<p>If you are banging away at the keyboard for a long time you are doing something wrong. </p>\n\n<p>Corollary: Number of lines of code written per day is not a linear measurement of a programmers productivity, as programmer that writes 100 lines in a day is quite likely a better programmer then the one that writes 20, but one that writes 5000 is certainly a <em>bad</em> programmer</p>\n", "answer_id": 419580, "tags": [], "down_vote_count": 0, "last_activity_date": 1231317210, "comments": [{"body": "Very much agree with this.  Did you see that recent thread where the consensus seemed to be that if you can&#39;t touch type at 80wpm you aren&#39;t a real programmer?  Complete nonsense, although people seem to like that sort of testosterone-driven &quot;productivity&quot;.", "edited": false, "comment_id": 245234, "creation_date": 1231350797, "score": 1, "owner": {"display_name": "ChrisA", "reputation": 3163, "user_id": 24867, "user_type": "registered", "accept_rate": 77}}, {"body": "@ChrisA: I actually read that thread and came back to write this response. While coding, I like to take time dotting my i&#39;s and crossing my t&#39;s, so to say.", "edited": false, "comment_id": 247201, "creation_date": 1231394707, "score": 0, "owner": {"display_name": "Miserable Variable", "reputation": 19097, "user_id": 18573, "user_type": "registered", "accept_rate": 58}}, {"body": "That&#39;s why I love vim.", "edited": false, "comment_id": 1560371, "creation_date": 1257489090, "score": 0, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "The typing issue isn&#39;t that typing faster allows you to type more code. The issue is that if typing is really a second nature, all of your attention can be on what you are coding rather than on typing. Conversely if you are constantly looking at the keyboard and correcting typos, you are wasting a lot of your attention on typing. Your train of thought is interrupted all the time by the mechanical action of typing. Doesn&#39;t mean that you are a bad programmer, but you are certainly not as good as you could be if 30% of your attention is stuck on the keyboard. Programmer, master your tools.", "edited": false, "comment_id": 3058567, "creation_date": 1275975983, "score": 0, "owner": {"display_name": "Sylverdrag", "reputation": 3854, "user_id": 61905, "user_type": "registered", "accept_rate": 74}}], "creation_date": 1231317210, "comment_count": 4, "score": 11, "owner": {"display_name": "Miserable Variable", "reputation": 19097, "user_id": 18573, "user_type": "registered", "accept_rate": 58}, "is_accepted": false, "up_vote_count": 11}, {"community_owned_date": 1231326409, "body": "<p><strong>The vast majority of software being developed does not involve the end-user when gathering requirements.</strong></p>\n\n<p>Usually it's just some managers who are providing 'requirements'.</p>\n", "answer_id": 419909, "tags": [], "down_vote_count": 0, "last_activity_date": 1231326409, "creation_date": 1231326409, "comment_count": 0, "score": 10, "owner": {"display_name": "Agnel Kurian", "reputation": 17838, "user_id": 45603, "user_type": "registered", "accept_rate": 89}, "is_accepted": false, "up_vote_count": 10}, {"community_owned_date": 1231333600, "body": "<p>The word <strong>'evil'</strong> is an abused and overused word on Stackoverflow and simular forums. </p>\n\n<p>People who use it have too little imagination. </p>\n", "answer_id": 420246, "tags": [], "down_vote_count": 2, "last_activity_date": 1231333600, "comments": [{"body": "I think this is an evil opinion by an evil man out to do evil.", "edited": false, "comment_id": 296304, "creation_date": 1232966639, "score": 9, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "Can&#39;t remember to have ever read this word on stackoverflow.", "edited": false, "comment_id": 1622383, "creation_date": 1258370305, "score": 2, "owner": {"display_name": "Stefan Steinegger", "reputation": 41258, "user_id": 2658202, "user_type": "registered", "accept_rate": 92}}, {"body": "In other words: &#39;evil&#39; is evil.", "edited": false, "comment_id": 1851480, "creation_date": 1261416689, "score": 4, "owner": {"display_name": "Daniel Daranas", "reputation": 16413, "user_id": 96780, "user_type": "registered", "accept_rate": 100}}, {"body": "&quot;People who use it have too little imagination.&quot; ..and are evil.  :)", "edited": false, "comment_id": 2570133, "creation_date": 1270199505, "score": 0, "owner": {"display_name": "mlvljr", "reputation": 1468, "user_id": 110118, "user_type": "registered", "accept_rate": 61}}], "creation_date": 1231333600, "comment_count": 4, "score": 16, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 18}, {"community_owned_date": 1231336446, "body": "<p><strong>Development teams should be segregated more often by technological/architectural layers instead of business function.</strong></p>\n\n<p>I come from a general culture where developers own \"everything from web page to stored procedure\". So in order to implement a feature in the system/application, they would prepare the database table schemas, write the stored procs, match the data access code, implement the business logic and web service methods, and the web page interfaces.</p>\n\n<p>And guess what? Everybody has their <em>own way to doing things</em>! Everyone <em>struggles</em> to learn the ASP.NET AJAX and Telerik or Infragistic suites, Enterprise Library or other productivity and data layer and persistence frameworks, Aspect-oriented frameworks, logging and caching application blocks, DB2 or Oracle percularities. And guess what? Everybody takes <em>heck of a long time</em> to learn how to do things the proper way! Meaning, lots of mistakes in the meantime and plenty of resulting defects and performance bottlenecks! And heck of a longer time to fix them! Across each and every layer! Everybody has a hand in every Visual Studio project. Nobody is specialised to handle and optmise one problem/technology domain. Too many chefs spoil the soup. All the chefs result in some radioactive goo.</p>\n\n<p>Developers may have cross-layer/domain responsibilities, but they should not pretend that they can be masters of all disciplines, and should be limited to only a few. In my experience, when a project is not a small one and utilises lots of technologies, covering more business functions in a single layer is more productive (as well as encouraging more test code test that layer) than covering less business functions spanning the entire architectural stack (which motivates developers to test only via their UI and not test code).</p>\n", "answer_id": 420378, "tags": [], "down_vote_count": 1, "last_activity_date": 1231336446, "creation_date": 1231336446, "comment_count": 0, "score": 3, "owner": {"display_name": "icelava", "reputation": 6320, "user_id": 2663, "user_type": "registered", "accept_rate": 80}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1231354235, "body": "<p><strong>XHTML is evil. Write HTML</strong> </p>\n\n<p>You will have to set the MIME type to text/html anyway, so why fooling yourself into believing that you are really writing XML? Whoever is going to download your page is going to believe that it is HTML, so make it HTML. </p>\n\n<p>And with that, feel free and happy to not close your &lt;li>, it isn't necessary. Don't close the html tag, the file is over anyway. It is valid HTML and it can be parsed perfectly. </p>\n\n<p>It will create more readable, less boilerplate code and you don't lose a thing. HTML parsers work good!</p>\n\n<p>And when you are done, move on to HTML5. It is better. </p>\n", "answer_id": 421546, "tags": [], "down_vote_count": 1, "last_activity_date": 1231354235, "comments": [{"body": "I agree with this. For a while I tried using XHTML on my personal website, but it was too much work for practically no benefit (I just used it to make sure I kept the markup well-formed). I do close all the tags though, but that&#39;s just to satisfy my own neuroses.", "edited": false, "comment_id": 246333, "creation_date": 1231367223, "score": 0, "owner": {"display_name": "Matthew Crumley", "reputation": 57530, "user_id": 2214, "user_type": "registered", "accept_rate": 100}}, {"body": "I can&#39;t agree less. XML makes the code work <i>much</i> nicer with validators and this in turn makes debugging complex nested structures much easier. Perhaps other people can work without this but for me, advanced HTML documents benefit a lot from XML and its strictness.", "edited": false, "comment_id": 249598, "creation_date": 1231446471, "score": 1, "owner": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}}, {"body": "I&#39;ve never thought of XHTML as XML at all.  I simply consider HTML and XHTML to be the same thing until I see lazy HTML code.  Not closing your tags is a bad habbit and doesn&#39;t improve readability at all... especially when dealing with a large file.  Tags should all be lowercase as well.", "edited": false, "comment_id": 253206, "creation_date": 1231534038, "score": 1, "owner": {"display_name": "Dalin Seivewright", "reputation": 913, "user_id": 29053, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1231354235, "comment_count": 3, "score": 3, "owner": {"display_name": "Niko", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1231418430, "body": "<p><strong>Relational Databases are a waste of time. Use object databases instead!</strong></p>\n\n<p>Relational database vendors try to fool us into believing that the only scaleable, persistent and safe storage in the world is relational databases. I am a certified DBA. Have you ever spent hours trying to optimize a query and had no idea what was going wrong? Relational databases don't let you make your own  search paths when you need them. You give away much of the control over the speed of your app into the hands of people you've never met and they are not as smart as you think. </p>\n\n<p>Sure, sometimes in a well-maintained database they come up with a quick answer for a complex query. But the price you pay for this is too high! You have to choose between writing raw SQL every time you want to read an entry of your data, which is dangerous. Or use an Object relational mapper which adds more complexity and things outside your control. </p>\n\n<p>More importantly, you are actively forbidden from coming up with smart search algorithms, because every damn roundtrip to the database costs you around 11ms. It is too much. Imagine you know this super-graph algorithm which will answer a specific question, which might not even be expressible in SQL!, in due time. But even if your algorithm is linear, and interesting algorithms are not linear, forget about combining it with a relational database as enumerating a large table will take you hours!</p>\n\n<p>Compare that with SandstoneDb, or Gemstone for Smalltalk! If you are into Java, give db4o a shot. </p>\n\n<p>So, my advice is: Use an object-DB. Sure, they aren't perfect and some queries will be slower. But you will be surprised how many will be faster. Because loading the objects will not require all these strange transofmations between SQL and your domain data. And if you really need speed for a certain query, object databases have the query optimizer you should trust: your brain.</p>\n", "is_accepted": false, "tags": [], "answer_id": 424094, "down_vote_count": 7, "last_activity_date": 1231750413, "comments": [{"body": "Wow that is controversial! Surprised you haven&#39;t been flamed by the other DBAs here ;)", "edited": false, "comment_id": 256663, "creation_date": 1231706218, "score": 0, "owner": {"display_name": "Meff", "reputation": 4522, "user_id": 9647, "user_type": "registered", "accept_rate": 86}}, {"body": "Even more important than performance: Development is much much faster with oo-databases!", "edited": false, "comment_id": 536331, "creation_date": 1239091342, "score": 0, "owner": {"display_name": "wilth", "reputation": 440, "user_id": 5218, "user_type": "registered", "accept_rate": 82}}, {"body": "&quot;Unskilled and Unaware of It: How Difficulties in Recognizing One&#39;s Own Incompetence Lead to Inflated Self-Assessments&quot;, Justin Kruger and David Dunning, Cornell University, Journal of Personality and Social Psychology, 1999, Vol. 77, No. 6., 121-1134. Fortunately it is curable (I&#39;m the evidence): &quot;.. Paradoxically, improving the skills of participants, and thus increasing their metacognitive competence, helped them recognize the limitations of their abilities.&quot;", "edited": false, "comment_id": 1559435, "creation_date": 1257471734, "score": 0, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}], "creation_date": 1231418430, "comment_count": 3, "score": 6, "owner": {"display_name": "nes1983", "reputation": 7768, "user_id": 52573, "user_type": "registered", "accept_rate": 85}, "last_editor": {"display_name": "nes1983", "reputation": 7768, "user_id": 52573, "user_type": "registered", "accept_rate": 85}, "last_edit_date": 1231750413, "up_vote_count": 13}, {"community_owned_date": 1231421824, "body": "<p>The code <em>is</em> the design</p>\n", "is_accepted": false, "tags": [], "answer_id": 424242, "down_vote_count": 1, "last_activity_date": 1232017127, "creation_date": 1231421824, "comment_count": 0, "score": 8, "owner": {"display_name": "bjnortier", "reputation": 1341, "user_id": 35448, "user_type": "registered", "accept_rate": 75}, "last_editor": {"display_name": "bjnortier", "reputation": 1341, "user_id": 35448, "user_type": "registered", "accept_rate": 75}, "last_edit_date": 1232017127, "up_vote_count": 9}, {"community_owned_date": 1231444335, "body": "<p><strong>Debuggers are a crutch.</strong></p>\n\n<p>It's so controversial that even I don't believe it as much as I used to.</p>\n\n<p>Con: I spend more time getting up to speed on other people's voluminous code, so anything that help with \"how did I get here\" and \"what is happening\" either pre-mortem or post-mortem can be helpful.</p>\n\n<p>Pro: However, I happily stand by the idea that if you don't understand the answers to those questions for code that you developed yourself or that you've become familiar with, spending all your time in a debugger is not the solution, it's part of the problem.</p>\n\n<p>Before hitting 'Post Your Answer' I did a quick Google check for this exact phrase, it turns out that I'm not the only one who has held this opinion or used this phrase.  I turned up <a href=\"http://discuss.fogcreek.com/joelonsoftware3/default.asp?cmd=show&amp;ixPost=92682&amp;ixReplies=59\" rel=\"nofollow\">a long discussion of this very question</a> on the Fog Creek software forum, which cited various luminaries including Linus Torvalds as notable proponents.</p>\n", "answer_id": 425626, "tags": [], "down_vote_count": 1, "last_activity_date": 1231444335, "comments": [{"body": "+1 the best debugger is your brain.", "edited": false, "comment_id": 263778, "creation_date": 1231903734, "score": 2, "owner": {"display_name": "paxos1977", "reputation": 33012, "user_id": 14069, "user_type": "registered", "accept_rate": 79}}, {"body": "I totally agree, though I&#39;d go a bit further: <i>testing your code</i> is a crutch. I know too many programmers who don&#39;t concentrate enough when writing code, and rely on failed compiles and runtime errors to save them... And how many bugs <i>don&#39;t</i> get caught?", "edited": false, "comment_id": 2007019, "creation_date": 1263627684, "score": 0, "owner": {"display_name": "Artelius", "reputation": 30065, "user_id": 31945, "user_type": "registered"}}, {"body": "-1 There is nothing wrong with using a crutch when your leg is broken - why should there be anything wrong with using one when your code is broken?", "edited": false, "comment_id": 2608027, "creation_date": 1270725502, "score": 0, "owner": {"display_name": "Kramii", "reputation": 3713, "user_id": 11514, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1231444335, "comment_count": 3, "score": 5, "owner": {"display_name": "Liudvikas Bukys", "reputation": 4026, "user_id": 5845, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 6}, {"community_owned_date": 1231444461, "body": "<p>Hibernate is useless and damaging to the minds of developers.</p>\n", "answer_id": 425628, "tags": [], "down_vote_count": 2, "last_activity_date": 1231444461, "comments": [{"body": "How has it damaged your mind? ;-)", "edited": false, "comment_id": 296886, "creation_date": 1232983417, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "my controversial opinion to this: There are more developers who do not understand Hibernate than those who do.", "edited": false, "comment_id": 1624218, "creation_date": 1258389179, "score": 0, "owner": {"display_name": "Stefan Steinegger", "reputation": 41258, "user_id": 2658202, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1231444461, "comment_count": 2, "score": 3, "owner": {"display_name": "sproketboy", "reputation": 2228, "user_id": 53069, "user_type": "registered", "accept_rate": 79}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1231446092, "body": "<p><strong>Any sufficiently capable library is too complicated to be useable and any library simple enough to be usable lacks that capabilities needed to be a good general solution.</strong></p>\n\n<p>I run in to this constantly.  Exhaustive libraries that are so complicated to use I tear my hair out and simple easy to use libraries that don't quite do what I need them to do.</p>\n", "answer_id": 425739, "tags": [], "down_vote_count": 2, "last_activity_date": 1231446092, "comments": [{"body": "Oh man, I wish I could give you 100 upvotes.", "edited": false, "comment_id": 285389, "creation_date": 1232578577, "score": 0, "owner": {"display_name": "benjismith", "reputation": 9995, "user_id": 22979, "user_type": "registered", "accept_rate": 67}}], "creation_date": 1231446092, "comment_count": 1, "score": 10, "owner": {"display_name": "Starkii", "reputation": 773, "user_id": 14720, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 12}, {"community_owned_date": 1231446244, "body": "<p>Newer languages, and managed code do not make a bad programmer better.</p>\n", "answer_id": 425753, "tags": [], "down_vote_count": 2, "last_activity_date": 1231446244, "comments": [{"body": "Agree. New running shoes won&#39;t make the average runner run any faster.", "edited": false, "comment_id": 296225, "creation_date": 1232964592, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}], "creation_date": 1231446244, "comment_count": 1, "score": 16, "owner": {"display_name": "LarryF", "reputation": 3059, "user_id": 18518, "user_type": "registered", "accept_rate": 67}, "is_accepted": false, "up_vote_count": 18}, {"community_owned_date": 1231446684, "body": "<p>There are far too many programmers who write far too much code. </p>\n", "answer_id": 425781, "tags": [], "down_vote_count": 1, "last_activity_date": 1231446684, "comments": [{"body": "Wally (from Dilbert) should be an example to all of us! ;-)", "edited": false, "comment_id": 296923, "creation_date": 1232984209, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}], "creation_date": 1231446684, "comment_count": 1, "score": 5, "owner": {"display_name": "keithb", "reputation": 68, "user_id": 29229, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 6}, {"community_owned_date": 1231464814, "body": "<p>This one is not exactly on programming, because <strong>html/css</strong> are not programming languages.</p>\n\n<p><strong>Tables are ok for layout</strong></p>\n\n<p>css and divs can't do everything, save yourself the hassle and use a simple table, then use css on top of it.</p>\n", "is_accepted": false, "tags": [], "answer_id": 426752, "down_vote_count": 3, "last_activity_date": 1231491062, "comments": [{"body": "I used to think this way until I really got deep into CSS to see if I could prove myself wrong.  I did and he helped to land me a job that required tableless layouts for accessiblity reasons.  Do you have any examples on what you can&#39;t do?", "edited": false, "comment_id": 253618, "creation_date": 1231542389, "score": 0, "owner": {"display_name": "JamesEggers", "reputation": 5194, "user_id": 28540, "user_type": "registered", "accept_rate": 93}}, {"body": "see, this &quot;deep&quot; thing is just hacks and black magic, you end up with a an unmaintainable css mess, and if you change an attribute by mistake, the whole thing could collapse into a hairy mess, even if the attribute doesn&#39;t seem too important.", "edited": false, "comment_id": 254376, "creation_date": 1231589459, "score": 0, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "upvoted because I cant decide whether to agree or disagree; controversial indeed", "edited": false, "comment_id": 1775759, "creation_date": 1260390995, "score": 0, "owner": {"display_name": "iandisme", "reputation": 3947, "user_id": 136790, "user_type": "registered", "accept_rate": 78}}, {"body": "<a href=\"http://giveupandusetables.com/\" rel=\"nofollow\">giveupandusetables.com</a>", "edited": false, "comment_id": 1808263, "creation_date": 1260838206, "score": 0, "owner": {"display_name": "Frunsi", "reputation": 5185, "user_id": 206247, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1231464814, "comment_count": 4, "score": 3, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}, "last_editor": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}, "last_edit_date": 1231491062, "up_vote_count": 6}, {"community_owned_date": 1231465873, "body": "<p>90 percent of programmers are pretty damn bad programmers, and virtually all of us have absolutely no tools to evaluate our current ability level (although we can generally look back and realize how bad we USED to suck)</p>\n\n<p>I wasn't going to post this because it pisses everyone off and I'm not really trying for a negative score or anything, but:</p>\n\n<p>A) isn't that the point of the question, and </p>\n\n<p>B) Most of the \"Answers\" in this thread prove this point</p>\n\n<p>I heard a great analogy the other day:  Programming abilities vary AT LEAST as much as sports abilities.  How many of us could jump into a professional team and actually improve their chances?</p>\n", "is_accepted": false, "tags": [], "answer_id": 426784, "down_vote_count": 0, "last_activity_date": 1231523683, "comments": [{"body": "<a href=\"http://en.wikipedia.org/wiki/Sturgeon&#39;s_law\" rel=\"nofollow\">en.wikipedia.org/wiki/Sturgeon&#39;s_law</a> applies to everything, even programmers.", "edited": false, "comment_id": 263255, "creation_date": 1231888685, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "I agree, unfortunatly almost 90% of the bad programmers think they fall in the 10% category of programmers who don&#39;t suck.", "edited": false, "comment_id": 296267, "creation_date": 1232965523, "score": 1, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "@Diego awesome way to put it.  That&#39;s kind in line with what I said about not having the tools to evaluate ourselves, but much more clear.", "edited": false, "comment_id": 297249, "creation_date": 1232990291, "score": 0, "owner": {"display_name": "Bill K", "reputation": 37999, "user_id": 12943, "user_type": "registered", "accept_rate": 90}}], "creation_date": 1231465873, "comment_count": 3, "score": 11, "owner": {"display_name": "Bill K", "reputation": 37999, "user_id": 12943, "user_type": "registered", "accept_rate": 90}, "last_editor": {"display_name": "Bill K", "reputation": 37999, "user_id": 12943, "user_type": "registered", "accept_rate": 90}, "last_edit_date": 1231523683, "up_vote_count": 11}, {"community_owned_date": 1231502688, "body": "<p>As most others here, I try to adhere to principles like DRY and not being a human compiler.</p>\n\n<p>Another strategy I want to push is \"tell, don't ask\". Instead of cluttering all objects with getters/setters essentially making a sieve of them, I'd like to tell them to do stuff.</p>\n\n<p>This seems to got straight against good enterprise practices with dumb entity objects and thicker service layer(that does plenty of asking). Hmmm, thoughts? </p>\n", "answer_id": 427839, "tags": [], "down_vote_count": 1, "last_activity_date": 1231502688, "comments": [{"body": "I actually agree with this. If you find too much logic happening outside of the class via querying accessor functions something may be wrong with the design. However, there are different ways of using objects... sometimes you just want an object that holds state and doesn&#39;t do anything else.", "edited": false, "comment_id": 263773, "creation_date": 1231903647, "score": 0, "owner": {"display_name": "paxos1977", "reputation": 33012, "user_id": 14069, "user_type": "registered", "accept_rate": 79}}, {"body": "Primitive getters setters are important in complex applications, the tell methods should be composed of them. Each level on indirection is a blessing in reducing complexity. Ignore this in a complex application (i.e., not business transaction processing or web sites) at your own peril.", "edited": false, "comment_id": 2627531, "creation_date": 1270955128, "score": 0, "owner": {"display_name": "Hassan Syed", "reputation": 11487, "user_id": 153865, "user_type": "registered", "accept_rate": 70}}], "creation_date": 1231502688, "comment_count": 2, "score": 1, "owner": {"display_name": "Tommy", "reputation": 406, "user_id": 52898, "user_type": "registered", "accept_rate": 25}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1231507029, "body": "<p><strong>We're software developers, not C/C#/C++/PHP/Perl/Python/Java/... developers.</strong></p>\n\n<p>After you've been exposed to a few languages, picking up a new one and being productive with it is a small task.  That is to say that you shouldn't be afraid of new languages.  Of course, there is a large difference between being productive and mastering a language.  But, that's no reason to shy away from a language you've never seen.  It bugs me when people say, \"I'm a PHP developer.\" or when a job offer says, \"Java developer\".  After a few years experience of being a developer, new languages and APIs really shouldn't be intimidating and going from never seeing a language to being productive with it shouldn't take very long at all.  I know this is controversial but it's my opinion.</p>\n", "answer_id": 428003, "tags": [], "down_vote_count": 3, "last_activity_date": 1231507029, "comments": [{"body": "You&#39;re correct, but after investing years mastering a language, starting over in a new language has somewhat less appeal. It isn&#39;t necessarily fear, but the joy of higher order productivity that stems the desire to learn something new.", "edited": false, "comment_id": 263767, "creation_date": 1231903434, "score": 0, "owner": {"display_name": "paxos1977", "reputation": 33012, "user_id": 14069, "user_type": "registered", "accept_rate": 79}}, {"body": "That said, hacks cling to their one language like Grandpa to his comb-over.", "edited": false, "comment_id": 263769, "creation_date": 1231903497, "score": 0, "owner": {"display_name": "paxos1977", "reputation": 33012, "user_id": 14069, "user_type": "registered", "accept_rate": 79}}, {"body": "Someone who calls himself a Java developer (substitute with language of choice) means that he/she is an expert in the &quot;platform&quot;, not just the language. But it sounds kinda stupid to say I&#39;m a &quot;Java platform&quot; programmer. The language is only a tiny fraction of the platform.", "edited": false, "comment_id": 296317, "creation_date": 1232967390, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "Introducing a new language with little syntactic and semantic variation (w.r.t. mainstream) every year (just an hyperbole) is totally, utterly cretin, an enormous vast of resources. Nothing controversial here, is the usual way with which this &quot;industry&quot; distracts people from real issues.", "edited": false, "comment_id": 1559381, "creation_date": 1257470928, "score": 0, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}], "creation_date": 1231507029, "comment_count": 4, "score": 4, "owner": {"display_name": "Anonymous Coward", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1231508439, "body": "<p><strong>Two brains think better than one</strong></p>\n\n<p>I firmly believe that pair programming is the number one factor when it comes to increasing code quality and programming productivity. Unfortunatly it is also a highly controversial for management who believes that \"more hands => more code => $$$!\"</p>\n", "answer_id": 428069, "tags": [], "down_vote_count": 2, "last_activity_date": 1231508439, "comments": [{"body": "I sometimes dream about extreme extreme programming. How cool would it be if everyone in a group sat down to do the architecture and implementation as a group (4-8 devs). I wonder if it would work or be completely dysfunctional. I tend to think it could work with the &quot;right&quot; group.", "edited": false, "comment_id": 263759, "creation_date": 1231903132, "score": 0, "owner": {"display_name": "paxos1977", "reputation": 33012, "user_id": 14069, "user_type": "registered", "accept_rate": 79}}], "creation_date": 1231508439, "comment_count": 1, "score": 6, "owner": {"display_name": "Martin Wickman", "reputation": 11602, "user_id": 53328, "user_type": "registered", "accept_rate": 81}, "is_accepted": false, "up_vote_count": 8}, {"community_owned_date": 1231510781, "body": "<p><strong>You can't write a web application without a remote debugger</strong></p>\n\n<p>Web applications typically tie together interactions between multiple languages on the client and server side, require interaction from a user and often include third-party code that can be anything from a simple API implementation to a byzantine framework. </p>\n\n<p>I've lost count of the number of times I've had another developer sat with me while I step into and follow through what's actually going on in a complex web application with a decent remote debugger to see them flabbergasted and amazed that such tools exist. Often they still don't take the trouble to install and setup these kinds of tools even after seeing them in action. </p>\n\n<p>You just can't debug a non trivial web application with print statements. Times ten if you didn't right all the code in your application.</p>\n\n<p>If your debugger can step through all the various languages in use and show you the http transactions taking place then so much the better. </p>\n\n<p><strong>You can't develop web applications without Firebug</strong></p>\n\n<p>Along similar lines, once you have used Firebug (or very near equivalent) you look on anyone trying to develop web applications with a mixture of pity and horror. Particularly with Firebug showing computed styles, if you remember back to NOT using it and spending hours randomly changing various bits of CSS and adding \"!important\" in too many places to be funny you will <em>never go back</em>. </p>\n", "answer_id": 428202, "tags": [], "down_vote_count": 0, "last_activity_date": 1231510781, "comments": [{"body": "I agree to firebug, but ive been a web dev. for 3 years and done everything from mid to large. I&#39;ve never felt the need to use a remote debugger", "edited": false, "comment_id": 252633, "creation_date": 1231524209, "score": 0, "owner": {"display_name": "Click Upvote", "reputation": 48289, "user_id": 49153, "user_type": "registered", "accept_rate": 91}}, {"body": "exackly - and before you used firebug I bet you didn&#39;t realise you needed it either :) seriously though, give it a try and then say that", "edited": false, "comment_id": 253264, "creation_date": 1231535202, "score": 0, "owner": {"display_name": "reefnet_alex", "reputation": 6275, "user_id": 2745, "user_type": "registered", "accept_rate": 50}}, {"body": "Since I can unit test my whole webapp, why would I need a remote debugger? I can run any line of code I want locally...", "edited": false, "comment_id": 418916, "creation_date": 1236092370, "score": 0, "owner": {"display_name": "Aaron Digulla", "reputation": 178090, "user_id": 34088, "user_type": "registered", "accept_rate": 78}}, {"body": "1) remote doesn&#39;t mean &quot;not local&quot; in this case, it means it running the debugger on the php interpreter as run up by your web server and following all the interactions with the browser through. whether running locally or on a live server you need a remote debugger to see what&#39;s actually happening", "edited": false, "comment_id": 451695, "creation_date": 1236862948, "score": 0, "owner": {"display_name": "reefnet_alex", "reputation": 6275, "user_id": 2745, "user_type": "registered", "accept_rate": 50}}, {"body": "2) live server != dev machine: there are some bugs you will only see on your live (or exact copy of your live) server", "edited": false, "comment_id": 451701, "creation_date": 1236863062, "score": 0, "owner": {"display_name": "reefnet_alex", "reputation": 6275, "user_id": 2745, "user_type": "registered", "accept_rate": 50}}], "creation_date": 1231510781, "comment_count": 5, "score": 2, "owner": {"display_name": "reefnet_alex", "reputation": 6275, "user_id": 2745, "user_type": "registered", "accept_rate": 50}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1231516294, "body": "<p>The latest design patterns tend to be so much snake oil.  As has been said previously in this question, overuse of design patterns can harm a design much more than help it.  </p>\n\n<p>If I hear one more person saying that \"everyone should be using IOC\" (or some similar pile of turd), I think I'll be forced to hunt them down and teach them the error of their ways.</p>\n", "answer_id": 428579, "tags": [], "down_vote_count": 1, "last_activity_date": 1231516294, "creation_date": 1231516294, "comment_count": 0, "score": 3, "owner": {"display_name": "ZombieSheep", "reputation": 21142, "user_id": 377, "user_type": "registered", "accept_rate": 97}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1231522299, "body": "<p>Upfront design - don't just start writing code because you're excited to write code</p>\n\n<p>I've seen SO many apps that are poorly designed because the developer was so excited to get coding that they just opened up a white page and started writing code. I understand that things change during the development lifecycle. However, it's difficult working with applications that have several different layouts and development methodologies from form to form, method to method.</p>\n\n<p>It's difficult to hit the target your application is to handle if you haven't clearly defined the task and how you plan to code it. Take some time (and not just 5 minutes) and make sure you've laid out as much of it has you can before you start coding. This way you'll avoid a spaghetti mess that your replacement will have to support.</p>\n", "answer_id": 428958, "tags": [], "down_vote_count": 1, "last_activity_date": 1231522299, "creation_date": 1231522299, "comment_count": 0, "score": 3, "owner": {"display_name": "Bill Martin", "reputation": 2368, "user_id": 46064, "user_type": "registered", "accept_rate": 73}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1231523521, "body": "<p>Avoid indentation. </p>\n\n<p>Use early returns, continues or breaks.</p>\n\n<p>instead of:</p>\n\n<pre><code>if (passed != NULL)\n{\n   for(x in list)\n   {\n      if (peter)\n      {\n          print \"peter\";\n          more code.\n          ..\n          ..\n      }\n      else\n      {\n          print \"no peter?!\"\n      }\n   }\n}\n</code></pre>\n\n<p>do:</p>\n\n<pre><code>if (pPassed==NULL)\n    return false;\n\nfor(x in list)\n{\n   if (!peter)\n   {\n       print \"no peter?!\"\n       continue;\n   }\n\n   print \"peter\";\n   more code.\n   ..\n   ..\n}\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 429026, "down_vote_count": 2, "last_activity_date": 1291915687, "comments": [{"body": "I wouldn&#39;t apply this as a <b>rule</b>, but I definitely don&#39;t hesitate to take this route when it can reduce complexity and improve readability.  +1  Why do you need peter so badly, though?", "edited": false, "comment_id": 253653, "creation_date": 1231543188, "score": 2, "owner": {"display_name": "P Daddy", "reputation": 16500, "user_id": 36388, "user_type": "registered", "accept_rate": 88}}, {"body": "Not a fan of &#39;canvern code&#39; are we?  :)  I have to agree however.  I&#39;ve actually worked on &#39;cavern code&#39; that more that an ENTIRE PAGE of just closing braces....  And that was on a 1920x1600 monitor (or whatever the exact res is).", "edited": false, "comment_id": 263447, "creation_date": 1231893387, "score": 1, "owner": {"display_name": "LarryF", "reputation": 3059, "user_id": 18518, "user_type": "registered", "accept_rate": 67}}, {"body": "You should check out &quot;Spartan programming&quot; - this seems like a similar style.", "edited": false, "comment_id": 438421, "creation_date": 1236595503, "score": 0, "owner": {"display_name": "Keith", "reputation": 55880, "user_id": 905, "user_type": "registered", "accept_rate": 80}}, {"body": "It is not indentation you are arguing against, its deeply nested conditional and loop blocks. I fully concur in that regard. I&#39;ve found that enforcing a code style with a maximum line length tends to discourage this behavior somewhat.", "edited": false, "comment_id": 738808, "creation_date": 1243727319, "score": 0, "owner": {"display_name": "Kris", "reputation": 9650, "user_id": 73652, "user_type": "registered", "accept_rate": 88}}, {"body": "Don&#39;t forget braces for &quot;if&quot;! use foreach! use (condition ? valueIfTrue : valueIfFalse) If you don&#39;t understand, search engine, learn!", "edited": false, "comment_id": 1091332, "creation_date": 1250041516, "score": 0, "owner": {"display_name": "moala", "reputation": 1784, "user_id": 54956, "user_type": "registered", "accept_rate": 74}}, {"body": "I don&#39;t like the continue here.", "edited": false, "comment_id": 1446252, "creation_date": 1255840249, "score": 2, "owner": {"display_name": "Loren Pechtel", "reputation": 5985, "user_id": 10659, "user_type": "registered", "accept_rate": 56}}, {"body": "This is a dupe of the higher-ranked answer <a href=\"http://stackoverflow.com/questions/406760/whats-your-most-controversial-programming-opinion/407507#407507\" title=\"whats your most controversial programming opinion\">stackoverflow.com/questions/406760/&hellip;</a>", "edited": false, "comment_id": 1573271, "creation_date": 1257711127, "score": 0, "owner": {"display_name": "Ether", "reputation": 36938, "user_id": 40468, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1231523521, "comment_count": 7, "score": 41, "owner": {"display_name": "Jon Clegg", "reputation": 878, "user_id": 1489, "user_type": "registered", "accept_rate": 64}, "last_editor": {"display_name": "True Soft", "reputation": 5743, "user_id": 137483, "user_type": "registered", "accept_rate": 96}, "last_edit_date": 1291915687, "up_vote_count": 43}, {"community_owned_date": 1231533725, "body": "<p>I have a few... there's exceptions to everything so these are not hard and fast but they do apply in most cases</p>\n\n<p><strong>Nobody cares if your website validates, is XHTML strict, is standards-compliant, or has a W3C badge.</strong> </p>\n\n<p>It may earn you some high-fives from fellow Web developers, but the rest of people looking at your site could give a crap whether you've validated your code or not. the vast majority of Web surfers are using IE or Firefox, and since both of those browsers are forgiving of nonstandards, nonstrict, invalidated HTML then you really dont need to worry about it. If you've built a site for a car dealer, a mechanic, a radio station, a church, or a local small business, how many people in any of those businesses' target demographics do you think care about valid HTML? I'd hazard a guess it's pretty close to 0. </p>\n\n<p><strong>Most open-source software is useless, overcomplicated crap.</strong> </p>\n\n<p>Let me install this nice piece of OSS I've found. It looks like it should do exactly what I want! Oh wait, first I have to install this other window manager thingy. OK. Then i need to get this command-line tool and add it to my path. Now I need the latest runtimes for X, Y, and Z. now i need to make sure i have these processes running. ok, great... its all configured. Now let me learn a whole new set of commands to use it. Oh cool, someone built a GUI for it. I guess I don't need to learn these commands. Wait, I need this library on here to get the GUI to work. Gotta download that now. ok, now its working...crap, I can't figure out this terrible UI. </p>\n\n<p>sound familiar? OSS is full of complication for complication's sake, tricky installs that you need to be an expert to perform, and tools that most people wouldn't know what to do with anyway. So many projects fall by the wayside, others are so niche that very few people would use them, and some of the decent ones (FlowPlayer, OSCommerce, etc) have such ridiculously overcomplicated and bloated source code that it defeats the purpose of being able to edit the source. You can edit the source... if you can figure out which of the 400 files contains the code that needs modification. You're really in trouble when you learn that its all 400 of them. </p>\n", "answer_id": 429650, "tags": [], "down_vote_count": 8, "last_activity_date": 1231533725, "comments": [{"body": "I wish I could vote to make you God. Really, this is amazing stuff.", "edited": false, "comment_id": 267387, "creation_date": 1232006050, "score": 0, "owner": {"display_name": "Jonathan C Dickinson", "reputation": 4450, "user_id": 24064, "user_type": "registered", "accept_rate": 100}}, {"body": "On the other hand the best OSS packages are huge force multipliers.  These are the well-designed, well-maintained ones that have big communities of users and developers (and real published books).  Some examples of these are Rhino (Javascript interpreter), Xerces (XML Parser), Restlet (REST Web Services), and jQuery (Javascript GUI development).  Others really do suck, like Axis 1.x.", "edited": false, "comment_id": 687875, "creation_date": 1242700499, "score": 1, "owner": {"display_name": "Jim Ferrans", "reputation": 15469, "user_id": 45935, "user_type": "registered", "accept_rate": 92}}, {"body": "Screen readers and other accessibility tools perform better if the HTML conforms to standards.  As for OSS .. your reasoning is deeply flawed in applying your own negative experience to all OSS works. Sure modifying OSS projects can be difficult (impossible for many) but I&#39;ve lost count of the OSS libraries I&#39;ve used to save myself tons of work on various projects. If most OSS is useless it is only because there is so much of it. There is a lot of very useful OSS out there.", "edited": false, "comment_id": 738844, "creation_date": 1243729028, "score": 0, "owner": {"display_name": "Kris", "reputation": 9650, "user_id": 73652, "user_type": "registered", "accept_rate": 88}}, {"body": "Everything WWW sucks anyway, so for the first point I cannot care less.  +100 for the second.", "edited": false, "comment_id": 1558937, "creation_date": 1257464496, "score": 0, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}, {"body": "long live the <code>sudo apt-get install</code>", "edited": false, "comment_id": 1560338, "creation_date": 1257488566, "score": 3, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}], "creation_date": 1231533725, "comment_count": 5, "score": 13, "owner": {"display_name": "nerdabilly", "reputation": 887, "user_id": 8349, "user_type": "registered", "accept_rate": 67}, "is_accepted": false, "up_vote_count": 21}, {"community_owned_date": 1231540624, "body": "<p>Believe it or not, my belief that, <strong>in an OO language, most of the (business logic) code that operates on a class's data should be in the class itself</strong> is heresy on my team.</p>\n", "answer_id": 430007, "tags": [], "down_vote_count": 0, "last_activity_date": 1231540624, "comments": [{"body": "I second your opinion. I can&#39;t stand it when someone goes with the excuse that &quot;Classes should be minimal, clean, simple&quot; and writes a close to useless class that merely aggregates data - and then builds the logic about this data everywhere else.", "edited": false, "comment_id": 253770, "creation_date": 1231547316, "score": 0, "owner": {"display_name": "Daniel Daranas", "reputation": 16413, "user_id": 96780, "user_type": "registered", "accept_rate": 100}}, {"body": "Hmm. So, the <code>cut</code> method should be a member of which class? <code>meat</code>, <code>vegetable</code>, <code>knife</code>, <code>scissors</code>, <code>kitchen_table</code>, <code>workbench</code> ...?", "edited": false, "comment_id": 258763, "creation_date": 1231778861, "score": 0, "owner": {"display_name": "Svante", "reputation": 28616, "user_id": 31615, "user_type": "registered"}}, {"body": "Without any further information, I&#39;d say that the knife cuts a cuttable object: Knife.cut(ICuttable something). Of course, if you only have one cuttable object, like meat, and many things that cut the meat, then you want Meat.cutWith(ICutter something).", "edited": false, "comment_id": 273138, "creation_date": 1232153689, "score": 2, "owner": {"display_name": "moffdub", "reputation": 3907, "user_id": 10759, "user_type": "registered", "accept_rate": 43}}], "creation_date": 1231540624, "comment_count": 3, "score": 2, "owner": {"display_name": "moffdub", "reputation": 3907, "user_id": 10759, "user_type": "registered", "accept_rate": 43}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1231541970, "body": "<p>I'm probably gonna get roasted for this, but:</p>\n\n<p><strong>Making invisible characters syntactically significant in python was a bad idea</strong></p>\n\n<p>It's distracting, causes lots of subtle bugs for novices and, in my opinion, wasn't really needed. About the only code I've ever seen that didn't voluntarily follow some sort of decent formatting guide was from first-year CS students. And even if code doesn't follow \"nice\" standards, there are plenty of tools out there to coerce it into a more pleasing shape. </p>\n", "answer_id": 430076, "tags": [], "down_vote_count": 5, "last_activity_date": 1231541970, "comments": [{"body": "A well configured editor can help you here. Most editors can show invisibles and vim for one can highlight those invisible mistakes in red to make them really obvious.", "edited": false, "comment_id": 254649, "creation_date": 1231605073, "score": 1, "owner": {"display_name": "mcrute", "reputation": 899, "user_id": 33786, "user_type": "registered"}}, {"body": "I think that the bad idea becomes more obvious when you think about the ridiculous limitation of <code>lambda</code> in Python.", "edited": false, "comment_id": 258770, "creation_date": 1231778964, "score": 3, "owner": {"display_name": "Svante", "reputation": 28616, "user_id": 31615, "user_type": "registered"}}, {"body": "The number of times I&#39;ve had a python script fail because I put a blank line in my code in a for loop, and the blank line didn&#39;t have enough spaces... Makes me want to not space my code with blank lines.", "edited": false, "comment_id": 263237, "creation_date": 1231888434, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "I don&#39;t agree with you, but +1 because it <i>is</i> controversial", "edited": false, "comment_id": 292888, "creation_date": 1232774591, "score": 0, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "It was also true of the original Unix make command.  Actions had to be one tab space in; if you used spaces instead, an action looked like a syntax error.  Ugh!", "edited": false, "comment_id": 687851, "creation_date": 1242700011, "score": 0, "owner": {"display_name": "Jim Ferrans", "reputation": 15469, "user_id": 45935, "user_type": "registered", "accept_rate": 92}}, {"body": "History repeats itself. We didn&#39;t learn from Fortran output formatting or from make files so why be surprised that someone thought it was a good idea for python?  It won&#39;t be the last time.", "edited": false, "comment_id": 956223, "creation_date": 1247758126, "score": 0, "owner": {"display_name": "Kelly S. French", "reputation": 8435, "user_id": 135078, "user_type": "registered", "accept_rate": 100}}, {"body": "@mcrute: if you have to build a special-purpose tool just to work with the language, that sounds like a problem to me.", "edited": false, "comment_id": 1024744, "creation_date": 1248886686, "score": 5, "owner": {"display_name": "Paul Nathan", "reputation": 24339, "user_id": 26227, "user_type": "registered", "accept_rate": 71}}, {"body": "&quot;About the only code I&#39;ve ever seen that didn&#39;t voluntarily follow some sort of decent formatting guide was from first-year CS students.&quot; So how is this a problem?", "edited": false, "comment_id": 1816460, "creation_date": 1260923628, "score": 0, "owner": {"display_name": "fengb", "reputation": 1100, "user_id": 209263, "user_type": "registered"}}, {"body": "@Paul Nathan: if you have to build a special-purpose tool to write well-indented code with a braces language, that sounds like a problem to me.", "edited": false, "comment_id": 1902369, "creation_date": 1262274989, "score": 0, "owner": {"display_name": "Beni Cherniavsky-Paskin", "reputation": 4072, "user_id": 239657, "user_type": "registered"}}], "creation_date": 1231541970, "comment_count": 9, "score": 38, "owner": {"display_name": "Paul Wicks", "reputation": 16201, "user_id": 85, "user_type": "registered", "accept_rate": 72}, "is_accepted": false, "up_vote_count": 43}, {"community_owned_date": 1231542202, "body": "<p><strong>Opinion: Duration in the development field does not always mean the same as experience.</strong></p>\n\n<p>Many trades look at \"years of experience\" in a language.  Yes, 5 years of C# can make sense since you may learn new tricks and what not. However, if you are with the company and maintaining the same code base for a number of years, I feel as if you are not gaining the amount of exposure to different situations as a person who works on different situations and client needs.  </p>\n\n<p>I once interviewed a person who prided himself on having 10 years of programming experience and worked with VB5, 6, and VB.Net...all in the same company during that time.  After more probing, I found out that while he worked with all of those versions of VB, he was only upgrading and constantly maintaining his original VB5 app.  Never modified the architecture and let the upgrade wizards do their thing.  I have interviewed people who only have 2 years in the field but have worked on multiple projects that have more \"experience\" than him.</p>\n", "answer_id": 430082, "tags": [], "down_vote_count": 0, "last_activity_date": 1231542202, "creation_date": 1231542202, "comment_count": 0, "score": 1, "owner": {"display_name": "JamesEggers", "reputation": 5194, "user_id": 28540, "user_type": "registered", "accept_rate": 93}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1231546118, "body": "<p><strong>1. You should not follow web standards - all the time.</strong></p>\n\n<p><strong>2. You don't need to comment your code.</strong> </p>\n\n<p>As long as it's understandable by a stranger.</p>\n", "answer_id": 430219, "tags": [], "down_vote_count": 1, "last_activity_date": 1231546118, "creation_date": 1231546118, "comment_count": 0, "score": 6, "owner": {"display_name": "davethegr8", "reputation": 6258, "user_id": 12930, "user_type": "registered", "accept_rate": 92}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1231546999, "body": "<p>As there are hundreds of answers to this mine will probably end up unread, but here's my pet peeve anyway.</p>\n\n<h2>If you're a programmer then you're most likely awful at Web Design/Development</h2>\n\n<p>This website is a phenomenal resource for programmers, but an absolutely awful place to come if you're looking for XHTML/CSS help. Even the good Web Developers here are handing out links to resources that were good in the 90's!</p>\n\n<p>Sure, XHTML and CSS are simple to learn. However, you're not just learning a language! You're learning how to use it well, and very few designers and developers can do that, let alone programmers. It took me ages to become a capable designer and even longer to become a good developer. I could code in HTML from the age of 10 but that didn't mean I was good. Now I am a capable designer in programs like Photoshop and Illustrator, I am perfectly able to write a good website in Notepad and am able to write basic scripts in several languages. Not only that but I have a good nose for Search Engine Optimisation techniques and can easily tell you where the majority of people are going wrong (hint: get some good content!). </p>\n\n<p>Also, this place is a terrible resource for advice on web standards. You should NOT just write code to work in the different browsers. You should ALWAYS follow the standard to future-proof your code. More often than not the fixes you use on your websites will break when the next browser update comes along. Not only that but the good browsers follow standards anyway. Finally, the reason IE was allowed to ruin the Internet was because YOU allowed it by coding your websites for IE! If you're going to continue to do that for Firefox then we'll lose out yet again!</p>\n\n<p>If you think that table-based layouts are as good, if not better than CSS layouts then you should not be allowed to talk on the subject, at least without me shooting you down first. Also, if you think W3Schools is the best resource to send someone to then you're just plain wrong.</p>\n\n<p>If you're new to Web Design/Development don't bother with this place (it's full of programmers, not web developers). Go to a good Web Design/Development community like <a href=\"http://www.sitepoint.com/forums\" rel=\"nofollow\">SitePoint</a>.</p>\n", "answer_id": 430246, "tags": [], "down_vote_count": 0, "last_activity_date": 1231546999, "comments": [{"body": "Goes for GUI design too. Especially with new technologies like WPF making GUI design more like web design with CSS like files defining styles for the interface.", "edited": false, "comment_id": 263232, "creation_date": 1231888286, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "I completely agree, unfortunately, I find at most companies I&#39;m the developer and the designer at the same time. Its like saying &quot;hey, you&#39;re a good writer, you&#39;d be a great illustrator too!&quot; -- ummm, no.", "edited": false, "comment_id": 323868, "creation_date": 1233707729, "score": 0, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}], "creation_date": 1231546999, "comment_count": 2, "score": 6, "owner": {"display_name": "Mike B", "reputation": 6788, "user_id": 3609, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 6}, {"community_owned_date": 1231547137, "body": "<p><strong>Sometimes jumping on the bandwagon is ok</strong></p>\n\n<p>I get tired of people exhibiting \"grandpa syndrome\" (\"You kids and your newfangled Test Driven Development.  <em>Every</em> big technology that's come out in the last decade has sucked.  Back in my day, we wrote <em>real</em> code!\"... you get the idea).</p>\n\n<p>Sometimes things that are popular are popular for a reason.</p>\n", "answer_id": 430248, "tags": [], "down_vote_count": 0, "last_activity_date": 1231547137, "comments": [{"body": "<a href=\"http://www.joelonsoftware.com/articles/ThePerilsofJavaSchools.html\" rel=\"nofollow\">joelonsoftware.com/articles/ThePerilsofJavaSchools.html</a>", "edited": false, "comment_id": 263224, "creation_date": 1231888134, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "Not controversial enough. To be controversial, replace sometimes with always.", "edited": false, "comment_id": 896299, "creation_date": 1246745503, "score": 3, "owner": {"display_name": "Coding With Style", "reputation": 868, "user_id": 130718, "user_type": "registered"}}, {"body": "My problem is that otherwise good ideas become bandwagons. My favorite example is OOP, a useful idea that became a binge. In most of the performance tuning I do, the culprit, ultimately, is that a Queen Mary was built, when a rowboat would have sufficed.", "edited": false, "comment_id": 2166149, "creation_date": 1265472895, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "@Mike Dunlavey - I agree 100%.  But it&#39;s not fair to reject an idea on that basis (which a lot of people do).", "edited": false, "reply_to_user": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}, "comment_id": 2166242, "creation_date": 1265474076, "score": 0, "owner": {"display_name": "Jason Baker", "reputation": 66765, "user_id": 2147, "user_type": "registered", "accept_rate": 85}}, {"body": "Sadly, you&#39;re right. I&#39;ve seen it too.", "edited": false, "comment_id": 2166528, "creation_date": 1265477940, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "... talk about old-time code, how about this: <code>&#47;&#47;SYSUT2 DD UNIT=(TAPE1600,,DEFER),VOL=SER=SPROOOF,LABEL=(1,NL),DISP=(,KEEP)</code> cranked out standing up at a keypunch.", "edited": false, "comment_id": 2166565, "creation_date": 1265478484, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1231547137, "comment_count": 6, "score": 9, "owner": {"display_name": "Jason Baker", "reputation": 66765, "user_id": 2147, "user_type": "registered", "accept_rate": 85}, "is_accepted": false, "up_vote_count": 9}, {"community_owned_date": 1231573292, "body": "<p><strong>Women make better programmers than men.</strong></p>\n\n<p>The female programmers I've worked with don't get wedded to \"their\" code as much as men do. They're much more open to criticism and new ideas.</p>\n", "is_accepted": false, "tags": [], "answer_id": 430712, "down_vote_count": 5, "last_activity_date": 1281311636, "comments": [{"body": "While my experience agrees with your explanation (based on only 2 data points however), I don&#39;t agree with your assessment that not being wedded to their code is all it takes to be a better programmer.", "edited": false, "comment_id": 263214, "creation_date": 1231887887, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "Good programmers form a strong emotional attachment to thier code because they&#39;re passionate about creating the best solutions they can. It almost represents the best they can be .. hence the ego attachment. It&#39;s both blinding to better solutions and a key driver to improve. IMHO; it&#39;s mostly good!", "edited": false, "comment_id": 287999, "creation_date": 1232652259, "score": 0, "owner": {"display_name": "John MacIntyre", "reputation": 9827, "user_id": 29043, "user_type": "registered", "accept_rate": 78}}, {"body": "There exist woman programmers ??? ;-)", "edited": false, "comment_id": 296674, "creation_date": 1232978462, "score": 7, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "I&#39;ve not seen a correlation between sex and code-base ownership, either.  (Though only two data points, also.)  Care to expand on your answer?", "edited": false, "comment_id": 609792, "creation_date": 1240949504, "score": 1, "owner": {"display_name": "Stu Thompson", "reputation": 20094, "user_id": 2961, "user_type": "registered", "accept_rate": 81}}, {"body": "+1 for controversy", "edited": false, "comment_id": 896290, "creation_date": 1246745198, "score": 0, "owner": {"display_name": "Coding With Style", "reputation": 868, "user_id": 130718, "user_type": "registered"}}, {"body": "I&#39;ve never seen this to be true.. though I <i>have</i> seen women make better <i>designers</i> than men", "edited": false, "comment_id": 1477094, "creation_date": 1256264924, "score": 0, "owner": {"display_name": "warren", "reputation": 13593, "user_id": 4418, "user_type": "registered", "accept_rate": 94}}], "creation_date": 1231573292, "comment_count": 6, "score": 3, "owner": {"display_name": "WOPR", "reputation": 2694, "user_id": 46255, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "WOPR", "reputation": 2694, "user_id": 46255, "user_type": "registered", "accept_rate": 100}, "last_edit_date": 1281311636, "up_vote_count": 8}, {"community_owned_date": 1231582115, "body": "<p><strong>If you can only think of one way to do it, don't do it.</strong></p>\n\n<p>Whether it's an interface layout, a task flow, or a block of code, just <strong>stop</strong>.  Do something to collect more ideas, like asking other people how they would do it, and don't go back to implementing until you have at least three completely different ideas and at least one crisis of confidence.</p>\n\n<p>Generally, when I think something can only be done one way, or think only one method has any merit, it's because I haven't thought through the factors which ought to be influencing the design thoroughly enough.  If I had, some of them would clearly be in conflict, leading to a mess and thus an actual decision rather than a rote default.</p>\n\n<p><strong>Being a solid programmer does not make you a solid interface designer</strong></p>\n\n<p>And following all of the interface guidelines in the world will only begin to help.  If it's even humanly possible...  There seems to be a peculiar addiction to making things 'cute' and 'clever'.</p>\n", "answer_id": 430823, "tags": [], "down_vote_count": 0, "last_activity_date": 1231582115, "creation_date": 1231582115, "comment_count": 0, "score": 3, "owner": {"display_name": "Kim Reece", "reputation": 1066, "user_id": 1911072, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1231697437, "body": "<p>When someone dismisses an entire programming language as \"clumsy\", it usually turns out he doesn't know how to use it.</p>\n", "answer_id": 433341, "tags": [], "down_vote_count": 0, "last_activity_date": 1231697437, "creation_date": 1231697437, "comment_count": 0, "score": 4, "owner": {"display_name": "Jami", "reputation": 133, "user_id": 53781, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1231705425, "body": "<p><strong>Separation of concerns is evil :)</strong></p>\n\n<p>Only separate concerns if you have good reason for it. Otherwise, don't separate them.</p>\n\n<p>I have encountered too many occasions of separation only for the sake of separation. The second half of Dijkstra's statement \"Minimal coupling, maximal cohesion\" should not be forgotten. :)</p>\n\n<p>Happy to discuss this further.</p>\n", "answer_id": 433615, "tags": [], "down_vote_count": 0, "last_activity_date": 1231705425, "comments": [{"body": "+1 for the Dijkstra quote... but I disagree with you... so +1 for the controversial opinion... everything in moderation.", "edited": false, "comment_id": 263755, "creation_date": 1231903003, "score": 0, "owner": {"display_name": "paxos1977", "reputation": 33012, "user_id": 14069, "user_type": "registered", "accept_rate": 79}}, {"body": "you don&#39;t work for the same guys I do, do you???", "edited": false, "comment_id": 264956, "creation_date": 1231944725, "score": 0, "owner": {"display_name": "Chris Huang-Leaver", "reputation": 3120, "user_id": 24508, "user_type": "registered", "accept_rate": 94}}], "creation_date": 1231705425, "comment_count": 2, "score": 5, "owner": {"display_name": "Andr\u00e9 Boonzaaijer", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1231751045, "body": "<p>2 space indent.</p>\n\n<p>No discussion. It just has to be that way ;-)</p>\n", "answer_id": 434854, "tags": [], "down_vote_count": 4, "last_activity_date": 1231751045, "comments": [{"body": "How about a compromise? You add a space and I give up a space and everybodies happy? ;-)", "edited": false, "comment_id": 296892, "creation_date": 1232983543, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "There was an argument among the Delphi programmers at my company about whether to use 2-space indents or 4-space indents. We settled on 3-spaces to offend all parties equally.", "edited": false, "comment_id": 323874, "creation_date": 1233707992, "score": 0, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}, {"body": "3-space is the ugliest indent I&#39;ve ever seen. It just does not fit into my happy 2^n world. 2 is just for those who want to write code with 20-way and more indentation, i.e. for those whose application consists of one monster class. Or a monster function.", "edited": false, "comment_id": 476206, "creation_date": 1237476004, "score": 0, "owner": {"display_name": "phresnel", "reputation": 22805, "user_id": 76722, "user_type": "registered", "accept_rate": 80}}], "creation_date": 1231751045, "comment_count": 3, "score": 2, "owner": {"display_name": "Fergie", "reputation": 763, "user_id": 54086, "user_type": "registered", "accept_rate": 50}, "is_accepted": false, "up_vote_count": 6}, {"community_owned_date": 1231775196, "body": "<p>I hate universities and institutes offering short courses for teaching programming to new comers. It is outright disgrace and contempt for the art<sup>1</sup> and science of programming. </p>\n\n<p>They start teaching C, Java, VB (disgusting) to the people without good grasp on hardware and fundamental principals of computers.\nThe should first be taught about the <i>MACHINE</i> by books like Morris Mano's <i>Computer System Architecture</i> and then taught <em>the concept of instructing machine to solve problems</em> instead of etching semantics and syntax of one programming language.</p>\n\n<p>Also I don't understand government schools, colleges teaching children basics of computers using commercial operating systems and softwares. At least in my country (India) not many students afford to buy operating systems and even discounted office suits let alone the development software  juggernaut (compilers, IDEs etc). This prompts theft and piracy and make this act of copying and stealing software from their institutes' libraries a justified act.</p>\n\n<p>Again they are taught to use some products not the fundamental ideas.</p>\n\n<p>Think about it if you were taught only that 2x2 is 4 and not the concept of multiplication?</p>\n\n<p>Or if you were taught now to measure the length of pole inclined to some compound wall of your school but not <i>the Pythagoras theorem</i></p>\n", "answer_id": 435812, "tags": [], "down_vote_count": 0, "last_activity_date": 1231775196, "creation_date": 1231775196, "comment_count": 0, "score": 5, "owner": {"display_name": "TheVillageIdiot", "reputation": 24889, "user_id": 13198, "user_type": "registered", "accept_rate": 73}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1231777115, "body": "<p><strong>Programmers take their (own little limited stupid) programming language as a sacrosanct religion.</strong></p>\n\n<p>Its so funny how programmers take these discussions almost like religious believers do: no critics allowed, (often) no objective discussion, (very often) arguing based upon very limited  or absent knowledge and information. For a confirmation, just read the previous answers, and especially the comments.</p>\n\n<p>Also funny and another confirmation: by definition of the question \"give me a controversial opinion\", any controversion opinion should NOT qualify for negative votes - actually the opposite: the more controversial, the better. But how do our programmers react: like Pavlov's dogs, voting negative on disliked opinions.</p>\n\n<p>PS: I upvoted some others for fairness.</p>\n", "is_accepted": false, "tags": [], "answer_id": 435932, "down_vote_count": 2, "last_activity_date": 1231781812, "comments": [{"body": "Thanks daddy (mum?) for reminding us the rules of the game.", "edited": false, "comment_id": 1559448, "creation_date": 1257472038, "score": 0, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}, {"body": "P.S.: I don&#39;t have the habit to salivate on Stackoverflow... ok, it is a site for perverts, but is not porn.", "edited": false, "comment_id": 1559457, "creation_date": 1257472239, "score": 0, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}], "creation_date": 1231777115, "comment_count": 2, "score": 3, "owner": {"display_name": "blabla999", "reputation": 2516, "user_id": 48469, "user_type": "registered"}, "last_editor": {"display_name": "blabla999", "reputation": 2516, "user_id": 48469, "user_type": "registered"}, "last_edit_date": 1231781812, "up_vote_count": 5}, {"community_owned_date": 1231792222, "body": "<p>Software engineers should not work with computer science guys</p>\n\n<p>Their differences :\nSEs care about code reusability, while CSs just suss out code\nSEs care about performance, while CSs just want to have things done now\nSEs care about whole structure, while CSs do not give a toss\n...</p>\n", "answer_id": 436908, "tags": [], "down_vote_count": 2, "last_activity_date": 1231792222, "comments": [{"body": "I&#39;m a computer science guy and I can agree whole heartedly. The CS guys come in, the SE guys are jealous/threatened so they spend all their time trying to prove that the CS guy can&#39;t program using &quot;good software engineering&quot; (whatever that is)... meanwhile the CS guy thinks his job is sh*t because", "edited": false, "comment_id": 263746, "creation_date": 1231902732, "score": 0, "owner": {"display_name": "paxos1977", "reputation": 33012, "user_id": 14069, "user_type": "registered", "accept_rate": 79}}, {"body": "he would rather be working on algorithms, AI, or something else interesting/useful at a larger scope. Not solving some stupid brainless SE problem that could have been avoided. Best to keep separated.", "edited": false, "comment_id": 263750, "creation_date": 1231902807, "score": 0, "owner": {"display_name": "paxos1977", "reputation": 33012, "user_id": 14069, "user_type": "registered", "accept_rate": 79}}, {"body": "&quot;Don&#39;t call me a computer scientist.  I&#39;m a coder.  I hate computer scientists.  If I wanted to deal with people who&#39;re more concerned with correctness according to some set of made-up rules than with functionality, I&#39;d go to a church.&quot;", "edited": false, "comment_id": 613846, "creation_date": 1241031994, "score": 0, "owner": {"display_name": "chaos", "reputation": 78028, "user_id": 47529, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1231792222, "comment_count": 3, "score": 1, "owner": {"display_name": "chchman", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1231800585, "body": "<p><b>Cowboy coders get more done.</b></p>\n\n<p>I spend my life in the startup atmosphere. Without the Cowboy coders we'd waste endless cycles making sure things are done \"right\".</p>\n\n<p>As we know it's basically impossible to forsee all issues. The Cowboy coder runs head-on into these problems and is forced to solve them much more quickly than someone who tries to forsee them all.</p>\n\n<p>Though, if you're Cowboy coding you had better refactor that spaghetti before someone else has to maintain it. ;) The best ones I know use continuous refactoring. They get a ton of stuff done, don't waste time trying to predict the future, and through refactoring it becomes maintainable code.</p>\n\n<p>Process always gets in the way of a good Cowboy, no matter how Agile it is.</p>\n", "is_accepted": false, "tags": [], "answer_id": 437330, "down_vote_count": 4, "last_activity_date": 1256320881, "comments": [{"body": "If they&#39;re refactoring where appropriate, I probably wouldn&#39;t call them cowboys...", "edited": false, "comment_id": 259933, "creation_date": 1231801407, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "To me a cowboy is someone who just jumps into a problem and recklessly writes code, rather than thinking about, estimating, and designing something first. They do it without any regard to a process or accountability other than &quot;it better get done, as fast as possible&quot;.", "edited": false, "comment_id": 260162, "creation_date": 1231808936, "score": 1, "owner": {"display_name": "JD Conley", "reputation": 2108, "user_id": 51769, "user_type": "registered", "accept_rate": 100}}, {"body": "You! You&#39;re the idiot who came up with the legacy system that 5 years later I&#39;m hired to deal with. I&#39;ve spent most of my life working on 5+ year old code that because cowboys worked on it has ossified into an inflexible mess that is too brittle to be modified or added to.", "edited": false, "comment_id": 263204, "creation_date": 1231887546, "score": 14, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "Cameron: I think you need a new profession. Sounds like your job sucks. :)", "edited": false, "comment_id": 273212, "creation_date": 1232157784, "score": 4, "owner": {"display_name": "JD Conley", "reputation": 2108, "user_id": 51769, "user_type": "registered", "accept_rate": 100}}, {"body": "No my current job doesn&#39;t suck, but that&#39;s because I&#39;m not working on a creaking legacy system. I suppose it&#39;s unfair to only blame the cowboys for those systems, as they started ok, and then 5+ years of patches got applied. Now I ask how old the code is in interviews.", "edited": false, "comment_id": 288761, "creation_date": 1232664466, "score": 2, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "I&#39;d like the cowboys to think a little, but not so much they need to write a supporting design document first or anything like that. I agree that often designers get stuck in the &quot;what about this scenario&quot; syndrome.", "edited": false, "comment_id": 288786, "creation_date": 1232664862, "score": 1, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "@Cameron: Yes, it&#39;s unfair to blame only the cowboys. Blame their managers.", "edited": false, "comment_id": 1515615, "creation_date": 1256836845, "score": 0, "owner": {"display_name": "Daniel Daranas", "reputation": 16413, "user_id": 96780, "user_type": "registered", "accept_rate": 100}}, {"body": "Wel call them &quot;Ninja programmers&quot; because there&#39;s nothing they can&#39;t do. (Just like ninjas)", "edited": false, "comment_id": 1528750, "creation_date": 1257077969, "score": 0, "owner": {"display_name": "Faruz", "reputation": 3789, "user_id": 174119, "user_type": "registered", "accept_rate": 82}}], "creation_date": 1231800585, "comment_count": 8, "score": 25, "owner": {"display_name": "JD Conley", "reputation": 2108, "user_id": 51769, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "Thorbj\u00f8rn Ravn Andersen", "reputation": 43814, "user_id": 53897, "user_type": "registered", "accept_rate": 57}, "last_edit_date": 1256320881, "up_vote_count": 29}, {"community_owned_date": 1231862329, "body": "<p>USE of Desgin patterns and documentation </p>\n\n<p>in web devlopment whats use of these things never felt any use of it </p>\n", "answer_id": 439527, "tags": [], "down_vote_count": 1, "last_activity_date": 1231862329, "creation_date": 1231862329, "comment_count": 0, "score": 0, "owner": {"display_name": "Raj", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1231897292, "body": "<p><strong>Member variables should never be declared private (in java)</strong>   </p>\n\n<p>If you declare something private, you prevent any future developer from deriving from your class and extending the functionality.  Essentially, by writing \"private\" you are implying that you know more now about how your class can be used than any future developer might ever know.     Whenever you write \"private\", you ought to write \"protected\" instead.</p>\n\n<p><strong>Classes should never be declared final (in java)</strong></p>\n\n<p>Similarly, if you declare a class as final (which prevents it from being extended -- prevents it from being used as a base class for inheritance), you are implying that you know more than any future programmer might know, about what is the right and proper way to use your class.   This never a good idea.  You don't know everything.  Someone might come up with a perfectly suitable way to extend your class that you didn't think of.</p>\n\n<p><strong>Java Beans are a terrible idea.</strong></p>\n\n<p>The java bean convention -- declaring all members as private and then writing  get() and set() methods for every member -- forces programmers to write boilerplate, error-prone, tedious, and lengthy code, where no code is needed.   Just make public members variables public!  Trust in your ability to change it later, if you need to change the implementation (hint: 99% of the time, you never will).  </p>\n", "answer_id": 441611, "tags": [], "down_vote_count": 3, "last_activity_date": 1231897292, "comments": [{"body": "Protected member variables are so very wrong! It breaks encapsulation and leads to SERIOUS problems. Only methods should ever be declared as protected.", "edited": false, "comment_id": 296902, "creation_date": 1232983677, "score": 1, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}], "creation_date": 1231897292, "comment_count": 1, "score": 3, "owner": {"display_name": "user26294", "reputation": 2180, "user_id": 26294, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 6}, {"community_owned_date": 1231901976, "body": "<p>Assembly is the best first programming language.</p>\n", "answer_id": 441768, "tags": [], "down_vote_count": 2, "last_activity_date": 1231901976, "comments": [{"body": "+1 for that... probably too hard for most people to grasp... nothing like weeding out the weak ones. ;)", "edited": false, "comment_id": 263752, "creation_date": 1231902880, "score": 0, "owner": {"display_name": "paxos1977", "reputation": 33012, "user_id": 14069, "user_type": "registered", "accept_rate": 79}}, {"body": "I learned Mostek 6502 assembly at 12 and was my second programming language (the first was an unstructured Basic - pure crap). It was easy with a book and some computer magazines (those with long listing of source code). K&amp;R C disgust me even today.", "edited": false, "comment_id": 1559300, "creation_date": 1257469795, "score": 0, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}], "creation_date": 1231901976, "comment_count": 2, "score": 8, "owner": {"display_name": "Darvon", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 10}, {"community_owned_date": 1231943404, "body": "<p><a href=\"http://www.developerdotstar.com/mag/articles/reeves_design_main.html\" rel=\"nofollow\">Code as Design: Three Essays by Jack W. Reeves</a></p>\n\n<p>The source code of any software is its most accurate design document. Everything else (specs, docs, and sometimes comments) is either incorrect, outdated or misleading.</p>\n\n<p>Guaranteed to get you fired pretty much everywhere.</p>\n", "answer_id": 443135, "tags": [], "down_vote_count": 0, "last_activity_date": 1231943404, "creation_date": 1231943404, "comment_count": 0, "score": 2, "owner": {"display_name": "fbonnet", "reputation": 1958, "user_id": 54574, "user_type": "registered", "accept_rate": 50}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1232005938, "body": "<p><strong>Lazy Programmers are the Best Programmers</strong></p>\n\n<p>A lazy programmer most often finds ways to decrease the amount of time spent writing code (especially a lot of similar or repeating code). This often translates into tools and workflows that other developers in the company/team can benefit from.</p>\n\n<p>As the developer encounters similar projects he may create tools to bootstrap the development process (e.g. creating a DRM layer that works with the company's database design paradigms).</p>\n\n<p>Furthermore, developers such as these often use some form of code generation. This means all bugs of the same type (for example, the code generator did not check for null parameters on all methods) can often be fixed by fixing the generator and not the 50+ instances of that bug.</p>\n\n<p>A lazy programmer may take a few more hours to get the first product out the door, but will save you months down the line.</p>\n", "is_accepted": false, "tags": [], "answer_id": 445964, "down_vote_count": 7, "last_activity_date": 1233220971, "comments": [{"body": "You are mistaken &quot;lazy&quot; for &quot;clever&quot;. A clever programmer will actually have to work less, which may make him/her look &quot;lazy&quot;.", "edited": false, "comment_id": 296245, "creation_date": 1232964967, "score": 16, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "@Diego, tnx, changed it to make it more appropriate.", "edited": false, "comment_id": 296774, "creation_date": 1232981196, "score": 0, "owner": {"display_name": "Jonathan C Dickinson", "reputation": 4450, "user_id": 24064, "user_type": "registered", "accept_rate": 100}}, {"body": "@Diego: I disagree! The Term &quot;lazy&quot; as applied to programmers is something I&#39;ve heard and used many times before. (I think I first read it in a article by Larry Wall) It is a badge of honor!", "edited": false, "comment_id": 306754, "creation_date": 1233215241, "score": 0, "owner": {"display_name": "scraimer", "reputation": 8235, "user_id": 54491, "user_type": "registered", "accept_rate": 92}}, {"body": "lazyness is the fulcrum of all human advancements. if we were not lazy we would still be hunting boars with spears for supper.", "edited": false, "comment_id": 311186, "creation_date": 1233321910, "score": 0, "owner": {"display_name": "AZ.", "reputation": 4258, "user_id": 35128, "user_type": "registered", "accept_rate": 88}}, {"body": "I like to say, &quot;I&#39;m not lazy; I&#39;m efficient.&quot;", "edited": false, "comment_id": 415565, "creation_date": 1236018517, "score": 0, "owner": {"display_name": "Tracy Probst", "reputation": 1329, "user_id": 22770, "user_type": "registered"}}, {"body": "I agree with what you&#39;re trying to say, but I disagree with your definition of lazy. A lazy programmer does not look ahead; they will copy-paste a block of code between 4 different functions if it&#39;s the easiest thing to do at the time.", "edited": false, "comment_id": 652654, "creation_date": 1241915897, "score": 3, "owner": {"display_name": "DisgruntledGoat", "reputation": 25603, "user_id": 37947, "user_type": "registered", "accept_rate": 98}}, {"body": "lazy/clever programmer... Programmers have to be clever to be reasonable programmers, so that&#39;s a given. A lazy programmer picks the shortest/easiest path to the solution of a problem. And this is not about copy/pasting the same code snippet 400 times, but rather finding a way to avoid copying the same code 400 times. That way the code can be easily changed in once place! The lazy programmer likes to only change the code in once place ;) The lazy programmer also knows that the code is likely to be changed several times. And the lazy programmer just hate finding the 400 snippets twice.", "edited": false, "comment_id": 804577, "creation_date": 1245065627, "score": 7, "owner": {"display_name": "Zuu", "reputation": 915, "user_id": 67634, "user_type": "registered"}}, {"body": "Though I agree with your explanation Lazy it isn&#39;t really the best word to describe this.  Lazy - Resistant to work or exertion;  I know a lazy programmer that is too lazy to create a bat file to automate a simple task that I see him type out all the time.  If he would just spend a little time to make a few bat files it would increase his productivity.  It turns out he is a good developer however he could be even better.", "edited": false, "comment_id": 1420587, "creation_date": 1255454595, "score": 1, "owner": {"display_name": "gradbot", "reputation": 9894, "user_id": 17919, "user_type": "registered", "accept_rate": 90}}, {"body": "For the most part, I agree. However in HTML coding this is not the case. Lazy HTML coders use tables for layouts, and lazy back end ciders cut and paste instead of using includes. Having just slogged through someone else&#39;s code, I am very much aware of this phenomena. <i>shudder</i>", "edited": false, "comment_id": 1474750, "creation_date": 1256236412, "score": 0, "owner": {"display_name": "Elizabeth Buckwalter", "reputation": 803, "user_id": 167034, "user_type": "registered", "accept_rate": 89}}, {"body": "It&#39;s hard to tell whether programmers are the hardest-working lazy people on the planet, or the laziest hard-working people on the planet.", "edited": false, "comment_id": 3065134, "creation_date": 1276026858, "score": 0, "owner": {"display_name": "RavB", "reputation": 1114, "user_id": 340574, "user_type": "registered", "accept_rate": 78}}, {"body": "-1 . I&#39;m VERY lazy + I never wrote tools to automate things because I never saw any value in them. Developing tools is a one time huge additional amount of work that no true lazy person will be able to commit to.", "edited": false, "comment_id": 3356706, "creation_date": 1279127527, "score": 0, "owner": {"display_name": "Blub", "reputation": 2418, "user_id": 335355, "user_type": "registered", "accept_rate": 78}}, {"body": "+1 for Seventh Element/Zuu. Lazy programmers = much code. Smart programmers = less + better code.", "edited": false, "comment_id": 3713932, "creation_date": 1282555577, "score": 0, "owner": {"display_name": "Exa", "reputation": 2421, "user_id": 305694, "user_type": "registered", "accept_rate": 93}}], "creation_date": 1232005938, "comment_count": 12, "score": 89, "owner": {"display_name": "Jonathan C Dickinson", "reputation": 4450, "user_id": 24064, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "Jonathan C Dickinson", "reputation": 4450, "user_id": 24064, "user_type": "registered", "accept_rate": 100}, "last_edit_date": 1233220971, "up_vote_count": 96}, {"community_owned_date": 1232096051, "body": "<p><strong>Tcl/Tk is the best GUI language/toolkit combo ever</strong></p>\n\n<p>It may lack specific widgets and be less good-looking than the new kids on the block, but its model is elegant and so easy to use that one can build working GUIs faster <strong>by typing commands interactively</strong> than by using a visual interface builder. Its expressive power is unbeatable: other solutions (Gtk, Java, .NET, MFC...) typically require ten to one hundred LOC to get the same result as a Tcl/Tk one-liner. All without even sacrificing readability or stability.</p>\n\n<pre><code>pack [label .l -text \"Hello world!\"] [button .b -text \"Quit\" -command exit]\n</code></pre>\n", "answer_id": 449889, "tags": [], "down_vote_count": 2, "last_activity_date": 1232096051, "comments": [{"body": "Oh my god is that controversial! :P", "edited": false, "comment_id": 275107, "creation_date": 1232276129, "score": 0, "owner": {"display_name": "Aaron Powell", "reputation": 16980, "user_id": 11388, "user_type": "registered", "accept_rate": 82}}, {"body": "I&#39;d say WPF gives Tcl/Tk a run for it&#39;s money.", "edited": false, "comment_id": 288720, "creation_date": 1232664072, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "I suggest to have a look at pygtk and or Groovy Swingbuilder. Both concepts are more powerful than the strange Tcl syntax and achieve the same result with a modern widget set and little code. And if you want to see something really cool, goole for &quot;enthought traits&quot;.", "edited": false, "comment_id": 414714, "creation_date": 1236003612, "score": 0, "owner": {"display_name": "Aaron Digulla", "reputation": 178090, "user_id": 34088, "user_type": "registered", "accept_rate": 78}}, {"body": "Good one.  Ugh.  Tcl/Tk.  because uglier is gooder.", "edited": false, "comment_id": 2560296, "creation_date": 1270080753, "score": 0, "owner": {"display_name": "Warren  P", "reputation": 26418, "user_id": 84704, "user_type": "registered", "accept_rate": 92}}, {"body": "WPF should have been called WTF.  Because hand-tuning XML is my idea of a RAD good time.", "edited": false, "comment_id": 2560299, "creation_date": 1270080814, "score": 0, "owner": {"display_name": "Warren  P", "reputation": 26418, "user_id": 84704, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1232096051, "comment_count": 5, "score": 2, "owner": {"display_name": "fbonnet", "reputation": 1958, "user_id": 54574, "user_type": "registered", "accept_rate": 50}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1232099948, "body": "<p><strong>Design patterns are a waste of time when it comes to software design and development.</strong></p>\n\n<p>Don't get me wrong, design patterns are useful but mainly as a communication vector. They can express complex ideas very concisely: factory, singleton, iterator...</p>\n\n<p>But they shouldn't serve as a development method. Too often developers architect their code using a flurry of design pattern-based classes where a more concise design would be better, both in term of readability and performance. All that with the illusion that individual classes could be reused outside their domain. <strong>If a class is not designed for reuse or isn't part of the interface, then it's an implementation detail.</strong></p>\n\n<p>Design patterns should be used to put names on organizational features, not to dictate the way code must be written.</p>\n\n<p><em>(It was supposed to be controversial, remember?)</em></p>\n", "answer_id": 449953, "tags": [], "down_vote_count": 0, "last_activity_date": 1232099948, "creation_date": 1232099948, "comment_count": 0, "score": 5, "owner": {"display_name": "fbonnet", "reputation": 1958, "user_id": 54574, "user_type": "registered", "accept_rate": 50}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1232100207, "body": "<p><strong>Managers know everything</strong></p>\n\n<p>It's been my experience that managers didn't get there by knowing code usually.  No matter what you tell them it's too long, not right or too expensive.</p>\n\n<p>And another that follows on from the first:</p>\n\n<p><strong>There's never time to do it right but there's always time to do it again</strong></p>\n\n<p>A good engineer friend once said that in anger to describe a situation where management halved his estimates, got a half-assed version out of him  then gave him twice as much time to rework it because it failed.  It's a fairly regular thing in the commercial software world.</p>\n\n<p>And one that came to mind today while trying to configure a router with only a web interface:</p>\n\n<p><strong>Web interfaces are for suckers</strong></p>\n\n<p>The CLI on the previous version of the firmware was oh so nice.  This version has a web interface, which attempts to hide all of the complexity of networking from clueless IT droids, and can't even get VLANs correct.</p>\n", "is_accepted": false, "tags": [], "answer_id": 449961, "down_vote_count": 2, "last_activity_date": 1232273513, "comments": [{"body": "agree with the second statement.", "edited": false, "comment_id": 3356762, "creation_date": 1279127882, "score": 0, "owner": {"display_name": "Blub", "reputation": 2418, "user_id": 335355, "user_type": "registered", "accept_rate": 78}}, {"body": "I think the down voter failed to sarcasm. I 100% agree with the statements - sarcastically... :P", "edited": false, "comment_id": 3382557, "creation_date": 1279332278, "score": 0, "owner": {"display_name": "d-_-b", "reputation": 3300, "user_id": 297051, "user_type": "registered", "accept_rate": 91}}], "creation_date": 1232100207, "comment_count": 2, "score": 1, "owner": {"display_name": "Adam Hawes", "reputation": 4424, "user_id": 54415, "user_type": "registered"}, "last_editor": {"display_name": "Adam Hawes", "reputation": 4424, "user_id": 54415, "user_type": "registered"}, "last_edit_date": 1232273513, "up_vote_count": 3}, {"community_owned_date": 1232118199, "body": "<p><strong>A good developer needs to know more than just how to code</strong></p>\n", "answer_id": 450652, "tags": [], "down_vote_count": 0, "last_activity_date": 1232118199, "comments": [{"body": "It&#39;s not that I don&#39;t agree but I like to see more explanation or examples.", "edited": false, "comment_id": 287796, "creation_date": 1232647975, "score": 3, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "+1 for both superwiren &amp; tuinstoel.  Elaborate, please.", "edited": false, "comment_id": 609865, "creation_date": 1240950957, "score": 0, "owner": {"display_name": "Stu Thompson", "reputation": 20094, "user_id": 2961, "user_type": "registered", "accept_rate": 81}}, {"body": "Is this controversial?", "edited": false, "comment_id": 1622512, "creation_date": 1258372020, "score": 1, "owner": {"display_name": "Stefan Steinegger", "reputation": 41258, "user_id": 2658202, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1232118199, "comment_count": 3, "score": 8, "owner": {"display_name": "Thomas Wiren", "reputation": 437, "user_id": 2538222, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 8}, {"community_owned_date": 1232119382, "body": "<h2>Write your spec when you are finished coding. (if at all)</h2>\n\n<p>In many projects I have been involved in, a great deal of effort was spent at the outset writing a \"spec\" in Microsoft Word. This process culminated in a \"sign off\" meeting when the big shots bought in on the project, and after that meeting nobody ever looked at this document again. These documents are a complete waste of time and don't reflect how software is actually designed. This is not to say there are not other valuable artifacts of application design. They are usually contained on index cards, snapshots of whiteboards, cocktail napkins and other similar media that provide a kind of timeline for the app design. These are usually are the real specs of the app. If you are going to write a Word document, (and I am not particularly saying you should) do it at the end of the project. At least it will accurately represent what has been done in the code and might help someone down the road like the the QA team or the next version developers.</p>\n", "answer_id": 450722, "tags": [], "down_vote_count": 1, "last_activity_date": 1232119382, "comments": [{"body": "&quot;nobody ever looked at this document again&quot; Not true. When I started at a new job I was given &quot;the spec&quot; folder, and told to read it as my first task. Then I started asking &quot;where&#39;s this feature&quot; the answer was &quot;I didn&#39;t know that was in the spec.&quot; The spec folder was given to all new employees.", "edited": false, "comment_id": 288688, "creation_date": 1232663760, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "Yes, that happened to me too - several times. I stand corrected.", "edited": false, "comment_id": 311342, "creation_date": 1233324809, "score": 0, "owner": {"display_name": "Andrew Cowenhoven", "reputation": 2421, "user_id": 12281, "user_type": "registered", "accept_rate": 100}}, {"body": "I think this is <i>highly</i> situational.  Do you need a spec for an internal project that you&#39;ll write in 3 days?  Probably not.  Are you willing to bet a multi-million dollar project on the client understanding everything you say to the letter?  I would hope not.", "edited": false, "comment_id": 2166258, "creation_date": 1265474311, "score": 0, "owner": {"display_name": "Jason Baker", "reputation": 66765, "user_id": 2147, "user_type": "registered", "accept_rate": 85}}], "creation_date": 1232119382, "comment_count": 3, "score": 7, "owner": {"display_name": "Andrew Cowenhoven", "reputation": 2421, "user_id": 12281, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 8}, {"community_owned_date": 1232201331, "body": "<p>It's a good idea to keep optimisation in mind when developing code.</p>\n\n<p>Whenever I say this, people always reply: \"premature optimisation is the root of all evil\".</p>\n\n<p>But I'm not saying optimise before you debug.  I'm not even saying optimise ever, but when you're designing code, bear in mind the possibility that this might become a bottleneck, and write it so that it will be possible to refactor it for speed, without tearing the API apart.</p>\n\n<p>Hugo</p>\n", "answer_id": 453348, "tags": [], "down_vote_count": 0, "last_activity_date": 1232201331, "comments": [{"body": "That sounds very much like my way of thinking: optimise the architecture/design, not the implementation.", "edited": false, "comment_id": 273773, "creation_date": 1232201741, "score": 5, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1232201331, "comment_count": 1, "score": 32, "owner": {"display_name": "Rocketmagnet", "reputation": 1914, "user_id": 55934, "user_type": "registered", "accept_rate": 57}, "is_accepted": false, "up_vote_count": 32}, {"community_owned_date": 1232271488, "body": "<p>What strikes me as amusing about this question is that I've just read the first page of answers, and so far, I haven't found a single controversial opinion. </p>\n\n<p>Perhaps that says more about the way stackoverflow generates consensus than anything else. Maybe I should have started at the bottom. :-)</p>\n", "answer_id": 454886, "tags": [], "down_vote_count": 1, "last_activity_date": 1232271488, "comments": [{"body": "There&#39;s definitely a mixture of controversial and not. Look for ones with lots of comments :)", "edited": false, "comment_id": 275077, "creation_date": 1232273020, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "haha you know what, i&#39;ll mark you down so ppl will read this when looking through these. I agree with you 100%", "edited": false, "comment_id": 295997, "creation_date": 1232954503, "score": 0, "owner": {"display_name": "acidzombie24", "reputation": 34755, "user_id": 34537, "user_type": "registered", "accept_rate": 73}}, {"body": "lots of controversy on page 2, though :)", "edited": false, "comment_id": 323916, "creation_date": 1233709090, "score": 0, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}], "creation_date": 1232271488, "comment_count": 3, "score": 2, "owner": {"display_name": "Dominic Cronin", "reputation": 3624, "user_id": 9967, "user_type": "registered", "accept_rate": 79}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1232275148, "body": "<p>VB 6 could be used for good as well as evil. It was a Rapid Application Development environment in a time of over complicated coding.</p>\n\n<p>I have hated VB vehemently in the past, and still mock VB.NET (probably in jest) as a Fisher Price language due to my dislike of classical VB, but in its day, nothing could beat it for getting the job done.</p>\n", "answer_id": 454943, "tags": [], "down_vote_count": 0, "last_activity_date": 1232275148, "creation_date": 1232275148, "comment_count": 0, "score": 9, "owner": {"display_name": "johnc", "reputation": 13655, "user_id": 5302, "user_type": "registered", "accept_rate": 96}, "is_accepted": false, "up_vote_count": 9}, {"community_owned_date": 1232486196, "body": "<p>Haven't tested it yet for controversy, but there may be potential:</p>\n\n<p>The best line of code is the one you never wrote.</p>\n", "answer_id": 463149, "tags": [], "down_vote_count": 0, "last_activity_date": 1232486196, "comments": [{"body": "The best lines of code are the ones you don&#39;t need to write", "edited": false, "comment_id": 488942, "creation_date": 1237845761, "score": 2, "owner": {"display_name": "Pyrolistical", "reputation": 14094, "user_id": 21838, "user_type": "registered", "accept_rate": 82}}], "creation_date": 1232486196, "comment_count": 1, "score": 1, "owner": {"display_name": "flq", "reputation": 13336, "user_id": 51428, "user_type": "registered", "accept_rate": 80}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1232579782, "body": "<p><strong>Dependency Management Software Does More Harm Than Good</strong></p>\n\n<p>I've worked on Java projects that included upwards of a hundred different libraries. In most cases, each library has its own dependencies, and those dependent libraries have their own dependencies too.</p>\n\n<p>Software like Maven or Ivy supposedly \"manage\" this problem by automatically fetching the correct version of each library and then recursively fetching all of its dependencies.</p>\n\n<p>Problem solved, right?</p>\n\n<p>Wrong.</p>\n\n<p>Downloading libraries is the <strong>easy</strong> part of dependency management. The hard part is creating a mental model of the software, and how it interacts with all those libraries.</p>\n\n<p>My unpopular opinion is this:</p>\n\n<p>If you can't verbally explain, off the top of your head, the basic interactions between all the libraries in your project, you should eliminate dependencies until you can.</p>\n\n<p>Along the same lines, if it takes you longer than ten seconds to list all of the libraries (and their methods) invoked either directly or indirectly from one of your functions, then you are doing a poor job of managing dependencies.</p>\n\n<p>You should be able to easily answer the question \"which parts of my application actually depend on library XYZ?\"</p>\n\n<p>The current crop of dependency management tools do more harm than good, because they make it easy to create impossibly-complicated dependency graphs, and they provide virtually no functionality for reducing dependencies or identifying problems.</p>\n\n<p>I've seen developers include 10 or 20 MB worth of libraries, introducing thousands of dependent classes into the project, just to eliminate a few dozen lines of simple custom code.</p>\n\n<p>Using libraries and frameworks can be good. But there's always a <strong>cost</strong>, and tools which obscure that cost are inherently problematic.</p>\n\n<p>Moreover, it's sometimes (note: certainly not always) better to reinvent the wheel by writing a few small classes that implement <strong>exactly</strong> what you need than to introduce a dependency on a large general-purpose library.</p>\n", "is_accepted": false, "tags": [], "answer_id": 467463, "down_vote_count": 0, "last_activity_date": 1232662276, "comments": [{"body": "I disagree.  I think DM is a good thing, except Maven did it wrong.  So much code depends on other stuff, but we still after so many year haven&#39;t figured out how to manage it all.  That&#39;s one thing we need to fix for SW dev to move forward.", "edited": false, "comment_id": 488938, "creation_date": 1237845720, "score": 0, "owner": {"display_name": "Pyrolistical", "reputation": 14094, "user_id": 21838, "user_type": "registered", "accept_rate": 82}}], "creation_date": 1232579782, "comment_count": 1, "score": 2, "owner": {"display_name": "benjismith", "reputation": 9995, "user_id": 22979, "user_type": "registered", "accept_rate": 67}, "last_editor": {"display_name": "benjismith", "reputation": 9995, "user_id": 22979, "user_type": "registered", "accept_rate": 67}, "last_edit_date": 1232662276, "up_vote_count": 2}, {"community_owned_date": 1232580482, "body": "<p>There are some (very few) legitimate uses for goto (particularly in C, as a stand-in for exception handling).</p>\n", "answer_id": 467492, "tags": [], "down_vote_count": 1, "last_activity_date": 1232580482, "comments": [{"body": "And bytecodes. Bytecodes NEED gotos. :D", "edited": false, "comment_id": 928193, "creation_date": 1247271929, "score": 0, "owner": {"display_name": "luiscubal", "reputation": 10472, "user_id": 32775, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1232580482, "comment_count": 1, "score": 2, "owner": {"display_name": "DWright", "reputation": 4713, "user_id": 49251, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1232580669, "body": "<p>Inversion of control does not eliminate dependencies, but it sure does a great job of hiding them.</p>\n", "answer_id": 467503, "tags": [], "down_vote_count": 1, "last_activity_date": 1232580669, "creation_date": 1232580669, "comment_count": 0, "score": 3, "owner": {"display_name": "benjismith", "reputation": 9995, "user_id": 22979, "user_type": "registered", "accept_rate": 67}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1232608044, "body": "<p><strong>Objects Should Never Be In An Invalid State</strong></p>\n\n<p>Unfortunately, so many of the ORM framework mandate zero-arg constructors for all entity classes, using setters to populate the member variables. In those cases, it's very difficult to know which setters must be called in order to construct a valid object.</p>\n\n<pre><code>MyClass c = new MyClass(); // Object in invalid state. Doesn't have an ID.\nc.setId(12345); // Now object is valid.\n</code></pre>\n\n<p>In my opinion, it should be <em>impossible</em> for an object to ever find itself in an invalid state, and the class's API should actively enforce its class invariants after every method call.</p>\n\n<p>Constructors and mutator methods should atomically transition an object from one valid state to another. This is much better:</p>\n\n<pre><code>MyClass c = new MyClass(12345); // Object starts out valid. Stays valid.\n</code></pre>\n\n<p>As the consumer of some library, it's a huuuuuuge pain to keep track of whether all the right setters have been invoked before attempting to use an object, since the documentation usually provides no clues about the class's contract.</p>\n", "is_accepted": false, "tags": [], "answer_id": 468272, "down_vote_count": 2, "last_activity_date": 1232661800, "comments": [{"body": "TOTALLY agree!  And I get very frustrated when I see concepts like this become so popular. +1", "edited": false, "comment_id": 287054, "creation_date": 1232634810, "score": 3, "owner": {"display_name": "John MacIntyre", "reputation": 9827, "user_id": 29043, "user_type": "registered", "accept_rate": 78}}, {"body": "Invalid States lead to exceptions in my experience.", "edited": false, "comment_id": 288637, "creation_date": 1232663105, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "@Cameron, are you saying that you should be able to initialize with a default constructor, then set each property, then setting checking for an invalid state in each setter and throwing an exception?  If so, how can you possibly handle a situation where 2 properties need to be in synch to be valid?", "edited": false, "comment_id": 290804, "creation_date": 1232724244, "score": 0, "owner": {"display_name": "John MacIntyre", "reputation": 9827, "user_id": 29043, "user_type": "registered", "accept_rate": 78}}, {"body": "That&#39;s why I hate ORM frameworks, despite the fact I need them all the time.", "edited": false, "comment_id": 315680, "creation_date": 1233468574, "score": 1, "owner": {"display_name": "Eduardo Le\u00f3n", "reputation": 6485, "user_id": 46571, "user_type": "registered", "accept_rate": 93}}, {"body": "I feel your pain Eduardo. I can&#39;t stand ORM frameworks, but sometimes they&#39;re the least-worst way to solve a particular problem. But yeah, I hate them too.", "edited": false, "comment_id": 318687, "creation_date": 1233593180, "score": 0, "owner": {"display_name": "benjismith", "reputation": 9995, "user_id": 22979, "user_type": "registered", "accept_rate": 67}}, {"body": "-1: good idea, but not at all controversial.", "edited": false, "comment_id": 323926, "creation_date": 1233709494, "score": 0, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}, {"body": "I dunno. If was uncontroversial, then all of the major frameworks for Java (notably, Spring and Hibernate) wouldn&#39;t require me to break the rule in order to use their code.", "edited": false, "comment_id": 325597, "creation_date": 1233761612, "score": 0, "owner": {"display_name": "benjismith", "reputation": 9995, "user_id": 22979, "user_type": "registered", "accept_rate": 67}}, {"body": "@John: If two properties should be in sync, they are obviously related and should be edited together in a method: SetBothProperties( a, b )", "edited": false, "comment_id": 510465, "creation_date": 1238423578, "score": 0, "owner": {"display_name": "Lennaert", "reputation": 2125, "user_id": 57427, "user_type": "registered"}}, {"body": "Sadly serialization requires the existince of zero-arg constructors.", "edited": false, "comment_id": 1112952, "creation_date": 1250398668, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "RAII - resource aquisition is instantation. FTW", "edited": false, "comment_id": 1729427, "creation_date": 1259799002, "score": 0, "owner": {"display_name": "George Godik", "reputation": 1162, "user_id": 2759, "user_type": "registered", "accept_rate": 80}}, {"body": "Sometimes it&#39;s sufficient to have protected zero arg constructors. That might help a little.", "edited": false, "comment_id": 1791567, "creation_date": 1260562876, "score": 0, "owner": {"display_name": "hstoerr", "reputation": 7437, "user_id": 21499, "user_type": "registered", "accept_rate": 55}}, {"body": "This sort of reminds me of structs in Windows API programming. I could never figure out which fields I needed to set in order to have a valid instance of a struct like STARTUPINFO for example. Very frustrating.", "edited": false, "comment_id": 3394235, "creation_date": 1279529896, "score": 0, "owner": {"display_name": "dacris", "reputation": 273, "user_id": 392275, "user_type": "registered"}}, {"body": "I had never heard anyone explicitly this before. It is brilliantly simple--I like it.", "edited": false, "comment_id": 4135531, "creation_date": 1286475717, "score": 0, "owner": {"display_name": "Stargazer712", "reputation": 9482, "user_id": 265510, "user_type": "registered", "accept_rate": 85}}], "creation_date": 1232608044, "comment_count": 13, "score": 61, "owner": {"display_name": "benjismith", "reputation": 9995, "user_id": 22979, "user_type": "registered", "accept_rate": 67}, "last_editor": {"display_name": "benjismith", "reputation": 9995, "user_id": 22979, "user_type": "registered", "accept_rate": 67}, "last_edit_date": 1232661800, "up_vote_count": 63}, {"community_owned_date": 1232634175, "body": "<p><strong>Sometimes it's appropriate to swallow an exception.</strong></p>\n\n<p>For UI bells and wistles, prompting the user with an error message is interuptive, and there is ussually nothing for them to do anyway.  In this case, I just log it, and deal with it when it shows up in the logs.</p>\n", "answer_id": 469307, "tags": [], "down_vote_count": 1, "last_activity_date": 1232634175, "comments": [{"body": "I always took the &#39;rule&#39; as don&#39;t do the following, rather than &quot;don&#39;t raise to the user&quot;: try {evil();} catch(Exception e){//swallow}", "edited": false, "comment_id": 609813, "creation_date": 1240949835, "score": 0, "owner": {"display_name": "Stu Thompson", "reputation": 20094, "user_id": 2961, "user_type": "registered", "accept_rate": 81}}], "creation_date": 1232634175, "comment_count": 1, "score": 4, "owner": {"display_name": "John MacIntyre", "reputation": 9827, "user_id": 29043, "user_type": "registered", "accept_rate": 78}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1232647090, "body": "<h2>Don't write code, remove code!</h2>\n\n<p>As a smart teacher once told me: \"Don't write code, Writing code is bad, Removing code is good. and if you have to write code - write small code...\"</p>\n", "answer_id": 470197, "tags": [], "down_vote_count": 0, "last_activity_date": 1232647090, "creation_date": 1232647090, "comment_count": 0, "score": 33, "owner": {"display_name": "Gal Goldman", "reputation": 3021, "user_id": 46418, "user_type": "registered", "accept_rate": 72}, "is_accepted": false, "up_vote_count": 33}, {"community_owned_date": 1232892496, "body": "<p>That best practices are a hazard because they ask us to substitute slogans for thinking.</p>\n", "answer_id": 477730, "tags": [], "down_vote_count": 0, "last_activity_date": 1232892496, "comments": [{"body": "<a href=\"http://en.wikipedia.org/wiki/Thought-terminating_clich%C3%A9\" rel=\"nofollow\">en.wikipedia.org/wiki/Thought-terminating_clich%C3%A9</a>", "edited": false, "comment_id": 300477, "creation_date": 1233073015, "score": 0, "owner": {"display_name": "Demur Rumed", "reputation": 117, "user_id": 40172, "user_type": "registered"}}, {"body": "The Blind following the blind.", "edited": false, "comment_id": 709863, "creation_date": 1243102356, "score": 0, "owner": {"display_name": "WolfmanDragon", "reputation": 3819, "user_id": 13491, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1232892496, "comment_count": 2, "score": 7, "owner": {"display_name": "Flinkman", "reputation": 5787, "user_id": 15054, "user_type": "registered", "accept_rate": 52}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1232906631, "body": "<p><strong>Code Generation is bad</strong></p>\n\n<p>I hate languages that require you to make use of code generation (or copy&amp;paste) for simple things, like JavaBeans with all their Getters and Setters.</p>\n\n<p>C#'s AutoProperties are a step in the right direction, but for nice DTOs with Fields, Properties and Constructor parameters you still need a lot of redundancy.</p>\n", "answer_id": 477999, "tags": [], "down_vote_count": 1, "last_activity_date": 1232906631, "comments": [{"body": "Code Generation is bad... so do you hate compilers also? (Hint: code generation is a broad subject, don&#39;t be deceived by crappy languages/frameworks).", "edited": false, "comment_id": 1558961, "creation_date": 1257464754, "score": 3, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}], "creation_date": 1232906631, "comment_count": 1, "score": 9, "owner": {"display_name": "Lemmy", "reputation": 1557, "user_id": 58598, "user_type": "registered", "accept_rate": 50}, "is_accepted": false, "up_vote_count": 10}, {"community_owned_date": 1232951871, "body": "<p><strong>Good Performance VS Elegant Design</strong></p>\n\n<p>They are not mutually exclusive but I can't stand over-designed class structures/frameworks that completely have no clue about performance. I don't need to have a string of new This(new That(new Whatever())); to create an object that will tell me it's 5 AM in the morning oh by the way, it's 217 days until Obama's birthday, and the weekend is 2 days away. I only wanted to know if the gym was open.</p>\n\n<p>Having balance between the 2 are crucial. The code needs to get nasty when you need to pump out all the processor do something intensive such as reading terabytes of data. Save the elegance for the places that consume the 10% of resources which is probably more than 90% of the code.</p>\n", "answer_id": 478988, "tags": [], "down_vote_count": 0, "last_activity_date": 1232951871, "comments": [{"body": "Ironically, reading a lot of data is often <i>not</i> CPU intensive, because CPUs are so much faster than disks :)", "edited": false, "comment_id": 295995, "creation_date": 1232954323, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I agree, I wasn&#39;t super keen in making that distinguishment when writing my response but there are also many times that just the memory overhead will cause you to start swapping.", "edited": false, "comment_id": 299094, "creation_date": 1233032073, "score": 0, "owner": {"display_name": "Jeremy Edwards", "reputation": 7916, "user_id": 42005, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1232951871, "comment_count": 2, "score": 3, "owner": {"display_name": "Jeremy Edwards", "reputation": 7916, "user_id": 42005, "user_type": "registered", "accept_rate": 92}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1232952198, "body": "<p>Controversial to self, because some things are better be left unsaid, so you won't be painted by others as <strong>too egotist</strong>.  However, here it is:</p>\n\n<p><strong>If it is to be, it begins with me</strong></p>\n", "answer_id": 478996, "tags": [], "down_vote_count": 1, "last_activity_date": 1232952198, "creation_date": 1232952198, "comment_count": 0, "score": 0, "owner": {"display_name": "Hao", "reputation": 2436, "user_id": 55327, "user_type": "registered", "accept_rate": 84}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1232953253, "body": "<p><strong>Programming is so easy a five year old can do it.</strong></p>\n\n<p>Programming in and of itself is not hard, it's common sense. You are just telling a computer what to do.   You're not a genius, please get over yourself.</p>\n", "answer_id": 479007, "tags": [], "down_vote_count": 11, "last_activity_date": 1232953253, "comments": [{"body": "I&#39;m not a genius and I don&#39;t need to get over myself. In fact, not a day goes by that I don&#39;t question myself and wonder if just maybe I am a moron. And that&#39;s because I&#39;m trying to tell a computer what it should do, and me realising that I&#39;m not explaining it well enough.", "edited": false, "comment_id": 296715, "creation_date": 1232979614, "score": 1, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "Please submit your five year olds resume to my HR personell. ;)", "edited": false, "comment_id": 299007, "creation_date": 1233027393, "score": 2, "owner": {"display_name": "Eddie Parker", "reputation": 2828, "user_id": 56349, "user_type": "registered", "accept_rate": 70}}, {"body": "Explain memory management to a 5-year old.", "edited": false, "comment_id": 315678, "creation_date": 1233468469, "score": 0, "owner": {"display_name": "Eduardo Le\u00f3n", "reputation": 6485, "user_id": 46571, "user_type": "registered", "accept_rate": 93}}, {"body": "Explain x = 4 * 7 to a 5-year old.", "edited": false, "comment_id": 333874, "creation_date": 1233930925, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "this is a pretty controversial opinion - so why the downvote? i&#39;m confused", "edited": false, "comment_id": 344587, "creation_date": 1234260177, "score": 0, "owner": {"display_name": "Simon_Weaver", "reputation": 39886, "user_id": 16940, "user_type": "registered", "accept_rate": 62}}, {"body": "Maybe if you program like a five year old. I think a programmer requires a certain amount of maturity and understanding to help them understand it all a little more clearly; like why Bubble Sort is not scalable and what an Octree is and what it is useful for...", "edited": false, "comment_id": 716695, "creation_date": 1243308624, "score": 0, "owner": {"display_name": "Robert Massaioli", "reputation": 7504, "user_id": 83446, "user_type": "registered", "accept_rate": 100}}, {"body": "I started when I was 4, so +1.", "edited": false, "comment_id": 894946, "creation_date": 1246694386, "score": 0, "owner": {"display_name": "Coding With Style", "reputation": 868, "user_id": 130718, "user_type": "registered"}}, {"body": "Programming <i>can</i> be done by a 5-year-old. <i>Good</i> programming takes experience, self-discipline, and self-criticism, not traits found in your average 5-year-old (or many professionals, either).", "edited": false, "comment_id": 1438112, "creation_date": 1255683935, "score": 3, "owner": {"display_name": "DevSolar", "reputation": 26262, "user_id": 60281, "user_type": "registered", "accept_rate": 97}}, {"body": "This isn&#39;t controversial, it&#39;s both stupid and factually incorrect.  You are only telling a computer &quot;what&quot; to do if you are using a purely function language.  You&#39;ll find that writing functional code takes a bit more than &quot;common sense&quot; and more mental capacity than that of a five year old.  If you are using an imperative language such as C then you are not just telling the computer what to do, you have to explicitly state &quot;how&quot; to do &quot;what&quot; you want.", "edited": false, "comment_id": 1775481, "creation_date": 1260388489, "score": 0, "owner": {"display_name": "Tim", "reputation": 481, "user_id": 180606, "user_type": "registered"}}, {"body": "i started programming when i was 1. i used a 1bit stream to tell my mother change my pampers. it was {guess}.", "edited": false, "comment_id": 1806676, "creation_date": 1260821844, "score": 4, "owner": {"display_name": "Behrooz", "reputation": 790, "user_id": 179795, "user_type": "registered", "accept_rate": 81}}], "creation_date": 1232953253, "comment_count": 10, "score": 1, "owner": {"display_name": "mweiss", "reputation": 595, "user_id": 33254, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 12}, {"community_owned_date": 1232953647, "body": "<p><strong>If you need to read the manual, the software isn't good enough.</strong></p>\n\n<p>Plain and simple :-)</p>\n", "is_accepted": false, "tags": [], "answer_id": 479018, "down_vote_count": 0, "last_activity_date": 1257011078, "comments": [{"body": "I agree that there is a lot of software that could do without a manual if it had been designed with a greater emphasis on usability. But even when you can figure out stuff without a manual, having a manual might let you figure out stuff quicker!", "edited": false, "comment_id": 296703, "creation_date": 1232979307, "score": 1, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "I kinda agree with this. I&#39;ve seen quite a few applications that were badly designed but sometimes the bad design is by the customers own request (this is how our previous application worked and we don&#39;t want to change to much even if it sucks). In these circumstances, whether something is good enough or not is not decided by the development team but by the customer. You may disagree but the customer is always right ;-)", "edited": false, "comment_id": 2710130, "creation_date": 1271925063, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}], "creation_date": 1232953647, "comment_count": 2, "score": 9, "owner": {"display_name": "simonjpascoe", "reputation": 527, "user_id": 31387, "user_type": "registered", "accept_rate": 87}, "last_editor": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}, "last_edit_date": 1257011078, "up_vote_count": 9}, {"community_owned_date": 1232978913, "body": "<p><strong>Microsoft Windows is the best platform for software development.</strong></p>\n\n<p><strong>Reasoning:</strong>\nMicrosoft spoils its developers with excellent and cheap development tools, the platform and its API's are well documented, the platform is evolving at a rappid rate which creates a lot of opportunities for developers, The OS has a large user base which is important for obvious commercial reasons, there is a big community of Windows developers, I haven't yet been fired for choosing Microsoft.</p>\n", "answer_id": 479894, "tags": [], "down_vote_count": 4, "last_activity_date": 1232978913, "comments": [{"body": "There are plenty of free well documented stuff for Linux, and the message boards are filled with activity. I&#39;ve done both and I always have just as much hassle setting up a development environment on either OS.", "edited": false, "comment_id": 325653, "creation_date": 1233762271, "score": 0, "owner": {"display_name": "Bernard", "reputation": 789, "user_id": 254455, "user_type": "registered", "accept_rate": 95}}, {"body": "I think the keyword here is &quot;spoils&quot;. Little else in my life (no even the bullies at school) have caused me so much pain and suffering as anything which originated from M$.", "edited": false, "comment_id": 413907, "creation_date": 1235984670, "score": 1, "owner": {"display_name": "Aaron Digulla", "reputation": 178090, "user_id": 34088, "user_type": "registered", "accept_rate": 78}}, {"body": "Microsoft Windows is the best platform for developing Desktop Applications.  That isn&#39;t controversial.  It is the worst platform for developing anything low level - such as filesystems, or kernel code.  It is also worse in general for webapps.", "edited": false, "comment_id": 739038, "creation_date": 1243737285, "score": 0, "owner": {"display_name": "nosatalian", "reputation": 1956, "user_id": 110296, "user_type": "registered", "accept_rate": 83}}, {"body": "The only platform that &#39;spoils&#39; its dev with &quot;excellent and cheap development tools&quot; is Apple with Xcode. Sure - VisualStudio Express is free. But VS isn&#39;t. Linux tools are just as free as the Mac OS X ones, but harder to setup merely because you don&#39;t just copy Xcode to your Applications folder and start going.", "edited": false, "comment_id": 1470524, "creation_date": 1256187579, "score": 1, "owner": {"display_name": "warren", "reputation": 13593, "user_id": 4418, "user_type": "registered", "accept_rate": 94}}, {"body": "I never had the same experience with windows. I switched to Linux and am much happier with it.", "edited": false, "comment_id": 2022722, "creation_date": 1263859673, "score": 0, "owner": {"display_name": "Shawn Buckley", "reputation": 331, "user_id": 228372, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1232978913, "comment_count": 5, "score": 5, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}, "is_accepted": false, "up_vote_count": 9}, {"community_owned_date": 1232982879, "body": "<p><strong>Most developers don't have a clue</strong></p>\n\n<p>Yup .. there you go. I've said it. I find that from all the developers that I personally know .. just a handful are actually good. Just a handful understand that code should be tested ... that the Object Oriented approach to developing is actually there to help you. It frustrates me to no end that there are people who get the title of developer while in fact all they can do is copy and paste a bit of source code and then execute it.</p>\n\n<p>Anyway ... I'm glad initiatives like stackoverflow are being started. It's good for developers to wonder. Is there a better way? Am I doing it correctly? Perhaps I could use this technique to speed things up, etc ...</p>\n\n<p>But nope ... the majority of developers just learn a language that they are required by their job and stick with it until they themselves become old and grumpy developers that have no clue what's going on. All they'll get is a big paycheck since they are simply older than you.</p>\n\n<p>Ah well ... life is unjust in the IT community and I'll be taking steps to ignore such people in the future. Hooray!</p>\n", "answer_id": 480106, "tags": [], "down_vote_count": 0, "last_activity_date": 1232982879, "comments": [{"body": "Sometimes I wonder if employers are to blame for not acknowledging, demanding, and rewarding good talent.", "edited": false, "comment_id": 325645, "creation_date": 1233762120, "score": 0, "owner": {"display_name": "Bernard", "reputation": 789, "user_id": 254455, "user_type": "registered", "accept_rate": 95}}], "creation_date": 1232982879, "comment_count": 1, "score": 10, "owner": {"display_name": "SpoBo", "reputation": 1333, "user_id": 48417, "user_type": "registered", "accept_rate": 88}, "is_accepted": false, "up_vote_count": 10}, {"community_owned_date": 1232983058, "body": "<p><strong>Social skills matter more than technical skills</strong></p>\n\n<p>Agreable but average programmers with good social skills will have a more successful carreer than outstanding programmers who are disagreable people. </p>\n", "is_accepted": false, "tags": [], "answer_id": 480119, "down_vote_count": 0, "last_activity_date": 1233049541, "comments": [{"body": "+1  I couldn&#39;t agree more. Building software is a social activity more than a technical one.", "edited": false, "comment_id": 1422137, "creation_date": 1255469647, "score": 0, "owner": {"display_name": "JuanZe", "reputation": 5305, "user_id": 166611, "user_type": "registered", "accept_rate": 75}}], "creation_date": 1232983058, "comment_count": 1, "score": 7, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}, "last_editor": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}, "last_edit_date": 1233049541, "up_vote_count": 7}, {"community_owned_date": 1232984841, "body": "<p><strong>Software Development is a VERY small subset of Computer Science.</strong></p>\n\n<p>People sometimes seem to think the two are synonymous, but in reality there are so many aspects to computer science that the average developer rarely (if ever) gets exposed to.  Depending on one's career goals, I think there are a lot of CS graduates out there who would probably have been better off with some sort of Software Engineering education.</p>\n\n<p>I value education highly, have a BS in Computer science and am pursuing a MS in it part time, but I think that many people who obtain these degrees treat the degree as a means to an end and benefit very little.  I know plenty of people who took the same Systems Software course I took, wrote the same assembler I wrote, and to this day see no value in what they did.</p>\n", "answer_id": 480230, "tags": [], "down_vote_count": 1, "last_activity_date": 1232984841, "comments": [{"body": "++ I wish it worked both ways. I think software engineers could learn a lot from CS, and I <i>know</i> CS could learn a lot from SE, such as what <i>actually matters</i> to the real world.", "edited": false, "comment_id": 1482628, "creation_date": 1256332751, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1232984841, "comment_count": 1, "score": 3, "owner": {"display_name": "Tina Orooji", "reputation": 1502, "user_id": 58404, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1233027132, "body": "<p><strong>Source files are <em>SO</em> 20th century.</strong></p>\n\n<p>Within the body of a function/method, it makes sense to represent procedural logic as linear text. Even when the logic is not strictly linear, we have good programming constructs (loops, if statements, etc) that allow us to cleanly represent non-linear operations using linear text.</p>\n\n<p>But there is no reason that I should be required to divide my classes among distinct files or sort my functions/methods/fields/properties/etc in a particular order within those files. Why can't we just throw all those things within a big database file and let the IDE take care of sorting everything dynamically? If I want to sort my members by name then I'll click the member header on the members table. If I want to sort them by accessibility then I'll click the accessibility header. If I want to view my classes as an inheritence tree, then I'll click the button to do that.</p>\n\n<p>Perhaps classes and members could be viewed spatially, as if they were some sort of entities within a virtual world. If the programmer desired, the IDE could automatically position classes &amp; members that use each other <em>near</em> each other so that they're easy to find. Imaging being able to zoom in and out of this virtual world. Zoom all the way out and you can namespace galaxies with little class planets in them. Zoom in to a namespace and you can see class planets with method continents and islands and inner classes as orbitting moons. Zoom in to a method, and you see... the source code for that method.</p>\n\n<p>Basically, my point is that in modern languages it doesn't matter what file(s) you put your classes in or in what order you define a class's members, so why are we still forced to use these archaic practices? Remember when Gmail came out and Google said \"search, don't sort\"? Well, why can't the same philosophy be applied to programming languages?</p>\n", "is_accepted": false, "tags": [], "answer_id": 482255, "down_vote_count": 1, "last_activity_date": 1237816834, "comments": [{"body": "Stored proc code like T-SQL or PL/SQL is not stored in files.", "edited": false, "comment_id": 301394, "creation_date": 1233084593, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "The main problem is that a picture is worth 1000 vague words while you can be very specific in text. But I agree that we really need a &quot;birds eye development&quot; mode where you can hack together a rough outline and let the IDE fill 99% of the gaps with defaults.", "edited": false, "comment_id": 414721, "creation_date": 1236003751, "score": 0, "owner": {"display_name": "Aaron Digulla", "reputation": 178090, "user_id": 34088, "user_type": "registered", "accept_rate": 78}}, {"body": "I believe smalltalk does this. Yet strangely it&#39;s still not a widely used language.", "edited": false, "comment_id": 800809, "creation_date": 1244947264, "score": 0, "owner": {"display_name": "Jeremy Wall", "reputation": 12124, "user_id": 51233, "user_type": "registered"}}, {"body": "+1 for really cool idea. -1 not terribly controversial.  I like the idea of perhaps seeing method declarations in a 3d space with calls to other methods shown using lines / color / something.  Perhaps it would be a mess, perhaps it would make an overall code overview easier to grasp?  Dunno how much of this smalltalk does as suggested above.", "edited": false, "comment_id": 960959, "creation_date": 1247835338, "score": 0, "owner": {"display_name": "Ray", "reputation": 911, "user_id": 138060, "user_type": "registered", "accept_rate": 79}}, {"body": "YES! I really wish programmers get over the cult of linear plaintext soon. Modern IDEs do take steps in the right direction, but it&#39;s not enough - they are still just annotating and working on the plaintext, bending it already almost to the breaking point. Instead of hackarounds, we should be shifting the paradigm into expressing application design in forms that are much more suitable for it!", "edited": false, "comment_id": 1418909, "creation_date": 1255439887, "score": 0, "owner": {"display_name": "Ilari Kajaste", "reputation": 1009, "user_id": 115807, "user_type": "registered", "accept_rate": 90}}, {"body": "YES! I miss Visual Age for Java every day I get into Eclipse. VAJ had no source files, just some kind of binary repository :S", "edited": false, "comment_id": 1422094, "creation_date": 1255469189, "score": 0, "owner": {"display_name": "JuanZe", "reputation": 5305, "user_id": 166611, "user_type": "registered", "accept_rate": 75}}, {"body": "Boo! I currently work on a project that is doing all of its development in one of your magic IDEs. The problem with abstracting details is that they have to be defined somewhere. The more obscure (according to your IDE designer), the harder the detail is to find. And if the detail happens to be causing a bug or compiler error, you get to hunt through the IDE for where that detail is. It may be possible to have one of those magic IDEs some day, but not without the Mozart of the HCI field and not without enormous vendor lock-in.", "edited": false, "comment_id": 2310217, "creation_date": 1267144764, "score": 0, "owner": {"display_name": "thebretness", "reputation": 445, "user_id": 174701, "user_type": "registered"}}, {"body": "The stuff you&#39;re talking about is called Model Driven Development. I don&#39;t know what the right alternative is, but I suspect it is a blending of scripts, OO, and low-level code in one program, using the right language for each job.", "edited": false, "comment_id": 2310231, "creation_date": 1267144852, "score": 0, "owner": {"display_name": "thebretness", "reputation": 445, "user_id": 174701, "user_type": "registered"}}, {"body": "IDEs are overrated", "edited": false, "comment_id": 3178170, "creation_date": 1277272528, "score": 0, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}], "creation_date": 1233027132, "comment_count": 9, "score": 31, "owner": {"display_name": "Walt D", "reputation": 1009, "user_id": 44003, "user_type": "registered", "accept_rate": 75}, "last_editor": {"display_name": "Walt D", "reputation": 1009, "user_id": 44003, "user_type": "registered", "accept_rate": 75}, "last_edit_date": 1237816834, "up_vote_count": 32}, {"community_owned_date": 1233050774, "body": "<p><strong>You can't measure productivity by counting lines of code.</strong></p>\n\n<p>Everyone knows this, but for some reason the practice still persists!</p>\n", "answer_id": 482844, "tags": [], "down_vote_count": 1, "last_activity_date": 1233050774, "comments": [{"body": "Do you realise the topic of the thread is &quot;controversy&quot;? How is your statement controversial?", "edited": false, "comment_id": 300031, "creation_date": 1233066164, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "it depends who you&#39;re talking to. Metrics obsessed managers at my last job found it a very controversial point of view.", "edited": false, "comment_id": 300977, "creation_date": 1233079536, "score": 0, "owner": {"display_name": "Noel Walters", "reputation": 1573, "user_id": 53030, "user_type": "registered", "accept_rate": 86}}], "creation_date": 1233050774, "comment_count": 2, "score": 6, "owner": {"display_name": "Noel Walters", "reputation": 1573, "user_id": 53030, "user_type": "registered", "accept_rate": 86}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1233072772, "body": "<p>I don't believe that any question related to optimization should be flooded with a chant of the misquoted \"Premature optimization is the root of all evil\"s because code that is optimized into obfuscation is what makes coding fun</p>\n", "answer_id": 484014, "tags": [], "down_vote_count": 5, "last_activity_date": 1233072772, "creation_date": 1233072772, "comment_count": 0, "score": 1, "owner": {"display_name": "Demur Rumed", "reputation": 117, "user_id": 40172, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 6}, {"community_owned_date": 1233690007, "body": "<p><strong>Never implement anything as a singleton.</strong></p>\n\n<p>You can decide not to construct more than one instance,\nbut always ensure you implementation can handle more.</p>\n\n<p>I have yet to find any scenario where using a singleton \nis actually the right thing to do.</p>\n\n<p>I got into some very heated discussions over this in the last few years,\nbut in the end I was always right.</p>\n", "answer_id": 508584, "tags": [], "down_vote_count": 1, "last_activity_date": 1233690007, "comments": [{"body": "I can give you one: to abstract away, transparently, support for different JVM versions, using reflection to load a support instance for J5, gracefully defaulting to one for J2 if the JVM is &lt; J5 - e.g. getting time is nano seconds.", "edited": false, "comment_id": 333109, "creation_date": 1233914043, "score": 0, "owner": {"display_name": "Lawrence Dol", "reputation": 33129, "user_id": 8946, "user_type": "registered", "accept_rate": 84}}], "creation_date": 1233690007, "comment_count": 1, "score": 2, "owner": {"display_name": "Andreas", "reputation": 1072, "user_id": 54710, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1233706148, "body": "<p><strong>Premature optimization</strong> is <strong>NOT</strong> the root of all evil! Lack of proper planning is the root of all evil.   </p>\n\n<p>Remember the old naval saw </p>\n\n<blockquote>\n  <p>Proper Planning Prevents P*ss Poor\n  Performance!</p>\n</blockquote>\n", "is_accepted": false, "tags": [], "answer_id": 509561, "down_vote_count": 1, "last_activity_date": 1248106543, "comments": [{"body": "+1 Amen! I couldn&#39;t agree more.", "edited": false, "comment_id": 504020, "creation_date": 1238171640, "score": 0, "owner": {"display_name": "torial", "reputation": 10206, "user_id": 13990, "user_type": "registered", "accept_rate": 86}}, {"body": "Naval, not navel. :)", "edited": false, "comment_id": 928211, "creation_date": 1247272377, "score": 0, "owner": {"display_name": "John", "reputation": 1373, "user_id": 63488, "user_type": "registered", "accept_rate": 100}}, {"body": "Thanks John for the catch.", "edited": false, "comment_id": 973196, "creation_date": 1248106566, "score": 0, "owner": {"display_name": "WolfmanDragon", "reputation": 3819, "user_id": 13491, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1233706148, "comment_count": 3, "score": 8, "owner": {"display_name": "WolfmanDragon", "reputation": 3819, "user_id": 13491, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "WolfmanDragon", "reputation": 3819, "user_id": 13491, "user_type": "registered", "accept_rate": 100}, "last_edit_date": 1248106543, "up_vote_count": 9}, {"community_owned_date": 1233787382, "body": "<p><strong>Useful and clean high-level abstractions are significantly more important than performance</strong></p>\n\n<p><em>one example:</em></p>\n\n<p>Too often I watch peers spending hours writing over complicated Sprocs, or massive LINQ queries which return unintuitive anonymous types for the sake of \"performance\".</p>\n\n<p>They could achieve almost the same performance but with considerably cleaner, intuitive code.</p>\n", "answer_id": 513732, "tags": [], "down_vote_count": 1, "last_activity_date": 1233787382, "creation_date": 1233787382, "comment_count": 0, "score": 2, "owner": {"display_name": "andy", "reputation": 2967, "user_id": 62653, "user_type": "registered", "accept_rate": 85}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1233853087, "body": "<p>\"Don't call virtual methods from constructors\".  This is only sometimes a PITA, but is only so because in C# I cannot decide at which point in a constructor to call my base class's constructor.  Why not?  The .NET framework allows it, so what good reason is there for C# to not allow it?</p>\n\n<p>Damn!</p>\n", "answer_id": 516801, "tags": [], "down_vote_count": 0, "last_activity_date": 1233853087, "creation_date": 1233853087, "comment_count": 0, "score": 0, "owner": {"display_name": "Peter Morris", "reputation": 2671, "user_id": 61311, "user_type": "registered", "accept_rate": 76}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1234102573, "body": "<p>\"Everything should be made as simple as possible, but not simpler.\" - Einstein.</p>\n", "answer_id": 525784, "tags": [], "down_vote_count": 1, "last_activity_date": 1234102573, "comments": [{"body": "Well that is controversial, quoting Einstein :)", "edited": false, "comment_id": 528952, "creation_date": 1238844581, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}], "creation_date": 1234102573, "comment_count": 1, "score": 4, "owner": {"display_name": "JeffO", "reputation": 5854, "user_id": 61339, "user_type": "registered", "accept_rate": 87}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1234103060, "body": "<p>Here's mine:</p>\n\n<p>\"You don't need (textual) syntax to express objects and their behavior.\"</p>\n\n<p>I subscribe to the ideas of Jonathan Edwards and his Subtext project - <a href=\"http://alarmingdevelopment.org/\" rel=\"nofollow\">http://alarmingdevelopment.org/</a></p>\n", "answer_id": 525793, "tags": [], "down_vote_count": 0, "last_activity_date": 1234103060, "comments": [{"body": "Johnathan Edwards?  Okay, I&#39;m getting a class: &quot;Person&quot; Anyone here need a &quot;Person&quot; class? This Person class passed quite abruptly, something to do with the chest. The Person class also has a Validate() method, it wants me to validate it. You should always validate the classes around you every day!", "edited": false, "comment_id": 339514, "creation_date": 1234128077, "score": 0, "owner": {"display_name": "Peter Morris", "reputation": 2671, "user_id": 61311, "user_type": "registered", "accept_rate": 76}}], "creation_date": 1234103060, "comment_count": 1, "score": 1, "owner": {"display_name": "Bjarke Ebert", "reputation": 1063, "user_id": 31890, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1234301183, "body": "<p><b>The users aren't idiots -- you are.</b></p>\n\n<p>So many times I've heard developers say \"so-and-so is an idiot\" and my response is typically \"he may be an idiot but you allowed him to be one.\"</p>\n", "answer_id": 534282, "tags": [], "down_vote_count": 0, "last_activity_date": 1234301183, "comments": [{"body": "I say: If someone does something stupid, I&#39;m missing an important fact.", "edited": false, "comment_id": 414733, "creation_date": 1236003819, "score": 3, "owner": {"display_name": "Aaron Digulla", "reputation": 178090, "user_id": 34088, "user_type": "registered", "accept_rate": 78}}, {"body": "Even though i&#39;m guilty of this sometimes, I have to agree.", "edited": false, "comment_id": 438411, "creation_date": 1236595280, "score": 0, "owner": {"display_name": "Neil Aitken", "reputation": 5575, "user_id": 13803, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1234301183, "comment_count": 2, "score": 25, "owner": {"display_name": "Austin Salonen", "reputation": 30673, "user_id": 4068, "user_type": "registered", "accept_rate": 89}, "is_accepted": false, "up_vote_count": 25}, {"community_owned_date": 1234347527, "body": "<p><strong>To produce great software, you need domain specialists as much as good developers.</strong></p>\n", "answer_id": 536220, "tags": [], "down_vote_count": 1, "last_activity_date": 1234347527, "comments": [{"body": "This is as controversial as a cup of coffee.", "edited": false, "comment_id": 1423284, "creation_date": 1255490391, "score": 8, "owner": {"display_name": "Andrew not the Saint", "reputation": 2042, "user_id": 23670, "user_type": "registered", "accept_rate": 80}}, {"body": "@Andrew from NZSG Like many of the sentences posed here, it has been &quot;controversial&quot; during my past work experience, because more usually than not software projects have been developed without keeping that in mind. If something happens most of the times and I disagree with it, I qualify my own opinion as somewhat &quot;controversial&quot;, even though it is obviously that I am right.", "edited": false, "comment_id": 1424088, "creation_date": 1255506305, "score": 0, "owner": {"display_name": "Daniel Daranas", "reputation": 16413, "user_id": 96780, "user_type": "registered", "accept_rate": 100}}, {"body": "@Andrew: I once phoned a company about a Java developer job ad, long time ago. They asked me, &quot;Do you know Java?&quot; Yes. &quot;Could you write a book-keeping application?&quot; Err, by myself? No. With a financial advisor next to me, yes. &quot;I see. Thank you for your interest.&quot; WTF?", "edited": false, "reply_to_user": {"display_name": "Andrew not the Saint", "reputation": 2042, "user_id": 23670, "user_type": "registered", "accept_rate": 80}, "comment_id": 3601276, "creation_date": 1281482234, "score": 0, "owner": {"display_name": "Amadan", "reputation": 66802, "user_id": 240443, "user_type": "registered", "accept_rate": 83}}], "creation_date": 1234347527, "comment_count": 3, "score": 23, "owner": {"display_name": "Daniel Daranas", "reputation": 16413, "user_id": 96780, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 24}, {"community_owned_date": 1234697606, "body": "<p><strong>\"Programmers are born, not made.\"</strong></p>\n", "answer_id": 550752, "tags": [], "down_vote_count": 0, "last_activity_date": 1234697606, "creation_date": 1234697606, "comment_count": 0, "score": 4, "owner": {"display_name": "Elroy", "reputation": 460, "user_id": 56097, "user_type": "registered", "accept_rate": 78}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1234849690, "body": "<p><strong>I believe in the <a href=\"http://www.python.org/dev/peps/pep-0020/\" rel=\"nofollow\">Zen of Python</a></strong></p>\n", "answer_id": 555653, "tags": [], "down_vote_count": 0, "last_activity_date": 1234849690, "creation_date": 1234849690, "comment_count": 0, "score": 4, "owner": {"display_name": "Andrew Szeto", "reputation": 712, "user_id": 1653137, "user_type": "registered", "accept_rate": 50}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1235080089, "body": "<p>That, erm, <strong>people should comment their code</strong>? It seems to be pretty controversial around here...</p>\n\n<p>The code only tells me <em>what actually it does</em>; not what it was <strong>supposed to do</strong></p>\n\n<p>The time I see a function calculating the <a href=\"http://www.asx.com.au/products/futures/interest_rates/bondspread.htm\" rel=\"nofollow\">point value of an Australian Bond Future</a> is the time I want to see some comments that indicate what the coder thought the calculation should be!</p>\n", "answer_id": 567329, "tags": [], "down_vote_count": 1, "last_activity_date": 1235080089, "creation_date": 1235080089, "comment_count": 0, "score": 3, "owner": {"display_name": "oxbow_lakes", "reputation": 79448, "user_id": 16853, "user_type": "registered", "accept_rate": 92}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1235116549, "body": "<p>People complain about removing 'goto' from the language. I happen to think that any sort of conditional jump is highly overrated and that 'if' 'while' 'switch' and a general purpose 'for' loop are highly overrated and should be used with extreme caution.</p>\n\n<p>Everytime you make a comparison and conditional jump a tiny bit of complexity is added and this complexity adds up quickly once the call stack gets a couple hundred items deep.</p>\n\n<p>My first choice is to avoid the conditional, but if it isn't practical my next preference is to keep the conditional complexity in constructors or factory methods.</p>\n\n<p>Clearly this isn't practical for many projects and algorithms (like control flow loops), but it is something I enjoy pushing on.</p>\n\n<p>-Rick</p>\n", "answer_id": 568641, "tags": [], "down_vote_count": 0, "last_activity_date": 1235116549, "creation_date": 1235116549, "comment_count": 0, "score": 1, "owner": {"display_name": "Rick", "reputation": 2675, "user_id": 67753, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1236594296, "body": "<h2>Estimates are for me, not for you</h2>\n\n<p>Estimates are a useful tool for me, as development line manager, to plan what my team is working on.</p>\n\n<p>They are not a promise of a feature's delivery on a specific date, and they are not a stick for driving the team to work harder.</p>\n\n<p>IMHO if you force developers to commit to estimates you get the <em>safest possible figure</em>.</p>\n\n<p>For instance - </p>\n\n<blockquote>\n  <p>I think a feature will probably take me around 5 days. There's a small chance of an issue that would make it take 30 days.</p>\n  \n  <p>If the estimates are just for planning then we'll all work to 5 days, and account for the small chance of an issue should it arise.</p>\n  \n  <p>However - if meeting that estimate is required as a promise of delivery what estimate do you think gets given?</p>\n</blockquote>\n\n<p>If a developer's bonus or job security depends on meeting an estimate do you think they give their most accurate guess or the one they're most certain they will meet?</p>\n\n<p>This opinion of mine is controversial with other management, and has been interpreted as me trying to worm my way out of having proper targets, or me trying to cover up poor performance. It's a tough sell every time, but one that I've gotten used to making.</p>\n", "is_accepted": false, "tags": [], "answer_id": 625709, "down_vote_count": 0, "last_activity_date": 1236596914, "comments": [{"body": "+1 &quot;do you want the estimate for average case or worst case?&quot; &quot;average case&quot; &quot;then don&#39;t treat that estimate as a hard limit&quot; duh!", "edited": false, "comment_id": 1751929, "creation_date": 1260137242, "score": 0, "owner": {"display_name": "OJW", "reputation": 1510, "user_id": 46478, "user_type": "registered", "accept_rate": 54}}], "creation_date": 1236594296, "comment_count": 1, "score": 11, "owner": {"display_name": "Keith", "reputation": 55880, "user_id": 905, "user_type": "registered", "accept_rate": 80}, "last_editor": {"display_name": "Keith", "reputation": 55880, "user_id": 905, "user_type": "registered", "accept_rate": 80}, "last_edit_date": 1236596914, "up_vote_count": 11}, {"community_owned_date": 1236598577, "body": "<p><strong>Most Programmers are Useless at Programming</strong></p>\n\n<p>(You did say 'controversial')</p>\n\n<p>I was sat in my office at home pondering some programming problem and I ended up looking at my copy of 'Complete Spectrum ROM Disassembly' on my bookshelf and thinking:</p>\n\n<p>\"How many programmers today could write the code used in the Spectrum's ROM?\"</p>\n\n<p>The Spectrum, for those unfamiliar with it, had a Basic programming language that could do simple 2D graphics (lines, curves), file IO of a sort and floating point calculations including transendental functions all in 16K of Z80 code (a &lt; 5Mhz 8bit processor that had no FPU or integer multiply). Most graduates today would have trouble writing a 'Hello World' program that was that small.</p>\n\n<p>I think the problem is that the absolute number of programmers that could do that has hardly changed but as a percentage it is quickly approaching zero. Which means that the quality of code being written is decreasing as more sub-par programmers enter the field.</p>\n\n<p>Where I'm currently working, there are seven programmers including myself. Of these, I'm the only one who keeps up-to-date by reading blogs, books, this site, etc and doing programming 'for fun' at home (my wife is constantly amazed by this). There's one other programmer who is keen to write well structured code (interestingly, he did a lot of work using Delphi) and to refactor poor code. The rest are, well, not great. Thnking about it, you could describe them as 'brute force' programmers - will force inappropriate solutions until they work after a fashion (e.g. using C# arrays with repeated array.Resize to dynamically add items instead of using a List).</p>\n\n<p>Now, I don't know if the place I'm currently at is typical, although from my previous positions I would say it is. With the benefit of hindsight, I can see common patterns  that certainly didn't help any of the projects (lack of peer review of code for one).</p>\n\n<p>So, 5 out of 7 programmers are rubbish.</p>\n\n<p>Skizz</p>\n", "answer_id": 625896, "tags": [], "down_vote_count": 0, "last_activity_date": 1236598577, "comments": [{"body": "There are fewer programmers with the skillset to tackle a problem that no longer matters. Now we have higher levels of abstraction that allow the big picture to come together in more loosely coupled, highly OO ways. Its not that I&#39;m not smart enough to write it, its that I can write something better", "edited": false, "comment_id": 454961, "creation_date": 1236919722, "score": 1, "owner": {"display_name": "Steve", "reputation": 5408, "user_id": 48552, "user_type": "registered", "accept_rate": 77}}, {"body": "BIOS&#39;s and hardware drivers probably feature a lot of assembler. Many embedded systems are assembler only (or primitive C compilers if you&#39;re lucky). Even with high level OO, how many coders could write the equivalent of a Spectrum basic interpreter.", "edited": false, "comment_id": 455378, "creation_date": 1236936952, "score": 1, "owner": {"display_name": "Skizz", "reputation": 33755, "user_id": 1898, "user_type": "registered", "accept_rate": 50}}], "creation_date": 1236598577, "comment_count": 2, "score": 12, "owner": {"display_name": "Skizz", "reputation": 33755, "user_id": 1898, "user_type": "registered", "accept_rate": 50}, "is_accepted": false, "up_vote_count": 12}, {"community_owned_date": 1236599718, "body": "<p><strong>Automatic Updates Lead to Poorer Quality Software that is Less Secure</strong></p>\n\n<p><em>The Idea</em></p>\n\n<p>A system to keep users' software up to date with the latest bug fixes and security patches.</p>\n\n<p><em>The Reality</em></p>\n\n<p>Products have to be shipped by fixed deadlines, often at the expense of QA. Software is then released with many bugs and security holes in order to meet the deadline in the knowledge that the 'Automatic Update' can be used to fix all the problems later.</p>\n\n<p>Now, the piece of software that really made me think of this is VS2K5. At first, it was great, but as the updates were installed the software is slowly getting worse. The biggest offence was the loss of macros - I had spent a long time creating a set of useful VBA macros to automate some of the code I write - but apparently there was a security hole and instead of fixing it the macro system was disabled. Bang goes a really useful feature: recording keystrokes and repeated replaying of them.</p>\n\n<p>Now, if I were really paranoid, I could see Automatic Updates as a way to get people to upgrade their software by slowly installing code that breaks the system more often. As the system becomes more unreliable, users are tempted to pay out for the next version with the promise of better reliablity and so on.</p>\n\n<p>Skizz</p>\n", "answer_id": 625926, "tags": [], "down_vote_count": 1, "last_activity_date": 1236599718, "comments": [{"body": "So security updates make software less secure?", "edited": false, "comment_id": 447507, "creation_date": 1236777006, "score": 2, "owner": {"display_name": "Greg Dean", "reputation": 14334, "user_id": 1200558, "user_type": "registered", "accept_rate": 76}}, {"body": "No, software is released early, before being fully tested, because it can be updated later - there is less emphasis on creating bug-free code and more on getting it released. This gives a &#39;window of opportunity&#39; to malicious code.", "edited": false, "comment_id": 447638, "creation_date": 1236779213, "score": 0, "owner": {"display_name": "Skizz", "reputation": 33755, "user_id": 1898, "user_type": "registered", "accept_rate": 50}}, {"body": "It&#39;s not as if MS had a shining reputation for secure, bug-free software before automatic updates came along.", "edited": false, "comment_id": 1945231, "creation_date": 1262890959, "score": 0, "owner": {"display_name": "Nate C-K", "reputation": 4093, "user_id": 219155, "user_type": "registered", "accept_rate": 75}}, {"body": "I&#39;d actually say the reverse is true, overall security and stability have improved in more recent MS software.", "edited": false, "comment_id": 1946607, "creation_date": 1262902128, "score": 0, "owner": {"display_name": "Nate C-K", "reputation": 4093, "user_id": 219155, "user_type": "registered", "accept_rate": 75}}], "creation_date": 1236599718, "comment_count": 4, "score": 2, "owner": {"display_name": "Skizz", "reputation": 33755, "user_id": 1898, "user_type": "registered", "accept_rate": 50}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1236918744, "body": "<p><strong>It's fine if you don't know. But you're fired if you can't even google it.</strong></p>\n\n<p>Internet is a tool. It's not making you stupider if you're learning from it.</p>\n", "answer_id": 641471, "tags": [], "down_vote_count": 0, "last_activity_date": 1236918744, "creation_date": 1236918744, "comment_count": 0, "score": 35, "owner": {"display_name": "Tordek", "reputation": 5093, "user_id": 77542, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 35}, {"community_owned_date": 1237169846, "body": "<p>There is a difference between a programmer and a developer.  An example: a programmer writes pagination logic, a developer integrates pagination on a page.</p>\n", "answer_id": 649053, "tags": [], "down_vote_count": 0, "last_activity_date": 1237169846, "creation_date": 1237169846, "comment_count": 0, "score": 1, "owner": {"display_name": "MenoRikey", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1237171402, "body": "<p><strong>The customer is not always right.</strong></p>\n\n<p>In most cases that I deal with, the customer is the product owner, aka \"the business\".  All too often, developers just code and do not try to provide a vested stake in the product.  There is too much of a misconception that the IT Department is a \"company within a company\", which is a load of utter garbage.</p>\n\n<p>I feel my role is that of helping the business express their ideas - with the mutual understanding that I take an interest in understanding the business so that I can provide the best experience possible.  And that route implies that there will be times that the product owner asks for something that he/she feels is the next revolution in computing leaving someone to either agree with that fact, or explain the more likely reason of why no one does something a certain way.  It is mutually beneficial, because the product owner understands the thought that goes into the product, and the development team understands that they do more than sling code.</p>\n\n<p>This has actually started to lead us down the path of <strong>increased</strong> productivity.  How?  Since the communication has improved due to disagreements on both sides of the table, it is more likely that we come together earlier in the process and come to a mutually beneficial solution to the product definition.</p>\n", "answer_id": 649095, "tags": [], "down_vote_count": 1, "last_activity_date": 1237171402, "comments": [{"body": "this is one of those answers I would like to give +100 to", "edited": false, "comment_id": 1212516, "creation_date": 1251988677, "score": 0, "owner": {"display_name": "DanSingerman", "reputation": 19672, "user_id": 43965, "user_type": "registered", "accept_rate": 70}}, {"body": "sigh.. so true! can I buy you a beer?", "edited": false, "comment_id": 2051167, "creation_date": 1264136720, "score": 0, "owner": {"display_name": "Alex Nolasco", "reputation": 7051, "user_id": 65694, "user_type": "registered", "accept_rate": 46}}], "creation_date": 1237171402, "comment_count": 2, "score": 22, "owner": {"display_name": "joseph.ferris", "reputation": 8898, "user_id": 15906, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 23}, {"community_owned_date": 1237176272, "body": "<p><strong>I can live without closures.</strong></p>\n\n<p>Looks like nowadays everyone and their mother want closures to be present in a language because it is the greatest invention since sliced bread. And I think it is just another hype. </p>\n", "answer_id": 649226, "tags": [], "down_vote_count": 0, "last_activity_date": 1237176272, "comments": [{"body": "I thought along the same lines before I used LINQ, at which point I became a complete convert.", "edited": false, "comment_id": 462875, "creation_date": 1237184338, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I agreed before I used them with multithreading in C#. Access to the previous thread&#39;s local variables is enormously useful and greatly simplifies syntax.", "edited": false, "comment_id": 529049, "creation_date": 1238849563, "score": 0, "owner": {"display_name": "Steve", "reputation": 5408, "user_id": 48552, "user_type": "registered", "accept_rate": 77}}], "creation_date": 1237176272, "comment_count": 2, "score": 5, "owner": {"display_name": "serg", "reputation": 51981, "user_id": 20128, "user_type": "registered", "accept_rate": 75}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1237298356, "body": "<p><strong>It IS possible to secure your application.</strong></p>\n\n<p>Every time someone asks a question about how to either prevent users from pirating their app, or secure it from hackers, the answer is that it's impossible. Nonsense. If you truly believe that, then leave your doors unlocked (or just take them off the house!). And don't bother going to the doctor, either. You're mortal - trying to cure a sickness is just postponing the inevitable.</p>\n\n<p>Just because someone <em>might</em> be able to pirate your app or hack your system doesn't mean you shouldn't try to <em>reduce</em> the number of people who will do so. What you're really doing is making it require more work to break in than the intruder/pirate is willing to do. </p>\n\n<p>Just like a deadbolt and ADT on your house will keep the burglars out, reasonable anti-piracy and security measures will keep hackers and pirates out of your way. Of course, the more tempting it would be for them to break in, the more security you need.</p>\n", "answer_id": 654382, "tags": [], "down_vote_count": 2, "last_activity_date": 1237298356, "comments": [{"body": "It is not possible to make an application 100% secure because, in the end, applications are just a collection of bits on a storage device that can be copied and modified. Encryption is not copy protection. It&#39;s a trade off between the inevitable pirate and time to develop the defenses.", "edited": false, "comment_id": 471989, "creation_date": 1237388152, "score": 1, "owner": {"display_name": "Skizz", "reputation": 33755, "user_id": 1898, "user_type": "registered", "accept_rate": 50}}, {"body": "@Skizz: My point is that the impossibility of 100% security is not a reason to give up on &quot;ample&quot; security. You can make your app not worth pirating/hacking just like you can make your house not worth breaking into.", "edited": false, "comment_id": 472216, "creation_date": 1237391007, "score": 0, "owner": {"display_name": "Jon B", "reputation": 30155, "user_id": 27414, "user_type": "registered", "accept_rate": 76}}], "creation_date": 1237298356, "comment_count": 2, "score": 4, "owner": {"display_name": "Jon B", "reputation": 30155, "user_id": 27414, "user_type": "registered", "accept_rate": 76}, "is_accepted": false, "up_vote_count": 6}, {"community_owned_date": 1237576005, "body": "<p>Logger configs are a waste of time.  Why have them if it means learning a new syntax, especially one that fails silently?  Don't get me wrong, I love good logging.  I love logger inheritance and adding formatters to handlers to loggers.  But why do it in a config file?</p>\n\n<p>Do you want to make changes to logging code without recompiling?  Why?  If you put your logging code in a separate class, file, whatever, what difference will it make?</p>\n\n<p>Do you want to distribute a configurable log with your product to clients?  Doesn't this just give too much information anyway?</p>\n\n<p>The most frustrating thing about it is that popular utilities written in a popular language tend to write good APIs in the format that language specifies.  Write a Java logging utility and I know you've generated the javadocs, which I know how to navigate.  Write a domain specific language for your logger config and what do we have?  Maybe there's documentation, but where the heck is it?  You decide on a way to organize it, and I'm just not interested in following your line of thought.</p>\n", "answer_id": 667526, "tags": [], "down_vote_count": 1, "last_activity_date": 1237576005, "comments": [{"body": "&quot;Do you want to make changes to logging code without recompiling?Why?&quot; All the time. I have a deployed server that has no reason to log the finest detail when it&#39;s serving production traffic, but I have to be able to turn logging on when something goes wrong. Perhaps you just don&#39;t work on the type of applications for which this is necessary, but it&#39;s not a superfluous feature.", "edited": false, "comment_id": 600160, "creation_date": 1240696102, "score": 2, "owner": {"display_name": "Kai", "reputation": 2701, "user_id": 75458, "user_type": "registered", "accept_rate": 88}}, {"body": "Fair enough.  That&#39;s actually a scenario that I have some experience with...but the difference is that the compile time in the cases I deal with is &lt; 2 min.  I know I have to restart the server if I change the logging config...recompiling doesn&#39;t seem like such a big deal to me in light of that.", "edited": false, "comment_id": 600229, "creation_date": 1240698889, "score": 0, "owner": {"display_name": "David Berger", "reputation": 5836, "user_id": 50272, "user_type": "registered", "accept_rate": 89}}], "creation_date": 1237576005, "comment_count": 2, "score": 0, "owner": {"display_name": "David Berger", "reputation": 5836, "user_id": 50272, "user_type": "registered", "accept_rate": 89}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1237576690, "body": "<p><strong>Keep your business logic out of the DB. Or at a minimum, keep it very lean. Let the DB do what it's intended to do. Let code do what code is intended to do. Period.</strong></p>\n\n<blockquote>\n  <p>If you're a one man show (basically, arrogant &amp; egotistical, not listening to the wisdom of others just because you're in control), do as you wish. I don't believe you're that way since you're asking to begin with. But I've met a few when it comes to this subject and felt the need to specify.</p>\n  \n  <p>If you work with DBA's but do your own DB work, keep clearly defined partitions between your business objects, the gateway between them and the DB, and the DB itself.</p>\n  \n  <p>If you work with DBA's and aren't allowed to do your DB work (either by policy or because they're premadonnas), you're very close to being a fool placing your reliance on them to get anything done by putting code-dependant business logic in your DB entities (sprocs, functions, etc.).</p>\n  \n  <p>If you're a DBA, make developers keep their DB entities clean &amp; lean.</p>\n</blockquote>\n", "is_accepted": false, "tags": [], "answer_id": 667569, "down_vote_count": 1, "last_activity_date": 1240411536, "comments": [{"body": "I&#39;m keeping my fingers crossed I don&#39;t have to work with you, or ever maintain your leavings.  Being a one man show should be an incentive to do as well as possible--because without other developers to cross-check your work you are already predisposed to writing strange and queer code.", "edited": false, "comment_id": 585484, "creation_date": 1240345144, "score": 0, "owner": {"display_name": "STW", "reputation": 18717, "user_id": 60724, "user_type": "registered", "accept_rate": 82}}, {"body": "As for the database: if your database is just a bucket that holds anything then I agree that business logic has no place (SQLite is a great DB for these systems)--however if you are holding business data in the database then it is ultimately the DBs responsibility to ensure that its contents are valid.  This is never more true than in cases where a database is consumed or maintained by multiple clients.", "edited": false, "comment_id": 585491, "creation_date": 1240345227, "score": 1, "owner": {"display_name": "STW", "reputation": 18717, "user_id": 60724, "user_type": "registered", "accept_rate": 82}}, {"body": "LOL...by saying, &quot;do as you wish&quot;, I wasn&#39;t saying I do so. I was pointing more toward those who believe they&#39;re an island and don&#39;t need to listen to anyone. Basically, arrogant &amp; egotistical dev&#39;s who believe their crack don&#39;t stink. I&#39;ve met a few. My apologies for not clarifying. I&#39;ll edit my statement after this comment.", "edited": false, "comment_id": 588237, "creation_date": 1240411306, "score": 0, "owner": {"display_name": "Boydski", "reputation": 1453, "user_id": 32532, "user_type": "registered", "accept_rate": 57}}, {"body": "And sorry, but I disagree with your last statement. It&#39;s not up to the DB to validate data beyond relational database theory of data retention. It &quot;can&quot;, but ultimately it&#39;s up to those placing the data there. Most enterprise orgs don&#39;t allow their dev&#39;s the DBA hat. The DBA&#39;s make sure things are run properly according to standards and know nothing of the business behind the data.", "edited": false, "comment_id": 588245, "creation_date": 1240411390, "score": 0, "owner": {"display_name": "Boydski", "reputation": 1453, "user_id": 32532, "user_type": "registered", "accept_rate": 57}}, {"body": "In those cases, business logic should predominantly be kept where it can be controlled by those who know the business logic: in front of the DAL and out of the database.", "edited": false, "comment_id": 588249, "creation_date": 1240411429, "score": 0, "owner": {"display_name": "Boydski", "reputation": 1453, "user_id": 32532, "user_type": "registered", "accept_rate": 57}}, {"body": "@Bodosky: If integrity of data is spread in each application that access the data I wish good luck to your clients/employer. A DB <b>Architect</b> necessarily needs to know intimately about the business, a DB <b>Administrator</b> not.", "edited": false, "comment_id": 1559517, "creation_date": 1257473113, "score": 1, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}, {"body": "Agreed. However, most enterprises would be lucky to get an architect vs. an admin. Why? Because the enterprise just won&#39;t loosen the purse strings enough to pay those folks what they&#39;re worth to keep them around long enough to have a vested interest and thereby become intimate with the business. So they end up with DB admins who aren&#39;t as interested in the business as they are in RDBMS principles.", "edited": false, "comment_id": 1594399, "creation_date": 1257959983, "score": 0, "owner": {"display_name": "Boydski", "reputation": 1453, "user_id": 32532, "user_type": "registered", "accept_rate": 57}}, {"body": "It&#39;s not unusual in an Oracle shop to have large parts of the application inside the DB. PL/SQL is actually a good language to express business logic.", "edited": false, "comment_id": 1642100, "creation_date": 1258576477, "score": 0, "owner": {"display_name": "ammoQ", "reputation": 20878, "user_id": 65464, "user_type": "registered", "accept_rate": 89}}, {"body": "I&#39;m actually an Oracle n00b (slightly more than a year now). And I&#39;m finding out that PL/SQL is much different than SQL Server in a lot of ways. So my paradigm is slowly shifting concerning your comment. At least where Oracle is concerned. However, even in the shop I&#39;m at now, there&#39;s minimal BL and it all resides in packages. I&#39;d be very curious to see how performance is affected by tens of millions of transactions per day.", "edited": false, "comment_id": 1698230, "creation_date": 1259338929, "score": 0, "owner": {"display_name": "Boydski", "reputation": 1453, "user_id": 32532, "user_type": "registered", "accept_rate": 57}}], "creation_date": 1237576690, "comment_count": 9, "score": 5, "owner": {"display_name": "Boydski", "reputation": 1453, "user_id": 32532, "user_type": "registered", "accept_rate": 57}, "last_editor": {"display_name": "Boydski", "reputation": 1453, "user_id": 32532, "user_type": "registered", "accept_rate": 57}, "last_edit_date": 1240411536, "up_vote_count": 6}, {"community_owned_date": 1237577468, "body": "<p><strong>MS Access* is a Real Development Tool and it can be used without shame by professional programmers</strong></p>\n\n<p>Just because a particular platform is a magnet for hacks and secretaries who think they are programmers shouldn't besmirch the platform itself.  Every platform has its benefits and drawbacks.</p>\n\n<p>Programmers who bemoan certain platforms or tools or belittle them as \"toys\" are more likely to be far less knowledgable about their craft than their ego has convinced them they are. It is a definite sign of overconfidence for me to hear a programmer bash any environment that they have not personally used extensively enough to know well.</p>\n\n<p>* Insert just about any maligned tool (VB, PHP, etc.) here.</p>\n", "answer_id": 667637, "tags": [], "down_vote_count": 0, "last_activity_date": 1237577468, "comments": [{"body": "I agree by proxy...  a former colleague manipulated and massaged an Access-backed production system into a highly efficient system that was perfectly suited for its needs.  Although with the availability of other desktop-based DB platforms such as SQL Compact (aka SQL Compact Edition, aka SQL Mobile) Access is becomming more of a developer&#39;s occasional assistant than his tool.  It&#39;s like a toothpick kind of--developers can use it, and maybe even use it professionally (give me back my CD!)...", "edited": false, "comment_id": 585465, "creation_date": 1240344846, "score": 0, "owner": {"display_name": "STW", "reputation": 18717, "user_id": 60724, "user_type": "registered", "accept_rate": 82}}, {"body": "I do have to disagree about PHP, at least in the pre/early asp.net days.  PHP was a very valid competitor to classic ASP, and it wasn&#39;t until ASP.NET came along and IIS 6 was released that PHP began to lose its functionality.  LAMP blew away IIS/asp in my opinion, and judging by the dominance of Apache servers running the web I would say the internet would more or less agree.", "edited": false, "comment_id": 585473, "creation_date": 1240345010, "score": 0, "owner": {"display_name": "STW", "reputation": 18717, "user_id": 60724, "user_type": "registered", "accept_rate": 82}}, {"body": "I got one agree and one disagree comment. I should at least get an upvote for that since the OP wanted controversial opinions. =)", "edited": false, "comment_id": 585652, "creation_date": 1240347355, "score": 0, "owner": {"display_name": "JohnFx", "reputation": 26119, "user_id": 30018, "user_type": "registered", "accept_rate": 94}}, {"body": "disagree.i decided to not to use it when i was 11.because autonumber  s..ks.", "edited": false, "comment_id": 1806471, "creation_date": 1260820232, "score": 0, "owner": {"display_name": "Behrooz", "reputation": 790, "user_id": 179795, "user_type": "registered", "accept_rate": 81}}, {"body": "Ok, I agree, but they really should standardize the SQL. Its crap having to work with access specific queries.", "edited": false, "comment_id": 2580983, "creation_date": 1270397688, "score": 0, "owner": {"display_name": "JL.", "reputation": 19694, "user_id": 41543, "user_type": "registered", "accept_rate": 83}}, {"body": "@JL: Access SQL is a superset of ANSI SQL as far as I know. So you don&#39;t HAVE to use Access specific SQL.", "edited": false, "comment_id": 2581179, "creation_date": 1270400986, "score": 0, "owner": {"display_name": "JohnFx", "reputation": 26119, "user_id": 30018, "user_type": "registered", "accept_rate": 94}}], "creation_date": 1237577468, "comment_count": 6, "score": 2, "owner": {"display_name": "JohnFx", "reputation": 26119, "user_id": 30018, "user_type": "registered", "accept_rate": 94}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1237579832, "body": "<p><strong>All source code and comments should be written in English</strong></p>\n\n<p>Writing source code and/or comments in languages other than English makes it less reusable and more difficult to debug if you don't understand the language they are written in.</p>\n\n<p>Same goes for SQL tables, views, and columns, especially when abbrevations are used. If they aren't abbreviated, I might be able to translate the table/column name on-line, but if they're abbreviated all I can do is SELECT and try to decipher the results.</p>\n", "answer_id": 667785, "tags": [], "down_vote_count": 2, "last_activity_date": 1237579832, "comments": [{"body": "If English is the main language of wherever you work, I guess. Otherwise, that&#39;s just stupid. This suggestion seems pointless imo.", "edited": false, "comment_id": 896296, "creation_date": 1246745440, "score": 0, "owner": {"display_name": "Coding With Style", "reputation": 868, "user_id": 130718, "user_type": "registered"}}, {"body": "Especially when you code ABAP in SAP-Systems it&#39;s always funny to read some German comments, that nobody out of German speaking regions will ever understand. (I&#39;m a native German speaker so it&#39;s double funny)", "edited": false, "comment_id": 988828, "creation_date": 1248310350, "score": 0, "owner": {"display_name": "capfu", "reputation": 147, "user_id": 139627, "user_type": "registered"}}, {"body": "All comments in English is great - if you speak English, and the maintainers will as well. I am a native English speaker, but ocassionally plop other languages in just because I can. If I were coding for an app that would be used and eventually maintained in, say, France - I&#39;d expect the comments to be in French", "edited": false, "comment_id": 1470388, "creation_date": 1256183865, "score": 3, "owner": {"display_name": "warren", "reputation": 13593, "user_id": 4418, "user_type": "registered", "accept_rate": 94}}, {"body": "Using multiple languages in code makes it harder to read as you have to switch between the two languages in your head.  English only (with native terms if needed in parenthesis).", "edited": false, "comment_id": 1482109, "creation_date": 1256327194, "score": 0, "owner": {"display_name": "Thorbj\u00f8rn Ravn Andersen", "reputation": 43814, "user_id": 53897, "user_type": "registered", "accept_rate": 57}}, {"body": "That&#39;s not controversial, is simply idiotic when you know that a piece of code will never leave a non English-speaking country. I know perfectly that my English sucks and I don&#39;t want to inflict it on my fellow countryman programmers. Of course, if I&#39;m quoting documentation in English I don&#39;t translate it.", "edited": false, "comment_id": 1559011, "creation_date": 1257465629, "score": 0, "owner": {"display_name": "MaD70", "reputation": 3103, "user_id": 189973, "user_type": "registered"}}, {"body": "This only makes sense for open source application where you expect (or hope) to get a number of people from all over the place to help. Otherwise just use what ever language suits you best.", "edited": false, "comment_id": 2382074, "creation_date": 1268061400, "score": 0, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "You guys may not intend for your code to leave your country, but none of us can see the future. Our ERP system is written half in Dutch and half in English because a Dutch company bought an American company and rolled two different products into one. How can I be expected to know what gbkmut means?", "edited": false, "comment_id": 2382474, "creation_date": 1268064213, "score": 0, "owner": {"display_name": "Scott", "reputation": 3535, "user_id": 6126, "user_type": "registered", "accept_rate": 100}}, {"body": "If you work for a customer and that customer has a set of terms he is using in his trade, then your code will be using them. If that customer is not using English, you will end up translating them to and from English. This will probably end up causing bugs and misunderstandings. Yes it sucks adding Norwegian (in my case) domain names in the code and it makes your head spin for a while, but at least you are on the same page as your customer.", "edited": false, "comment_id": 4488773, "creation_date": 1289505310, "score": 0, "owner": {"display_name": "Knubo", "reputation": 4433, "user_id": 217672, "user_type": "registered"}}], "creation_date": 1237579832, "comment_count": 8, "score": 17, "owner": {"display_name": "Scott", "reputation": 3535, "user_id": 6126, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 19}, {"community_owned_date": 1237887072, "body": "<p><strong>Enable multiple checkout</strong>\nIf we improve enough discipline of the developers, we will get much more efficiency from this setting by auto merge of source control.</p>\n", "answer_id": 676661, "tags": [], "down_vote_count": 1, "last_activity_date": 1237887072, "comments": [{"body": "If you have enough discipline you don&#39;t need source control. But nobody can have that much discipline.", "edited": false, "comment_id": 529061, "creation_date": 1238850407, "score": 0, "owner": {"display_name": "GoatRider", "reputation": 878, "user_id": 78840, "user_type": "registered"}}, {"body": "Main ability of source control is to return to any earlier state of the design. Current middle or large software project cannot run without it.  Though enabling multiple checkout option is only my prefered little setting.", "edited": false, "comment_id": 544472, "creation_date": 1239254626, "score": 0, "owner": {"display_name": "sesame", "reputation": 385, "user_id": 81783, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1237887072, "comment_count": 2, "score": 3, "owner": {"display_name": "sesame", "reputation": 385, "user_id": 81783, "user_type": "registered", "accept_rate": 60}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1238167628, "body": "<p><strong>A programming task is only fun while it's impossible, that is up til the point where you've convinced yourself you'll be able to solve it successfully.</strong> </p>\n\n<p>This, I suppose, is why so many of my projects end up halfway finished in a folder called \"to<code>_</code>be<code>_</code>continued\".</p>\n", "answer_id": 690222, "tags": [], "down_vote_count": 0, "last_activity_date": 1238167628, "creation_date": 1238167628, "comment_count": 0, "score": 12, "owner": {"display_name": "Mia Clarke", "reputation": 5420, "user_id": 83075, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 12}, {"community_owned_date": 1238173185, "body": "<p>My controversial opinion:\n<strong>OO Programming is vastly overrated [and treated like a silver bullet], when it is really just <em>another</em> tool in the toolbox, nothing more!</strong></p>\n", "answer_id": 690598, "tags": [], "down_vote_count": 0, "last_activity_date": 1238173185, "creation_date": 1238173185, "comment_count": 0, "score": 7, "owner": {"display_name": "torial", "reputation": 10206, "user_id": 13990, "user_type": "registered", "accept_rate": 86}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1238415215, "body": "<p><strong>Developers overuse databases</strong> </p>\n\n<p>All too often, developers store data in a DBMS that should be in code or in file(s).  I've seen a one-column-one-row table that stored the 'system password' (separate from the user table.)  I've seen constants stored in databases.  I've seen databases that would make a grown coder cry.</p>\n\n<p>There is some sort of mystical awe that the offending coders have of the DBMS--the database can do anything, but they don't know how it works.  DBAs practice a black art.  It also allows responsibility transference: <em>\"The database is too slow,\"</em>  <em>\"The database did it\"</em>  and other excuses are common.</p>\n\n<p>Left unchecked, these coders go on develop databases-within-databases, systems-within-systems.  (There is a name to this anti-pattern, but I forget what it is.)</p>\n", "answer_id": 696950, "tags": [], "down_vote_count": 1, "last_activity_date": 1238415215, "comments": [{"body": "Guessing you are talking about EAV (Entity Attribute Value) database design, which has been the bane of my life for about a year now :)", "edited": false, "comment_id": 1964083, "creation_date": 1263160740, "score": 0, "owner": {"display_name": "spooner", "reputation": 185, "user_id": 133735, "user_type": "registered", "accept_rate": 75}}], "creation_date": 1238415215, "comment_count": 1, "score": 8, "owner": {"display_name": "Stu Thompson", "reputation": 20094, "user_id": 2961, "user_type": "registered", "accept_rate": 81}, "is_accepted": false, "up_vote_count": 9}, {"community_owned_date": 1238417842, "body": "<p><strong>Most of programming job interview questions are pointless. Especially those figured out by programmers.</strong></p>\n\n<p>It is a common case, at least according to my &amp; my friends experience, where a puffed up \nprogrammer, asks you some tricky wtf he spent weeks googling for. The funny thing about that is, you get home and google it within a minute. It's like they often try to beat you up with their <em>sophisticated weapons</em>, instead of checking if you'd be a comprehensive, pragmatic team player to work with. </p>\n\n<p>Similar stupidity IMO is when you're being asked for highly accessible fundamentals, like: \"Oh wait, let me see if you can pseudo-code that <code>insert_name_here</code>-algorithm on a sheet of paper (sic!)\". Do I really need to remember it while applying for a high-level programming job? Should I efficiently solve problems or puzzles?</p>\n", "answer_id": 697073, "tags": [], "down_vote_count": 0, "last_activity_date": 1238417842, "comments": [{"body": "+1 fully agree, its also usually the case that during the interview they check to see if you are the rocket scientist they require. Asking you all sorts of rough questions. Then we you get the job, you realize actually what they were after was a coding monkey, who shouldn&#39;t get too involved in business decisions. I know this is not always the case, but usually the work you end up doing is very easy compared to the interview process, where you would think they were looking for someone to develop organic rocket fuel.", "edited": false, "comment_id": 2580977, "creation_date": 1270397580, "score": 0, "owner": {"display_name": "JL.", "reputation": 19694, "user_id": 41543, "user_type": "registered", "accept_rate": 83}}, {"body": "You say it like it is bro&#39;", "edited": false, "comment_id": 2710103, "creation_date": 1271924668, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}], "creation_date": 1238417842, "comment_count": 2, "score": 7, "owner": {"display_name": "ohnoes", "reputation": 2629, "user_id": 53330, "user_type": "registered", "accept_rate": 83}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1238841418, "body": "<p><strong>BAD IDE's make the programming language weak</strong></p>\n\n<p>Good programming IDEs really make working with certain languages easier and better to oversee. I have been bit spoiled in my professional carreer, the companies I worked for always had the latest Visual Studio's ready to use.</p>\n\n<p>For about 8 months, I have been doing a lot of Cocoa next to my work and the Xcode editor makes working with that language just way too difficult. Overloads are difficult to find and the overal way of handling open files just makes your screen really messy, really fast. It's really a shame, because Cocoa is a cool and powerful language to work with.</p>\n\n<p>Ofcourse die-hard Xcode fans will now vote down my post, but there are so many IDEs that are really a lot better.</p>\n\n<p><strong>People making a switch to IT, who just shouldn't</strong></p>\n\n<p>This is a copy/paste from a blog post of mine, made last year.</p>\n\n<p><hr /></p>\n\n<p>The experiences I have are mainly about the dutch market, but they also might apply to any other market.</p>\n\n<p>We (as I group all Software Engineers together) are currently in a market that might look very good for us. Companies are desperately trying to get Software Engineers (from now on SE) , no matter the price. If you switch jobs now, you can demand almost anything you want. In the Netherlands there is a trend now to even give 2 lease cars with a job, just to get you to work for them. How weird is that? How am I gonna drive 2 cars at the same time??</p>\n\n<p>Of course this sounds very good for us, but this also creates a very unhealthy situation..</p>\n\n<p>For example:\nIf you are currently working for a company which is growing fast and you are trying to attract more co-workers, to finally get some serious software development from the ground, there is no-one to be found without offering sky high salaries. Trying to find quality co-workers is very hard. A lot of people are attracted to our kind of work, because of the good salaries, but this also means that a lot of people without the right passion are entering our market.</p>\n\n<p>Passion, yes, I think that is the right word. When you have passion for your job, your job won\u2019t stop at 05:00 PM. You will keep refreshing all of your development RSS feeds all night. You will search the internet for the latest technologies that might be interesting to use at work. And you will start about a dozen new \u2018promising\u2019 projects a month, just to see if you can master that latest technology you just read about a couple of weeks ago (and find an useful way of actually using that technology).</p>\n\n<p>Without that passion, the market might look very nice (because of the cars, money and of course the hot girls we attract), but I don\u2019t think it will be that interesting very long as, let\u2019s say: fireman or fighter-pilot.</p>\n\n<p>It might sound that I am trying to protect my own job here and partly that is true. But I am also trying to protect myself against the people I don\u2019t want to work with. I want to have heated discussions about stuff I read about. I want to be able to spar with people that have the same \u2018passion\u2019 for the job as I have. I want colleagues that are working with me for the right reasons.</p>\n\n<p>Where are those people I am looking for!!</p>\n", "is_accepted": false, "tags": [], "answer_id": 716874, "down_vote_count": 0, "last_activity_date": 1238841766, "comments": [{"body": "Cocoa isn&#39;t a language - it&#39;s an API <a href=\"http://en.wikipedia.org/wiki/Cocoa_(API)\" rel=\"nofollow\">en.wikipedia.org/wiki/Cocoa_(API)</a> in Objective-C", "edited": false, "comment_id": 1470551, "creation_date": 1256188139, "score": 0, "owner": {"display_name": "warren", "reputation": 13593, "user_id": 4418, "user_type": "registered", "accept_rate": 94}}, {"body": "I use one IDE for every langauge.... gvim.", "edited": false, "comment_id": 1666939, "creation_date": 1258935618, "score": 0, "owner": {"display_name": "user192230", "user_type": "does_not_exist"}}], "creation_date": 1238841418, "comment_count": 2, "score": 5, "owner": {"display_name": "Wim Haanstra", "reputation": 2913, "user_id": 69313, "user_type": "registered", "accept_rate": 84}, "last_editor": {"display_name": "Wim Haanstra", "reputation": 2913, "user_id": 69313, "user_type": "registered", "accept_rate": 84}, "last_edit_date": 1238841766, "up_vote_count": 5}, {"community_owned_date": 1238843186, "body": "<p>There are only 2 kinds of people who use C (/C++): Those who don't know any other language, and those who are too lazy to learn a new one.</p>\n", "answer_id": 716908, "tags": [], "down_vote_count": 2, "last_activity_date": 1238843186, "comments": [{"body": "I worked with a guy who was doing C/C++ for 15 years, and flat out refused to learn anything else. He considered anything other than C/C++ to be a child&#39;s toy, which included any managed frameworks .NET or Java and any web related technology. Therefore the only thing he could program is Win32 desktop applications. And he made it very clear he&#39;s not going to learn anything new, and will be doing C/C++ to his retirement.", "edited": false, "comment_id": 584063, "creation_date": 1240325551, "score": 0, "owner": {"display_name": "WebMatrix", "reputation": 831, "user_id": 63121, "user_type": "registered", "accept_rate": 100}}, {"body": "And those who do real, interesting work like kernel development..", "edited": false, "comment_id": 739059, "creation_date": 1243737940, "score": 1, "owner": {"display_name": "nosatalian", "reputation": 1956, "user_id": 110296, "user_type": "registered", "accept_rate": 83}}, {"body": "And those who feel C++ is still the best way despite knowing Java and C#.", "edited": false, "comment_id": 928196, "creation_date": 1247272094, "score": 1, "owner": {"display_name": "luiscubal", "reputation": 10472, "user_id": 32775, "user_type": "registered", "accept_rate": 92}}, {"body": "And those who work with embedded systems.", "edited": false, "comment_id": 1456051, "creation_date": 1256010087, "score": 1, "owner": {"display_name": "Jeanne Pindar", "reputation": 508, "user_id": 147062, "user_type": "registered"}}], "creation_date": 1238843186, "comment_count": 4, "score": 1, "owner": {"display_name": "Two", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1238845715, "body": "<p><strong>Schooling ruins creativity</strong> *</p>\n\n<p>*\"Ruins\" means \"potentially ruins\"</p>\n\n<p>Granted, schooling is needed! Everyone needs to learn stuff before they can use it - however, all those great ideas you had about how to do a certain strategy for a specific business-field can easily be thrown into that deep brain-void of ours if we aren't careful.</p>\n\n<p>As you learn new things and acquire new skills, you are also boxing your mindset on those new things and skills, since they apparently are \"the way to do it\". Being humans, we tend to listen to authorities - being it a teacher, a consultant, a co-worker or even a site / forum you like. We should ALWAYS be aware of that \"flaw\" in how our mind works. Listen to what other people say, but don't take what they say for granted. Always keep a critic point-of-view on every new information you receive.</p>\n\n<p>Instead of thinking \"Wow, that's smart. I will use that from now on\", we should think \"Wow, that's smart. Now, how can I use that in my personal toolbox of skills and ideas\".</p>\n", "answer_id": 716948, "tags": [], "down_vote_count": 0, "last_activity_date": 1238845715, "creation_date": 1238845715, "comment_count": 0, "score": 3, "owner": {"display_name": "cwap", "reputation": 6718, "user_id": 2372835, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1238848161, "body": "<p><strong>Commenting is bad</strong></p>\n\n<p>Whenever code needs comments to explain what it is doing, the code is too complicated. I try to always write code that is self-explanatory enough to not need very many comments.</p>\n", "answer_id": 716994, "tags": [], "down_vote_count": 1, "last_activity_date": 1238848161, "comments": [{"body": "I was going to vote this down, but then I realized these are SUPPOSED to be controversial, and voted it up.", "edited": false, "comment_id": 529048, "creation_date": 1238849530, "score": 0, "owner": {"display_name": "GoatRider", "reputation": 878, "user_id": 78840, "user_type": "registered"}}, {"body": "I don&#39;t think good code replaces comments any more than comments replace good code. You have to do both. Plus, these days there&#39;s a half decent chance that your comments might well be generating the documentation (and IntelliSense) so you&#39;d better get used to adding those comments!", "edited": false, "comment_id": 681355, "creation_date": 1242536146, "score": 1, "owner": {"display_name": "Tim Long", "reputation": 5509, "user_id": 98516, "user_type": "registered", "accept_rate": 70}}], "creation_date": 1238848161, "comment_count": 2, "score": 5, "owner": {"display_name": "Zifre", "reputation": 15414, "user_id": 83871, "user_type": "registered", "accept_rate": 88}, "is_accepted": false, "up_vote_count": 6}, {"community_owned_date": 1238851202, "body": "<p>I don't know if it's really controversial, but how about this: <strong>Method and function names are the best kind of commentary your code can have; if you find yourself writing a comment, turn the the piece of of code you're commenting into a function/method.</strong></p>\n\n<p>Doing this has the pleasant side-effect of forcing you to decompose your program well, avoids having comments that can quickly become out of sync with reality, gives you something you can grep the codebase for, and leaves your code with a fresh lemon odour.</p>\n", "answer_id": 717067, "tags": [], "down_vote_count": 0, "last_activity_date": 1238851202, "comments": [{"body": "This can be taken too far. Often there is a subtle business case for a particular method or implimentation strategy that you cannot convey without several lines of comments.", "edited": false, "comment_id": 731398, "creation_date": 1243547390, "score": 0, "owner": {"display_name": "Tom Leys", "reputation": 11459, "user_id": 11440, "user_type": "registered", "accept_rate": 100}}, {"body": "Quite true, but it&#39;s a rule of thumb rather than a hard rule. Indicating subtleties is, after all, what comments are best used for.", "edited": false, "comment_id": 733190, "creation_date": 1243591701, "score": 0, "owner": {"display_name": "Keith Gaughan", "reputation": 6510, "user_id": 8342, "user_type": "registered"}}], "creation_date": 1238851202, "comment_count": 2, "score": 11, "owner": {"display_name": "Keith Gaughan", "reputation": 6510, "user_id": 8342, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 11}, {"community_owned_date": 1239193838, "body": "<p><strong>HTML 5 + JavaScript will be the most used UI programming platform of the future.Flash,Silverlight,Java Applets etc. etc. are all going to die a silent death</strong></p>\n", "answer_id": 729739, "tags": [], "down_vote_count": 4, "last_activity_date": 1239193838, "comments": [{"body": "I don&#39;t think so, but I sure hope so!", "edited": false, "comment_id": 682064, "creation_date": 1242568809, "score": 1, "owner": {"display_name": "Zifre", "reputation": 15414, "user_id": 83871, "user_type": "registered", "accept_rate": 88}}, {"body": "Even Operas&#39; CEO think so <a href=\"http://news.zdnet.co.uk/software/0,1000000121,39655473,00.htm\" rel=\"nofollow\">news.zdnet.co.uk/software/0,1000000121,39655473,00.htm</a>", "edited": false, "comment_id": 716740, "creation_date": 1243309932, "score": 0, "owner": {"display_name": "HashName", "reputation": 434, "user_id": 28773, "user_type": "registered", "accept_rate": 86}}, {"body": "I think that the death of flash will be noisy.  :-)", "edited": false, "comment_id": 2560347, "creation_date": 1270081479, "score": 1, "owner": {"display_name": "Warren  P", "reputation": 26418, "user_id": 84704, "user_type": "registered", "accept_rate": 92}}, {"body": "I wouldn&#39;t shed a tear for Silverlight, activeX is another one that needs to die!", "edited": false, "comment_id": 2580966, "creation_date": 1270397344, "score": 0, "owner": {"display_name": "JL.", "reputation": 19694, "user_id": 41543, "user_type": "registered", "accept_rate": 83}}], "creation_date": 1239193838, "comment_count": 4, "score": 5, "owner": {"display_name": "HashName", "reputation": 434, "user_id": 28773, "user_type": "registered", "accept_rate": 86}, "is_accepted": false, "up_vote_count": 9}, {"community_owned_date": 1239233738, "body": "<p>Programming is in its infancy.  </p>\n\n<p>Even though programming languages and methodologies have been evolving very quickly for years now, we still have a long way to go.  The signs are clear:  </p>\n\n<ol>\n<li><p>Language Documentation is spread haphazardly across the internet (stackoverflow is helping here).</p></li>\n<li><p>Languages cannot evolve syntactically without breaking prior versions.</p></li>\n<li><p>Debugging is still often done with printf.</p></li>\n<li><p>Language libraries or other forms of large scale code reuse are still pretty rare.</p></li>\n</ol>\n\n<p>Clearly all of these are improving, but it would be nice if we all could agree that this is the beginning and not the end=).  </p>\n", "answer_id": 732286, "tags": [], "down_vote_count": 2, "last_activity_date": 1239233738, "comments": [{"body": "I have upvoted it although I believe this is completely uncontroversial to anyone who knows a <i>minimum</i> about programming methodology and history. We&#39;ve got a long road ahead, hence the many insulting jokes about programmers\u2019 abilities compared to architects, airplane pilots etc.", "edited": false, "comment_id": 552332, "creation_date": 1239481128, "score": 1, "owner": {"display_name": "Konrad Rudolph", "reputation": 272176, "user_id": 1968, "user_type": "registered", "accept_rate": 83}}, {"body": "Actual there are many who would say the opposite.  Everything interesting to do with programming languages was done in 60s with Lisp.  We are just waiting for people to figure this out - Witness the growing popularity of Python/Java closures, etc.  So this <i>is</i> controversial.", "edited": false, "comment_id": 739045, "creation_date": 1243737449, "score": 1, "owner": {"display_name": "nosatalian", "reputation": 1956, "user_id": 110296, "user_type": "registered", "accept_rate": 83}}, {"body": "printf debugging is actually mentioned on a higher-rated comment in this thread as being a good idea", "edited": false, "comment_id": 1751944, "creation_date": 1260137425, "score": 0, "owner": {"display_name": "OJW", "reputation": 1510, "user_id": 46478, "user_type": "registered", "accept_rate": 54}}], "creation_date": 1239233738, "comment_count": 3, "score": 13, "owner": {"display_name": "Evan Moran", "reputation": 1760, "user_id": 47593, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 15}, {"community_owned_date": 1239898695, "body": "<p><strong>Nobody Cares About Your Code</strong></p>\n\n<p>If you don't work on a government security clearance project and you're not in finance, odds are nobody cares what you're working on outside of your company/customer base.  No one's sniffing packets or trying to hack into your machine to read your source code.  This doesn't mean we should be flippant about security, because there are certainly a number of people who just want to wreak general havoc and destroy your hard work, or access stored information your company may have such as credit card data or identity data in bulk.  However, I think people are overly concerned about other people getting access to your source code and taking your ideas. </p>\n", "answer_id": 756904, "tags": [], "down_vote_count": 0, "last_activity_date": 1239898695, "comments": [{"body": "Hmmm, so basically you&#39;ve combined &quot;don&#39;t take yourself so seriously, nobody else does&quot; with &quot;it&#39;s not the implementation that is valuable but the idea&quot;.", "edited": false, "comment_id": 585671, "creation_date": 1240347705, "score": 0, "owner": {"display_name": "STW", "reputation": 18717, "user_id": 60724, "user_type": "registered", "accept_rate": 82}}, {"body": "...and I forget &quot;why lock the door, if someone wants to break in it&#39;s one more thing to have to replace&quot;", "edited": false, "comment_id": 585674, "creation_date": 1240347750, "score": 0, "owner": {"display_name": "STW", "reputation": 18717, "user_id": 60724, "user_type": "registered", "accept_rate": 82}}, {"body": "I disagree with your assessment.  To follow your analogy, it&#39;s more like thinking someone wants to break into your house to steal some timbers out of or take pictures of your collection of model ships that you painstakingly built because the finished ships might be valuable on the open market.  If they bother to break in, they&#39;d much rather just take your cash or TV.  My third sentence clearly states that I think security is still important, just for different reasons.", "edited": false, "comment_id": 588478, "creation_date": 1240414222, "score": 0, "owner": {"display_name": "brokenbeatnik", "reputation": 571, "user_id": 90709, "user_type": "registered"}}], "creation_date": 1239898695, "comment_count": 3, "score": 5, "owner": {"display_name": "brokenbeatnik", "reputation": 571, "user_id": 90709, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1240097352, "body": "<p><strong>It takes less time to produce well-documented code than poorly-documented code</strong></p>\n\n<p>When I say <em>well-documented</em> I mean with comments that communicate your intention clearly at every step. Yes, typing comments takes some time. And yes, your coworkers should all be smart enough to figure out what you intended just by reading your descriptive function and variable names and spelunking their way through all your executable statements. But it takes more of their time to do it than if you had just explained your intentions, and clear documentation is especially helpful when the logic of the code turns out to be wrong. Not that <em>your</em> code would ever be wrong...</p>\n\n<p>I firmly believe that if you time it from when you start a project to when you ship a defect-free product, writing well-documented code takes less time. For one thing, having to explain clearly what you're doing forces you to think it through clearly, and if you can't write a clear, concise explanation of what your code is accomplishing then it's probably not designed well. And for another purely selfish reason, well-documented and well-structured code is far easier to dump onto someone else to maintain - thus freeing the original author to go create the next big thing. I rarely if ever have to stop what I'm doing to explain how my code was meant to work because it's blatantly obvious to anyone who can read English (even if they can't read C/C++/C# etc.). And one more reason is, frankly, my memory just isn't that good! I can't recall what I had for breakfast yesterday, much less what I was thinking when I wrote code a month or a year ago. Perhaps your memory is far better than mine, but because I document my intentions I can quickly pick up wherever I left off and make changes without having to first figure out what I was thinking when I wrote it.</p>\n\n<p>That's why I document well - not because I feel some noble calling to produce pretty code fit for display, and not because I'm a purist, but simply because end-to-end it lets me ship quality software in less time.</p>\n", "answer_id": 764477, "tags": [], "down_vote_count": 2, "last_activity_date": 1240097352, "comments": [{"body": "It does indeed take less time, but also more skill, but that is the case with all languages whether spoken or written.  Words do not inheritly have meaning, rather they have meanings that individuals associate with them.  If I were to comment that &quot;cows are retromingent&quot; the huge majority of people would not know what I meant, whereas saying &quot;when cows pee it goes backwards&quot; would give a better understanding.  I comment in less time by typing faster :-D", "edited": false, "comment_id": 585661, "creation_date": 1240347554, "score": 0, "owner": {"display_name": "STW", "reputation": 18717, "user_id": 60724, "user_type": "registered", "accept_rate": 82}}, {"body": "..and my apologies for that comment, but that term is one of the few things I learned in college so I have to jump at the opportunity to use it.  Time for me to masticate.", "edited": false, "comment_id": 585665, "creation_date": 1240347620, "score": 0, "owner": {"display_name": "STW", "reputation": 18717, "user_id": 60724, "user_type": "registered", "accept_rate": 82}}], "creation_date": 1240097352, "comment_count": 2, "score": 3, "owner": {"display_name": "JayMcClellan", "reputation": 1305, "user_id": 92145, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1240344521, "body": "<p>...That the \"clarification of ideas\" should not be the sole responsibility of the developer...and yes xkcd made me use that specific phrase...</p>\n\n<p>To often we are handed project's that are specified in psuedo-meta-sorta-kinda-specific \"code\" if you want to call it that.  There are often product managers who draw up the initial requiements for a project and perform next to 0% of basic logic validation.</p>\n\n<p>I'm not saying that the technical approach shouldn't be drawn up by the architect, or that the speicifc implemntation shouldn't be the responsibility of the developer, but rather that it should the requirement of the product manager to ensure that their requirements are logically feasible.</p>\n\n<p>Personally I've been involved in too many \"simple\" projects that encounter a little scope creep here and there and then come across a \"small\" change or feature addition which contradicts previous requirements--whether implicitly or explicitly.  In these cases it is all too easy for the person requesting the borderline-impossible change to become enraged that developers can't make their dream a reality.</p>\n", "answer_id": 774364, "tags": [], "down_vote_count": 0, "last_activity_date": 1240344521, "creation_date": 1240344521, "comment_count": 0, "score": 2, "owner": {"display_name": "STW", "reputation": 18717, "user_id": 60724, "user_type": "registered", "accept_rate": 82}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1240695465, "body": "<p><strong>A Good Programmer Hates Coding</strong></p>\n\n<p>Similar to \"A Good Programmer is a Lazy Programmer\" and \"Less Code is Better.\" But by following this philosophy, I have managed to write applications which might otherwise use several times as much code (and take several times as much development time). In short: think before you code. Most of the parts of my own programs which end up causing problems later were parts that I actually enjoyed coding, and thus had too much code, and thus were poorly written. Just like this paragraph.</p>\n\n<p><strong>A Good Programmer is a Designer</strong></p>\n\n<p>I've found that programming uses the same concepts as design (as in, the same design concepts used in art). I'm not sure most other programmers find the same thing to be true; maybe it is a right brain/left brain thing. Too many programs out there are ugly, from their code to their command line user interface to their graphical user interface, and it is clear that the designers of these programs were not, in fact, designers.</p>\n\n<p>Although correlation may not, in this case, imply causation, I've noticed that as I've become better at design, I've become better at coding. The same process of making things <em>fit</em> and <em>feel right</em> can and should be used in both places. If code doesn't <em>feel right</em>, it will cause problems because either a) it is not right, or b) you'll assume it works in a way that \"feels right\" later, and it will then again be not right.</p>\n\n<p>Art and code are not on opposite ends of the spectrum; code can be used in art, and can itself be a form of art.</p>\n\n<p>Disclaimer: Not all of my code is pretty or \"right,\" unfortunately.</p>\n", "answer_id": 789775, "tags": [], "down_vote_count": 0, "last_activity_date": 1240695465, "comments": [{"body": "Definitely agree! Making beautiful applications requires beautiful code.", "edited": false, "comment_id": 1841225, "creation_date": 1261215061, "score": 1, "owner": {"display_name": "Matt", "reputation": 5035, "user_id": 145435, "user_type": "registered", "accept_rate": 70}}, {"body": "Only just seen this: agreed 100%. Ugly code is far more likely to be buggy. An appreciation of elegance and beauty is essential to good coding.", "edited": false, "comment_id": 2619845, "creation_date": 1270833208, "score": 1, "owner": {"display_name": "Keith Williams", "reputation": 1249, "user_id": 50189, "user_type": "registered", "accept_rate": 64}}], "creation_date": 1240695465, "comment_count": 2, "score": 21, "owner": {"user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 21}, {"community_owned_date": 1241028800, "body": "<p><strong>Tools, Methodology, Patterns, Frameworks, etc. are no substitute for a properly trained programmer</strong></p>\n\n<p>I'm sick and tired of dealing with people (mostly managers) who think that the latest tool, methodology, pattern or framework is a silver bullet that will eliminate the need for hiring experienced developers to write their software.  Although, as a consultant who makes a living rescuing at-risk projects, I shouldn't complain.</p>\n", "answer_id": 803575, "tags": [], "down_vote_count": 0, "last_activity_date": 1241028800, "comments": [{"body": "I will second &quot;Thou Shalt Not Complain&quot;.  Those who manage based on idealistic expedience and feel good tools always find themselves in trouble like this.  Unfortunately I have noticed that no matter how many times you deliver the reality that you need to use good people.  The bottom line bean counters always try to find the cheap/easy way out.  In the end they always have to poney up the money.  They either pony up to get it done correctly the first time or they pony up to have it fied properly by someone who chanrges a premium. Sometimes far in excess of the cost to do it right the 1st time.", "edited": false, "comment_id": 1011532, "creation_date": 1248714348, "score": 0, "owner": {"display_name": "Axxmasterr", "reputation": 101, "user_id": 145862, "user_type": "registered"}}], "creation_date": 1241028800, "comment_count": 1, "score": 7, "owner": {"display_name": "Jeff Leonard", "reputation": 1624, "user_id": 90316, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1241031736, "body": "<p>\"else\" is harmful.</p>\n", "answer_id": 803775, "tags": [], "down_vote_count": 1, "last_activity_date": 1241031736, "comments": [{"body": "What do you propose as an alternative?", "edited": false, "comment_id": 766304, "creation_date": 1244230028, "score": 0, "owner": {"display_name": "Matt Grande", "reputation": 6844, "user_id": 74727, "user_type": "registered", "accept_rate": 89}}, {"body": "A series of if()s, each fully enumerating the situation where it occurs.  Else of course only implicitly states; the reader has to maintain state in his own head, and there&#39;s a pretty low limit before people are overwhelmed and start getting it wrong.  Another way is to have if()s which set a state variable, and then switch on that state.", "edited": false, "comment_id": 768015, "creation_date": 1244274252, "score": 0, "owner": {"display_name": "user82238", "user_type": "does_not_exist"}}, {"body": "Another issue here is reading code from top to bottom.  Multiple elses, especially with a chunks of code of any size in them, require the reader to scoot up and down the code, matching elses to ifs.  I find it immesureably better to have a purely linear flow of code.", "edited": false, "comment_id": 768018, "creation_date": 1244274392, "score": 0, "owner": {"display_name": "user82238", "user_type": "does_not_exist"}}, {"body": "Consider --if(a) a = false; else print(&quot;x&quot;);-- and --if(a) a = false; if(!a) print(&quot;x&quot;);-- They are not the same thing. As for issues with understanding code, I believe proper indentation solves most of the problems.", "edited": false, "comment_id": 928203, "creation_date": 1247272229, "score": 1, "owner": {"display_name": "luiscubal", "reputation": 10472, "user_id": 32775, "user_type": "registered", "accept_rate": 92}}, {"body": "+1.. interesting point.. At university I was taught to -always- write an else statement explicitly to improve testability (an omitted else clause should be considered as executing a null statement in code path analysis), but I agree that for readability it can sometimes indeed be better to refactor.", "edited": false, "comment_id": 930715, "creation_date": 1247357411, "score": 0, "owner": {"display_name": "Wouter van Nifterick", "reputation": 15254, "user_id": 38813, "user_type": "registered", "accept_rate": 100}}, {"body": "@Wouter van Nifterick: I have to criticize that point of view too, however. If the if statement has a return statement, then you can just write code outside the if stuff.", "edited": false, "comment_id": 962754, "creation_date": 1247852445, "score": 0, "owner": {"display_name": "luiscubal", "reputation": 10472, "user_id": 32775, "user_type": "registered", "accept_rate": 92}}, {"body": "-1, else is valid for controlling program flow - excuse the pun, but how ELSE are you going to do it?", "edited": false, "comment_id": 2580962, "creation_date": 1270397221, "score": 0, "owner": {"display_name": "JL.", "reputation": 19694, "user_id": 41543, "user_type": "registered", "accept_rate": 83}}, {"body": "Please see the second comment.  With regard to your point about program flow, all you&#39;ve stated is what else is to be used for.  That does not indicate in any way whether or not it is harmful.  GOTO is also intended for controlling program flow.  It has it&#39;s place (infinite loops) but beyond that, over-use is harmful.", "edited": false, "comment_id": 2581177, "creation_date": 1270400969, "score": 0, "owner": {"display_name": "user82238", "user_type": "does_not_exist"}}], "creation_date": 1241031736, "comment_count": 8, "score": 1, "owner": {"display_name": "user82238", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1241031837, "body": "<p>That the <a href=\"http://en.wikipedia.org/wiki/Law%5Fof%5FDemeter\" rel=\"nofollow\">Law of Demeter</a>, considered in context of aggregation and composition, is an anti-pattern.</p>\n", "answer_id": 803784, "tags": [], "down_vote_count": 0, "last_activity_date": 1241031837, "comments": [{"body": "How can this be controversial when most of us didn&#39;t understand what you meant. :-)", "edited": false, "comment_id": 2560291, "creation_date": 1270080692, "score": 0, "owner": {"display_name": "Warren  P", "reputation": 26418, "user_id": 84704, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1241031837, "comment_count": 1, "score": 1, "owner": {"display_name": "chaos", "reputation": 78028, "user_id": 47529, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1241031877, "body": "<p>I am of the opinion that there are too many people making programming decisions that shouldn't be worried about implementation.</p>\n", "answer_id": 803791, "tags": [], "down_vote_count": 1, "last_activity_date": 1241031877, "creation_date": 1241031877, "comment_count": 0, "score": 1, "owner": {"display_name": "Andrew Sledge", "reputation": 5343, "user_id": 97076, "user_type": "registered", "accept_rate": 50}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1241254549, "body": "<p><strong>If you want to write good software then step away from your computer</strong></p>\n\n<p>Go and hang out with the end users and the people who want and need the software. Only from them will you understand what your software needs to accomplish and how it needs to do that. </p>\n\n<ul>\n<li>Ask them what the love &amp; hate about the existing processes. </li>\n<li>Ask them about the future of their processes, where it is headed.</li>\n<li>Hang out and see what they use now and figure out their usage patterns. You need to meet and match their usage expectations. See what else they use a lot, particularly if they like it and can use it efficiently. Match that.</li>\n</ul>\n\n<p>The end user doesn't give a rat's how elegant your code is or what language it's in. If it works for them and they like using it, you win. If it doesn't make their lives easier and better - they hate it, you lose.</p>\n\n<p>Walk a mile in their shoes - then go write your code.</p>\n", "answer_id": 814454, "tags": [], "down_vote_count": 0, "last_activity_date": 1241254549, "comments": [{"body": "Great answer - I always try to do this... but sometimes you got to protect users from their own ideas. Because e.g. in business software (financial) I always encounter some users with the tendency to wish for &quot;creative bookkeeping&quot;. Hehe.", "edited": false, "comment_id": 988848, "creation_date": 1248310683, "score": 0, "owner": {"display_name": "capfu", "reputation": 147, "user_id": 139627, "user_type": "registered"}}, {"body": "This is why I love being a domain expert. For my whole career I&#39;ve worked alongside people who use the type of software I write.", "edited": false, "comment_id": 1444645, "creation_date": 1255801343, "score": 0, "owner": {"display_name": "Jeanne Pindar", "reputation": 508, "user_id": 147062, "user_type": "registered"}}, {"body": "@Jeanne: Ditto - my major project is based on what I do for a living. I do a lot of talking to myself.", "edited": false, "comment_id": 1446941, "creation_date": 1255862447, "score": 0, "owner": {"display_name": "CAD bloke", "reputation": 3442, "user_id": 492, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1241254549, "comment_count": 3, "score": 13, "owner": {"display_name": "CAD bloke", "reputation": 3442, "user_id": 492, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 13}, {"community_owned_date": 1241256547, "body": "<p>Never let best practices or pattern obsessesion slave you.</p>\n\n<p>These should be guidelines, not laws set in stone.</p>\n\n<p>And I really like the patterns, and the GoF book more or less says it that way too, stuff to browse through, providing a common jargon. Not a ball and chain gospel.</p>\n", "answer_id": 814519, "tags": [], "down_vote_count": 0, "last_activity_date": 1241256547, "creation_date": 1241256547, "comment_count": 0, "score": 3, "owner": {"display_name": "Marco van de Voort", "reputation": 17263, "user_id": 99354, "user_type": "registered", "accept_rate": 83}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1241258279, "body": "<p><strong>Coding is an Art</strong></p>\n\n<p>Some people think coding is an art, and others think coding is a science.</p>\n\n<p>The \"science\" faction argues that as the target is to obtain the optimal code for a situation, then coding is the science of studying how to obtain this optimal.</p>\n\n<p>The \"art\" faction argues there are many ways to obtain the optimal code for a situation, the process is full of subjectivity, and that to choose wisely based on your own skills and experience is an art.</p>\n", "answer_id": 814565, "tags": [], "down_vote_count": 1, "last_activity_date": 1262292507, "comments": [{"body": "Electronics designers will always tell you that designing electronic circuits is &#39;an imprecise science&#39;. I think the opposite is true of constructing computer programs - it is an exact art. I think this partly because I don;t know where my programming ability comes from. I sit at the keyboard and &quot;it just happens&quot;. I&#39;m not following any rules or processes when I write code, thereore it is an art. But whatever I write has to be exactly right, or it will not work. Hence, it is an exact art.", "edited": false, "comment_id": 681348, "creation_date": 1242535572, "score": 1, "owner": {"display_name": "Tim Long", "reputation": 5509, "user_id": 98516, "user_type": "registered", "accept_rate": 70}}], "creation_date": 1241258279, "comment_count": 1, "score": 10, "owner": {"display_name": "Jonathan", "reputation": 7383, "user_id": 81076, "user_type": "registered", "accept_rate": 81}, "is_accepted": false, "last_edit_date": 1262292507, "up_vote_count": 11}, {"community_owned_date": 1241320359, "body": "<p><strong>If it's not native, it's not really programming</strong></p>\n\n<p>By definition, a program is an entity that is run by the computer.  It talks directly to the CPU and the OS.  Code that does not talk directly to the CPU and the OS, but is instead run by some other program that does talk directly to the CPU and the OS, is not a program; it's a script.</p>\n\n<p>This was just simple common sense, completely non-controversial, back before Java came out. Suddenly there was a scripting language with a large enough feature set to accomplish tasks that had previously been exclusively the domain of programs.  In response, Microsoft developed the .NET framework and some scripting languages to run on it, and managed to muddy the waters further by slowly reducing support for true programming among their development tools in favor of .NET scripting.</p>\n\n<p>Even though it can accomplish a lot of things that you previously had to write programs for, managed code of any variety is still scripting, not programming, and \"programs\" written in it do and always will share the performance characteristics of scripts: they run more slowly and use up far more RAM than a real (native) program would take to accomplish the same task.</p>\n\n<p>People calling it programming are doing everyone a disservice by dumbing down the definition.  It leads to lower quality across the board.  If you try and make programming so easy that any idiot can do it, what you end up with are a whole lot of idiots who think they can program.</p>\n", "answer_id": 816215, "tags": [], "down_vote_count": 15, "last_activity_date": 1241320359, "comments": [{"body": "This sounds like argumentative nonsense to me. Suppose I compile a program which satisfies your definition... but then run it in VMWare or something like that. Does that make it a &quot;script&quot; because it&#39;s running virtually? Of course not. Likewise if you&#39;re dismissing Java as &quot;not programming&quot; would your view change if at any point anyone brought out a &quot;Java CPU&quot; (if such things don&#39;t exist already)?  Yes, there are plenty of arguments for not trying to &quot;dumb down&quot; programming too much - but the way you&#39;re putting it takes that <i>much</i> too far.", "edited": false, "comment_id": 625949, "creation_date": 1241336867, "score": 19, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "With all due respect for you and your obvious intelligence, I have to disagree. A VM is just an abstraction of the hardware. The program is still capable of running directly on the hardware and talking to it. By contrast, if someone built a Java CPU, you still wouldn&#39;t be able to write an OS or device drivers for it in Java. (No pointers, etc.)", "edited": false, "comment_id": 626331, "creation_date": 1241355357, "score": 0, "owner": {"display_name": "Mason Wheeler", "reputation": 55588, "user_id": 32914, "user_type": "registered", "accept_rate": 65}}, {"body": "So it would have to be able to do <i>more</i> than just Java - but it would still be able to execute Java code natively. Would all the &quot;non-programmers&quot; in the world who are currently writing Java suddenly become programmers in your view? Sorry, I still can&#39;t see this as a sensible or useful delineation at all.", "edited": false, "comment_id": 678232, "creation_date": 1242420471, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "You might also want to try convincing the Wikipedians, who certainly include scripts as programs, even leaving aside the question of whether Java is a script or not: <a href=\"http://en.wikipedia.org/wiki/Computer_program\" rel=\"nofollow\">en.wikipedia.org/wiki/Computer_program</a>", "edited": false, "comment_id": 678246, "creation_date": 1242420682, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I seem to remember that UCSD Pascal compiled to p-code, which was then interpreted, but Pascal has certainly always been considered a programming language and not a scripting language. The colege I was at did also have something they called a Pascal Microengine, which could execute p-code natively. So the distinction is somewhat arbitrary and defies definition.", "edited": false, "comment_id": 681340, "creation_date": 1242535341, "score": 2, "owner": {"display_name": "Tim Long", "reputation": 5509, "user_id": 98516, "user_type": "registered", "accept_rate": 70}}, {"body": "&quot;Execute p-code natively&quot; is an oxy-moron.", "edited": false, "comment_id": 905848, "creation_date": 1246968965, "score": 0, "owner": {"display_name": "kmarsh", "reputation": 848, "user_id": 101547, "user_type": "registered"}}, {"body": "Ever heard of gcj?", "edited": false, "comment_id": 928142, "creation_date": 1247271187, "score": 0, "owner": {"display_name": "luiscubal", "reputation": 10472, "user_id": 32775, "user_type": "registered", "accept_rate": 92}}, {"body": "Gee,  a Delphi programmer ridiculing code that runs on a framework!  What a surprise!  Self-deluded, elitist crap.", "edited": false, "comment_id": 1065264, "creation_date": 1249569184, "score": 0, "owner": {"display_name": "Ash", "reputation": 35511, "user_id": 5023, "user_type": "registered", "accept_rate": 85}}, {"body": "Delphi has a framework too.  It&#39;s called the VCL.  The difference is that it&#39;s native code, and it tends to add a few hundred kilobytes to your application, as opposed to .NET, which adds a few hundred MEGABYTES of dependencies.", "edited": false, "comment_id": 1065341, "creation_date": 1249569723, "score": 0, "owner": {"display_name": "Mason Wheeler", "reputation": 55588, "user_id": 32914, "user_type": "registered", "accept_rate": 65}}, {"body": "also, what about the Burroughs machines that ran COBOL natively as their assembly language?", "edited": false, "comment_id": 1477444, "creation_date": 1256271934, "score": 0, "owner": {"display_name": "warren", "reputation": 13593, "user_id": 4418, "user_type": "registered", "accept_rate": 94}}, {"body": "www.ajile.com. Hardware CPU runs java natively, realtime with direct access to the hardware.", "edited": false, "comment_id": 2614879, "creation_date": 1270784785, "score": 2, "owner": {"display_name": "Tim Williscroft", "reputation": 3095, "user_id": 2789, "user_type": "registered", "accept_rate": 75}}], "creation_date": 1241320359, "comment_count": 11, "score": -10, "owner": {"display_name": "Mason Wheeler", "reputation": 55588, "user_id": 32914, "user_type": "registered", "accept_rate": 65}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1241476985, "body": "<p><strong>Sometimes it's okay to use regexes to extract something from HTML.</strong> Seriously, wrangle with an obtuse parser, or use a quick regex like <code>/&lt;a href=\"([^\"]+)\"&gt;/</code>? It's not perfect, but your software will be up and running much quicker, and you can probably use yet another regex to verify that the match that was extracted is something that actually looks like a URL. Sure, it's hacky, and probably fails on several edge-cases, but it's good enough for most usage.</p>\n\n<p>Based on the massive volume of \"How use regex get HTML?\" questions that get posted here almost daily, and the fact that <em>every</em> answer is \"Use an HTML parser\", this should be controversial enough.</p>\n", "answer_id": 822465, "tags": [], "down_vote_count": 1, "last_activity_date": 1241476985, "creation_date": 1241476985, "comment_count": 0, "score": 3, "owner": {"display_name": "Chris Lutz", "reputation": 38517, "user_id": 60777, "user_type": "registered", "accept_rate": 77}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1241554899, "body": "<p><strong>Cleanup and refactoring are very important in (team) development</strong></p>\n\n<p>A lot of work in team development has to do with management. If you are using a bug tracker than it is only useful if someone takes the time to close/structure things and lower the amount of tickets. If you are using a source code management somebody needs to cleanup here and restructure the repository quite often. If you are programming than there should be people caring about refactoring of the lazy produced stuff of others. It is part of most of the aspects some will face while doing software development.</p>\n\n<p>Everybody agrees to the necessity of this kind of management. And it is always the first thing that is skipped!</p>\n", "answer_id": 826752, "tags": [], "down_vote_count": 0, "last_activity_date": 1241554899, "comments": [{"body": "+1 - but this isn&#39;t controversial, you even noted that everybody agrees :)", "edited": false, "comment_id": 828784, "creation_date": 1245435693, "score": 0, "owner": {"display_name": "SnOrfus", "reputation": 7513, "user_id": 48553, "user_type": "registered", "accept_rate": 81}}], "creation_date": 1241554899, "comment_count": 1, "score": 3, "owner": {"display_name": "Norbert Hartl", "reputation": 5220, "user_id": 94451, "user_type": "registered", "accept_rate": 74}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1241555624, "body": "<p><strong>It's not the tools, it's you</strong></p>\n\n<p>Whenever developers try to do something new like doing UML diagrams, charts of any sort, project management they first look for the perfect tool to solve the problem. After endless searches finding not the right tool their motivation starves. All that is left then is complaints about the lack of useable software. It is the insight that the plan to be organized died in absence of a piece of software.</p>\n\n<p>Well, it is only yourself dealing with organization. If you are used to organize you can do it with or without the aid of a software (and most do without). If you are not used to organize nobody can help you.</p>\n\n<p>So \"not having the right software\" is just the simplest excuse for not being organized at all.</p>\n", "is_accepted": false, "tags": [], "answer_id": 826801, "down_vote_count": 0, "last_activity_date": 1257010773, "comments": [{"body": "not really &quot;controversial&quot; - but useful :)", "edited": false, "comment_id": 1477137, "creation_date": 1256265847, "score": 0, "owner": {"display_name": "warren", "reputation": 13593, "user_id": 4418, "user_type": "registered", "accept_rate": 94}}, {"body": "I think this is true in spite of people agreeing with it (figure that out). I make a pest of myself telling people that to do performance tuning you do not need a tool, in fact you may do better without one.", "edited": false, "comment_id": 1526532, "creation_date": 1257010928, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1241555624, "comment_count": 2, "score": 6, "owner": {"display_name": "Norbert Hartl", "reputation": 5220, "user_id": 94451, "user_type": "registered", "accept_rate": 74}, "last_editor": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}, "last_edit_date": 1257010773, "up_vote_count": 6}, {"community_owned_date": 1241556044, "body": "<ol>\n<li><p>Good architecture is grown, not designed. </p></li>\n<li><p>Managers should make sure their team members always work <em>below</em> their state of the art, whatever that level is. When people work withing their comfort zone they produce higher quality code.</p></li>\n</ol>\n", "is_accepted": false, "tags": [], "answer_id": 826826, "down_vote_count": 0, "last_activity_date": 1247353905, "comments": [{"body": "But if you never try to do something different, you&#39;ll never expand your comfort zone. I found that getting out of my &quot;comfort zone&quot; to be quite enjoyable(though certainly not productive, it <i>is</i> needed, sometimes).", "edited": false, "comment_id": 928150, "creation_date": 1247271294, "score": 0, "owner": {"display_name": "luiscubal", "reputation": 10472, "user_id": 32775, "user_type": "registered", "accept_rate": 92}}, {"body": "Upvoted for first part, downvoted for second.", "edited": false, "comment_id": 1775735, "creation_date": 1260390831, "score": 0, "owner": {"display_name": "iandisme", "reputation": 3947, "user_id": 136790, "user_type": "registered", "accept_rate": 78}}], "creation_date": 1241556044, "comment_count": 2, "score": 3, "owner": {"display_name": "zvolkov", "reputation": 11034, "user_id": 76859, "user_type": "registered", "accept_rate": 92}, "last_editor": {"display_name": "zvolkov", "reputation": 11034, "user_id": 76859, "user_type": "registered", "accept_rate": 92}, "last_edit_date": 1247353905, "up_vote_count": 3}, {"community_owned_date": 1241592618, "body": "<p><strong>switch-case is not object oriented programming</strong> </p>\n\n<p>I often see a lot of switch-case or awful big if-else constructs. This is merely a sign for not putting state where it belongs and don't use the real and efficient switch-case construct that is already there: method lookup/vtable</p>\n", "answer_id": 828336, "tags": [], "down_vote_count": 1, "last_activity_date": 1241592618, "creation_date": 1241592618, "comment_count": 0, "score": 2, "owner": {"display_name": "Norbert Hartl", "reputation": 5220, "user_id": 94451, "user_type": "registered", "accept_rate": 74}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1241599769, "body": "<p>To be really controversial:</p>\n\n<p><strong>You know nothing!</strong></p>\n\n<p>or in other words:</p>\n\n<p><strong>I know that I know nothing.</strong></p>\n\n<p>(this could be paraphrased in many kinds but I think you get it.)</p>\n\n<p>When starting with computers/developing, IMHO there are three stages everyone has to walk through:</p>\n\n<p>The newbie:\nknows nothing (this is fact)</p>\n\n<p>The intermediate:\nthinks he knows something/very much(/all) (this is conceit)</p>\n\n<p>The professional:\nknows that he knows nothing (because as a programmer most time you have to work on things you have never done before).\nThis is no bad thing: I love to familiarize myself to new things all the time.</p>\n\n<p>I think as a programmer you have to know how to learn - or better: To learn to learn (because remember: You know nothing! ;)).</p>\n", "answer_id": 828680, "tags": [], "down_vote_count": 1, "last_activity_date": 1241599769, "comments": [{"body": "Strange logic, I agree be humble and learn, but to say you know nothing would just be silly.", "edited": false, "comment_id": 2580947, "creation_date": 1270397048, "score": 0, "owner": {"display_name": "JL.", "reputation": 19694, "user_id": 41543, "user_type": "registered", "accept_rate": 83}}], "creation_date": 1241599769, "comment_count": 1, "score": 2, "owner": {"display_name": "Inno", "reputation": 1002, "user_id": 97118, "user_type": "registered", "accept_rate": 67}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1241938246, "body": "<p>Sometimes you have to denormalize your databases.</p>\n\n<p>An opinion that doesn't go well with most programmers but you have to sacrifice things like noramlization for performance sometimes.</p>\n", "answer_id": 844843, "tags": [], "down_vote_count": 0, "last_activity_date": 1241938246, "comments": [{"body": "Hardware is cheap - logic costs a fortune.", "edited": false, "comment_id": 828754, "creation_date": 1245435491, "score": 0, "owner": {"display_name": "SnOrfus", "reputation": 7513, "user_id": 48553, "user_type": "registered", "accept_rate": 81}}, {"body": "Corollary: most time, performance suffers with less than 5NF.", "edited": false, "comment_id": 1808603, "creation_date": 1260843809, "score": 0, "owner": {"display_name": "just somebody", "reputation": 10815, "user_id": 209605, "user_type": "registered", "accept_rate": 62}}], "creation_date": 1241938246, "comment_count": 2, "score": 8, "owner": {"display_name": "Artem Russakovskii", "reputation": 8978, "user_id": 47680, "user_type": "registered", "accept_rate": 77}, "is_accepted": false, "up_vote_count": 8}, {"community_owned_date": 1242293525, "body": "<p>Getting paid to program is generally one of the worst uses of a man's time.</p>\n\n<p>For one thing, you're in competition with the Elbonians, who work for a quarter a day. You need to convince your employer that you offer something the Elbonians never can, and that your something is worth a livable salary. As the Elbonians get more and more overseas business, the real advantage wears thin, and management knows it.</p>\n\n<p>For another thing, you're spending time solving someone else's problems. That's time you could spend advancing your own interests, or working on problems that actually interest you. And if you think you're saving the world by working on the problems of other men, then why don't you just get the Elbonians to do it for you?</p>\n\n<p>Last, the great innovations in software (visicalc, Napster, Pascal, etc) were not created by cubicle farms. They were created by one or two people without advance pay. You can't forcibly recreate that. It's just magic that sometimes happens when a competent programmer has a really good idea.</p>\n\n<p>There is enough software. There are enough software developers. You don't have to be one for hire. Save your talents, your time, your hair, your marriage. Let someone else sell his soul to the keyboard. If you want to program, fine. But don't do it for the money.</p>\n", "answer_id": 862413, "tags": [], "down_vote_count": 1, "last_activity_date": 1242293525, "comments": [{"body": "Strange logic there. Hmmmm.", "edited": false, "comment_id": 749770, "creation_date": 1243972804, "score": 0, "owner": {"display_name": "Dana Holt", "reputation": 7639, "user_id": 67386, "user_type": "registered", "accept_rate": 98}}, {"body": "&gt; &quot;Last, the great innovations in software (visicalc, Napster, Pascal, etc)&quot; - so many examples to the contrary that I won&#39;t even start. Bell labs to name just one location. But if I read between the lines well then I agree with you: you need a new job.", "edited": false, "comment_id": 828748, "creation_date": 1245435429, "score": 0, "owner": {"display_name": "SnOrfus", "reputation": 7513, "user_id": 48553, "user_type": "registered", "accept_rate": 81}}, {"body": "+1. controversial but interesting view (at least the 2 commenters above don&#39;t seem to agree). Ian makes some good points if you ask me.", "edited": false, "comment_id": 930727, "creation_date": 1247357722, "score": 0, "owner": {"display_name": "Wouter van Nifterick", "reputation": 15254, "user_id": 38813, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1242293525, "comment_count": 3, "score": 4, "owner": {"display_name": "Ian", "reputation": 2418, "user_id": 106890, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1242314330, "body": "<p><strong>Reflection has no place in production code</strong></p>\n\n<p>Reflection breaks static analysis including refactoring tools and static type checking. Reflection also breaks the normal assumptions developers have about code. For example: adding a method to a class (that doesn't shadow some other method in the class) should never have any effect, but when reflection is being used, some other piece of code may \"discover\" the new method and decide to call it. Actually determining if such code exists is intractable.</p>\n\n<p>I do think it's fine to use reflection and tests and in code generators.</p>\n\n<p>Yes, this does mean that I try to avoid frameworks that use reflection. (it's too bad that Java lacks proper compile-time meta-programming support)</p>\n", "answer_id": 863967, "tags": [], "down_vote_count": 1, "last_activity_date": 1242314330, "comments": [{"body": "Wouldn&#39;t this negate the possibility of developing an application that supports 3rd party plugins?", "edited": false, "comment_id": 828730, "creation_date": 1245435211, "score": 0, "owner": {"display_name": "SnOrfus", "reputation": 7513, "user_id": 48553, "user_type": "registered", "accept_rate": 81}}, {"body": "You&#39;re right, I should have been more clear. When I said &quot;reflection&quot; I meant java.lang.reflect. For plug-ins you just need Class.forName() and Class.newInstance(). I still consider the latter a &quot;bad smell&quot; (it&#39;s overused) but if you&#39;re implementing a system with third-party plugins then that&#39;s the way to do it.", "edited": false, "comment_id": 830256, "creation_date": 1245460469, "score": 0, "owner": {"display_name": "Laurence Gonsalves", "reputation": 63163, "user_id": 90848, "user_type": "registered", "accept_rate": 83}}], "creation_date": 1242314330, "comment_count": 2, "score": 6, "owner": {"display_name": "Laurence Gonsalves", "reputation": 63163, "user_id": 90848, "user_type": "registered", "accept_rate": 83}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1242368094, "body": "<p><strong>A Developer should never test their own software</strong></p>\n\n<p>Development and testing are two diametrically opposed disciplines. Development is all about construction, and testing is all about demolition. Effective testing requires a specific mindset and approach where you are trying to uncover developer mistakes, find holes in their assumptions, and flaws in their logic. Most people, myself included, are simply unable to place themselves and their own code under such scrutiny and still remain objective.</p>\n", "answer_id": 867208, "tags": [], "down_vote_count": 1, "last_activity_date": 1242368094, "comments": [{"body": "Do you include unit testing in that? Do you not see any value in unit testing? If so, I don&#39;t agree. I would agree that a developer shouldn&#39;t be the <i>only</i> tester of their software (where possible, of course).", "edited": false, "comment_id": 732526, "creation_date": 1243577572, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Jon, I am talking from the point of view that yes they SHOULD do unit testing but no they should NOT be the only tester of their code. As you rightly point out, if they are the only one then they don&#39;t have much choice. This question did ask for your most controversial opinion so I think that mine is right up there. The other key point is that the &quot;we don&#39;t need no stinking testers&quot; cause&#39; the dev&#39;s or anyone can just do it is completely wrong as well", "edited": false, "comment_id": 733936, "creation_date": 1243604683, "score": 6, "owner": {"display_name": "Bruce McLeod", "reputation": 1197, "user_id": 49156, "user_type": "registered", "accept_rate": 67}}, {"body": "I suggest you reword the rule to &quot;should never be RESPONSIBLE for testing their own software&quot;, as your current wording could imply you were not allowed to test your pgorams at all.", "edited": false, "comment_id": 1481680, "creation_date": 1256321843, "score": 0, "owner": {"display_name": "Thorbj\u00f8rn Ravn Andersen", "reputation": 43814, "user_id": 53897, "user_type": "registered", "accept_rate": 57}}], "creation_date": 1242368094, "comment_count": 3, "score": 14, "owner": {"display_name": "Bruce McLeod", "reputation": 1197, "user_id": 49156, "user_type": "registered", "accept_rate": 67}, "is_accepted": false, "up_vote_count": 15}, {"community_owned_date": 1242453597, "body": "<p>Many developers have an underdeveloped sense of where to put things, resulting in messy source code organization at the file, class, and method level. Further, a sizable percentage of such developers are essentially tone-deaf to issues of code organization. Attempts to teach, cajole, threaten, or shame them into keeping their code clean are futile.</p>\n\n<p>On any sufficiently successful project, there's usually a developer who does have a good sense of organization very quietly wielding a broom to the code base to keep entropy at bay.</p>\n", "answer_id": 871813, "tags": [], "down_vote_count": 0, "last_activity_date": 1242453597, "creation_date": 1242453597, "comment_count": 0, "score": 3, "owner": {"display_name": "Dave W. Smith", "reputation": 11436, "user_id": 62288, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1243732987, "body": "<p>My controversial opinion is probably that John Carmack (ID Software, Quake etc.) is not a very good programmer.  </p>\n\n<p>Don't get me wrong, he's a very <em>smart</em> programmer in my opinion, but after I noticed the line \"#define private public\" in the quake sourcecode I couldn't help but think he's a guy that gets the job done nomatter what, but in my definition not a good programmer :)\nThis opinion has gotten me into a lot of heated discussions though ;)</p>\n", "answer_id": 931017, "tags": [], "down_vote_count": 1, "last_activity_date": 1243732987, "comments": [{"body": "If true then I&#39;d be inclined to agree. That looks pretty bad.", "edited": false, "comment_id": 846262, "creation_date": 1245796892, "score": 0, "owner": {"display_name": "spender", "reputation": 61337, "user_id": 14357, "user_type": "registered", "accept_rate": 82}}, {"body": "I don&#39;t know many programs that are this kind of performance optimized, dealing with graphics and sound and everything, (some) platform independent, which are still <b>that stable</b> as doom and quake and everything produced by id software. Really. I wish every software is made like this. Even usability is great.", "edited": false, "comment_id": 1624157, "creation_date": 1258388684, "score": 0, "owner": {"display_name": "Stefan Steinegger", "reputation": 41258, "user_id": 2658202, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1243732987, "comment_count": 2, "score": 3, "owner": {"display_name": "Led", "reputation": 844, "user_id": 109218, "user_type": "registered", "accept_rate": 47}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1243972140, "body": "<p><strong>Software is not an engineering discipline.</strong></p>\n\n<p>We never should have let the computers escape from the math department.</p>\n", "answer_id": 941543, "tags": [], "down_vote_count": 1, "last_activity_date": 1243972140, "creation_date": 1243972140, "comment_count": 0, "score": 3, "owner": {"display_name": "james woodyatt", "reputation": 1622, "user_id": 112191, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1244220757, "body": "<p><strong>Design patterns are bad.</strong></p>\n\n<p>Actually, <a href=\"http://perl.plover.com/yak/design/\" rel=\"nofollow\">design patterns aren't</a>.</p>\n\n<p>You can write bad code, and bury it under a pile of patterns. Use singletons as global variables, and states as goto's. Whatever.</p>\n\n<p>A design pattern is a standard solution for a particular problem, but requires you to understand the problem first. If you don't, design patterns become a part of the problem for the next developer.</p>\n", "answer_id": 956950, "tags": [], "down_vote_count": 0, "last_activity_date": 1244220757, "creation_date": 1244220757, "comment_count": 0, "score": 2, "owner": {"display_name": "G B", "reputation": 1487, "user_id": 113644, "user_type": "registered", "accept_rate": 86}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1244737989, "body": "<p><strong>The simplest approach is the best approach</strong></p>\n\n<p>Programmers like to solve assumed or inferred requirements that add levels of complexity to a solution. </p>\n\n<p>\"I assume this block of code is going to be a performance bottleneck, therefore I will add all this extra code to mitigate this problem.\" </p>\n\n<p>\"I assume the user is going to want to do X, therefore I will add this really cool additional feature.\"</p>\n\n<p>\"If I make my code solve for this unneeded scenario it will be a good opportunity to use this new technology I've been interested in trying out.\"</p>\n\n<p>In reality, the simplest solution that meets the requirements is best. This also gives you the most flexibility in taking your solution in a new direction if and when new requirements or problems come up.</p>\n", "answer_id": 982182, "tags": [], "down_vote_count": 0, "last_activity_date": 1244737989, "comments": [{"body": "Yeah, the best way to compare implemntations is by their line count. People wont reuse your code unless it&#39;s less than one page long.", "edited": false, "comment_id": 799665, "creation_date": 1244908980, "score": 0, "owner": {"display_name": "AareP", "reputation": 1313, "user_id": 11741, "user_type": "registered", "accept_rate": 33}}, {"body": "Occam&#39;s Razor :)", "edited": false, "comment_id": 1269233, "creation_date": 1252998101, "score": 0, "owner": {"display_name": "Veres Zoltan", "reputation": 146, "user_id": 154224, "user_type": "registered", "accept_rate": 91}}, {"body": "++ I don&#39;t think this is controversial in one sense - everybody agrees with it. But in another sense it is controversial - because few people follow it.", "edited": false, "comment_id": 1422536, "creation_date": 1255474339, "score": 1, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1244737989, "comment_count": 3, "score": 7, "owner": {"display_name": "Brad C", "reputation": 331, "user_id": 121390, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1245028671, "body": "<p>Apparently mine is that <a href=\"http://stackoverflow.com/questions/993124/does-haskell-have-variables/993126#993126\">Haskell has variables</a>. This is both \"trivial\" (according to at least eight SO users) (though nobody can seem to agree on which trivial answer is correct), and a bad question even to ask (according to at least five downvoters and four who voted to close it). Oh, and I (and computing scientests and mathematicians) am wrong, though nobody can provide me a detailed explanation of why.</p>\n", "answer_id": 994206, "tags": [], "down_vote_count": 1, "last_activity_date": 1245028671, "comments": [{"body": "Even though I respect math, I&#39;d have to disagree. Those aren&#39;t variables. Those are contants. Variables should be... well... variable. I believed Haskell has no variables because &quot;x = x + 1&quot; isn&#39;t possible. You use functions, you don&#39;t <i>really</i> change the value of x. HOWEVER, that post mentioned IORef, so maybe Haskell <i>does</i> have variables...", "edited": false, "comment_id": 928170, "creation_date": 1247271514, "score": 0, "owner": {"display_name": "luiscubal", "reputation": 10472, "user_id": 32775, "user_type": "registered", "accept_rate": 92}}, {"body": "Well, go put an answer up on the question to which I linked showing why, in the definition &quot;double x = x * 2&quot;, &quot;x&quot; is a constant.", "edited": false, "comment_id": 950447, "creation_date": 1247681094, "score": 0, "owner": {"display_name": "Curt Sampson", "reputation": 12357, "user_id": 107294, "user_type": "registered", "accept_rate": 75}}, {"body": "&quot;double x = x * 2&quot; makes no sense in no language. Not even C.", "edited": false, "comment_id": 962770, "creation_date": 1247852652, "score": 1, "owner": {"display_name": "luiscubal", "reputation": 10472, "user_id": 32775, "user_type": "registered", "accept_rate": 92}}, {"body": "It&#39;s an equation, saying that the left and right sides are equivalent (i.e., &quot;double 3&quot; means the same thing as &quot;3 * 2&quot;), and not only does it make perfect sense in mathematics, but it&#39;s perfectly valid Haskell code.", "edited": false, "comment_id": 1058092, "creation_date": 1249471354, "score": 0, "owner": {"display_name": "Curt Sampson", "reputation": 12357, "user_id": 107294, "user_type": "registered", "accept_rate": 75}}, {"body": "So haskell is single-assignment within the bounds of a particular scope, and you can only &quot;change&quot; the value of x by reintroducing a new inner scope, which is what &quot;double x= x *2&quot; really does, right? It doesn&#39;t change the value of x at all, it just overloads the identifier x with a new (temporary) value at a particular scope.", "edited": false, "comment_id": 2560246, "creation_date": 1270080251, "score": 1, "owner": {"display_name": "Warren  P", "reputation": 26418, "user_id": 84704, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1245028671, "comment_count": 5, "score": 0, "owner": {"display_name": "Curt Sampson", "reputation": 12357, "user_id": 107294, "user_type": "registered", "accept_rate": 75}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1245231801, "body": "<p>You'll never use enough languages, simply because every language is the best fit for only a tiny class of problems, and it's far too difficult to mix languages.</p>\n\n<p>Pet examples: Java should be used only when the spec is very well thought out (because of lots of interdependencies meaning refactoring hell) and when working with concrete concepts. Perl should only be used for text processing. C should only be used when speed trumps everything, including flexibility and security. Key-value pairs should be used for one-dimensional data, CSV for two-dimensional data, XML for hierarchical data, and a DB for anything more complex.</p>\n", "answer_id": 1006072, "tags": [], "down_vote_count": 0, "last_activity_date": 1245231801, "creation_date": 1245231801, "comment_count": 0, "score": 1, "owner": {"display_name": "l0b0", "reputation": 14807, "user_id": 96588, "user_type": "registered", "accept_rate": 80}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1245432742, "body": "<p>I believe that the \"Let's Rewrite The Past And Try To Fix That Bug Pretending Nothing Ever Worked\" is a valuable debugging mantra in desperate situations:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/978904/do-you-use-the-orwellian-past-rewriting-debugging-philosophy-closed\">http://stackoverflow.com/questions/978904/do-you-use-the-orwellian-past-rewriting-debugging-philosophy-closed</a></p>\n", "answer_id": 1019130, "tags": [], "down_vote_count": 0, "last_activity_date": 1245432742, "creation_date": 1245432742, "comment_count": 0, "score": 1, "owner": {"display_name": "JCCyC", "reputation": 3507, "user_id": 110800, "user_type": "registered", "accept_rate": 81}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1245434545, "body": "<p><strong><a href=\"http://c2.com/cgi/wiki?TheMythicalManMinute\" rel=\"nofollow\">Software-Reuse is the most important way to optimize software-development</a></strong></p>\n\n<p>Somehow, software-reuse seamed to be in vogue for some time, but has lost it's charm, when many companies found out that just writing powerpoint presentations with reuse slogans doesn't actually help. They reasoned that software-reuse is just not \"good enough\" and can't live up to their dreams. So it seams that it is not in vogue any more -- it was replaced by plenty of project management newcomers (Agile for example).</p>\n\n<p>The fact is, that any really good developer by himself performs some kind of software-reuse. I would say <strong>Any developer, not doing software-reuse is a bad developer!</strong></p>\n\n<p>I have experienced myself, how much software-reuse can produce performance and stability in development. But of course, a set of PowerPoints and half-hearted confessions of management does not suffice to get its full potential in a company.</p>\n\n<p>I have linked a very old article of mine about software-reuse (see title). It was originally written in German and translated thereafter -- so excuse please, when it is not that good writing.</p>\n", "is_accepted": false, "tags": [], "answer_id": 1019271, "down_vote_count": 0, "last_activity_date": 1246967089, "comments": [{"body": "One of the problems with software-reuse is that it requires advanced reading and adapting skills, which aren&#39;t easy. Also, using libraries as dependencies can be a nightmare if those libraries aren&#39;t stable.", "edited": false, "comment_id": 928180, "creation_date": 1247271678, "score": 0, "owner": {"display_name": "luiscubal", "reputation": 10472, "user_id": 32775, "user_type": "registered", "accept_rate": 92}}, {"body": "Yes, advanced reading skills are difficult for most programmers ;-) Your second point is a good one. Reuse does not come without a price tag, of course. Not like some companies think, that there must be just a directive to make reuse. That also is the reason, why many where disappointed by reuse. Something for nothing does not work in IT either!", "edited": false, "comment_id": 929287, "creation_date": 1247318972, "score": 0, "owner": {"display_name": "Juergen", "reputation": 7262, "user_id": 122012, "user_type": "registered", "accept_rate": 43}}], "creation_date": 1245434545, "comment_count": 2, "score": 2, "owner": {"display_name": "Juergen", "reputation": 7262, "user_id": 122012, "user_type": "registered", "accept_rate": 43}, "last_editor": {"display_name": "oxbow_lakes", "reputation": 79448, "user_id": 16853, "user_type": "registered", "accept_rate": 92}, "last_edit_date": 1246967089, "up_vote_count": 2}, {"community_owned_date": 1245437278, "body": "<p><strong>Using Stored Proc is easy to maintain and less deployment</strong> <em>vs</em> <strong>Using ORM is OO way thus it is good</strong></p>\n\n<p>I've heard this lot in many of my projects, when ever this statements appear it is always tough get it settled.</p>\n", "answer_id": 1019498, "tags": [], "down_vote_count": 2, "last_activity_date": 1245437278, "comments": [{"body": "I haven&#39;t noticed much OO about most uses of ORM - just three layers of (not much) abstraction to maintain.", "edited": false, "comment_id": 1655815, "creation_date": 1258730565, "score": 0, "owner": {"display_name": "daf", "reputation": 5360, "user_id": 96168, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1245437278, "comment_count": 1, "score": 3, "owner": {"display_name": "asyncwait", "reputation": 1915, "user_id": 125904, "user_type": "registered", "accept_rate": 76}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1245796241, "body": "<p><strong>Emacs is better</strong></p>\n", "answer_id": 1035607, "tags": [], "down_vote_count": 2, "last_activity_date": 1245796241, "comments": [{"body": "Actually, either vi or vim is better.", "edited": false, "comment_id": 1422105, "creation_date": 1255469265, "score": 10, "owner": {"display_name": "David Thornley", "reputation": 41604, "user_id": 14148, "user_type": "registered", "accept_rate": 80}}, {"body": "Only for those who have stuff in their .emacs file (which they understand).", "edited": false, "comment_id": 1481600, "creation_date": 1256320992, "score": 2, "owner": {"display_name": "Thorbj\u00f8rn Ravn Andersen", "reputation": 43814, "user_id": 53897, "user_type": "registered", "accept_rate": 57}}, {"body": "as a vim user, I have to +1 this one.", "edited": false, "comment_id": 1808805, "creation_date": 1260847697, "score": 0, "owner": {"display_name": "just somebody", "reputation": 10815, "user_id": 209605, "user_type": "registered", "accept_rate": 62}}, {"body": "What&#39;s funny is in the past year and a half, I&#39;ve come to love vi more.", "edited": false, "comment_id": 4480060, "creation_date": 1289452842, "score": 0, "owner": {"display_name": "Reverend Gonzo", "reputation": 18539, "user_id": 84378, "user_type": "registered", "accept_rate": 85}}], "creation_date": 1245796241, "comment_count": 4, "score": 25, "owner": {"display_name": "Reverend Gonzo", "reputation": 18539, "user_id": 84378, "user_type": "registered", "accept_rate": 85}, "is_accepted": false, "up_vote_count": 27}, {"community_owned_date": 1245799230, "body": "<p>I don't care how powerful a programming language is if its syntax is not intuitive and I can't set it aside for some period of time and come back to it without too much effort at refreshing on the details.  I would rather a language itself be intuitive than it be cryptic but powerful for creating DSL's.  A computer language is a user interface for ME, and I want it designed for intuitive ease of use like any other user interface.</p>\n", "answer_id": 1035761, "tags": [], "down_vote_count": 1, "last_activity_date": 1245799230, "creation_date": 1245799230, "comment_count": 0, "score": 3, "owner": {"display_name": "Anon", "reputation": 4162, "user_id": 108445, "user_type": "unregistered"}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1247096894, "body": "<p>Understanding \"what\" to do is at least as important as knowing \"how\" to do it, and almost always it's much more important than knowing the 'best' way to solve a problem.  Domain-specific knowledge is often crucial to write good software.</p>\n", "answer_id": 1101151, "tags": [], "down_vote_count": 0, "last_activity_date": 1247096894, "comments": [{"body": "Oops, I read question earlier, and then all the responses, and my question seemed to fit. I just read the initial question again, and I&#39;m not sure it really answers that. Delete it if not, and sorry for the noise.", "edited": false, "comment_id": 915925, "creation_date": 1247097078, "score": 0, "owner": {"display_name": "Bill Hallahan", "user_type": "does_not_exist"}}], "creation_date": 1247096894, "comment_count": 1, "score": 3, "owner": {"display_name": "Bill Hallahan", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1247097805, "body": "<p><strong>It is OK to use short variable names</strong></p>\n\n<p>But not for indices in nested loops.</p>\n", "answer_id": 1101194, "tags": [], "down_vote_count": 0, "last_activity_date": 1247097805, "comments": [{"body": "Not for indices in nested loops? Why? Its easy to distinguish them when definition is near usage. Well, I can only think of i and j as a bad choice, because the look so similar.", "edited": false, "comment_id": 1808190, "creation_date": 1260837011, "score": 0, "owner": {"display_name": "Frunsi", "reputation": 5185, "user_id": 206247, "user_type": "registered", "accept_rate": 100}}, {"body": "Because it is easy to forget which variable belongs to which loop.", "edited": false, "comment_id": 1818105, "creation_date": 1260949013, "score": 0, "owner": {"display_name": "quant_dev", "reputation": 3379, "user_id": 59557, "user_type": "registered", "accept_rate": 91}}], "creation_date": 1247097805, "comment_count": 2, "score": 2, "owner": {"display_name": "quant_dev", "reputation": 3379, "user_id": 59557, "user_type": "registered", "accept_rate": 91}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1247102913, "body": "<h2>Defects and Enhancement Requests are the Same</h2>\n\n<p>Unless you are developing software on a fixed-price contract, there should be no difference when prioritizing your backlog between \"bugs\" and \"enhancements\" and \"new feature\" requests. OK - maybe that's not controversial, but I have worked on enterprise IT projects where the edict was that \"all open bugs must be fixed in the next release\", even if that left no developer time for the most desirable new features. So, a problem which was encountered by 1% of the users, 1% of the time took precedence over a new feature would might be immediately useful to 90% of the users.  I like to take my entire project backlog, put estimates around each item and take it to the user community for prioritization - with items not classified as \"defect\", \"enhancement\", etc.</p>\n", "answer_id": 1101396, "tags": [], "down_vote_count": 1, "last_activity_date": 1247102913, "creation_date": 1247102913, "comment_count": 0, "score": 3, "owner": {"display_name": "Ed Schembor", "reputation": 3252, "user_id": 125484, "user_type": "registered", "accept_rate": 81}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1247270896, "body": "<p>Software development is an art.</p>\n", "answer_id": 1112525, "tags": [], "down_vote_count": 1, "last_activity_date": 1247270896, "creation_date": 1247270896, "comment_count": 0, "score": 3, "owner": {"display_name": "David Hinkes", "reputation": 769, "user_id": 136562, "user_type": "registered", "accept_rate": 71}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1247370788, "body": "<p>in almost <em>all</em> cases, comments are evil: <a href=\"http://gooddeveloper.wordpress.com/\" rel=\"nofollow\">http://gooddeveloper.wordpress.com/</a></p>\n", "answer_id": 1115276, "tags": [], "down_vote_count": 1, "last_activity_date": 1247370788, "comments": [{"body": "You should be commenting on the why, not the what or how.", "edited": false, "comment_id": 1285943, "creation_date": 1253212872, "score": 2, "owner": {"display_name": "reinierpost", "reputation": 4991, "user_id": 17945, "user_type": "registered", "accept_rate": 35}}], "creation_date": 1247370788, "comment_count": 1, "score": 3, "owner": {"display_name": "Ray Tayek", "reputation": 5232, "user_id": 51292, "user_type": "registered", "accept_rate": 59}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1248125828, "body": "<h1>Recursion is fun.</h1>\n\n<p>Yes, I know it can be an ineffectual use of stack space, and all that jazz.  But some times a recursive algorithm is just so nice and clean compared to it's iterative counterpart.  I always get a bit gleeful when I can sneak a recursive function in somewhere.</p>\n", "is_accepted": false, "tags": [], "answer_id": 1156103, "down_vote_count": 0, "last_activity_date": 1257785073, "comments": [{"body": "&quot;Ineffectual use of stack space&quot; -- only in crappy languages. See <a href=\"http://en.wikipedia.org/wiki/Tail_recursion\" rel=\"nofollow\">en.wikipedia.org/wiki/Tail_recursion</a>", "edited": false, "comment_id": 1427203, "creation_date": 1255539069, "score": 0, "owner": {"display_name": "Juliet", "reputation": 45513, "user_id": 40516, "user_type": "registered", "accept_rate": 89}}, {"body": "That&#39;s what&#39;s great about being a programmer - cheap thrills :-) At least Electrical Engineers get to sniff rosin smoke.", "edited": false, "comment_id": 1542699, "creation_date": 1257275549, "score": 1, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "@Juliet: Only crap languages?  So all languages that don&#39;t have tail recursion are crap?  Spare me.", "edited": false, "comment_id": 1560365, "creation_date": 1257488986, "score": 0, "owner": {"display_name": "Stu Thompson", "reputation": 20094, "user_id": 2961, "user_type": "registered", "accept_rate": 81}}], "creation_date": 1248125828, "comment_count": 3, "score": 10, "owner": {"display_name": "Stu Thompson", "reputation": 20094, "user_id": 2961, "user_type": "registered", "accept_rate": 81}, "last_editor": {"display_name": "Stu Thompson", "reputation": 20094, "user_id": 2961, "user_type": "registered", "accept_rate": 81}, "last_edit_date": 1257785073, "up_vote_count": 10}, {"community_owned_date": 1248189048, "body": "<p><strong>Exceptions should only be used in truly exceptional cases</strong></p>\n\n<p>It seems like the use of exceptions has run rampant on the projects I've worked on recently.</p>\n\n<p>Here's an example:</p>\n\n<p>We have filters that intercept web requests.  The filter calls a screener, and the screener's job is to check to see if the request has certain input parameters and validate the parameters.  You set the fields to check for, and the abstract class makes sure the parameters are not blank, then calls a screen() method implemented by your particular class to do more extended validation:</p>\n\n<pre><code>public boolean processScreener(HttpServletRequest req, HttpServletResponse resp, FilterConfig filterConfig) throws Exception{           \n            // \n            if (!checkFieldExistence(req)){\n                    return false;\n            }\n            return screen(req,resp,filterConfig);\n    }\n</code></pre>\n\n<p>That checkFieldExistance(req) method <strong>never</strong> returns false.  It returns true if none of the fields are missing, and throws an exception if a field is missing.</p>\n\n<p>I know that this is bad design, but part of the problem is that some architects here believe that you need to throw an exception every time you hit something unexpected.</p>\n\n<p>Also, I am aware that the signature of checkFieldExistance(req) <strong>does</strong> throw an Exception, its just that almost all of our methods do - so it didn't occur to me that the method might throw an exception instead of returning false.  Only until I dug through the code I noticed it.</p>\n", "answer_id": 1159818, "tags": [], "down_vote_count": 0, "last_activity_date": 1248189048, "comments": [{"body": "And don&#39;t forget the overhead involved when throwing an exception as well. Throw/catch might be fairly harmless performance-wise for a single operation, but start looping over it and... ho-boy. I speak from experience.", "edited": false, "comment_id": 1293190, "creation_date": 1253310836, "score": 0, "owner": {"display_name": "Tullo", "reputation": 1319, "user_id": 130200, "user_type": "registered"}}], "creation_date": 1248189048, "comment_count": 1, "score": 7, "owner": {"display_name": "LGriffel", "reputation": 101, "user_id": 140218, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1248194727, "body": "<p><strong>Programmers who spend all day answering questions on Stackoverflow are probably not doing the work they are being paid to do.</strong></p>\n", "answer_id": 1160361, "tags": [], "down_vote_count": 3, "last_activity_date": 1248194727, "comments": [{"body": "Is this controversial? I guess no! -1!", "edited": false, "comment_id": 1239206, "creation_date": 1252481867, "score": 0, "owner": {"display_name": "Philippe Grondier", "reputation": 7275, "user_id": 11436, "user_type": "registered", "accept_rate": 73}}, {"body": "the latter part is highly controversial", "edited": false, "comment_id": 1302269, "creation_date": 1253543555, "score": 0, "owner": {"display_name": "Egg", "reputation": 200, "user_id": 78688, "user_type": "registered", "accept_rate": 100}}, {"body": "I use the excuse: &quot; I am charging my time to Professional Development&quot; on the grounds that I am learning something useful as a developer.  Boss agrees.", "edited": false, "comment_id": 1493325, "creation_date": 1256571648, "score": 6, "owner": {"display_name": "amischiefr", "reputation": 1951, "user_id": 121275, "user_type": "registered", "accept_rate": 50}}, {"body": "except I&#39;m not getting &quot;paid&quot; to do anything right now.", "edited": false, "comment_id": 1560377, "creation_date": 1257489388, "score": 2, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "i&#39;m not geting paid to do anything now.just like hasen j.", "edited": false, "comment_id": 1806136, "creation_date": 1260817179, "score": 0, "owner": {"display_name": "Behrooz", "reputation": 790, "user_id": 179795, "user_type": "registered", "accept_rate": 81}}, {"body": "I agree, but in my defense I&#39;ve hit a wall and need a breather before tackling the problem again.", "edited": false, "comment_id": 3065153, "creation_date": 1276027004, "score": 0, "owner": {"display_name": "RavB", "reputation": 1114, "user_id": 340574, "user_type": "registered", "accept_rate": 78}}, {"body": "My friend likes to use the excuse: &quot;I&#39;m Compiling&quot;", "edited": false, "comment_id": 3669047, "creation_date": 1282121138, "score": 1, "owner": {"display_name": "Dave", "reputation": 1821, "user_id": 419275, "user_type": "registered", "accept_rate": 79}}, {"body": "HAHA! Tell that to reputation monsters!", "edited": false, "comment_id": 4949207, "creation_date": 1293113055, "score": 0, "owner": {"display_name": "Smur", "reputation": 1562, "user_id": 254131, "user_type": "registered", "accept_rate": 89}}], "creation_date": 1248194727, "comment_count": 8, "score": 76, "owner": {"display_name": "Dan Diplo", "reputation": 17922, "user_id": 140392, "user_type": "registered", "accept_rate": 82}, "is_accepted": false, "up_vote_count": 79}, {"community_owned_date": 1248324387, "body": "<p>Remove classes.\nNumber of classes (methods of classes) in .NET Framework handles exception implicitly. It's difficult to work with a dumb person.</p>\n", "answer_id": 1169658, "tags": [], "down_vote_count": 0, "last_activity_date": 1248324387, "creation_date": 1248324387, "comment_count": 0, "score": 1, "owner": {"display_name": "AVD", "reputation": 64704, "user_id": 142822, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1248836959, "body": "<p>Don't use keywords for basic types if the language has the actual type exposed. In C#, this would refer to bool (Boolean), int (Int32), float (Single), long (Int64). 'int', 'bool', etc are not actual parts of the language, but rather just 'shortcuts' or 'aliases' for the actual type. Don't use something that doesn't exist! And in my opinion, Int16, Int32, Int64, Boolean, etc makes a heck of a lot more sense then 'short', 'long', 'int'.</p>\n", "answer_id": 1197875, "tags": [], "down_vote_count": 1, "last_activity_date": 1248836959, "comments": [{"body": "<code>int</code>, <code>bool</code> etc most certainly <i>are</i> part of the C# language. They&#39;re right there in the specification! They may not be part of the underlying platform, but they&#39;re definitely part of the C# language.", "edited": false, "comment_id": 1021251, "creation_date": 1248844953, "score": 4, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I think platform is what I meant. * looks around * Thanks for the clarification!", "edited": false, "comment_id": 1021384, "creation_date": 1248847693, "score": 0, "owner": {"display_name": "David Anderson - DCOM", "reputation": 8199, "user_id": 52589, "user_type": "registered", "accept_rate": 94}}], "creation_date": 1248836959, "comment_count": 2, "score": 1, "owner": {"display_name": "David Anderson - DCOM", "reputation": 8199, "user_id": 52589, "user_type": "registered", "accept_rate": 94}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1248876383, "body": "<p>I generally hold pretty controversial, strong and loud opinions, so here's just a couple of them:</p>\n\n<p><strong><em>\"Because we're a Microsoft outfit/partner/specialist\"</em> is never a valid argument.</strong></p>\n\n<p>The company I'm working in now identifies itself, first and foremost, as a Microsoft specialist. So the aforementioned argument gets thrown around quite a bit, and I've yet to see a context where it's valid.</p>\n\n<p>I can't see why it's a reason to promote Microsoft's technology and products in every applicable corner, overriding customer and employee satisfaction, and general pragmatics.</p>\n\n<p>This just a cornerstone of my deep hatred towards politics in software business.</p>\n\n<p><strong>MOSS (Microsoft Office Sharepoint Server) is a piece of shit.</strong></p>\n\n<p>Kinda echoes the first opinion, but I honestly think MOSS, as it is, should be shot out of the market. It costs gazillions to license and set up, pukes on web standards and makes developers generally pretty unhappy. I have yet to see a MOSS project that has an overall positive outcome.</p>\n\n<p>Yet time after time, a customer approaches us and asks for a MOSS solution.</p>\n", "is_accepted": false, "tags": [], "answer_id": 1200514, "down_vote_count": 0, "last_activity_date": 1249914494, "comments": [{"body": "MOSS = Microsoft Office SharePoint Server ?", "edited": false, "comment_id": 1043477, "creation_date": 1249218099, "score": 0, "owner": {"display_name": "tuinstoel", "reputation": 6481, "user_id": 43901, "user_type": "registered"}}, {"body": "As someone who occasionally has to program for Sharepoint, I will state that you second opinion is not controversial at all.", "edited": false, "comment_id": 1642110, "creation_date": 1258576562, "score": 0, "owner": {"display_name": "Chris Cudmore", "reputation": 13912, "user_id": 18907, "user_type": "registered", "accept_rate": 93}}, {"body": "MOSS is crap!!!!!", "edited": false, "comment_id": 1809307, "creation_date": 1260855954, "score": 0, "owner": {"display_name": "Faruz", "reputation": 3789, "user_id": 174119, "user_type": "registered", "accept_rate": 82}}, {"body": "I agree 250% with everything. Keep speaking your mind. Lots of people see things this way!", "edited": false, "comment_id": 2491866, "creation_date": 1269318245, "score": 0, "owner": {"display_name": "JL.", "reputation": 19694, "user_id": 41543, "user_type": "registered", "accept_rate": 83}}], "creation_date": 1248876383, "comment_count": 4, "score": 15, "owner": {"display_name": "theiterator", "reputation": 235, "user_id": 6108, "user_type": "registered"}, "last_editor": {"display_name": "theiterator", "reputation": 235, "user_id": 6108, "user_type": "registered"}, "last_edit_date": 1249914494, "up_vote_count": 15}, {"community_owned_date": 1248876901, "body": "<p><strong>Linq2Sql is not that bad</strong></p>\n\n<p>I've come across a lot of posts trashing Linq2Sql. I know it's not perfect, but what is?</p>\n\n<p>Personally, I think it has its drawbacks, but overall it can be great for prototyping, or for developing small to medium apps. When I consider how much time it has saved me from writing boring DAL code, I can't complain, especially considering the alternatives we had not so long ago.</p>\n", "answer_id": 1200567, "tags": [], "down_vote_count": 1, "last_activity_date": 1248876901, "comments": [{"body": "but it&#39;s unreliable", "edited": false, "comment_id": 1322503, "creation_date": 1253810860, "score": 0, "owner": {"display_name": "Jader Dias", "reputation": 27851, "user_id": 48465, "user_type": "registered", "accept_rate": 98}}], "creation_date": 1248876901, "comment_count": 1, "score": 4, "owner": {"display_name": "Dkong", "reputation": 979, "user_id": 112603, "user_type": "registered", "accept_rate": 57}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1248880022, "body": "<p><strong>Greater-than operators (>, >=) should be deprecated</strong></p>\n\n<p>I tried coding with a preference for less-than over greater-than for awhile and it stuck! I don't want to go back, and indeed I feel that everyone should do it my way in this case.</p>\n\n<p>Consider common mathematical 'range' notation:  0 &lt;= i &lt; 10</p>\n\n<p>That's easy to approximate in code now and you get used to seeing the idiom where the variable is repeated in the middle joined by &amp;&amp;:</p>\n\n<pre><code>if (0 &lt;= i &amp;&amp; i &lt; 10)\n    return true;\nelse\n    return false;\n</code></pre>\n\n<p>Once you get used to that pattern, you'll never look at silliness like </p>\n\n<pre><code>if ( ! (i &lt; 0 || i &gt;= 9))\n    return true;\n</code></pre>\n\n<p>the same way again.</p>\n\n<p>Long sequences of relations become a bit easier to work with because the operands tend towards nondecreasing order.</p>\n\n<p>Furthermore, a preference for <code>operator&lt;</code> is enshrined in the C++ standards. In some cases <code>operator=</code> is defined in terms of it! (as <code>!(a&lt;b || b&lt;a)</code>)</p>\n", "answer_id": 1200962, "tags": [], "down_vote_count": 0, "last_activity_date": 1248880022, "comments": [{"body": "Ick, no. If I want code to throw an exception when a string is over a certain length (for example) I&#39;d <i>far</i> rather use <code>if (text.Length &gt; 30) { throw new ... }</code> than <code>if (!(text.Length &lt;= 30)) { throw new ... }</code>.", "edited": false, "comment_id": 1024445, "creation_date": 1248883905, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "<code>if (30 &lt; text.Length) throw ....</code> is another option Actually, I prefer <code>(!(text.Length &lt;= 30))</code> because it nicely matches <code>assert(text.Length &lt;= 30)</code>. Think about when multiple conditions get compounded. Keeping the error checking logic in that &#39;positive assertion&#39; sense helps reduce logic bugs. I know it looks a little strange the first time. It&#39;s controversial and I don&#39;t push it on others. But try it with an open mind and you might grow to like it better. Or you might not. :-)", "edited": false, "comment_id": 1024743, "creation_date": 1248886677, "score": 1, "owner": {"display_name": "Marsh Ray", "reputation": 2190, "user_id": 116270, "user_type": "registered"}}, {"body": "to be pedantic, <code>if(text.Length &gt; 30)</code> is equivalent to <code>if(30 &lt;= text.Length)</code> because the comparison goes from <i>exclusive</i> to <i>inclusive</i>", "edited": false, "comment_id": 1470453, "creation_date": 1256185514, "score": 0, "owner": {"display_name": "warren", "reputation": 13593, "user_id": 4418, "user_type": "registered", "accept_rate": 94}}, {"body": "s/is equivalent/is not equivalent/ is I think what you meant. In any case, I never said those two were or were not equivalent.", "edited": false, "comment_id": 1473393, "creation_date": 1256223611, "score": 0, "owner": {"display_name": "Marsh Ray", "reputation": 2190, "user_id": 116270, "user_type": "registered"}}, {"body": "Why not just return your if-condition?", "edited": false, "comment_id": 1971602, "creation_date": 1263246134, "score": 1, "owner": {"display_name": "GManNickG", "reputation": 189384, "user_id": 87234, "user_type": "registered", "accept_rate": 94}}, {"body": "I would if that was really what was needed. Perhaps my example was a bit too trivial. Imagine something more interesting and useful in the if/else bodies.", "edited": false, "comment_id": 1973433, "creation_date": 1263268303, "score": 0, "owner": {"display_name": "Marsh Ray", "reputation": 2190, "user_id": 116270, "user_type": "registered"}}, {"body": "It&#39;s language dependent, but in C++ <code>3 &gt; getAirplane()</code> throws a compiler error, but <code>getAirplane() &lt; 3</code> might not depending on which constructors are defined for your Airplane class.", "edited": false, "comment_id": 2310328, "creation_date": 1267146048, "score": 0, "owner": {"display_name": "thebretness", "reputation": 445, "user_id": 174701, "user_type": "registered"}}], "creation_date": 1248880022, "comment_count": 7, "score": 12, "owner": {"display_name": "Marsh Ray", "reputation": 2190, "user_id": 116270, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 12}, {"community_owned_date": 1248881515, "body": "<p>Functional programming is NOT more intuitive or easier to learn than imperative programming.</p>\n\n<p>There are many good things about functional programming, but I often hear functional programmers say it's easier to understand functional programming than imperative programming for people with no programming experience. From what I've seen it's the opposite, people find trivial problems hard to solve because they don't get how to manage and reuse their temporary results when you end up in a world without state.</p>\n", "answer_id": 1201136, "tags": [], "down_vote_count": 1, "last_activity_date": 1248881515, "comments": [{"body": "Controversial?   Functional programming sucks. That&#39;s controversial.  However, &quot;functional programming is hard&quot;.  That&#39;s a tautology.", "edited": false, "comment_id": 2560333, "creation_date": 1270081335, "score": 0, "owner": {"display_name": "Warren  P", "reputation": 26418, "user_id": 84704, "user_type": "registered", "accept_rate": 92}}, {"body": "Part of why it&#39;s hard is because we&#39;re damaged (pre-wired) for our iterative, procedural programming.   It may be that functional programming is actually easier to absorb for a neophyte than procedural programming is.  Are there any studies out there on this?", "edited": false, "comment_id": 2560337, "creation_date": 1270081400, "score": 0, "owner": {"display_name": "Warren  P", "reputation": 26418, "user_id": 84704, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1248881515, "comment_count": 2, "score": 2, "owner": {"display_name": "Laserallan", "reputation": 6142, "user_id": 11758, "user_type": "registered", "accept_rate": 71}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1249115139, "body": "<p>MIcrosoft is not as bad as many say they are.</p>\n", "answer_id": 1216162, "tags": [], "down_vote_count": 4, "last_activity_date": 1249115139, "comments": [{"body": "Microsoft is not as bad?.. ok, going to shot my feet...", "edited": false, "comment_id": 1425307, "creation_date": 1255523016, "score": 0, "owner": {"display_name": "Lucas Gabriel S\u00e1nchez", "reputation": 5917, "user_id": 20601, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1249115139, "comment_count": 1, "score": 10, "owner": {"display_name": "Aftershock", "reputation": 2061, "user_id": 135807, "user_type": "registered", "accept_rate": 65}, "is_accepted": false, "up_vote_count": 14}, {"community_owned_date": 1249340980, "body": "<p><strong>1-based arrays should always be used instead of 0-based arrays. 0-based arrays are unnatural, unnecessary, and error prone.</strong>  </p>\n\n<p>When I count apples or employees or widgets I start at one, not zero.  I teach my kids the same thing.  There is no such thing as a 0th apple or 0th employee or 0th widget.  Using 1 as the base for an array is much more intuitive and less error-prone.  Forget about plus-one-minus-one-hell (as we used to call it).  0-based arrays are an unnatural construct invented by the computer science - they do not reflect reality and computer programs should reflect reality as much as possible.</p>\n", "is_accepted": false, "tags": [], "answer_id": 1225064, "down_vote_count": 5, "last_activity_date": 1252964355, "comments": [{"body": "Actually, 0-based arrays are based in the reality of pointer addressing, which stems from how memory is laid out.", "edited": false, "comment_id": 1050251, "creation_date": 1249341169, "score": 4, "owner": {"display_name": "Paul Nathan", "reputation": 24339, "user_id": 26227, "user_type": "registered", "accept_rate": 71}}, {"body": "Can you tell me which is the first minute of the hour, please? I always forget...", "edited": false, "comment_id": 1050329, "creation_date": 1249342500, "score": 29, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Paul: Agreed! And it&#39;s completely abstract and has nothing to do with counting. @Jon: The first minute is one, when we get to one we have counted off the first minute.  Just like your first birthday celebrates your first year of life.  There is no 0th anything.", "edited": false, "comment_id": 1050406, "creation_date": 1249343909, "score": 0, "owner": {"display_name": "Jack Straw", "reputation": 213, "user_id": 147430, "user_type": "registered"}}, {"body": "+1 @Jack, this is the perfect sort of controversial programming opinion.  As much as my inner programmer hates to admit it, you&#39;ve actually got a point.  It even enticed Jon Skeet to enter the controversy.", "edited": false, "comment_id": 1065205, "creation_date": 1249568785, "score": 0, "owner": {"display_name": "Ash", "reputation": 35511, "user_id": 5023, "user_type": "registered", "accept_rate": 85}}, {"body": "I completely disagree with this opinion, so I&#39;m upvoting it.", "edited": false, "comment_id": 1153814, "creation_date": 1251086057, "score": 19, "owner": {"display_name": "Theran", "reputation": 2820, "user_id": 40180, "user_type": "registered", "accept_rate": 100}}, {"body": "It&#39;s offset vs. index, fencepost vs. fence-segment. Posts work well for open-end ranges and segments work well for closed-end ranges.", "edited": false, "comment_id": 1237753, "creation_date": 1252449488, "score": 0, "owner": {"display_name": "Samuel Danielson", "reputation": 1248, "user_id": 100089, "user_type": "registered", "accept_rate": 65}}, {"body": "Jon skeet sleeps with a pillow under his gun", "edited": false, "comment_id": 1302677, "creation_date": 1253547655, "score": 0, "owner": {"display_name": "Egg", "reputation": 200, "user_id": 78688, "user_type": "registered", "accept_rate": 100}}, {"body": "0-based arrays are (at least for me) very natural, and indeed, natural numbers begin with 0. +1 to this, is veeeeery controversial.", "edited": false, "comment_id": 1425304, "creation_date": 1255522975, "score": 1, "owner": {"display_name": "Lucas Gabriel S\u00e1nchez", "reputation": 5917, "user_id": 20601, "user_type": "registered", "accept_rate": 100}}, {"body": "Who says you have to use element 0 if it&#39;s not appropriate for the domain? Are you <i>that</i> hard up for memory that you can&#39;t waste one element?", "edited": false, "comment_id": 1438467, "creation_date": 1255689849, "score": 0, "owner": {"display_name": "Jeanne Pindar", "reputation": 508, "user_id": 147062, "user_type": "registered"}}, {"body": "@Jeanne: If you&#39;re not using the 0th element, effectively that&#39;s one-based :).", "edited": false, "comment_id": 1440552, "creation_date": 1255711442, "score": 0, "owner": {"display_name": "Jack Straw", "reputation": 213, "user_id": 147430, "user_type": "registered"}}, {"body": "I interpreted your post as saying compilers should default to using one-based arrays.", "edited": false, "comment_id": 1445308, "creation_date": 1255814711, "score": 0, "owner": {"display_name": "Jeanne Pindar", "reputation": 508, "user_id": 147062, "user_type": "registered"}}, {"body": "+1 I often have trouble in real life situations because I&#39;m so used to start counting at 0 o.o.", "edited": false, "comment_id": 2849373, "creation_date": 1273583010, "score": 0, "owner": {"display_name": "helpermethod", "reputation": 13220, "user_id": 1178669, "user_type": "registered", "accept_rate": 94}}], "creation_date": 1249340980, "comment_count": 12, "score": 25, "owner": {"display_name": "Jack Straw", "reputation": 213, "user_id": 147430, "user_type": "registered"}, "last_editor": {"display_name": "Jack Straw", "reputation": 213, "user_id": 147430, "user_type": "registered"}, "last_edit_date": 1252964355, "up_vote_count": 30}, {"community_owned_date": 1249342200, "body": "<p><strong>Developing on .NET is not programming. Its just stitching together other people's code.</strong></p>\n\n<p>Having come from a coding background where you were required to know the hardware, and where this is still a vital requirements in my industry, I view high level languages as simply assembling someone else's work. Nothing essentially wrong with this, but is it 'programming'?</p>\n\n<p>MS has made a mint from doing the hard work and presenting 'developers' with symbolic instruction syntax. I seem to now know more and more developers who appear constrained by the existence or non-existence of a class to perform a job.</p>\n\n<p>My opinion comes from the notion that to be a programmer you should be able to programme at the lowest level your platform allows. So if you're programming .NET then you need to be able to stick your head under the hood and work out the solution, rather than rely on someone else creating a class for you. That's simply lazy and does not qualify as 'development' in my book.</p>\n", "is_accepted": false, "tags": [], "answer_id": 1225112, "down_vote_count": 5, "last_activity_date": 1250462595, "comments": [{"body": "That&#39;s right baby, REAL programmers use 1&#39;s and 0&#39;s!!!", "edited": false, "comment_id": 1050325, "creation_date": 1249342413, "score": 0, "owner": {"display_name": "Cameron MacFarland", "reputation": 32978, "user_id": 3820, "user_type": "registered", "accept_rate": 73}}, {"body": "Does a down-vote mean this opinion is not controversial?", "edited": false, "comment_id": 1050368, "creation_date": 1249343260, "score": 1, "owner": {"display_name": "Gerard", "reputation": 1702, "user_id": 34411, "user_type": "registered"}}, {"body": "Stated, but not reasoned.  -1", "edited": false, "comment_id": 1110549, "creation_date": 1250319072, "score": 0, "owner": {"display_name": "Jay", "reputation": 4868, "user_id": 118962, "user_type": "registered", "accept_rate": 100}}, {"body": "Added some reason to the opinion.", "edited": false, "comment_id": 1115467, "creation_date": 1250462642, "score": 0, "owner": {"display_name": "Gerard", "reputation": 1702, "user_id": 34411, "user_type": "registered"}}, {"body": "You may understand assembly but do you get how the hardware works? How electrons flow into different gates, how circuits are manufactured? Its all about choosing what you want to accomplish and the level of abstraction you need to achieve it", "edited": false, "comment_id": 1153822, "creation_date": 1251086192, "score": 0, "owner": {"display_name": "Eric", "reputation": 10787, "user_id": 6367, "user_type": "registered", "accept_rate": 72}}, {"body": "This also applies to java", "edited": false, "comment_id": 1184921, "creation_date": 1251488717, "score": 0, "owner": {"display_name": "hiena", "reputation": 821, "user_id": 91464, "user_type": "registered"}}, {"body": "I wouldn&#39;t say that stating that some developers who program using .NET (maybe even a lot, <i>maybe</i> even the majority) are just stiching is necessarily controversial.  Heck, I&#39;d probably agree with you.  Extending that to <i>everyone</i> though as you have done! Now, that&#39;s controversial! There&#39;s a lot of very smart engineers who program using .NET.  Also, I&#39;d disagree that you need to be able to program to the lowest level of the platform.  You need to know enough to understand the factors that affect your app.", "edited": false, "comment_id": 1323836, "creation_date": 1253825202, "score": 0, "owner": {"display_name": "Phil", "reputation": 1577, "user_id": 148089, "user_type": "registered", "accept_rate": 67}}, {"body": "This is just ridiculous.  Let me counter it: low-level programming is not programming.  It is just stitching CPU instructions together.", "edited": false, "comment_id": 1743628, "creation_date": 1259957481, "score": 2, "owner": {"display_name": "reinierpost", "reputation": 4991, "user_id": 17945, "user_type": "registered", "accept_rate": 35}}, {"body": "Case and Point - Microsoft&#39;s top developers prefer old-school coding methods - <a href=\"http://shar.es/aE0Qj\" rel=\"nofollow\">shar.es/aE0Qj</a>", "edited": false, "comment_id": 1752351, "creation_date": 1260144152, "score": 0, "owner": {"display_name": "Gerard", "reputation": 1702, "user_id": 34411, "user_type": "registered"}}, {"body": "@Gerard nah, down voting means you don&#39;t agree. It&#39;s what I&#39;m doing with all the C++ promoting answers and C downmoting answers.", "edited": false, "reply_to_user": {"display_name": "Gerard", "reputation": 1702, "user_id": 34411, "user_type": "registered"}, "comment_id": 4912383, "creation_date": 1292857211, "score": 0, "owner": {"display_name": "user142019", "user_type": "does_not_exist"}}], "creation_date": 1249342200, "comment_count": 10, "score": 2, "owner": {"display_name": "Gerard", "reputation": 1702, "user_id": 34411, "user_type": "registered"}, "last_editor": {"display_name": "Gerard", "reputation": 1702, "user_id": 34411, "user_type": "registered"}, "last_edit_date": 1250462595, "up_vote_count": 7}, {"community_owned_date": 1249567960, "body": "<p>I'd rather be truly skilled/experienced in an older technology that allows me to solve real world problems effectively,  as opposed to new \"fashionable\" technologies that still going through the adolescent stage.</p>\n", "answer_id": 1239146, "tags": [], "down_vote_count": 0, "last_activity_date": 1249567960, "creation_date": 1249567960, "comment_count": 0, "score": 2, "owner": {"display_name": "Ash", "reputation": 35511, "user_id": 5023, "user_type": "registered", "accept_rate": 85}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1249568265, "body": "<p>When many new technologies appear on the scene I only learn enough about them to decide if I need them right now.  </p>\n\n<p>If not, I put them aside until the rough edges are knocked off by \"early adopters\" and then check back again every few months / years.</p>\n", "answer_id": 1239173, "tags": [], "down_vote_count": 0, "last_activity_date": 1249568265, "comments": [{"body": "In what sense is this an controversial opinion?", "edited": false, "comment_id": 1239166, "creation_date": 1252481114, "score": 0, "owner": {"display_name": "Ikke", "reputation": 39826, "user_id": 20261, "user_type": "registered", "accept_rate": 82}}, {"body": "@Ikke, Why?  Surely this makes me an out of touch dinosaur, scared of change and clinging to out-dated and obsolete technologies?  (I&#39;ve lost count of how many projects I&#39;ve worked on use new technologies because &quot;they&#39;re cool&quot; and will solve all our problems.)", "edited": false, "comment_id": 1245988, "creation_date": 1252577115, "score": 0, "owner": {"display_name": "Ash", "reputation": 35511, "user_id": 5023, "user_type": "registered", "accept_rate": 85}}], "creation_date": 1249568265, "comment_count": 2, "score": 1, "owner": {"display_name": "Ash", "reputation": 35511, "user_id": 5023, "user_type": "registered", "accept_rate": 85}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1249572715, "body": "<p><strong>I'm always right.</strong></p>\n\n<p>Or call it design by discussion.  But if I propose something, you'd had better be able to demonstrate why I'm wrong, and propose an alternative that you can defend.</p>\n\n<p>Of course, this only works if I'm reasonable.  Luckily for you, I am.  :)</p>\n", "answer_id": 1239711, "tags": [], "down_vote_count": 0, "last_activity_date": 1249572715, "comments": [{"body": "It&#39;s a good attitude to have.  I&#39;ve learned to trust my instincts rather than defer to someone else&#39;s experience.  We can do it your way, but first you have to convince me that it&#39;s a good idea.", "edited": false, "comment_id": 1194526, "creation_date": 1251729509, "score": 0, "owner": {"display_name": "Dan Dyer", "reputation": 34649, "user_id": 5171, "user_type": "registered", "accept_rate": 100}}, {"body": "Why this remains me to my boss? ;)", "edited": false, "comment_id": 1425289, "creation_date": 1255522824, "score": 0, "owner": {"display_name": "Lucas Gabriel S\u00e1nchez", "reputation": 5917, "user_id": 20601, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1249572715, "comment_count": 2, "score": 3, "owner": {"display_name": "chris", "reputation": 12870, "user_id": 4782, "user_type": "registered", "accept_rate": 58}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1250872607, "body": "<p><strong>Usability problems are never the user's fault.</strong></p>\n\n<p>I cannot count how often a problem turned up when some user did something that everybody in the team considered \"just a stupid thing to do\". Phrases like \"why would somebody do that?\" or \"why doesn't he just do XYZ\" usually come up.</p>\n\n<p>Even though many are weary of hearing me say this: if a real-life user tried to do something that either did not work, caused something to go wrong or resulted in unexpected behaviour, then it can be anybody's fault, but <em>not</em> the user's!</p>\n\n<p>Please note that I do not mean people who intentionally misuse the software. I am referring to the presumable target group of the software.</p>\n", "answer_id": 1312989, "tags": [], "down_vote_count": 1, "last_activity_date": 1250872607, "creation_date": 1250872607, "comment_count": 0, "score": 3, "owner": {"display_name": "galaktor", "reputation": 1131, "user_id": 140607, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1251085488, "body": "<p>Agile    sucks.</p>\n", "answer_id": 1320390, "tags": [], "down_vote_count": 1, "last_activity_date": 1251085488, "creation_date": 1251085488, "comment_count": 0, "score": 1, "owner": {"display_name": "tsilb", "reputation": 4683, "user_id": 11112, "user_type": "registered", "accept_rate": 97}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1251134984, "body": "<p>That <a href=\"http://en.wikipedia.org/wiki/WordPress\" rel=\"nofollow\">WordPress</a> IS a <a href=\"http://en.wikipedia.org/wiki/Web%5Fcontent%5Fmanagement%5Fsystem\" rel=\"nofollow\">CMS</a> (technically, therefore indeed).</p>\n\n<p><a href=\"http://stackoverflow.com/questions/105648/wordpress-is-it-a-cms\">http://stackoverflow.com/questions/105648/wordpress-is-it-a-cms</a></p>\n", "is_accepted": false, "tags": [], "answer_id": 1323697, "down_vote_count": 3, "last_activity_date": 1255836467, "comments": [{"body": "Not exactly, it is a CMS focussed on blogging. Like MySpace is a social network focussed on music. And they are both terrible.", "edited": false, "comment_id": 4912326, "creation_date": 1292856950, "score": 0, "owner": {"display_name": "user142019", "user_type": "does_not_exist"}}], "creation_date": 1251134984, "comment_count": 1, "score": -1, "owner": {"display_name": "madcolor", "reputation": 4487, "user_id": 13954, "user_type": "registered", "accept_rate": 85}, "last_editor": {"display_name": "Peter Mortensen", "reputation": 8628, "user_id": 63550, "user_type": "registered", "accept_rate": 82}, "last_edit_date": 1255836467, "up_vote_count": 2}, {"community_owned_date": 1251224467, "body": "<p><strong>Jon Bentley's 'Programming Pearls' is no longer a useful tome.</strong></p>\n\n<p><a href=\"http://tinyurl.com/nom56r\" rel=\"nofollow\">http://tinyurl.com/nom56r</a></p>\n", "answer_id": 1330062, "tags": [], "down_vote_count": 1, "last_activity_date": 1251224467, "comments": [{"body": "Interesting opinion. I guess on the details I agree, but in terms of overall attitude, I think we can learn from it. I think we programmers tend to run in channels, and Jon has an attitude of inventiveness and questioning accepted &quot;wisdom&quot;. (Not to mention <b>fun</b>.)", "edited": false, "comment_id": 1422475, "creation_date": 1255473677, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "being extremely familair with C syntax carries-over to many languages. And anyone who thinks this is aimed at graduate students is off their rocker - I only know <i>one</i> person who read it in grad school. Almost <b><i>everyone</i></b> I know who has read it and/or owns a copy did so either before graduating college, or because they jumped to development from another field, or because they just wanted to.", "edited": false, "comment_id": 1477418, "creation_date": 1256271620, "score": 0, "owner": {"display_name": "warren", "reputation": 13593, "user_id": 4418, "user_type": "registered", "accept_rate": 94}}, {"body": "Why is it not useful?", "edited": false, "comment_id": 3896306, "creation_date": 1284320603, "score": 0, "owner": {"display_name": "kirk.burleson", "reputation": 746, "user_id": 246524, "user_type": "registered", "accept_rate": 85}}], "creation_date": 1251224467, "comment_count": 3, "score": 1, "owner": {"display_name": "Jim G.", "reputation": 5851, "user_id": 109941, "user_type": "registered", "accept_rate": 92}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1251383351, "body": "<p><strong>Delphi is fun</strong></p>\n\n<p>Yes, I know it's outdated, but Delphi was and is a very fun tool to develop with.</p>\n", "answer_id": 1341491, "tags": [], "down_vote_count": 0, "last_activity_date": 1251383351, "comments": [{"body": "We still code in Delphi for our business.  Lots of Delphi pros out there :)", "edited": false, "comment_id": 1406185, "creation_date": 1255202742, "score": 0, "owner": {"display_name": "Tom", "reputation": 1023, "user_id": 34504, "user_type": "registered", "accept_rate": 97}}, {"body": "Delphi isn&#39;t just fun, it&#39;s still the best way to build Windows applications.  If you want to say something controversial, the outdated bit will get you the votes.  Outdated? Yeah. Unicode. Cross platform coming soon. 64 bit coming soon. More developers at Embarcadero building and improving than at any other time in Delphi&#39;s history. Yeah. Outdated.  BLEAH!", "edited": false, "comment_id": 2560329, "creation_date": 1270081285, "score": 0, "owner": {"display_name": "Warren  P", "reputation": 26418, "user_id": 84704, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1251383351, "comment_count": 2, "score": 3, "owner": {"display_name": "Bab Yogoo", "reputation": 1369, "user_id": 144636, "user_type": "registered", "accept_rate": 71}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1251591128, "body": "<p>I think Java should have supported system-specific features via thin native library wrappers.</p>\n\n<p>Phrased another way, I think Sun's determination to require that Java only support portable features was a big mistake from almost everyone's perspective.</p>\n\n<p>A zillion years later, SWT came along and solved the basic problem of writing a portable native-widget UI, but by then Microsoft was forced to fork Java into C# and lots of C++ had been written that could otherwise have been done in civilized Java. Now the world runs on a blend of C#, VB, Java, C++, Ruby, Python and Perl.  All the Java programs still look and act wierd except for the SWT ones.</p>\n\n<p>If Java had come out with thin wrappers around native libraries, people could have written the SWT-equivalent <em>entirely in Java</em>, and we could have, as things evolved, made portable apparently-native apps in Java. I'm totally for portable applications, but it would have been better if that portability were achieved in an open market of middleware UI (and other feature) libraries, and not through simply reducing the user's menu to junk or faking the UI with Swing.</p>\n\n<p>I suppose Sun thought that ISV's would suffer with Java's limitations and then all the world's new PC apps would magically run on Suns. Nice try. They ended up not getting the apps AND not having the language take off until we could use it for logic-only server back-end code.</p>\n\n<p>If things had been done differently maybe the local application wouldn't be, well, dead.</p>\n", "answer_id": 1352692, "tags": [], "down_vote_count": 0, "last_activity_date": 1251591128, "creation_date": 1251591128, "comment_count": 0, "score": 1, "owner": {"display_name": "DigitalRoss", "reputation": 91041, "user_id": 140740, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1251806657, "body": "<p>Lower level languages are inappropriate for most problems.</p>\n", "answer_id": 1362120, "tags": [], "down_vote_count": 0, "last_activity_date": 1251806657, "creation_date": 1251806657, "comment_count": 0, "score": 3, "owner": {"display_name": "Imagist", "reputation": 6428, "user_id": 130640, "user_type": "registered", "accept_rate": 91}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1252480886, "body": "<p><strong>Programmers should never touch Word (or PowerPoint)</strong></p>\n\n<p>Unless you are developing a word or a document processing tool, you should not touch a Word processor that emits only binary blobs, and for that matter:</p>\n\n<p><strong>Generated XML files <em>are</em> binary blobs</strong></p>\n\n<p>Programmers should write plain text documents. The documents a programmer writes need to convey intention only, not formatting. It must be producible with the programming tool-chain: editor, version-control, search utilities, build system and the like. When you are already have and know how to use that tool-chain, every other document production tool is a horrible waste of time and effort.</p>\n\n<p>When there is a need to produce a document for non-programmers, a lightweight markup language should be used such as <a href=\"http://docutils.sourceforge.net/rst.html\" rel=\"nofollow\">reStructuredText</a> (if you are writing a plain text file, you are probably writing your own lightweight markup anyway), and generate HTML, PDF, <a href=\"http://meyerweb.com/eric/tools/s5/\" rel=\"nofollow\">S5</a>, etc. from it.</p>\n", "is_accepted": false, "tags": [], "answer_id": 1398048, "down_vote_count": 1, "last_activity_date": 1268228003, "creation_date": 1252480886, "comment_count": 0, "score": 3, "owner": {"display_name": "Chen Levy", "reputation": 5243, "user_id": 110488, "user_type": "registered", "accept_rate": 69}, "last_editor": {"display_name": "Chen Levy", "reputation": 5243, "user_id": 110488, "user_type": "registered", "accept_rate": 69}, "last_edit_date": 1268228003, "up_vote_count": 4}, {"community_owned_date": 1253031813, "body": "<p>Software sucks due to a lack of diversity. No offense to any race but things work pretty when a profession is made up of different races and both genders. Just look at overusing non-renewable energy. It is going great because everyone is contributing, not just the \"stereotypical guy\"</p>\n", "answer_id": 1428192, "tags": [], "down_vote_count": 5, "last_activity_date": 1253031813, "comments": [{"body": "...........WTF?", "edited": false, "comment_id": 1421977, "creation_date": 1255467599, "score": 4, "owner": {"display_name": "Damien", "reputation": 4764, "user_id": 35454, "user_type": "registered", "accept_rate": 98}}, {"body": "I agree that programming is a privileged white collar job that attracts privileged people, and that it&#39;s an ol&#39; boys club. But this really only hurts the quality of life at the workplace (NO, I do not want to talk about anime at work), not the quality of software.", "edited": false, "comment_id": 1422116, "creation_date": 1255469404, "score": 0, "owner": {"display_name": "temp2290", "reputation": 771, "user_id": 72071, "user_type": "registered"}}, {"body": "Wow...  I don&#39;t know where you people are working (and no, not that &quot;you people&quot;).  The last few places that I have worked are diversified and definitely not a privileged position.  Maybe if you are a COBOL programmer from the 60s...", "edited": false, "comment_id": 1516346, "creation_date": 1256843677, "score": 0, "owner": {"display_name": "joseph.ferris", "reputation": 8898, "user_id": 15906, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1253031813, "comment_count": 3, "score": -4, "owner": {"user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1253096602, "body": "<p><strong>You must know C to be able to call yoursel a programmer!</strong></p>\n", "answer_id": 1432155, "tags": [], "down_vote_count": 8, "last_activity_date": 1253096602, "comments": [{"body": "Completely disagree. C isn&#39;t the be-all-and-end-all of programming. There were many languages before it, and there are many languages after it that will suit different situations better than C will. Also, programming is about the analytical problem solving, and not just writing code in a particular language.", "edited": false, "comment_id": 1422151, "creation_date": 1255469799, "score": 5, "owner": {"display_name": "Jasarien", "reputation": 39277, "user_id": 76559, "user_type": "registered", "accept_rate": 92}}, {"body": "Like Jasarien I&#39;m completely disagree. C is another language, is not THE language.", "edited": false, "comment_id": 1425285, "creation_date": 1255522759, "score": 0, "owner": {"display_name": "Lucas Gabriel S\u00e1nchez", "reputation": 5917, "user_id": 20601, "user_type": "registered", "accept_rate": 100}}, {"body": "Actually, C is pretty much THE language for some tasks, although certainly not for all. There is a lot of documentation and tutorials online - specially on low-level stuff - which are way harder to understand without C knowledge.", "edited": false, "comment_id": 1434873, "creation_date": 1255630543, "score": 0, "owner": {"display_name": "luiscubal", "reputation": 10472, "user_id": 32775, "user_type": "registered", "accept_rate": 92}}, {"body": "More people use C than any other language and it&#39;s used on more projects than any other language.", "edited": false, "comment_id": 1520324, "creation_date": 1256906226, "score": 0, "owner": {"display_name": "Rob", "reputation": 7858, "user_id": 162698, "user_type": "registered", "accept_rate": 81}}, {"body": "agreed. I wonder, would you say you can call yourself a programmer if you know D and not C? (D doesnt hide anything from you alike C).", "edited": false, "comment_id": 1870001, "creation_date": 1261645529, "score": 0, "owner": {"display_name": "acidzombie24", "reputation": 34755, "user_id": 34537, "user_type": "registered", "accept_rate": 73}}, {"body": "Depends on what you want to make. High level Windows GUI applications should not be made in C, low level ICU programming, C is required.", "edited": false, "comment_id": 4204816, "creation_date": 1287111052, "score": 0, "owner": {"display_name": "Petah", "reputation": 22912, "user_id": 268074, "user_type": "registered", "accept_rate": 72}}], "creation_date": 1253096602, "comment_count": 6, "score": 0, "owner": {"display_name": "navigator", "reputation": 1065, "user_id": 115387, "user_type": "registered", "accept_rate": 83}, "is_accepted": false, "up_vote_count": 8}, {"community_owned_date": 1253097947, "body": "<p><strong>Garbage collection is overrated</strong></p>\n\n<p>Many people consider the introduction of garbage collection in Java one of the biggest improvements compared to C++. I consider the introduction to be very minor at best, well written C++ code does all the memory management at the proper places (with techniques like RAII), so there is no need for a garbage collector. </p>\n", "answer_id": 1432231, "tags": [], "down_vote_count": 1, "last_activity_date": 1253097947, "comments": [{"body": "The advocates of garbage collection have an unhealthy obsession with one particular resource when RAII covers all of them.", "edited": false, "comment_id": 2437374, "creation_date": 1268682571, "score": 0, "owner": {"display_name": "Integer Poet", "reputation": 320, "user_id": 52731, "user_type": "registered", "accept_rate": 71}}, {"body": "Lazy programmers suck. GC is for lazy programmers. Conclusion: you are totally right, Anders Rune Jensen.", "edited": false, "comment_id": 4912361, "creation_date": 1292857099, "score": 0, "owner": {"display_name": "user142019", "user_type": "does_not_exist"}}], "creation_date": 1253097947, "comment_count": 2, "score": 6, "owner": {"display_name": "Anders Rune Jensen", "reputation": 1990, "user_id": 13995, "user_type": "registered", "accept_rate": 78}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1253212385, "body": "<p><strong>C must die.</strong></p>\n\n<p>Voluntarily programming in C when another language (say, D) is available should be punishable for neglect.</p>\n", "answer_id": 1440573, "tags": [], "down_vote_count": 8, "last_activity_date": 1253212385, "comments": [{"body": "Certainly is controversial.", "edited": false, "comment_id": 1421940, "creation_date": 1255467111, "score": 0, "owner": {"display_name": "Ikke", "reputation": 39826, "user_id": 20261, "user_type": "registered", "accept_rate": 82}}, {"body": "Disagree. If C is the language you are more comfortable in, and is suitable for the task, then C is the language that would make most sense for you to develop in. If you&#39;re already proficient in C, then why waste the time learning D (as you put it) if you could complete the task to an acceptable standard using C?", "edited": false, "comment_id": 1422164, "creation_date": 1255469902, "score": 6, "owner": {"display_name": "Jasarien", "reputation": 39277, "user_id": 76559, "user_type": "registered", "accept_rate": 92}}, {"body": "The answer is real easy: you and other people will forever have to clean up the things D helps you prevent in your C code, unless you belong to the top 0.5% of C programmers who never makes such mistakes in the first place.  (it may be 0.05%, I&#39;m not sure).  There are certainly tools for C which help prevent such mistakes as well.  The trouble is you can&#39;t count on other people having used them.", "edited": false, "comment_id": 1425808, "creation_date": 1255528023, "score": 0, "owner": {"display_name": "reinierpost", "reputation": 4991, "user_id": 17945, "user_type": "registered", "accept_rate": 35}}, {"body": "hahaha, agree. Even tho i love C(++)", "edited": false, "comment_id": 1869994, "creation_date": 1261645255, "score": 0, "owner": {"display_name": "acidzombie24", "reputation": 34755, "user_id": 34537, "user_type": "registered", "accept_rate": 73}}], "creation_date": 1253212385, "comment_count": 4, "score": 0, "owner": {"display_name": "reinierpost", "reputation": 4991, "user_id": 17945, "user_type": "registered", "accept_rate": 35}, "is_accepted": false, "up_vote_count": 8}, {"community_owned_date": 1253778294, "body": "<p><strong>QA can be done well, over the long haul, without exploring all forms of testing</strong></p>\n\n<p>Lots of places seem to have an \"approach\", how \"we do it\". This seems to implicitly exclude other approaches. </p>\n\n<p>This is a serious problem over the long term, because the primary function of QA is to file bugs -and- get them fixed. </p>\n\n<p>You cannot do this well if you are not finding as many bugs as possible. When you exclude methodologies, for example, by being too black-box dependent, you start to ignore entire classes of discoverable coding errors. That means, by implication, you are making entire classes of coding errors unfixable, except when someone else stumbles on it.</p>\n\n<p>The underlying problem often seems to be management + staff. Managers with this problem seem to have narrow thinking about the computer science and/or the value proposition of their team. They tend to create teams that reflect their approach, and a whitelist of testing methods.</p>\n\n<p>I am not saying you can or should do everything all the time. Lets face it, some test methods are simply going to be a waste of time for a given product. And some methodologies are more useful at certain levels of product maturity. But what I think is missing is the ability of testing organizations to challenge themselves to learn new things, and apply that to their overall performance.</p>\n\n<p>Here's a hypothetical conversation that would sum it up:</p>\n\n<blockquote>\n  <p>Me: You tested that startup script for <strong>10</strong> years, and you managed to learn NOTHING about shell scripts and how they work?!</p>\n  \n  <p>Tester: Yes.</p>\n  \n  <p>Me: Permissions?</p>\n  \n  <p>Tester: The installer does that</p>\n  \n  <p>Me: Platform, release-specific dependencies?</p>\n  \n  <p>Tester: We file bugs for that</p>\n  \n  <p>Me: Error handling?</p>\n  \n  <p>Tester: when errors happen to customer support sends us some info.</p>\n  \n  <p>Me: Okay...(starts thinking about writing post in stackoverflow...)</p>\n</blockquote>\n", "answer_id": 1470286, "tags": [], "down_vote_count": 0, "last_activity_date": 1253778294, "creation_date": 1253778294, "comment_count": 0, "score": 1, "owner": {"display_name": "benc", "reputation": 706, "user_id": 2910, "user_type": "registered", "accept_rate": 67}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1253826116, "body": "<p>Detailed designs are a waste of time, and if an engineer needs them in order to do a decent job, then it's not worth employing them!</p>\n\n<p>OK, so a couple of ideas are thrown together here: </p>\n\n<p>1) the old idea of <a href=\"http://en.wikipedia.org/wiki/Waterfall%5Fmodel\" rel=\"nofollow\">waterfall</a> development where you supposedly did all your design up front, resulting in some glorified extremely detailed class diagrams, sequence diagrams etc. etc., was a complete waste of time.  As I once said to a colleague, I'll be done with design once the code is finished.  Which I think is what agile is partly a recognition of - that the code is the design, and that any decent developer is continually refactoring.  This of course, makes the idea that your class diagrams are out of date laughable - they always will be.</p>\n\n<p>2) management often thinks that you can usefully take a poor engineer and use them as a 'code monkey' - in other words they're not particularly talented, but heck - can't you use them to write some code.  Well.. no! If you have to spend so much time writing detailed specs that you're basically specifying the code, then it will be quicker to write it yourself.  You're not saving any time.  If a developer isn't smart enough to use their own imagination and judgement they're not worth employing. (Note, I'm not talking about junior engineers who are able to learn. Plenty of 'senior engineers' fall into this category.)</p>\n", "is_accepted": false, "tags": [], "answer_id": 1474137, "down_vote_count": 1, "last_activity_date": 1255836780, "comments": [{"body": "++ I liken spec-writing to driving a car at night in a fog. You can only see so far ahead, and turning up the brightness of the lights does not help. The supply of information is simply limited. It&#39;s worth getting as much as you can, but what you really have to be able to do is adapt when more information becomes available as you proceed.", "edited": false, "comment_id": 1482557, "creation_date": 1256331856, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "... I was once handed a design like that. The design doc was about 2 inches thick in paper and projected to take 18 mm to develop. I talked them into writing a code-generator. The <i>final source</i> was 1/2 inch thick, was done in 4 mm, and had blazing performance.", "edited": false, "comment_id": 1482571, "creation_date": 1256332076, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "... That&#39;s why I believe in prototyping, rapid or not. When I&#39;m developing some new product, I like to be able to do at least 3 throw-away versions, because that&#39;s how I can see deeper into the fog. Good post!", "edited": false, "comment_id": 1521242, "creation_date": 1256914231, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "Thanks Mike, and agree with what you&#39;re saying - it&#39;s impractical to expect to be able to get all the design right up front - you&#39;ve got to &#39;try something&#39;, then rework it as you discover more about the requirements and both how best to implement it, and often also how the technologies you&#39;re using are best used.", "edited": false, "comment_id": 1523073, "creation_date": 1256931574, "score": 0, "owner": {"display_name": "Phil", "reputation": 1577, "user_id": 148089, "user_type": "registered", "accept_rate": 67}}], "creation_date": 1253826116, "comment_count": 4, "score": 3, "owner": {"display_name": "Phil", "reputation": 1577, "user_id": 148089, "user_type": "registered", "accept_rate": 67}, "last_editor": {"display_name": "Peter Mortensen", "reputation": 8628, "user_id": 63550, "user_type": "registered", "accept_rate": 82}, "last_edit_date": 1255836780, "up_vote_count": 4}, {"community_owned_date": 1254163819, "body": "<p><strong>When Creating Unit tests for a Data Access Layer, data should be retrieved directly from the DB, not from mock objects.</strong> </p>\n\n<p>Consider the following:</p>\n\n<pre><code>void IList&lt;Customer&gt; GetCustomers()\n{\n  List&lt;Customer&gt; res = new List&lt;Customer&gt;();\n\n  DbCommand cmd = // initialize command\n  IDataReader r = cmd.ExecuteQuery();\n\n  while(r.read())\n  {\n     Customer c = ReadFiledsIntoCustomer(r);\n     res.Add(c);\n  }\n\n  return res;\n}\n</code></pre>\n\n<p>In a unit test for GetCustomers, should the call to cmd.ExecuteQuery() actually access the DB or should it's behavior be mocked?</p>\n\n<p>I reckon that you shouldn't mock the actual call to the DB if the following holds true:</p>\n\n<ol>\n<li>A test server and the schema exist.</li>\n<li>The schema is stable (meaning you are not expecting major changes to it)</li>\n<li>The DAL has not smart logic: queries are constructed trivially (config/stored procs)\nand the desirialization logic is simple.</li>\n</ol>\n\n<p>From my experience the great benefit of this approach is that you get to interact with the DB early, experiancing the 'feel', not just the 'look'. It saves you lots of headaches afterwards and is the best way to familiarize oneself with the schema.</p>\n\n<p>Many might argue that as soon as the execution flow crosses the process boundaries- it seizes to be a unit test. I agree it has its drawbacks, especially when the DB is unavailable and then you cannot run UT.</p>\n\n<p>However, I believe that this should be a valid thing to do in many cases.</p>\n", "answer_id": 1488719, "tags": [], "down_vote_count": 0, "last_activity_date": 1254163819, "creation_date": 1254163819, "comment_count": 0, "score": 3, "owner": {"display_name": "Vitaliy", "reputation": 3019, "user_id": 180650, "user_type": "registered", "accept_rate": 76}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1254194088, "body": "<p><em>Notepad is a perfectly fine text editor. (And sometimes wordpad for non-windows line breaks)</em></p>\n\n<ul>\n<li>Edit config files</li>\n<li>View log files</li>\n<li>Development</li>\n</ul>\n\n<p>I know people who actually believe this!  They will however use an IDE for development, but continue to use Notepad for everything else!</p>\n", "answer_id": 1490408, "tags": [], "down_vote_count": 1, "last_activity_date": 1254194088, "comments": [{"body": "That&#39;s fair enough, notepad is good at what it does, and what it does is plain text editing. However, when you&#39;re editing config files, you want something that can handle indents a little better, maybe some syntax highlighting. With log files, a regex search is invaluable.", "edited": false, "comment_id": 1422109, "creation_date": 1255469336, "score": 1, "owner": {"display_name": "Jasarien", "reputation": 39277, "user_id": 76559, "user_type": "registered", "accept_rate": 92}}, {"body": "yep and thats why I use EditPlus www.editplus.com great editor!!", "edited": false, "comment_id": 1473743, "creation_date": 1256226486, "score": 0, "owner": {"display_name": "Dal", "reputation": 1868, "user_id": 177811, "user_type": "registered", "accept_rate": 93}}, {"body": "That&#39;s why i only use textpad! www.textpad.com awesome for old skoolers!", "edited": false, "comment_id": 1920846, "creation_date": 1262635299, "score": 0, "owner": {"display_name": "crosenblum", "reputation": 736, "user_id": 191899, "user_type": "registered", "accept_rate": 72}}], "creation_date": 1254194088, "comment_count": 3, "score": 5, "owner": {"display_name": "TJR", "reputation": 1180, "user_id": 728, "user_type": "registered", "accept_rate": 91}, "is_accepted": false, "up_vote_count": 6}, {"community_owned_date": 1254571260, "body": "<p><strong>All project managers should be required to have coding tasks</strong></p>\n\n<p>In teams that I have worked where the project manager was actually a programmer who understood the technical issues of the code well enough to accomplish coding tasks, the decisions that were made lacked the communication disconnect that often happens in teams where the project manager is not involved in the code.</p>\n", "answer_id": 1513572, "tags": [], "down_vote_count": 0, "last_activity_date": 1254571260, "comments": [{"body": "you: &quot;boss, the code you just checked in is sub-par.  please get it up to the standard, or I&#39;ll have to back it out.&quot;  him: &quot;about that raise you wanted...&quot;", "edited": false, "comment_id": 1808390, "creation_date": 1260840265, "score": 0, "owner": {"display_name": "just somebody", "reputation": 10815, "user_id": 209605, "user_type": "registered", "accept_rate": 62}}, {"body": "+1, otherwise you end up doing their job for them.", "edited": false, "comment_id": 2580708, "creation_date": 1270393901, "score": 0, "owner": {"display_name": "JL.", "reputation": 19694, "user_id": 41543, "user_type": "registered", "accept_rate": 83}}], "creation_date": 1254571260, "comment_count": 2, "score": 5, "owner": {"display_name": "Edward Tanguay", "reputation": 52614, "user_id": 4639, "user_type": "registered", "accept_rate": 79}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1255201538, "body": "<p>Development projects are bound to fail unless the team of programmers is given as a whole complete empowerment to make all decisions related to the technology being used.</p>\n", "answer_id": 1548804, "tags": [], "down_vote_count": 0, "last_activity_date": 1255201538, "comments": [{"body": "Been there, done that. Have the t-shirt.", "edited": false, "comment_id": 1422112, "creation_date": 1255469372, "score": 0, "owner": {"display_name": "Jasarien", "reputation": 39277, "user_id": 76559, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1255201538, "comment_count": 1, "score": 2, "owner": {"display_name": "Kiffin", "reputation": 562, "user_id": 178045, "user_type": "registered", "accept_rate": 8}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1255466574, "body": "<p>My most controversial programming opinion is that\n<strong>finding performance problems is not about <em>measuring</em>, it is about <em>capturing</em></strong>.</p>\n\n<p>If you're hunting for elephants in a room (as opposed to mice) do you need to know how big they are? NO! All you have to do is look.\nTheir very bigness is what makes them easy to find!\nIt isn't necessary to measure them first.</p>\n\n<p>The idea of measurement has been common wisdom at least since the paper on <strong>gprof</strong> \n(<a href=\"http://docs.freebsd.org/44doc/psd/18.gprof/paper.pdf\" rel=\"nofollow\">Susan L. Graham, et al 1982</a>)*, when all along, right under our noses, has been a <a href=\"http://stackoverflow.com/questions/375913/what-can-i-use-to-profile-c-code-in-linux/378024#378024\">very simple and direct way to find code worth optimizing</a>.</p>\n\n<p>As a small example, here's how it works. Suppose you take 5 random-time samples of the call stack, and you happen to see a particular instruction on 3 out of 5 samples. What does that tell you?</p>\n\n<pre><code>.............   .............   .............   .............   .............\n.............   .............   .............   .............   .............\nFoo: call Bar   .............   .............   Foo: call Bar   .............\n.............   Foo: call Bar   .............   .............   .............\n.............   .............   .............   Foo: call Bar   .............\n.............   .............   .............   .............   .............\n                .............                                   .............\n</code></pre>\n\n<p><em>It tells you the program is spending 60% of its time <strong>doing work requested by that instruction</em></strong>. Removing it removes that 60%:</p>\n\n<pre><code>...\\...../...   ...\\...../...   .............   ...\\...../...   .............\n....\\.../....   ....\\.../....   .............   ....\\.../....   .............\nFoo: \\a/l Bar   .....\\./.....   .............   Foo: \\a/l Bar   .............\n......X......   Foo: cXll Bar   .............   ......X......   .............\n...../.\\.....   ...../.\\.....   .............   Foo: /a\\l Bar   .............\n..../...\\....   ..../...\\....   .............   ..../...\\....   .............\n   /     \\      .../.....\\...                      /     \\      .............\n</code></pre>\n\n<p>Roughly.</p>\n\n<p>If you can remove the instruction (or invoke it a lot less), that's a 2.5x speedup, approximately. (Notice - recursion is irrelevant - if the elephant's pregnant, it's not any smaller.)\nThen you can repeat the process, until you truly approach an optimum.</p>\n\n<ul>\n<li>This did not require accuracy of measurement, function timing, call counting, graphs, hundreds of samples, <em>any of that typical profiling stuff.</em></li>\n</ul>\n\n<p>Some people use this whenever they have a performance problem, and don't understand what's the big deal.</p>\n\n<p>Most people have never heard of it, and when they do hear of it, think it is just an inferior mode of sampling. But it is very different, because it pinpoints problems by giving cost of <em>call sites</em> (as well as terminal instructions), as a percent of <em>wall-clock time</em>. Most profilers (not all), whether they use sampling or instrumentation, do not do that. Instead they give a variety of summary measurements that are, at best, clues to the possible location of problems. <a href=\"http://stackoverflow.com/questions/1777556/alternatives-to-gprof/1779343#1779343\">Here is a more extensive summary of the differences.</a></p>\n\n<p>*In fact that paper claimed that the purpose of <strong>gprof</strong> was to \"help the user evaluate alternative implementations of abstractions\". It did not claim to help the user locate the code needing an alternative implementation, at a finer level then functions.</p>\n\n<hr>\n\n<p>My second most controversial opinion is <a href=\"http://stackoverflow.com/questions/371898/how-does-differential-execution-work\"><strong>this</strong></a>, or it might be if it weren't so hard to understand.</p>\n", "is_accepted": false, "tags": [], "answer_id": 1562802, "down_vote_count": 0, "last_activity_date": 1267214700, "comments": [{"body": "I can add one more type of reaction: &quot;This is a great technique, but why not use one of the tools that automates it?&quot;", "edited": false, "comment_id": 1538438, "creation_date": 1257226287, "score": 0, "owner": {"display_name": "Crashworks", "reputation": 25396, "user_id": 53543, "user_type": "registered", "accept_rate": 61}}, {"body": "@Crash: Happy Halloween! You&#39;re right, that is another reaction I get, and of course the answer is: &quot;You could if they exist&quot;. I don&#39;t want much: 1) take <i>and retain</i> stackshots, 2) rank statements (not functions) by inclusive time (i.e. % of samples containing them), 3) let you pick representative stackshots and study them.", "edited": false, "comment_id": 1540429, "creation_date": 1257256169, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "... I built one ages ago, to run under DOS. It didn&#39;t do (3) but it had a &quot;butterfly view&quot; between statements (not functions). The real value was that it would focus my attention on costly call sites, and then I would take manual samples until one of those showed up under the debugger, and then I could really look to see what was going on, because just knowing the location was not enough.", "edited": false, "comment_id": 1540444, "creation_date": 1257256418, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "... as a recent example, this C# app takes it time about starting up. Half a dozen stackshots show about half the time is spent looking up strings in a resource and converting them to string objects, so they can be internationalized. What the stack sample by itself doesn&#39;t show is how often the string is something you would never want to internationalize, which in this case is most of the time. Just finding a slow function, or looking at numbers after a run, would never reveal that.", "edited": false, "comment_id": 1540471, "creation_date": 1257256777, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "@Crash: Actually there&#39;s a tool called RotateRight/Zoom that is close to doing it how I think is right. It takes and retains stackshots. You can manually control when it samples. It has a butterfly view that can work at the statement level. It gives you total time as a percent, which is the fraction of samples containing the line.", "edited": false, "comment_id": 1793750, "creation_date": 1260592046, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "People with a low boredom threshold might press <code>Ctrl+C</code> after one second, which may not be a representative sample of the program as a whole.", "edited": false, "comment_id": 2198535, "creation_date": 1265854669, "score": 0, "owner": {"display_name": "Andrew Grimm", "reputation": 28239, "user_id": 38765, "user_type": "registered", "accept_rate": 70}}, {"body": "@Andrew-Grimm: The problem, when removed, will save some %. Pick a %. 20%, 50%, 90%, 10%? Whatever it is, that is (at least) the probability that each <code>^C</code> will see it. One way is take 20 samples - 20 * x%/100 will show it. Another way is, just take samples until something appears more than once. It&#39;s a big one, guaranteed.", "edited": false, "reply_to_user": {"display_name": "Andrew Grimm", "reputation": 28239, "user_id": 38765, "user_type": "registered", "accept_rate": 70}, "comment_id": 2230155, "creation_date": 1266264037, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "... <b>one</b> sample is not enough <b>unless</b> you know there is a big (high percentage) problem. In the limit, if you know there is an infinite loop, it only takes one sample to see it. In general, you don&#39;t know, so take multiple samples.", "edited": false, "comment_id": 2230752, "creation_date": 1266269170, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "If all you&#39;re interested in is &quot;is there enough space in this room&quot; then you definitely need to know how big the elephants are. Measuring and capturing go well together - you don&#39;t need to commit yourself to only using one technique.", "edited": false, "comment_id": 2489208, "creation_date": 1269287598, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon: That&#39;s just a metaphor I&#39;m using to try to get the idea across that if something&#39;s taking too long, stackshots can find the problem with precision of location, but not necessarily precision of time measurement. I&#39;ve seen one profiler that does this (Zoom), but I haven&#39;t seen them all. Mainly I&#39;m zealot-ing for an orthogonal way of thinking about performance tuning - to expect big speedup factors, which are typically mid-stack lines of code doing stuff you didn&#39;t realize.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 2489561, "creation_date": 1269290538, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "@Jon ... and there&#39;s a central phenomenon that I never hear discussed on SO (magnification), and it&#39;s the route to big speedups. If there&#39;s a series of problems accounting for 50%, 25%, 12.5%, 6.25% of time, each time you fix the biggest one, the rest get twice as big (thus easier to find). If any one of these along the way is not something your profiler can pinpoint, you&#39;re stuck, not getting the full speedup.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 2489725, "creation_date": 1269291658, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "@Mike: Absolutely. Most profilers I&#39;ve used <i>have</i> shown figures as &quot;percentage of time spent in method&quot; mind you - with raw figures as well, but they tend not to be as useful. But yes, it&#39;s certainly possible to find big speed-ups. I recently found some in Noda Time :)", "edited": false, "reply_to_user": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}, "comment_id": 2490089, "creation_date": 1269294780, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon: Right. What I like about Zoom is it gives you % time (wall-clock) <i>at the line-of-code level</i>, it ignores recursion (yay!), and it has a butterfly view, although it&#39;s a function-level not line-level butterfly. But still, those things are cute &amp; helpful, but when I&#39;ve got serious tuning to do, the fact that you can see all the variables, and you can read the <i>why</i> off of individual stack samples, is what, for me, makes all the difference for the manual method. Cheers.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 2490519, "creation_date": 1269298906, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1255466574, "comment_count": 13, "score": 22, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}, "last_editor": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}, "last_edit_date": 1267214700, "up_vote_count": 22}, {"community_owned_date": 1255467397, "body": "<p>There is no difference between software developer, coder, programmer, architect ...</p>\n\n<p>I've been in the industry for more than 10 yeast and still find it absolutely idiotic to try to distinguish between these \"roles\". You write code? You're a developer. You are spending all day drawing fancy UML diagrams. You're a ... well.. I have no idea what you are, you're probably just trying to impress somebody. (Yes, I know UML).</p>\n", "answer_id": 1562844, "tags": [], "down_vote_count": 0, "last_activity_date": 1255467397, "creation_date": 1255467397, "comment_count": 0, "score": 4, "owner": {"display_name": "user188658", "reputation": 99, "user_id": 188658, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1255470578, "body": "<ul>\n<li><p>Soon we are going to program in <strong>a world without\ndatabases</strong>.</p></li>\n<li><p><strong>AOP and dependency injection are the GOTO of\nthe 21st century</strong>.</p></li>\n<li><p><strong>Building software is a social\nactivity</strong>, not a technical one.</p></li>\n<li><p>Joel has a blog.</p></li>\n</ul>\n", "is_accepted": false, "tags": [], "answer_id": 1563116, "down_vote_count": 2, "last_activity_date": 1255630102, "creation_date": 1255470578, "comment_count": 0, "score": 1, "owner": {"display_name": "JuanZe", "reputation": 5305, "user_id": 166611, "user_type": "registered", "accept_rate": 75}, "last_editor": {"display_name": "JuanZe", "reputation": 5305, "user_id": 166611, "user_type": "registered", "accept_rate": 75}, "last_edit_date": 1255630102, "up_vote_count": 3}, {"community_owned_date": 1255490886, "body": "<p>To quote the late E. W. Dijsktra:</p>\n\n<p><strong>Programming is one of the most difficult branches of applied mathematics; the poorer mathematicians had better remain pure mathematicians.</strong></p>\n\n<p><strong>Computer Science is no more about computers than astronomy is about telescopes.</strong></p>\n\n<p>I don't understand how one can claim to be a proper programmer without being able to solve pretty simple maths problems such as <a href=\"http://stackoverflow.com/questions/406760/whats-your-most-controversial-programming-opinion/406948#406948\">this one</a>. A CRUD monkey - perhaps, but not a programmer.</p>\n", "answer_id": 1564098, "tags": [], "down_vote_count": 5, "last_activity_date": 1255490886, "creation_date": 1255490886, "comment_count": 0, "score": -1, "owner": {"display_name": "Andrew not the Saint", "reputation": 2042, "user_id": 23670, "user_type": "registered", "accept_rate": 80}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1255521845, "body": "<p><strong>A real programmer loves open-source like a soulmate and loves Microsoft as a dirty but satisfying prostitute</strong></p>\n", "answer_id": 1565835, "tags": [], "down_vote_count": 18, "last_activity_date": 1255521845, "comments": [{"body": "Haha, very funny. Good one :)", "edited": false, "comment_id": 2580702, "creation_date": 1270393834, "score": 0, "owner": {"display_name": "JL.", "reputation": 19694, "user_id": 41543, "user_type": "registered", "accept_rate": 83}}, {"body": "A real programmer? C&#39;mon", "edited": false, "comment_id": 3356784, "creation_date": 1279127998, "score": 0, "owner": {"display_name": "Blub", "reputation": 2418, "user_id": 335355, "user_type": "registered", "accept_rate": 78}}], "creation_date": 1255521845, "comment_count": 2, "score": -2, "owner": {"display_name": "Andrew not the Saint", "reputation": 2042, "user_id": 23670, "user_type": "registered", "accept_rate": 80}, "is_accepted": false, "up_vote_count": 16}, {"community_owned_date": 1255525280, "body": "<p><strong>\"Programmers must do programming on the side, or they're never as good as those who do.\"</strong></p>\n\n<p>As kpollock said, imagine saying that for doctors, or soldiers...</p>\n\n<p>The main thing isn't so much as whether they code, but whether they think about it. Computing Science is an intellectual exercise, you don't necessarily need to code to think about problems that makes you better as a programmer.</p>\n\n<p>It's not like Einstein gets to play with play with particles and waves when he's off his research.</p>\n", "is_accepted": false, "tags": [], "answer_id": 1566088, "down_vote_count": 1, "last_activity_date": 1255537482, "comments": [{"body": "That&#39;s right. I often think about programming problems while in bed, lying on my <b>side</b>.", "edited": false, "comment_id": 1426951, "creation_date": 1255536668, "score": 2, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "@Mike I&#39;ve kept up thinking about assembly language on my side in bed. But thanks for pointing out the typo ;)", "edited": false, "comment_id": 1427041, "creation_date": 1255537521, "score": 0, "owner": {"display_name": "Calyth", "reputation": 1166, "user_id": 45144, "user_type": "registered", "accept_rate": 62}}], "creation_date": 1255525280, "comment_count": 2, "score": 4, "owner": {"display_name": "Calyth", "reputation": 1166, "user_id": 45144, "user_type": "registered", "accept_rate": 62}, "last_editor": {"display_name": "Calyth", "reputation": 1166, "user_id": 45144, "user_type": "registered", "accept_rate": 62}, "last_edit_date": 1255537482, "up_vote_count": 5}, {"community_owned_date": 1255531822, "body": "<p><strong>Programmers should avoid method hiding through inheritance at all costs.</strong></p>\n\n<p>In my experience, virtually every place I have ever seen inherited method hiding used it has caused problems. Method hiding results in objects behaving differently when accessed through a base type reference vs. a derived type reference - this is generally a Bad Thing. While many programmers are not formally aware of it, most intuitively expect that objects will adhere to the <a href=\"http://en.wikipedia.org/wiki/Liskov%5Fsubstitution%5Fprinciple\" rel=\"nofollow\">Liskov Substitution Principle</a>. When objects violate this expectation, many of the assumptions inherent to object-oriented systems can begin to fray. The most egregious cases I've seen is when the hidden method alters the state of the object instance. In these cases, the behavior of the object can change in subtle ways that are difficult to debug and diagnose.</p>\n\n<p>Ok, so there may be some infrequent cases where method hiding is actually useful and beneficial - like emulating return type covariance of methods in languages that don't support it. But the vast majority of time, when developers use method hiding it is either out of ignorance (or accident) or as a way to hack around some problem that probably deserves better design treatment. In general, the beneficial cases I've seen of method hiding (not to say there aren't others) is when a side-effect free method that returns some information is hidden by one that computes something more applicable to the calling context.</p>\n\n<p>Languages like C# have improved things a bit by requiring the <code>new</code> keyword on methods that hide a base class method - at least helping avoid involuntary use of method hiding. But I find that many people still confuse the meaning of <code>new</code> with that of <code>override</code> - particularly since in simple scenarios their behavior can appear identical. It would be nice if tools like FxCop actually had built-in rules for identifying potentially bad usage of method hiding.</p>\n\n<p>By the way, method hiding through inheritance should not be confused with other kinds of hiding - such as through nesting - which I believe is a valid and useful construct with fewer potential problems.</p>\n", "answer_id": 1566805, "tags": [], "down_vote_count": 0, "last_activity_date": 1255531822, "creation_date": 1255531822, "comment_count": 0, "score": 3, "owner": {"display_name": "LBushkin", "reputation": 70691, "user_id": 91671, "user_type": "registered", "accept_rate": 85}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1255539323, "body": "<p>Controversial eh?  I reckon the fact that C++ streams use &lt;&lt; and >>.  I hate it.  They are shift operators.  Overloading them in this way is plain bad practice.  It makes me want to kill whoever came up with that and thought it was a good idea.  GRRR.</p>\n", "answer_id": 1567615, "tags": [], "down_vote_count": 0, "last_activity_date": 1255539323, "creation_date": 1255539323, "comment_count": 0, "score": 7, "owner": {"display_name": "Goz", "reputation": 39078, "user_id": 131140, "user_type": "registered", "accept_rate": 98}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1255544383, "body": "<p><strong>Anonymous functions suck.</strong></p>\n\n<p>I'm teaching myself jQuery and, while it's an elegant and immensely useful technology, most people seem to treat it as some kind of competition in maximizing the user of anonymous functions.</p>\n\n<p>Function and procedure naming (along with variable naming) is the greatest expressive ability we have in programming.  Passing functions around as data is a great technique, but making them anonymous and therefore non-self-documenting is a mistake.  It's a lost chance for expressing the meaning of the code.</p>\n", "answer_id": 1568085, "tags": [], "down_vote_count": 0, "last_activity_date": 1255544383, "comments": [{"body": "While I haven&#39;t used jQuery, I have to disagree with the general principle. The ability to express (say) a projection or a filter <i>right where you&#39;re using it</i> rather than having to introduce a separate function is one of the nicest features in C# 2 and 3. (Nicer in 3 than 2, as lambda expressions are neater than anonymous methods.)", "edited": false, "comment_id": 1428729, "creation_date": 1255551797, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon: Well, I guess that officially makes my opinion controversial.  I still disagree.  While it&#39;s nice to be able to express functionality that way, for all but the most trivial cases it fundamentally detracts from the readability of the code.  If you could name the function in place that would help with the issue of expressing your purpose, but it still wouldn&#39;t eliminate the problem  of actually reading functions nested in the parameter list of other functions which, in turn, are often nested inside another functions parameter list.", "edited": false, "comment_id": 1428827, "creation_date": 1255552607, "score": 0, "owner": {"display_name": "Larry Lustig", "reputation": 32276, "user_id": 180368, "user_type": "registered", "accept_rate": 82}}, {"body": "You can name inline functions in JavaScript, if you want to. Just include a name between &quot;function&quot; and the arguments:  var s = function square(a) { return a * a; };", "edited": false, "comment_id": 1482687, "creation_date": 1256333251, "score": 0, "owner": {"display_name": "Mark Bessey", "reputation": 14476, "user_id": 17826, "user_type": "registered"}}], "creation_date": 1255544383, "comment_count": 3, "score": 3, "owner": {"display_name": "Larry Lustig", "reputation": 32276, "user_id": 180368, "user_type": "registered", "accept_rate": 82}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1255600953, "body": "<p><strong>If it isn't worth testing, it isn't worth building</strong></p>\n", "answer_id": 1571400, "tags": [], "down_vote_count": 0, "last_activity_date": 1255600953, "creation_date": 1255600953, "comment_count": 0, "score": 5, "owner": {"display_name": "Chirantan", "reputation": 7205, "user_id": 45942, "user_type": "registered", "accept_rate": 60}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1255721739, "body": "<p><strong>Never change what is not broken.</strong></p>\n", "answer_id": 1579992, "tags": [], "down_vote_count": 2, "last_activity_date": 1255721739, "comments": [{"body": "What if it works, but is unmaintanable, ugly, difficult to understand and likely to break if something else changes?", "edited": false, "comment_id": 1450656, "creation_date": 1255943640, "score": 1, "owner": {"display_name": "simon", "reputation": 4887, "user_id": 76777, "user_type": "registered", "accept_rate": 87}}, {"body": "That is the exact reason why I posted this as &quot;controversial&quot;.", "edited": false, "comment_id": 1456302, "creation_date": 1256015191, "score": 0, "owner": {"display_name": "Varma", "reputation": 363, "user_id": 132752, "user_type": "registered", "accept_rate": 69}}, {"body": "&quot;Refactor Mercilessly&quot;. XP Manifesto. But only if you have comprehensive unit tests in place...", "edited": false, "comment_id": 3948054, "creation_date": 1284738212, "score": 0, "owner": {"display_name": "Arcane Engineer", "reputation": 2269, "user_id": 279738, "user_type": "registered", "accept_rate": 99}}], "creation_date": 1255721739, "comment_count": 3, "score": 3, "owner": {"display_name": "Varma", "reputation": 363, "user_id": 132752, "user_type": "registered", "accept_rate": 69}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1255759851, "body": "<p>I'd say that my most controversial opinion on programming is that I honestly believe you shouldn't worry so much about throw-away code and rewriting code.  Too many times people feel that if you write something down, then changing it means you did something wrong.   But the way my brain works is to get something very simple working, and update the code slowly, while ensuring that the code and the test continue to function together.  It may end up actually creating classes, methods, additional parameters, etc., I fully well know will go away in a few hours.  But I do it because i want to take only small steps toward my goal.  In the end, I don't think I spend any more time using this technique than the programmers that stare at the screen trying to figure out the best design up front before writing a line of code.</p>\n\n<p>The benefit I get is that I'm not having to constantly deal with software that no longer works because I happen to break it somehow and am trying to figure out what stopped working and why.</p>\n", "answer_id": 1581554, "tags": [], "down_vote_count": 0, "last_activity_date": 1255759851, "creation_date": 1255759851, "comment_count": 0, "score": 2, "owner": {"display_name": "zumalifeguard", "reputation": 3882, "user_id": 75129, "user_type": "registered", "accept_rate": 92}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1255759930, "body": "<p>Copy/Paste <strong>IS</strong> the root of all evil.</p>\n", "is_accepted": false, "tags": [], "answer_id": 1581555, "down_vote_count": 1, "last_activity_date": 1266929995, "comments": [{"body": "++ If by that you mean &quot;cookie cutter code&quot;, I say Amen.", "edited": false, "comment_id": 1482590, "creation_date": 1256332333, "score": 0, "owner": {"display_name": "Mike Dunlavey", "reputation": 29020, "user_id": 23771, "user_type": "registered", "accept_rate": 60}}, {"body": "++   Hey - that&#39;s my line...", "edited": false, "comment_id": 1642487, "creation_date": 1258579625, "score": 0, "owner": {"display_name": "Galghamon", "reputation": 1496, "user_id": 26511, "user_type": "registered", "accept_rate": 60}}], "creation_date": 1255759930, "comment_count": 2, "score": 11, "owner": {"display_name": "OscarRyz", "reputation": 96957, "user_id": 20654, "user_type": "registered", "accept_rate": 81}, "last_editor": {"display_name": "OscarRyz", "reputation": 96957, "user_id": 20654, "user_type": "registered", "accept_rate": 81}, "last_edit_date": 1266929995, "up_vote_count": 12}, {"community_owned_date": 1255837251, "body": "<p>If you have ever let anyone from rentacoder.com touch your project, both it and your business are completely devoid of worth.</p>\n", "answer_id": 1583936, "tags": [], "down_vote_count": 1, "last_activity_date": 1255837251, "comments": [{"body": "Not controversial, this is a statement of fact.", "edited": false, "comment_id": 2906760, "creation_date": 1274232357, "score": 0, "owner": {"display_name": "mynameiscoffey", "reputation": 2999, "user_id": 238395, "user_type": "registered", "accept_rate": 79}}], "creation_date": 1255837251, "comment_count": 1, "score": 3, "owner": {"display_name": "Azeem.Butt", "reputation": 5543, "user_id": 187712, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1255939138, "body": "<p><strong>Object Oriented Programming is overused</strong></p>\n\n<p>Sometimes the best answer is the simple answer.</p>\n", "answer_id": 1587444, "tags": [], "down_vote_count": 0, "last_activity_date": 1255939138, "comments": [{"body": "For most competent worldly-wise OO devs, classes are only broken out from a root class once it becomes apparent that complexity is becoming hard to manage. Oddly (or not so oddly), it is often at that very point that it becomes apparent just <i>what</i> needs to be broken out. And until you do break out from a root class, you <i>are</i> programming procedurally (at least within the context of that class). Premature proliferation of classes during the development process is something that OO greenhorns do.", "edited": false, "comment_id": 3947986, "creation_date": 1284737887, "score": 0, "owner": {"display_name": "Arcane Engineer", "reputation": 2269, "user_id": 279738, "user_type": "registered", "accept_rate": 99}}], "creation_date": 1255939138, "comment_count": 1, "score": 13, "owner": {"display_name": "user192230", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 13}, {"community_owned_date": 1256225459, "body": "<p>If you haven't read a man page, you're not a real programmer.</p>\n", "answer_id": 1608052, "tags": [], "down_vote_count": 0, "last_activity_date": 1256225459, "creation_date": 1256225459, "comment_count": 0, "score": 2, "owner": {"display_name": "Ross Light", "reputation": 2170, "user_id": 111866, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1256225982, "body": "<p>I have two:</p>\n\n<p><strong>Design patterns are sometimes a way for bad programmer to write bad code</strong> - \"when you have a hammer - all the world looks like a nail\" mentality. If there si something I hate to hear is two developers create design by patterns: \"We should use command with facade ...\".</p>\n\n<p><strong>There is no such thing as \"premature optimization\"</strong>. You should profile and optimize the your code before you get to that point when it becomes too painful to do so.</p>\n", "answer_id": 1608103, "tags": [], "down_vote_count": 1, "last_activity_date": 1256225982, "comments": [{"body": "Premature optimization does indeed exist and is very much a problem.  With very few exceptions, your goal is to satisfy a function as per business requirements.  Make it work, make it right, then make it faster.  Optimizing without understanding the whole application profile is like throwing money out of a window.  Let me know where you work, because I&#39;ll be downstairs with a net to catch some of it.  ;-)", "edited": false, "comment_id": 1516321, "creation_date": 1256843376, "score": 1, "owner": {"display_name": "joseph.ferris", "reputation": 8898, "user_id": 15906, "user_type": "registered", "accept_rate": 100}}, {"body": "You&#39;re right - but only some of the time... I&#39;ve seen the &quot;premature optimization&quot; card used way too many time to create a bad very hard to improve application flow. If you can write it better the first time, why not do so?", "edited": false, "comment_id": 1516845, "creation_date": 1256848255, "score": 0, "owner": {"display_name": "Dror Helper", "reputation": 17561, "user_id": 11361, "user_type": "registered", "accept_rate": 97}}, {"body": "I think the best rule is to always make things as simple as possible. It is much easier to optimize simple code than to simplify optimized code.", "edited": false, "comment_id": 1544680, "creation_date": 1257301500, "score": 1, "owner": {"display_name": "thesmart", "reputation": 1648, "user_id": 20176, "user_type": "registered", "accept_rate": 77}}], "creation_date": 1256225982, "comment_count": 3, "score": 3, "owner": {"display_name": "Dror Helper", "reputation": 17561, "user_id": 11361, "user_type": "registered", "accept_rate": 97}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1256508679, "body": "<p>\"Comments are Lies\"</p>\n\n<p>Comments don't run and are easily neglected. It's better to express the intention with clear, refactored code illustrated by unit tests. (Unit tests written TDD of course...)</p>\n\n<p>We don't write comments because they're verbose and obscure what's really going on in the code. If you feel the need to comment - find out what's not clear in the code and refactor/write clearer tests until there's no need for the comment...</p>\n\n<p>... something I learned from Extreme Programming (assumes of course that you have established team norms for cleaning the code...)</p>\n", "answer_id": 1622260, "tags": [], "down_vote_count": 1, "last_activity_date": 1256508679, "comments": [{"body": "Code will only explain the &quot;how&quot; something is done and not the &quot;why&quot;.  It is really important to distinguish between the two.  Decisions sometimes have to be made and the reason for that decision needs to live on.  I find that it is important to find a middle ground.  The &quot;no comments&quot; crowd are just as much cultists as &quot;comment everything&quot; crowd.", "edited": false, "comment_id": 1516308, "creation_date": 1256843240, "score": 3, "owner": {"display_name": "joseph.ferris", "reputation": 8898, "user_id": 15906, "user_type": "registered", "accept_rate": 100}}, {"body": "You&#39;re right about this: &quot;Code will only explain the &quot;how&quot; something is done&quot; If I want to know what it does, I&#39;ll find the TDD-written test that&#39;s covering it. If there&#39;s a mystery about what it does and it&#39;s important enough, I&#39;ll insert a breakage (e.g. throw new RuntimeException(&quot;here it is&quot;) ) and run all the acceptance tests to see what scenarios need that code path to run.", "edited": false, "comment_id": 1516424, "creation_date": 1256844530, "score": 0, "owner": {"display_name": "daf", "reputation": 5360, "user_id": 96168, "user_type": "registered", "accept_rate": 100}}, {"body": "Thia is why i said comments are evil in my post <a href=\"http://stackoverflow.com/questions/406760/whats-your-most-controversial-programming-opinion/409825#409825\" title=\"whats your most controversial programming opinion\">stackoverflow.com/questions/406760/&hellip;</a> I am proud my answer is the most serious most downvoted answer :)", "edited": false, "comment_id": 1654543, "creation_date": 1258718951, "score": 0, "owner": {"display_name": "acidzombie24", "reputation": 34755, "user_id": 34537, "user_type": "registered", "accept_rate": 73}}, {"body": "If you want to know why something is running, just inject a bug e.g. throw new RuntimeException(&quot;HERE&quot;); into it and run the functional tests. Read off the names of the failing system-level tests - that&#39;s why you need that piece of code.", "edited": false, "comment_id": 1655841, "creation_date": 1258730686, "score": 0, "owner": {"display_name": "daf", "reputation": 5360, "user_id": 96168, "user_type": "registered", "accept_rate": 100}}, {"body": "No, that&#39;s just more what. Good comments explain why the function works THE WAY it does, not why it exists, which is ultimately just a what.", "edited": false, "comment_id": 2437341, "creation_date": 1268682176, "score": 0, "owner": {"display_name": "Integer Poet", "reputation": 320, "user_id": 52731, "user_type": "registered", "accept_rate": 71}}], "creation_date": 1256508679, "comment_count": 5, "score": 7, "owner": {"display_name": "daf", "reputation": 5360, "user_id": 96168, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 8}, {"community_owned_date": 1256842115, "body": "<p><strong>Programming: It's a fun <em>job</em>.</strong></p>\n\n<p>I seem to see two generalized groups of developers. Those that don't love it but they are competent and the money is good. The other group that love it to a point that is kinda creepy. It seems to be their life.</p>\n\n<p>I just think it well paying job that is usually interesting and fun. There is all kinds of room to learn something new every minute of every day. I can't think of another job I would prefer. But it is still a job. Compromises will be made and the stuff you produce will not always be as good as it could be.</p>\n\n<p>Given my druthers would be on a beach drinking beer or playing with my kids.</p>\n", "answer_id": 1645793, "tags": [], "down_vote_count": 0, "last_activity_date": 1256842115, "creation_date": 1256842115, "comment_count": 0, "score": 8, "owner": {"display_name": "ElGringoGrande", "reputation": 462, "user_id": 23100, "user_type": "registered", "accept_rate": 78}, "is_accepted": false, "up_vote_count": 8}, {"community_owned_date": 1256906731, "body": "<p>You only need 3 to 5 languages to do everything. C is a definite. Maybe assembly but you should know it and be able to use it. Maybe javascript and/or Java if you code for the web. A shell language like bash and one HLL, like Lisp, which might be useful. Anything else is a distraction.</p>\n", "answer_id": 1649617, "tags": [], "down_vote_count": 1, "last_activity_date": 1256906731, "creation_date": 1256906731, "comment_count": 0, "score": 1, "owner": {"display_name": "Rob", "reputation": 7858, "user_id": 162698, "user_type": "registered", "accept_rate": 81}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1256923445, "body": "<p><strong>Copy/Pasting is not an antipattern, it fact it helps with not making more bugs</strong></p>\n\n<p>My rule of thumb - typing only something that cannot be copy/pasted. If creating similar method, class, or file - copy existing one and change what's needed. (I am not talking about duplicating a code that should have been put into a single method).</p>\n\n<p>I usually never even type variable names - either copy pasting them or using IDE autocompletion. If need some DAO method - copying similar one and changing what's needed (even if 90% will be changed). May look like extreme laziness or lack of knowledge to some, but I almost never have to deal with problems caused my misspelling something trivial, and they are usually tough to catch (if not detected on a compile level). </p>\n\n<p>Whenever I step away from my copy-pasting rule and start typing stuff I always misspelling something (it's just a statistics, nobody can write perfect text off the bat) and then spending more time trying to figure out where.</p>\n", "answer_id": 1651203, "tags": [], "down_vote_count": 5, "last_activity_date": 1256923445, "comments": [{"body": "If you think getting code to compile is a big problem... (shakes head)", "edited": false, "comment_id": 2437323, "creation_date": 1268682030, "score": 3, "owner": {"display_name": "Integer Poet", "reputation": 320, "user_id": 52731, "user_type": "registered", "accept_rate": 71}}], "creation_date": 1256923445, "comment_count": 1, "score": -1, "owner": {"display_name": "serg", "reputation": 51981, "user_id": 20128, "user_type": "registered", "accept_rate": 75}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1257078545, "body": "<p><strong>There is only one design pattern: encapsulation</strong></p>\n\n<p>For example:</p>\n\n<ul>\n<li>Factory method: you've encapsulated object creation</li>\n<li>Strategy: you encapsulated different changeable algorithms</li>\n<li>Iterator: you encapsulated the way to sequentially access the elements in the collection.</li>\n</ul>\n", "answer_id": 1657050, "tags": [], "down_vote_count": 0, "last_activity_date": 1257078545, "comments": [{"body": "wrong. the only design pattern is &quot;take out duplicate code and put it in an external function/method/object&quot;", "edited": false, "comment_id": 1611776, "creation_date": 1258147876, "score": 1, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}], "creation_date": 1257078545, "comment_count": 1, "score": 3, "owner": {"display_name": "flybywire", "reputation": 48624, "user_id": 63051, "user_type": "registered", "accept_rate": 96}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1257079005, "body": "<p><strong>Modern C++ is a beautiful language</strong>.</p>\n\n<p>There, I said it.  A lot of people really hate C++, but honestly, I find modern C++ with STL/Boost style programming to be a very expressive, elegant, and incredibly productive language most of the time.  </p>\n\n<p>I think most people who hate C++ are basing that on bad experiences with OO.  C++ doesn't do OO very well because polymorphism often depends on heap-allocated objects, and C++ doesn't have automatic garbage collection.</p>\n\n<p>But C++ really shines when it comes to generic libraries and functional-programming techniques which make it possible to build incredibly large, highly-maintainable systems.  A lot of people say C++ tries to do everything, but ends up doing nothing very well.  I'd probably agree that it doesn't do OO as well as other languages, but it does generic programming and functional programming <strong><em>better</em></strong> than any other mainstream C-based language.  (C++0x will only further underscore this truth.)</p>\n\n<p>I also appreciate how C++ lets me get low-level if necessary, and provides full access to the operating system.</p>\n\n<p>Plus RAII.  Seriously.  I really miss destructors when I program in other C-based languages.  (And no, garbage collection does not make destructors useless.)</p>\n", "is_accepted": false, "tags": [], "answer_id": 1657065, "down_vote_count": 1, "last_activity_date": 1257082470, "comments": [{"body": "I really dislike the C++ compilers. They have terrible error messages.", "edited": false, "comment_id": 1544670, "creation_date": 1257301302, "score": 1, "owner": {"display_name": "thesmart", "reputation": 1648, "user_id": 20176, "user_type": "registered", "accept_rate": 77}}, {"body": "&quot;any mainstream C-based language&quot; would include C# and Scala, both of which are now quite good for functional programming.  You should look at them again if you haven&#39;t tried the latest versions yet.", "edited": false, "comment_id": 2203791, "creation_date": 1265907892, "score": 0, "owner": {"display_name": "finnw", "reputation": 27950, "user_id": 12048, "user_type": "registered", "accept_rate": 94}}, {"body": "@thesmart I hate C++, but LLVM&#39;s error-messages kick ass.", "edited": false, "reply_to_user": {"display_name": "thesmart", "reputation": 1648, "user_id": 20176, "user_type": "registered", "accept_rate": 77}, "comment_id": 4912294, "creation_date": 1292856778, "score": 0, "owner": {"display_name": "user142019", "user_type": "does_not_exist"}}], "creation_date": 1257079005, "comment_count": 3, "score": 7, "owner": {"display_name": "Charles Salvia", "reputation": 31909, "user_id": 168288, "user_type": "registered", "accept_rate": 93}, "last_editor": {"display_name": "Charles Salvia", "reputation": 31909, "user_id": 168288, "user_type": "registered", "accept_rate": 93}, "last_edit_date": 1257082470, "up_vote_count": 8}, {"community_owned_date": 1257080111, "body": "<p>Making software configurable is a bad idea.</p>\n\n<p>Configurable software allows the end-user (or admin etc) to choose too many options, which may not all have been tested together (or rather, if there are more than a very small number, I can guarantee will not have been tested).</p>\n\n<p>So I think software which has its configuration hard-coded (but not necessarily shunning constants etc) to JUST WORK is a good idea. Run with sensible defaults, and DO NOT ALLOW THEM TO BE CHANGED.</p>\n\n<p>A good example of this is the number of configuration options on Google Chrome - however, this is probably still too many :)</p>\n", "answer_id": 1657112, "tags": [], "down_vote_count": 2, "last_activity_date": 1257080111, "comments": [{"body": "Agreed. Make a design decision for the user and stick to it.", "edited": false, "comment_id": 1544664, "creation_date": 1257301222, "score": 1, "owner": {"display_name": "thesmart", "reputation": 1648, "user_id": 20176, "user_type": "registered", "accept_rate": 77}}, {"body": "Making software is a bad idea.", "edited": false, "comment_id": 4912299, "creation_date": 1292856807, "score": 0, "owner": {"display_name": "user142019", "user_type": "does_not_exist"}}], "creation_date": 1257080111, "comment_count": 2, "score": 10, "owner": {"display_name": "MarkR", "reputation": 41599, "user_id": 13724, "user_type": "registered", "accept_rate": 29}, "is_accepted": false, "up_vote_count": 12}, {"community_owned_date": 1257301137, "body": "<p>Ternary operators absolutely suck.  They are the epitome of lazy ass programing.</p>\n\n<pre><code>user-&gt;isLoggedIn() ? user-&gt;update() : user-&gt;askLogin();\n</code></pre>\n\n<p>This is so easy to screw up. A little change in revision #2:</p>\n\n<pre><code>user-&gt;isLoggedIn() &amp;&amp; user-&gt;isNotNew(time()) ? user-&gt;update() : user-&gt;askLogin();\n</code></pre>\n\n<p>Oh yeah, just one more \"little change.\"</p>\n\n<pre><code>user-&gt;isLoggedIn() &amp;&amp; user-&gt;isNotNew(time()) ? user-&gt;update() \n    : user-&gt;noCredentials() ? user-&gt;askSignup\n        : user-&gt;askLogin();\n</code></pre>\n\n<p>Oh crap, what about that OTHER case?</p>\n\n<pre><code>user-&gt;isLoggedIn() &amp;&amp; user-&gt;isNotNew(time()) &amp;&amp; !user-&gt;isBanned() ? user-&gt;update() \n    : user-&gt;noCredentials() || !user-&gt;isBanned() ? user-&gt;askSignup()\n        : user-&gt;askLogin();\n</code></pre>\n\n<p>NO NO NO NO. Just save us the code change. Stop being freaking lazy:</p>\n\n<pre><code>if (user-&gt;isLoggedIn()) {\n    user-&gt;update()\n} else {\n    user-&gt;askLogin();\n}\n</code></pre>\n\n<p>Because doing it right the first time will save us all from having to convert your crap ternaries AGAIN and AGAIN:</p>\n\n<pre><code>if (user-&gt;isLoggedIn() &amp;&amp; user-&gt;isNotNew(time()) &amp;&amp; !user-&gt;isBanned()) {\n    user-&gt;update()\n} else {\n    if (user-&gt;noCredentials() || !user-&gt;isBanned()) {\n        user-&gt;askSignup();\n    } else {\n        user-&gt;askLogin();\n    }\n}\n</code></pre>\n", "answer_id": 1671360, "tags": [], "down_vote_count": 2, "last_activity_date": 1257301137, "comments": [{"body": "That&#39;d be the issue of using the wrong paradigm for what you&#39;re trying to do. If you want to branch, use a goddamn <code>if</code>. If you want to print slightly differnt text (Say &quot;Mr.&quot; or &quot;Mrs&quot; in a greeting), use the conditional operator", "edited": false, "comment_id": 1689928, "creation_date": 1259217099, "score": 4, "owner": {"display_name": "3Doubloons", "reputation": 1230, "user_id": 25818, "user_type": "registered", "accept_rate": 75}}, {"body": "use them for assignment, and not for branching. its a good replacement for <code>if(c) { x=a; } else { x=b; }</code>, which becomes <code>x=c?a:b;</code> but not for anything else!", "edited": false, "comment_id": 1808258, "creation_date": 1260838119, "score": 0, "owner": {"display_name": "Frunsi", "reputation": 5185, "user_id": 206247, "user_type": "registered", "accept_rate": 100}}, {"body": "Nope. I&#39;m sorry. I agree completely with the OP in that the ternary operator sucks, because you are giving some nameless/faceless dev out there the opportunity to make code much harder to read. And that&#39;s on top of the fact that, as he says, its a duplicated language feature anyway. Its okay to be impressed by this sort of stuff when you&#39;re in college. As a professional, you&#39;re part of a greater development machine that relies on readability.", "edited": false, "comment_id": 3947932, "creation_date": 1284737673, "score": 0, "owner": {"display_name": "Arcane Engineer", "reputation": 2269, "user_id": 279738, "user_type": "registered", "accept_rate": 99}}], "creation_date": 1257301137, "comment_count": 3, "score": 4, "owner": {"display_name": "thesmart", "reputation": 1648, "user_id": 20176, "user_type": "registered", "accept_rate": 77}, "is_accepted": false, "up_vote_count": 6}, {"community_owned_date": 1257301364, "body": "<p>The C++ STL library is so general purpose that it is optimal for no one.</p>\n", "answer_id": 1671377, "tags": [], "down_vote_count": 3, "last_activity_date": 1257301364, "comments": [{"body": "&#39;The&#39; and &#39;STL library&#39; don&#39;t belong in that sentence. Remove them.", "edited": false, "comment_id": 4912282, "creation_date": 1292856706, "score": 0, "owner": {"display_name": "user142019", "user_type": "does_not_exist"}}], "creation_date": 1257301364, "comment_count": 1, "score": 0, "owner": {"display_name": "dicroce", "reputation": 14113, "user_id": 3886, "user_type": "registered", "accept_rate": 80}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1257328066, "body": "<p><strong>JavaScript is a \"messy\" language but god help me I love it.</strong></p>\n", "answer_id": 1672704, "tags": [], "down_vote_count": 0, "last_activity_date": 1257328066, "comments": [{"body": "I definitly have a Love/Hate relationship with JavaScript", "edited": false, "comment_id": 1774118, "creation_date": 1260378274, "score": 2, "owner": {"display_name": "Neil N", "reputation": 15715, "user_id": 55164, "user_type": "registered", "accept_rate": 93}}, {"body": "+1, I know exactly what you mean. It can be fun to use. One thing I hate is the memory leaks.", "edited": false, "comment_id": 2580670, "creation_date": 1270393442, "score": 0, "owner": {"display_name": "JL.", "reputation": 19694, "user_id": 41543, "user_type": "registered", "accept_rate": 83}}, {"body": "Aestehtically, it&#39;s a pile of dog-spew. Can&#39;t deny it gets the job done, though.", "edited": false, "comment_id": 3947854, "creation_date": 1284737281, "score": 0, "owner": {"display_name": "Arcane Engineer", "reputation": 2269, "user_id": 279738, "user_type": "registered", "accept_rate": 99}}], "creation_date": 1257328066, "comment_count": 3, "score": 7, "owner": {"display_name": "Avi Y", "reputation": 1101, "user_id": 151799, "user_type": "registered", "accept_rate": 37}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1257328448, "body": "<p><strong>Open Source software costs more in the long run</strong></p>\n\n<p>For regular Line of Business companies, Open Source looks free but has hidden costs.</p>\n\n<p>When you take into account inconsistency of quality, variable usability and UI/UX, difficulties of interoperability and standards, increased configuration, associated increased need for training and support, the Total Cost of Ownership for Open Source is much higher than commercial offerings.</p>\n\n<p>Tech-savvy programmer-types take the liberation of Open Source and run with it; they 'get it' and can adopt it and customise it to suit their purposes. On the other hand, businesses that are primarily non-technical, but need software to run their offices, networks and websites are running the risk of a world of pain for themselves and heavy costs in terms of lost time, productivity and (eventually) support fees and/or the cost of abandoning the experiement all together.</p>\n", "answer_id": 1672727, "tags": [], "down_vote_count": 0, "last_activity_date": 1257328448, "comments": [{"body": "A lot of the cost saving from OSS comes from being able to fix bugs in 3rd party tools.  It&#39;s not just about license fees.", "edited": false, "comment_id": 2203767, "creation_date": 1265907731, "score": 0, "owner": {"display_name": "finnw", "reputation": 27950, "user_id": 12048, "user_type": "registered", "accept_rate": 94}}, {"body": "You&#39;ve undermined your claim to controversy here simply by pointing out that not every tool is best for every job. You need less reason and more dogma. Instead, tell us SQL Server is industrial-strength and MySQL is just a toy. Stack Overflow needs more page views and you are not helping.", "edited": false, "comment_id": 2437271, "creation_date": 1268681719, "score": 0, "owner": {"display_name": "Integer Poet", "reputation": 320, "user_id": 52731, "user_type": "registered", "accept_rate": 71}}, {"body": "WTF?? Who mentioned SQL databases? Page views? This comment is baffling.", "edited": false, "comment_id": 2438173, "creation_date": 1268688905, "score": 0, "owner": {"display_name": "Gordon Mackie JoanMiro", "reputation": 2466, "user_id": 15778, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1257328448, "comment_count": 3, "score": 5, "owner": {"display_name": "Gordon Mackie JoanMiro", "reputation": 2466, "user_id": 15778, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1257481703, "body": "<p><strong>Size matters!</strong> Embellish your code so it looks bigger.</p>\n", "is_accepted": false, "tags": [], "answer_id": 1685422, "down_vote_count": 1, "last_activity_date": 1262631862, "comments": [{"body": "Ha ha! So true, fastcodejava!", "edited": false, "comment_id": 2801874, "creation_date": 1273006204, "score": 0, "owner": {"display_name": "javaguy", "reputation": 945, "user_id": 328323, "user_type": "registered", "accept_rate": 97}}], "creation_date": 1257481703, "comment_count": 1, "score": 3, "owner": {"display_name": "fastcodejava", "reputation": 15648, "user_id": 184730, "user_type": "registered", "accept_rate": 72}, "last_editor": {"display_name": "fastcodejava", "reputation": 15648, "user_id": 184730, "user_type": "registered", "accept_rate": 72}, "last_edit_date": 1262631862, "up_vote_count": 4}, {"community_owned_date": 1257529019, "body": "<p>Apparently it is controversial that <a href=\"http://stackoverflow.com/questions/1688470/for-what-reason-does-an-ide-not-check-to-see-if-it-can-create-a-binary-before-com\">IDE's should check</a> to see whether they can link up the code they create before wasting time compiling </p>\n\n<p>But I'm of the opinion that I shouldn't compile a zillion lines of code only to realize that Windows has a lock on the file I'm trying to create because another programmer has some weird threading issue that requires him to Delay Unloading DLLs for 3 minutes after they aren't supposed to be used. </p>\n", "answer_id": 1689141, "tags": [], "down_vote_count": 0, "last_activity_date": 1257529019, "comments": [{"body": "You&#39;re asking for a language with knowledge of platforms and implementation details. They don&#39;t work that way.", "edited": false, "comment_id": 2437252, "creation_date": 1268681589, "score": 0, "owner": {"display_name": "Integer Poet", "reputation": 320, "user_id": 52731, "user_type": "registered", "accept_rate": 71}}, {"body": "No, I&#39;m asking for an IDE with knowledge of platforms and implementation details.  But thanks for the controversy! I didn&#39;t realize this question was finally deleted.", "edited": false, "comment_id": 2438163, "creation_date": 1268688816, "score": 0, "owner": {"display_name": "Peter Turner", "reputation": 3572, "user_id": 1765, "user_type": "registered", "accept_rate": 71}}], "creation_date": 1257529019, "comment_count": 2, "score": 1, "owner": {"display_name": "Peter Turner", "reputation": 3572, "user_id": 1765, "user_type": "registered", "accept_rate": 71}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1257562455, "body": "<p>Microsoft should stop supporting anything dealing with Visual Basic.</p>\n", "answer_id": 1691820, "tags": [], "down_vote_count": 3, "last_activity_date": 1257562455, "comments": [{"body": "I&#39;ve been saying that since Visual Basic 1.0.", "edited": false, "comment_id": 1600112, "creation_date": 1258028877, "score": 7, "owner": {"display_name": "MetalMikester", "reputation": 800, "user_id": 147040, "user_type": "registered"}}, {"body": "Microsoft should stop.  Period.", "edited": false, "comment_id": 1808564, "creation_date": 1260843035, "score": 1, "owner": {"display_name": "just somebody", "reputation": 10815, "user_id": 209605, "user_type": "registered", "accept_rate": 62}}, {"body": "Fully agree, why have VB.net? any VB.net developer can covert to C#. I know because I used to be a VB6 developer.", "edited": false, "comment_id": 2580662, "creation_date": 1270393379, "score": 1, "owner": {"display_name": "JL.", "reputation": 19694, "user_id": 41543, "user_type": "registered", "accept_rate": 83}}, {"body": "Is that even controversial at all? :D", "edited": false, "comment_id": 3947843, "creation_date": 1284737214, "score": 0, "owner": {"display_name": "Arcane Engineer", "reputation": 2269, "user_id": 279738, "user_type": "registered", "accept_rate": 99}}, {"body": "Visual Beginners All-purpose Symbolic Instruction Language. Damn, Microsoft is still just a beginner, a n00b.", "edited": false, "comment_id": 4912265, "creation_date": 1292856607, "score": 0, "owner": {"display_name": "user142019", "user_type": "does_not_exist"}}], "creation_date": 1257562455, "comment_count": 5, "score": 10, "owner": {"display_name": "Omar", "reputation": 19228, "user_id": 160823, "user_type": "registered", "accept_rate": 92}, "is_accepted": false, "up_vote_count": 13}, {"community_owned_date": 1257702945, "body": "<p><strong>Use unit tests as a last resort to verify code.</strong></p>\n\n<p>If you I want to verify that code is correct, I prefer the following techniques over unit testing: </p>\n\n<ol>\n<li>Type checking</li>\n<li>Assertions</li>\n<li>Trivially verifiable code</li>\n</ol>\n\n<p>For everything else, there's unit tests. </p>\n", "answer_id": 1697340, "tags": [], "down_vote_count": 0, "last_activity_date": 1257702945, "comments": [{"body": "0. Re-read your code.  Seems trivial, but often can be the best at finding errors.", "edited": false, "comment_id": 1678943, "creation_date": 1259083575, "score": 0, "owner": {"display_name": "Matt Hamsmith", "reputation": 2575, "user_id": 72873, "user_type": "registered", "accept_rate": 79}}, {"body": "Enthusiasts of unit tests too often position their arguments as defenses for weak typing and late binding as if a disciplined engineer chooses exactly one approach to reliability.", "edited": false, "comment_id": 2437240, "creation_date": 1268681486, "score": 0, "owner": {"display_name": "Integer Poet", "reputation": 320, "user_id": 52731, "user_type": "registered", "accept_rate": 71}}, {"body": "I&#39;m very ambivalent about unit tests. My personal opinion is that zealots that want 100% code coverage for there unit tests are wasting a lot of time and money. But they&#39;re not completely useless either, so I guess I agree with the statement.", "edited": false, "comment_id": 2710149, "creation_date": 1271925237, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "I&#39;ve pretty much been forced to this conclusion by a very tight schedule. I agree that unit tests are not for everything. But having said that, the more critical a piece of code is, the wiser you&#39;d be to write tests for it regardless.", "edited": false, "comment_id": 3947831, "creation_date": 1284737176, "score": 0, "owner": {"display_name": "Arcane Engineer", "reputation": 2269, "user_id": 279738, "user_type": "registered", "accept_rate": 99}}], "creation_date": 1257702945, "comment_count": 4, "score": 7, "owner": {"display_name": "cdiggins", "reputation": 6810, "user_id": 184528, "user_type": "registered", "accept_rate": 96}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1257705046, "body": "<h2>Procedural programming is fun. OOP is boring.</h2>\n", "answer_id": 1697445, "tags": [], "down_vote_count": 3, "last_activity_date": 1257705046, "comments": [{"body": "pythonic programming is fun (procedural + functional)", "edited": false, "comment_id": 1611767, "creation_date": 1258147728, "score": 0, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "-1, totally disagree. There is massive satisfaction of finishing a class that cleans up your code so much and adds so much more power to your project.", "edited": false, "comment_id": 1639086, "creation_date": 1258553956, "score": 0, "owner": {"display_name": "Sam152", "reputation": 9304, "user_id": 59730, "user_type": "registered", "accept_rate": 97}}, {"body": "This controversial ;)", "edited": false, "comment_id": 1644933, "creation_date": 1258609992, "score": 0, "owner": {"display_name": "Ikke", "reputation": 39826, "user_id": 20261, "user_type": "registered", "accept_rate": 82}}, {"body": "@Sam152, you should vote +1. You agree that it&#39;s a &quot;controversial programming opinion?&quot;", "edited": false, "comment_id": 1650729, "creation_date": 1258664760, "score": 0, "owner": {"display_name": "Peter", "reputation": 3142, "user_id": 175975, "user_type": "registered", "accept_rate": 82}}, {"body": "That is definitely controversial. I much rather program in C++ rather than C.", "edited": false, "comment_id": 1808205, "creation_date": 1260837137, "score": 1, "owner": {"display_name": "Noctis Skytower", "reputation": 6669, "user_id": 216356, "user_type": "registered", "accept_rate": 96}}, {"body": "+1. I went through a phase of &quot;I hate OOP&quot; a few years ago, although I&#39;m mostly over it now.", "edited": false, "comment_id": 2203727, "creation_date": 1265907576, "score": 0, "owner": {"display_name": "finnw", "reputation": 27950, "user_id": 12048, "user_type": "registered", "accept_rate": 94}}, {"body": "C++ is not OOP. It&#39;s just C with namespaces and functions in structs for lazy programmers that.", "edited": false, "comment_id": 4912251, "creation_date": 1292856541, "score": 0, "owner": {"display_name": "user142019", "user_type": "does_not_exist"}}], "creation_date": 1257705046, "comment_count": 7, "score": 4, "owner": {"display_name": "Peter", "reputation": 3142, "user_id": 175975, "user_type": "registered", "accept_rate": 82}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1257794906, "body": "<p>Java is the COBOL of our generation.</p>\n\n<p>Everyone learns to code it. There code for it running in big companies that will try to keep it running for decades. Everyone comes to despise it compared to all the other choices out there but are forced to use it anyway because it pays the bills.</p>\n", "answer_id": 1703208, "tags": [], "down_vote_count": 0, "last_activity_date": 1257794906, "comments": [{"body": "COBOL is still the COBOL of our generation. Maybe Java will be the COBOL three generations from now... But then, so will C#.", "edited": false, "comment_id": 1617248, "creation_date": 1258269180, "score": 3, "owner": {"display_name": "Kobi", "reputation": 75990, "user_id": 7586, "user_type": "registered", "accept_rate": 78}}, {"body": "I would say PHP is the COBOL of our generation.  It has an important property in common - it was designed to be coded by people who were not full-time coders.  Unlike Java and C# which borrow heavily from C++.", "edited": false, "comment_id": 2203719, "creation_date": 1265907477, "score": 0, "owner": {"display_name": "finnw", "reputation": 27950, "user_id": 12048, "user_type": "registered", "accept_rate": 94}}], "creation_date": 1257794906, "comment_count": 2, "score": 3, "owner": {"display_name": "Kelly S. French", "reputation": 8435, "user_id": 135078, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1257986758, "body": "<p>\"XML and HTML are the \"assembly language\" of the web. Why still hack it?</p>\n\n<p>It seems fairly obvious that very few developers these days learn/code in assembly language for reason that it's primitive and takes you far away from the problem you have to solve at high-level. So we invented high-level languages to encapsulates those level entities to boost our productivity thru the language elements that we can relate to more at higher level. Just like we can do more with a computer than just its constituent motherboard or CPU.</p>\n\n<p>With the Web, it seems to me developers still are reading/writing and hacking HTML,CSS,XMl,schemas, etc.</p>\n\n<p>I see these as the equivalent of \"assembly language\" of the Web or its substrates.\nShould we be done with it?. Sure, we need to hack it sometimes when things go wrong.\nBut surely, that's an exception.\nI assert that we are replacing lower-level assembly language at machine level with its equivalent at Web-level.</p>\n", "answer_id": 1719138, "tags": [], "down_vote_count": 0, "last_activity_date": 1257986758, "comments": [{"body": "That&#39;s like saying, Python is the assembly of Django, don&#39;t use it!", "edited": false, "comment_id": 1611758, "creation_date": 1258147665, "score": 0, "owner": {"display_name": "hasen", "reputation": 46921, "user_id": 35364, "user_type": "registered", "accept_rate": 73}}, {"body": "You want to invent a new language that is at a higher level than XHTML?", "edited": false, "comment_id": 1808194, "creation_date": 1260837042, "score": 1, "owner": {"display_name": "Noctis Skytower", "reputation": 6669, "user_id": 216356, "user_type": "registered", "accept_rate": 96}}], "creation_date": 1257986758, "comment_count": 2, "score": 1, "owner": {"display_name": "user209182", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1258026525, "body": "<p><strong>Human brain is the master key to all locks.</strong></p>\n\n<p>There is nothing in this world that can move faster your brain. Trust me this is not philosophical but practical. Well as far as opinions are concerned , they are as under</p>\n\n<p><hr></p>\n\n<p>1) Never go outside the boundry specified in the programming language, A simple example would be pointers in C and C++.  Dont misuse them as you are likely to get the <strong>DAMN SEGMENTATION FAULT.</strong></p>\n\n<p>2) Always follow the coding standards, yes what you are reading is correct, Coding standards do alot to your program, <em>After all your program is written to be executed by machine but to be understood by some other brain</em> :)</p>\n", "answer_id": 1721666, "tags": [], "down_vote_count": 0, "last_activity_date": 1258026525, "creation_date": 1258026525, "comment_count": 0, "score": 0, "owner": {"display_name": "Sachin Chourasiya", "reputation": 3548, "user_id": 184862, "user_type": "registered", "accept_rate": 66}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1258027822, "body": "<h2>Assembler is not dead</h2>\n\n<p>In my job (copy protection systems) assembler programming is essential, I was working with many hll copy protection systems and only assembler gives you the real power to utilize all the possibilities hidden in the code (like code mutation, low level stuff).</p>\n\n<p>Also many code optimizations are possible only with an assembler programming, look at the sources of any video codecs, sources are written in assembler and optimized to use MMX/SSE/SSE2 opcodes whatever, many game engines uses assembler optimized routines, even Windows kernel has SSE optimized routines:</p>\n\n<pre><code>NTDLL.RtlMoveMemory\n\n.text:7C902CD8                 push    ebp\n.text:7C902CD9                 mov     ebp, esp\n.text:7C902CDB                 push    esi\n.text:7C902CDC                 push    edi\n.text:7C902CDD                 push    ebx\n.text:7C902CDE                 mov     esi, [ebp+0Ch]\n.text:7C902CE1                 mov     edi, [ebp+8]\n.text:7C902CE4                 mov     ecx, [ebp+10h]\n.text:7C902CE7                 mov     eax, [esi]\n.text:7C902CE9                 cld\n.text:7C902CEA                 mov     edx, ecx\n.text:7C902CEC                 and     ecx, 3Fh\n.text:7C902CEF                 shr     edx, 6\n.text:7C902CF2                 jz      loc_7C902EF2\n.text:7C902CF8                 dec     edx\n.text:7C902CF9                 jz      loc_7C902E77\n.text:7C902CFF                 prefetchnta byte ptr [esi-80h]\n.text:7C902D03                 dec     edx\n.text:7C902D04                 jz      loc_7C902E03\n.text:7C902D0A                 prefetchnta byte ptr [esi-40h]\n.text:7C902D0E                 dec     edx\n.text:7C902D0F                 jz      short loc_7C902D8F\n.text:7C902D11\n.text:7C902D11 loc_7C902D11:                           ; CODE XREF: .text:7C902D8Dj\n.text:7C902D11                 prefetchnta byte ptr [esi+100h]\n.text:7C902D18                 mov     eax, [esi]\n.text:7C902D1A                 mov     ebx, [esi+4]\n.text:7C902D1D                 movnti  [edi], eax\n.text:7C902D20                 movnti  [edi+4], ebx\n.text:7C902D24                 mov     eax, [esi+8]\n.text:7C902D27                 mov     ebx, [esi+0Ch]\n.text:7C902D2A                 movnti  [edi+8], eax\n.text:7C902D2E                 movnti  [edi+0Ch], ebx\n.text:7C902D32                 mov     eax, [esi+10h]\n.text:7C902D35                 mov     ebx, [esi+14h]\n.text:7C902D38                 movnti  [edi+10h], eax\n</code></pre>\n\n<p>So if you hear next time that assembler is dead, think about the last movie you have watched or the game you've played (and its copy protection heh).</p>\n", "is_accepted": false, "tags": [], "answer_id": 1721763, "down_vote_count": 0, "last_activity_date": 1258028642, "comments": [{"body": "Assembler is also essential for breaking copy protections :D", "edited": false, "comment_id": 1650701, "creation_date": 1258664581, "score": 6, "owner": {"display_name": "Peter", "reputation": 3142, "user_id": 175975, "user_type": "registered", "accept_rate": 82}}, {"body": "Wait, copy protection, so you don&#39;t like my iTunes Library, do you?", "edited": false, "comment_id": 4912237, "creation_date": 1292856424, "score": 0, "owner": {"display_name": "user142019", "user_type": "does_not_exist"}}], "creation_date": 1258027822, "comment_count": 2, "score": 8, "owner": {"display_name": "Bartosz W\u00f3jcik", "reputation": 223, "user_id": 205036, "user_type": "registered", "accept_rate": 38}, "last_editor": {"display_name": "simon", "reputation": 4887, "user_id": 76777, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1258028642, "up_vote_count": 8}, {"community_owned_date": 1258074753, "body": "<p><strong>Programming is neither art nor science.  It is an engineering discipline.</strong></p>\n\n<p>It's not art: programming requires creativity for sure.  That doesn't make it art.  Code is designed and written to work properly, not to be emotionally moving.  Except for whitespace, changing code for aesthetic reasons breaks your code.  While code can be beautiful, art is not the primary purpose.</p>\n\n<p>It's not science: science and technology are inseparable, but programming is in the technology category.  Programming is not systematic study and observation; it is design and implementation.</p>\n\n<p>It's an engineering discipline: programmers design and build things.  Good programmers design for function.  They understand the trade-offs of different implementation options and choose the one that suits the problem they are solving.</p>\n\n<p><hr></p>\n\n<p>I'm sure there are those out there who would love to parse words, stretching the definitions of art and science to include programming or constraining engineering to mechanical machines or hardware only.  Check the dictionary.  Also \"The Art of Computer Programming\" is a different usage of art that means a skill or craft, as in \"the art of conversation.\"  The product of programming is not art.</p>\n", "answer_id": 1726526, "tags": [], "down_vote_count": 0, "last_activity_date": 1258074753, "creation_date": 1258074753, "comment_count": 0, "score": 9, "owner": {"display_name": "Paul", "reputation": 319, "user_id": 208130, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 9}, {"community_owned_date": 1258145164, "body": "<p>Neither Visual Basic or C# trumps the other.  They are pretty much the same, save some syntax and formatting.</p>\n", "answer_id": 1731803, "tags": [], "down_vote_count": 0, "last_activity_date": 1258145164, "comments": [{"body": "Now... They weren&#39;t always so feature similar. So you have to fight what many of us learned once upon a time.", "edited": false, "comment_id": 1612131, "creation_date": 1258151942, "score": 1, "owner": {"display_name": "Jon Adams", "reputation": 11713, "user_id": 2291, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1258145164, "comment_count": 1, "score": 1, "owner": {"display_name": "Brad", "reputation": 649, "user_id": 203489, "user_type": "registered", "accept_rate": 89}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1258224248, "body": "<p>Not really programming, but I can't stand css only layouts just for the sake of it.  It's counter productive, frustrating, and makes maintenance a nightmare of floats and margins where changing the position of a single element can throw the entire page out of whack.</p>\n\n<p>It's definitely not a popular opinion, but i'm done with my table layout in 20 minutes while the css gurus spend hours tweaking line-height, margins, padding and floats just to do something as basic as vertically centering a paragraph.</p>\n", "answer_id": 1735169, "tags": [], "down_vote_count": 2, "last_activity_date": 1258224248, "comments": [{"body": "Whoever spends hours writing <code>margin: 0 auto;</code> is one hell of a bad css-designer... Still, tables are tables and tables store data. Not design.", "edited": false, "comment_id": 1639078, "creation_date": 1258553908, "score": 1, "owner": {"display_name": "Florian Peschka", "reputation": 5975, "user_id": 204693, "user_type": "registered", "accept_rate": 100}}, {"body": "That is why there are 3 different ways to use styles. For  re-usability, and scope of need.", "edited": false, "comment_id": 2352706, "creation_date": 1267666339, "score": 1, "owner": {"display_name": "awright18", "reputation": 1198, "user_id": 210609, "user_type": "registered", "accept_rate": 88}}], "creation_date": 1258224248, "comment_count": 2, "score": 7, "owner": {"display_name": "Rob", "reputation": 4273, "user_id": 203452, "user_type": "registered", "accept_rate": 88}, "is_accepted": false, "up_vote_count": 9}, {"community_owned_date": 1258268862, "body": "<p>I think we should move away from 'C'. Its too old!. But, the old dog is still barking louder!!</p>\n", "answer_id": 1736852, "tags": [], "down_vote_count": 4, "last_activity_date": 1258268862, "comments": [{"body": "Move away towards what...?", "edited": false, "comment_id": 1639068, "creation_date": 1258553849, "score": 0, "owner": {"display_name": "Florian Peschka", "reputation": 5975, "user_id": 204693, "user_type": "registered", "accept_rate": 100}}, {"body": "Towards Ruby :)", "edited": false, "comment_id": 1808076, "creation_date": 1260835379, "score": 0, "owner": {"display_name": "Dmytrii Nagirniak", "reputation": 12516, "user_id": 148473, "user_type": "registered", "accept_rate": 87}}, {"body": "It is probably still one of the best languages to write an operating system in assuming (1) you are starting from scratch, (2) you want it to be fast but do not have time to write it in assembly, and (3) want to work on maintaining and editing operating systems written in C.", "edited": false, "comment_id": 1808168, "creation_date": 1260836726, "score": 0, "owner": {"display_name": "Noctis Skytower", "reputation": 6669, "user_id": 216356, "user_type": "registered", "accept_rate": 96}}, {"body": "One word: no. Oh wait, that were three words.", "edited": false, "comment_id": 4912223, "creation_date": 1292856367, "score": 0, "owner": {"display_name": "user142019", "user_type": "does_not_exist"}}], "creation_date": 1258268862, "comment_count": 4, "score": 1, "owner": {"display_name": "Ganesh Gopalasubramanian", "reputation": 700, "user_id": 201633, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1258577505, "body": "<p><strong>Macros</strong>, <strong>Preprocessor</strong> instructions and <strong>Annotations</strong> are evil.</p>\n\n<p>One syntax and language per file please!</p>\n\n<p>// does not apply to Make files, or editor macros that insert real code.</p>\n", "answer_id": 1758995, "tags": [], "down_vote_count": 0, "last_activity_date": 1258577505, "comments": [{"body": "Everyone agrees that the pre-processor is evil... except the people who would never be found on Stack Overflow. They love it.", "edited": false, "comment_id": 2437198, "creation_date": 1268681164, "score": 0, "owner": {"display_name": "Integer Poet", "reputation": 320, "user_id": 52731, "user_type": "registered", "accept_rate": 71}}, {"body": "How about this: C is evil. And C++ is even more evil. However, C is a necessary evil, and C++ an unnecessary one.", "edited": false, "comment_id": 2560250, "creation_date": 1270080310, "score": 0, "owner": {"display_name": "Warren  P", "reputation": 26418, "user_id": 84704, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1258577505, "comment_count": 2, "score": 3, "owner": {"display_name": "Chris Cudmore", "reputation": 13912, "user_id": 18907, "user_type": "registered", "accept_rate": 93}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1258577997, "body": "<p><strong>Writing extensive specifications is futile.</strong><br>\nIt's pretty difficult to write correct programs, but compilers, debuggers, unit tests, testers etc. make it possible to detect and eliminate most errors. On the other hand, when you write specs with a comparable level of detail like a program (i.e. pseudocode, UML), you are mostly on your own. Consider yourself lucky if you have a tool that helps you get the syntax right.</p>\n\n<p><strong>Extensive specifications are most likely bug riddled.</strong><br>\nThe chance that the writer got it right at the first try is about the same like the chance that a similarily large program is bugfree without ever being tested. Peer reviews eliminate some bugs, just like code reviews do.</p>\n", "answer_id": 1759046, "tags": [], "down_vote_count": 0, "last_activity_date": 1258577997, "comments": [{"body": "This is controversial only to the extent that you expect a specification to resemble the finished product. If instead the purpose is to make you think through the issues involved, then specifications work great. This is especially true if the finished product doesn&#39;t suck, doesn&#39;t resemble the spec, and you look back and realize you were able to change your mind effectively because you had gone through the exercise of writing the spec. Note: this only works if you have only smart people on your team.", "edited": false, "comment_id": 2437188, "creation_date": 1268681108, "score": 1, "owner": {"display_name": "Integer Poet", "reputation": 320, "user_id": 52731, "user_type": "registered", "accept_rate": 71}}], "creation_date": 1258577997, "comment_count": 1, "score": 5, "owner": {"display_name": "ammoQ", "reputation": 20878, "user_id": 65464, "user_type": "registered", "accept_rate": 89}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1258841309, "body": "<h2><strong>Boolean variables should be used only for Boolean logic. In all other cases, use enumerations.</strong></h2>\n\n<p><hr></p>\n\n<p>Boolean variables are used to store data that can only take on two possible values.  The problems that arise from using them are frequently overlooked:</p>\n\n<ul>\n<li>Programmers often cannot correctly identify when some piece of data should only have two possible values</li>\n<li>The people who instruct programmers what to do, such as program managers or whomever writes the specs that programmers follow, often cannot correctly identify this either</li>\n<li>Even when a piece of data is correctly identified as having only two possible states, that guarantee may not hold in the future.  </li>\n</ul>\n\n<p>In these cases, using Boolean variables leads to confusing code that can often be prevented by using enumerations.  </p>\n\n<p><strong>Example</strong></p>\n\n<p>Say a programmer is writing software for a car dealership that sells only cars and trucks.  The programmer develops a thorough model of the business requirements for his software.  Knowing that the only types of vehicles sold are cars and trucks, he correctly identifies that he can use a boolean variable inside a Vehicle class to indicate whether the vehicle is a car or a truck.  </p>\n\n<pre><code>class Vehicle {\n bool isTruck;\n ...\n}\n</code></pre>\n\n<p>The software is written so when <code>isTruck</code> is true a vehicle is a truck, and when <code>isTruck</code> is false the vehicle is a car.  This is a simple check performed many times throughout the code.  </p>\n\n<p>Everything works without trouble, until one day when the car dealership buys another dealership that sells motorcycles as well.  The programmer has to update the software so that it works correctly considering the dealership's business has changed.  It now needs to identify whether a vehicle is a car, truck, or motorcycle, three possible states.  </p>\n\n<p>How should the programmer implement this?  <code>isTruck</code> is a boolean variable, so it can hold only two states.  He could change it from a boolean to some other type that allows many states, but this would break existing logic and possibly not be backwards compatible.  The simplest solution from the programmer's point of view is to add a new variable to represent whether the vehicle is a motorcycle.  </p>\n\n<pre><code>class Vehicle {\n bool isTruck;\n bool isMotorcycle;\n ...\n}\n</code></pre>\n\n<p>The code is changed so that when <code>isTruck</code> is true a vehicle is a truck, when <code>isMotorcycle</code> is true a vehicle is a motorcycle, and when they're both false a vehicle is a car.  </p>\n\n<p><strong>Problems</strong> </p>\n\n<p>There are two big problems with this solution:</p>\n\n<ul>\n<li>The programmer wants to express the type of the vehicle, which is one idea, but the solution uses two variables to do so.  Someone unfamiliar with the code will have a harder time understanding the semantics of these variables than if the programmer had used just one variable that specifies the type entirely.  </li>\n<li>Solving this motorcycle problem by adding a new boolean doesn't make it any easier for the programmer to deal with such situations that happen in the future.  If the dealership starts selling buses, the programmer will have to repeat all these steps over again by adding yet another boolean.  </li>\n</ul>\n\n<p>It's not the developer's fault that the business requirements of his software changed, requiring him to revise existing code.  But using boolean variables in the first place made his code less flexible and harder to modify to satisfy unknown future requirements (less \"future-proof\").  When he implemented the changes in the quickest way, the code became harder to read.  Using a boolean variable was ultimately a premature optimization.  </p>\n\n<p><strong>Solution</strong> </p>\n\n<p>Using an enumeration in the first place would have prevented these problems.  </p>\n\n<pre><code>enum EVehicleType { Truck, Car }\n\nclass Vehicle {\n EVehicleType type;\n ...\n}\n</code></pre>\n\n<p>To accommodate motorcycles in this case, all the programmer has to do is add <code>Motorcycle</code> to <code>EVehicleType</code>, and add new logic to handle the motorcycle cases.  No new variables need to be added.  Existing logic shouldn't be disrupted.  And someone who's unfamiliar with the code can easily understand how the type of the vehicle is stored.  </p>\n\n<p><strong>Cliff Notes</strong></p>\n\n<p>Don't use a type that can only ever store two different states unless you're absolutely certain two states will always be enough.  Use an enumeration if there are any possible conditions in which more than two states will be required in the future, <em>even if a boolean would satisfy existing requirements</em>.  </p>\n", "is_accepted": false, "tags": [], "answer_id": 1776946, "down_vote_count": 0, "last_activity_date": 1259016746, "comments": [{"body": "I guess this is not very controversial.", "edited": false, "comment_id": 1680490, "creation_date": 1259097343, "score": 0, "owner": {"display_name": "Ikke", "reputation": 39826, "user_id": 20261, "user_type": "registered", "accept_rate": 82}}, {"body": "The argument isn&#39;t controversial per se, but try writing your code like that and see if your team object. I&#39;d bet 9/10 teams would try and argue you back to booleans.", "edited": false, "comment_id": 2258444, "creation_date": 1266549528, "score": 0, "owner": {"display_name": "David", "reputation": 1243, "user_id": 202224, "user_type": "registered", "accept_rate": 81}}, {"body": "Of course, OOP guys in the corner would mutter something along the lines of &quot;class Truck extends/implements Vehicle, class Car extends/implements Vehicle...&quot;", "edited": false, "comment_id": 2416110, "creation_date": 1268388571, "score": 1, "owner": {"display_name": "Ivan Vrtari\u0107", "reputation": 356, "user_id": 150043, "user_type": "registered"}}, {"body": "I worked on a project that used a collection of booleans to try to distinguish among models of printer. It was ... execrable. Nobody would want to do that after having seen it in action. But here&#39;s some controversy for you: In languages which allow it, it&#39;s perfectly reasonable to use a bool for one of three values: true, false, and don&#39;t know.", "edited": false, "comment_id": 2437148, "creation_date": 1268680782, "score": 1, "owner": {"display_name": "Integer Poet", "reputation": 320, "user_id": 52731, "user_type": "registered", "accept_rate": 71}}, {"body": "Thanks. Never thought about that. I guess I should give enums a better look.", "edited": false, "comment_id": 3058643, "creation_date": 1275976913, "score": 0, "owner": {"display_name": "Sylverdrag", "reputation": 3854, "user_id": 61905, "user_type": "registered", "accept_rate": 74}}, {"body": "Hmm. I could learn from this.", "edited": false, "comment_id": 3947793, "creation_date": 1284737029, "score": 0, "owner": {"display_name": "Arcane Engineer", "reputation": 2269, "user_id": 279738, "user_type": "registered", "accept_rate": 99}}, {"body": "Just to make things clear to me. Should I use <code>_Bool isGirl;</code> or <code>enum { boy, girl }; typedef unsigned gender;</code>?", "edited": false, "comment_id": 4912193, "creation_date": 1292856216, "score": 0, "owner": {"display_name": "user142019", "user_type": "does_not_exist"}}], "creation_date": 1258841309, "comment_count": 7, "score": 20, "owner": {"display_name": "Chris", "reputation": 445, "user_id": 28350, "user_type": "registered", "accept_rate": 92}, "last_editor": {"display_name": "Chris", "reputation": 445, "user_id": 28350, "user_type": "registered", "accept_rate": 92}, "last_edit_date": 1259016746, "up_vote_count": 20}, {"community_owned_date": 1258842276, "body": "<p><strong>One class per file</strong></p>\n\n<p>Who cares? I much prefer entire programs contained in one file rather than a million different files.</p>\n", "answer_id": 1776988, "tags": [], "down_vote_count": 3, "last_activity_date": 1258842276, "comments": [{"body": "One namespace per file is better.", "edited": false, "comment_id": 1805794, "creation_date": 1260814605, "score": 0, "owner": {"display_name": "Behrooz", "reputation": 790, "user_id": 179795, "user_type": "registered", "accept_rate": 81}}, {"body": "One file per computer! ANARCHY!!!", "edited": false, "comment_id": 1879296, "creation_date": 1261906170, "score": 0, "owner": {"display_name": "Tor Valamo", "reputation": 17144, "user_id": 228936, "user_type": "registered"}}, {"body": "1 FILE PER CLOUD, PER PLANET!", "edited": false, "comment_id": 2491851, "creation_date": 1269317780, "score": 1, "owner": {"display_name": "JL.", "reputation": 19694, "user_id": 41543, "user_type": "registered", "accept_rate": 83}}, {"body": "One character per file. d&#248;h. LOGIC!", "edited": false, "comment_id": 4912203, "creation_date": 1292856296, "score": 0, "owner": {"display_name": "user142019", "user_type": "does_not_exist"}}], "creation_date": 1258842276, "comment_count": 4, "score": 2, "owner": {"display_name": "Ravi", "reputation": 475, "user_id": 44252, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1259096662, "body": "<p><strong>It's fine if you don't know. But you're fired if you can't even google it.</strong></p>\n\n<p>Internet is a tool. It's not making you stupider if you're learning from it.</p>\n", "answer_id": 1792910, "tags": [], "down_vote_count": 0, "last_activity_date": 1259096662, "comments": [{"body": "This should be a rule in any position that has anything to do with using a computer. Not just restricted to programmers.", "edited": false, "comment_id": 2352684, "creation_date": 1267666085, "score": 0, "owner": {"display_name": "awright18", "reputation": 1198, "user_id": 210609, "user_type": "registered", "accept_rate": 88}}], "creation_date": 1259096662, "comment_count": 1, "score": 22, "owner": {"display_name": "Omu", "reputation": 21262, "user_id": 112100, "user_type": "registered", "accept_rate": 91}, "is_accepted": false, "up_vote_count": 22}, {"community_owned_date": 1259190609, "body": "<p><strong>Don't be shy, throw an exception.</strong>\nExceptions are a perfectly valid way to signal failure, and are much clearer than any return-code system. \"Exceptional\" has nothing to do with how often this can happen, and everything to do with what the class considers normal execution conditions. Throwing an exception when a division by zero occurs is just fine, regardless of how often the case can happen. If the problem is likely, guard your code so that the method doesn't get called with incorrect arguments.</p>\n", "answer_id": 1800580, "tags": [], "down_vote_count": 1, "last_activity_date": 1259190609, "creation_date": 1259190609, "comment_count": 0, "score": 6, "owner": {"display_name": "Mathias", "reputation": 8802, "user_id": 114519, "user_type": "registered", "accept_rate": 86}, "is_accepted": false, "up_vote_count": 7}, {"community_owned_date": 1259847492, "body": "<p><strong>Writing it yourself can be a valid option.</strong></p>\n\n<p>In my experience there seems to be too much enthusiasm when it comes to using 3rd party code to solve a problem. The option of solving the problem by themselves does usually not cross peoples minds. Although don't get me wrong, I am not propagating to never ever use libraries. What I am saying is: among the possible frameworks and modules you are considering to use, add the option of implementing the solution yourself.</p>\n\n<p>But why would you code your own version?</p>\n\n<ul>\n<li>Don't reinvent the wheel. But, if you only need a piece of wood, do you really need a whole cart wheel? In other words, do you really need openCV to flip an image along an axis?</li>\n<li>Compromise. You usually have to make compromises concerning your design, in order to be able to use a specific library. Is the amount of changes you have to incorporate worth the functionality you will receive?</li>\n<li>Learning. You have to learn to use these new frameworks and modules. How long will it take you? Is it worth your while? Will it take longer to learn than to implement?</li>\n<li>Cost. Not everything is for free. Although, this includes your time. Consider how much time this software you are about to use will save you and if it is worth it's price? (Also remember that you have to invest time to learn it)</li>\n<li>You are a programmer, not ... a person who just clicks things together (sorry, couldn't think of anything witty). </li>\n</ul>\n\n<p>The last point is debatable.</p>\n", "answer_id": 1839918, "tags": [], "down_vote_count": 0, "last_activity_date": 1259847492, "creation_date": 1259847492, "comment_count": 0, "score": 8, "owner": {"display_name": "Stefan Schmidt", "reputation": 884, "user_id": 1958045, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 8}, {"community_owned_date": 1260108370, "body": "<p><strong>Using regexs to parse HTML is, in many cases,  fine</strong></p>\n\n<p>Every time someone posts a question on Stack Overflow asking how to achieve some HTML manuipulation with a regex, the first answer is \"Regex is a insufficient tool to parse HTML so don't do it\". If the questioner was trying to build a web browser, this would be a helpful answer. However, usually the questioner wants to do some thing like add a rel tag to all the links to a certain domain, usually in a case when certain assumptions can be made about the style of the incoming markup, something that is entiely reasonable to do with a regex.</p>\n", "answer_id": 1855481, "tags": [], "down_vote_count": 0, "last_activity_date": 1260108370, "creation_date": 1260108370, "comment_count": 0, "score": 6, "owner": {"display_name": "Nick Higgs", "reputation": 1102, "user_id": 3187, "user_type": "registered", "accept_rate": 46}, "is_accepted": false, "up_vote_count": 6}, {"community_owned_date": 1260388970, "body": "<p>Storing XML in a CLOB in a relational database is often a horrible cop-out.  Not only is it hideous in terms of performance, it shifts responsibility for correctly managing structure of the data away from the database architect and onto the application programmer.</p>\n", "answer_id": 1876456, "tags": [], "down_vote_count": 0, "last_activity_date": 1260388970, "creation_date": 1260388970, "comment_count": 0, "score": 3, "owner": {"display_name": "Tim", "reputation": 481, "user_id": 180606, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1260390338, "body": "<p><strong>Software is like toilet paper. The less you spend on it, the bigger of a pain in the ass it is.</strong></p>\n\n<p>That is to say, outsourcing is rarely a good idea.</p>\n\n<p>I've always figured this to be true, but I never really knew the extent of it until recently. I have been \"maintaining\" (read: \"fixing\") some off-shored code recently, and it is a huge mess. It is easily costing our company more than the difference had it been developed in-house.</p>\n\n<p>People outside your business will inherently know less about your business model, and therefore will not do as good a job programming any system that works within your business. Also, they know they won't have to support it, so there's no incentive to do anything other than half-ass it.</p>\n", "is_accepted": false, "tags": [], "answer_id": 1876634, "down_vote_count": 1, "last_activity_date": 1260390697, "comments": [{"body": "Outsourcing is rarely anything else than paying Indians to learn how to program. They&#39;re not quit there yet, but when they will be, we&#39;ll have payed for them learning their skills.", "edited": false, "comment_id": 2710157, "creation_date": 1271925384, "score": 0, "owner": {"display_name": "Diego Deberdt", "reputation": 2087, "user_id": 54101, "user_type": "registered", "accept_rate": 65}}, {"body": "@ iandisme - Probably you didn&#39;t spare some time to tell those guys what your business is? Another point, why did you sign such a contract where they just develop some sh** and flee? You should have done a long term contract with dev, maintainance and support clubbed together. As a customer controlling quality was in your hand.", "edited": false, "comment_id": 4895318, "creation_date": 1292662288, "score": 0, "owner": {"display_name": "Pradeep", "reputation": 2645, "user_id": 29693, "user_type": "registered", "accept_rate": 100}}, {"body": "@ Seventh Element - Don&#39;t blame India because somebody else didn&#39;t manage his offshoring project and quality properly.", "edited": false, "comment_id": 4895335, "creation_date": 1292662531, "score": 0, "owner": {"display_name": "Pradeep", "reputation": 2645, "user_id": 29693, "user_type": "registered", "accept_rate": 100}}, {"body": "@Pradeep - I didn&#39;t have anything to do with setting up the contract. Either way, your point adds to my original statement: Doing it right the first time would have been more expensive up-front, but worth it.", "edited": false, "reply_to_user": {"display_name": "Pradeep", "reputation": 2645, "user_id": 29693, "user_type": "registered", "accept_rate": 100}, "comment_id": 4916134, "creation_date": 1292876731, "score": 0, "owner": {"display_name": "iandisme", "reputation": 3947, "user_id": 136790, "user_type": "registered", "accept_rate": 78}}], "creation_date": 1260390338, "comment_count": 4, "score": 12, "owner": {"display_name": "iandisme", "reputation": 3947, "user_id": 136790, "user_type": "registered", "accept_rate": 78}, "last_editor": {"display_name": "iandisme", "reputation": 3947, "user_id": 136790, "user_type": "registered", "accept_rate": 78}, "last_edit_date": 1260390697, "up_vote_count": 13}, {"community_owned_date": 1260835087, "body": "<p><strong>Intranet Frameworks like SharePoint makes me think the whole corporate world is one giant ostrich with its head in the sand</strong></p>\n\n<p>I'm not only talking about MOSS here, I've worked with some other CORPORATE INTRANET products, and absolutely not one of them are great, but SharePoint (MOSS) is by far the worst. </p>\n\n<ul>\n<li>Most of these systems don't easily bridge the gap between Intranet and Internet. So as a remote worker you're forced to VPN in. External customers just don't have the luxury of getting hold of your internal information first hand. Sure this can be fixed at a price $$$. </li>\n<li>The search capabilities are always pathetic. Lots of time other departments simply don't know about information is out there. </li>\n<li>Information fragments, people start boycotting workflows or revert to email</li>\n<li>SharePoint development is the most painful form of development on the planet. Nothing sucks like SharePoint. I've seen a few developers contemplating quitting IT after working for over a year with MOSS. </li>\n<li>No matter how the developers hate MOSS, no matter how long the most basic of projects take to roll out, no matter how novice the results look, and no matter how unsearchable and fragmented the content is:</li>\n</ul>\n\n<p>EVERYONE STILL CONTINUES TO USE AND PURCHASE SHAREPOINT, AND MANAGERS STILL TRY VERY HARD TO PRETEND ITS NOT SATANS SPAWN. </p>\n\n<p><strong>Microformats</strong></p>\n\n<p>Using CSS classes originally designed for visual layout - now being assigned for both visual and contextual data is a hack, loads of ambiguity. Not saying the functionality should not exist, but fix the damn base language. HTML wasn't hacked to produce XML - instead the XML language emerged. Now we have these eager script kiddies hacking HTML and CSS to do something it wasn't designed to do, thats still fine, but I wish they would keep these things to themselves, and no make a standard out of it. Just to some up - butchery!</p>\n", "is_accepted": false, "tags": [], "answer_id": 1904382, "down_vote_count": 0, "last_activity_date": 1260835501, "comments": [{"body": "Your programming opinion doesn&#39;t look very controversial to me.  In fact I can&#39;t even see what your programming opinion is.", "edited": false, "comment_id": 1808179, "creation_date": 1260836905, "score": 0, "owner": {"display_name": "Windows programmer", "reputation": 5760, "user_id": 23705, "user_type": "registered"}}, {"body": "I agree with your attacks on sharepoint.  In my dealings with the beast, there is a lot of confusion about what it can and should do.  I guess that comes from the office world were people abuse, word, excel, and access to do ungodly things that should be handled by programmers creating real applications.  The running joke around sharpoint&#39;s abilities at my work is that it can &quot;wash your car&quot;, or &quot;mow your lawn&quot; or that it has infinite super powers.", "edited": false, "comment_id": 2352675, "creation_date": 1267665947, "score": 0, "owner": {"display_name": "awright18", "reputation": 1198, "user_id": 210609, "user_type": "registered", "accept_rate": 88}}, {"body": "I agree that this is not controversial. As a MOSS dev I can only conclude that SP was written by Microsoft&#39;s best team of monkeys with down syndrome.", "edited": false, "comment_id": 2567040, "creation_date": 1270152612, "score": 0, "owner": {"display_name": "Repo Man", "reputation": 1975, "user_id": 140126, "user_type": "registered", "accept_rate": 93}}, {"body": "What is controversial is that MOSS is considered by most business users to be a perfect all round intranet solution, but honestly its a pile of dog crap under the hood.", "edited": false, "comment_id": 2580615, "creation_date": 1270392852, "score": 0, "owner": {"display_name": "JL.", "reputation": 19694, "user_id": 41543, "user_type": "registered", "accept_rate": 83}}], "creation_date": 1260835087, "comment_count": 4, "score": 10, "owner": {"display_name": "JL.", "reputation": 19694, "user_id": 41543, "user_type": "registered", "accept_rate": 83}, "last_editor": {"display_name": "JL.", "reputation": 19694, "user_id": 41543, "user_type": "registered", "accept_rate": 83}, "last_edit_date": 1260835501, "up_vote_count": 10}, {"community_owned_date": 1260837803, "body": "<p><strong>Associative Arrays / Hash Maps / Hash Tables (+whatever its called in your favourite language) are the best thing since sliced bread!</strong></p>\n\n<p>Sure, they provide fast lookup from key to value. But they also make it easy to construct structured data on the fly. In scripting languages its often the only (or at least most used) way to represent structured data.</p>\n\n<p>IMHO they were a very important factor for the success of many scripting languages.</p>\n\n<p>And even in C++ std::map and std::tr1::unordered_map helped me writing code faster.</p>\n", "answer_id": 1904559, "tags": [], "down_vote_count": 2, "last_activity_date": 1260837803, "comments": [{"body": "This ain&#39;t controversial at all! (See the JSON vs. XML debate).", "edited": false, "comment_id": 4898811, "creation_date": 1292706045, "score": 0, "owner": {"display_name": "Sidnicious", "reputation": 20633, "user_id": 84745, "user_type": "registered", "accept_rate": 82}}], "creation_date": 1260837803, "comment_count": 1, "score": 1, "owner": {"display_name": "Frunsi", "reputation": 5185, "user_id": 206247, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1260852515, "body": "<p><strong>C++ is future killer language...</strong></p>\n\n<p>... of dynamic languages.</p>\n\n<p>nobody owns it, has a growing set of features like compile-time (meta-)programming or type inference, callbacks without the overhead of function calls, doesn't enforce a single approach (multi-paradigm).  POSIX and ECMAScript <a href=\"http://www.boost.org/doc/libs/1%5F41%5F0/doc/html/boost%5Ftr1/subject%5Flist.html#boost%5Ftr1.subject%5Flist.regex\" rel=\"nofollow\">regular expressions</a>.  <a href=\"http://www.boost.org/doc/libs/1%5F41%5F0/doc/html/boost%5Ftr1/subject%5Flist.html#boost%5Ftr1.subject%5Flist.tuple\" rel=\"nofollow\">multiple return values</a>.  you can have <a href=\"http://www.boost.org/doc/libs/1%5F41%5F0/libs/parameter/doc/html/index.html\" rel=\"nofollow\">named arguments</a>.  etc etc.</p>\n\n<p>things move really slowly in programming.  it took JavaScript 10 years to get off the ground (mostly because of performance), and most of people who program in it still don't get it (classes in JS? c'mon!).  i'd say C++ will really start shining in 15-20 years from now.  that seems to me like about the right amount of time for C++ (the language as well as compiler vendors) and critical mass of programmers who today write in dynamic languages to converge.</p>\n\n<p>C++ needs to become more programmer-friendly (compiler errors generated from templates or compile times in the presence of same), and the programmers need to realize that static typing is a boon (it's already in progress, see other answer here which asserts that good code written in a dynamically typed language is written as if the language was statically typed).</p>\n", "answer_id": 1905224, "tags": [], "down_vote_count": 2, "last_activity_date": 1260852515, "comments": [{"body": "C++ sucks C&#39;s <b>and</b> Objective-C&#39;s balls. It&#39;s an epic fail.", "edited": false, "comment_id": 4912163, "creation_date": 1292856087, "score": 0, "owner": {"display_name": "user142019", "user_type": "does_not_exist"}}], "creation_date": 1260852515, "comment_count": 1, "score": 1, "owner": {"display_name": "just somebody", "reputation": 10815, "user_id": 209605, "user_type": "registered", "accept_rate": 62}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1260853301, "body": "<p><strong>Relational database systems <em>will</em> be the best thing since sliced bread...</strong></p>\n\n<p>... when we (hopefully) get them, that is.  SQL databases suck so hard it's not funny.</p>\n\n<p>What I find amusing (if sad) is <em>certified DBAs</em> who think an SQL database system is a relational one.  Speaks volumes for the quality of said certification.</p>\n\n<p>Confused?  Read C. J. Date's books.</p>\n\n<p><strong>edit</strong></p>\n\n<p>Why is it called <em>Relational</em> and what does that word mean?</p>\n\n<p>These days, a programmer (or a certified DBA, <em>wink</em>) with a strong (heck, <em>any</em>) mathematical background is an exception rather than the common case (I'm an instance of the common case as well).  SQL with its <em>tables</em>, <em>columns</em> and <em>rows</em>, as well as the joke called Entity/Relationship Modelling just add insult to the injury.  No wonder the misconception that <em>Relational</em> Database Systems are called that because of some <em>Relationships</em> (Foreign Keys?) between <em>Entities</em> (tables) is so pervasive.</p>\n\n<p>In fact, <em>Relational</em> derives from the <em>mathematical</em> concept of relations, and as such is intimately related to set theory and functions (in the mathematical, not any programming, sense).</p>\n\n<p>[<a href=\"http://en.wikipedia.org/wiki/Finitary%5Frelation%5D%5B2%5D\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Finitary%5Frelation%5D%5B2%5D</a>:</p>\n\n<blockquote>\n  <p>In mathematics (more specifically, in set theory and logic), a <strong>relation</strong> is a property that assigns truth values to combinations (<em>k</em>-tuples) of <em>k</em> individuals. Typically, the property describes a possible connection between the components of a <em>k</em>-tuple. For a given set of <em>k</em>-tuples, a truth value is assigned to each <em>k</em>-tuple according to whether the property does or does not hold.</p>\n  \n  <p>An example of a ternary relation (i.e., between three individuals) is: \"<em>X</em> was-introduced-to <em>Y</em> by <em>Z</em>\", where (X,Y,Z) is a 3-tuple of persons; for example, \"Beatrice Wood was introduced to Henri-Pierre Roch\u00e9 by Marcel Duchamp\" is true, while \"Karl Marx was introduced to Friedrich Engels by Queen Victoria\" is false.</p>\n</blockquote>\n\n<p>Wikipedia makes it perfectly clear: in a SQL DBMS, such a ternary relation would be a \"<em>table</em>\", not a \"<em>foreign key</em>\" (I'm taking the liberty to rename the \"columns\" of the relation: X = who, Y = to, Z = by):</p>\n\n<pre><code>CREATE TABLE introduction (\n  who INDIVIDUAL NOT NULL\n, to INDIVIDUAL NOT NULL\n, by INDIVIDUAL NOT NULL\n, PRIMARY KEY (who, to, by)\n);\n</code></pre>\n\n<p>Also, it would contain (among others, possibly), this \"<em>row</em>\":</p>\n\n<pre><code>INSERT INTO introduction (\n  who\n, to\n, by\n) VALUES (\n  'Beatrice Wood'\n, 'Henri-Pierre Roch\u00e9'\n, 'Marcel Duchamp'\n);\n</code></pre>\n\n<p>but not this one:</p>\n\n<pre><code>INSERT INTO introduction (\n  who\n, to\n, by\n) VALUES (\n  'Karl Marx'\n, 'Friedrich Engels'\n, 'Queen Victoria'\n);\n</code></pre>\n\n<p>Relational Database Dictionary:</p>\n\n<blockquote>\n  <p><strong>relation (mathematics)</strong> Given sets <em>s1</em>, <em>s2</em>, ..., <em>sn</em>, not necessarily distinct, <em>r</em> is a relation on those sets if and only if it's a set of <em>n</em>-tuples each of which has its first element from <em>s1</em>, its second element from <em>s2</em>, and so on.  (Equivalently, <em>r</em> is a subset of the Cartesian product <em>s1</em> x <em>s2</em> x ... x <em>sn</em>.)</p>\n  \n  <p>Set <em>si</em> is the <em>i</em>th domain of <em>r</em> (<em>i</em> = 1, ..., <em>n</em>).  <em>Note</em>: There are several important logical differences between relations in mathematics and their relational model counterparts.  Here are some of them:</p>\n  \n  <ul>\n  <li>Mathematical relations have a left-to-right ordering to their attributes.</li>\n  <li>Actually, mathematical relations have, at best, only a very rudimentary concept of attributes anyway.  Certainly their attributes aren't named, other than by their ordinal position.</li>\n  <li>As a consequence, mathematical relations don't really have either a heading or a type in the relational model sense.</li>\n  <li>Mathematical relations are usually either binary or, just occasionally, unary.  By contrast, relations in the relational model are of degree <em>n</em>, where <em>n</em> can be any nonnegative integer.</li>\n  <li>Relational operators such as JOIN, EXTEND, and the rest were first defined in the context of the relational model specifically; the mathematical theory of relations includes few such operators.</li>\n  </ul>\n  \n  <p>And so on (the foregoing isn't meant to be an exhaustive list).</p>\n</blockquote>\n", "is_accepted": false, "tags": [], "answer_id": 1905269, "down_vote_count": 0, "last_activity_date": 1260928428, "comments": [{"body": "Would you agree that today&#39;s RDMSs <i>support</i> the relational model however rarely are the schema designers implementing it?", "edited": false, "comment_id": 1809276, "creation_date": 1260855483, "score": 0, "owner": {"display_name": "Xepoch", "reputation": 4623, "user_id": 199305, "user_type": "registered", "accept_rate": 70}}, {"body": "what are today&#39;s RDBMSs?", "edited": false, "comment_id": 1811195, "creation_date": 1260881243, "score": 0, "owner": {"display_name": "just somebody", "reputation": 10815, "user_id": 209605, "user_type": "registered", "accept_rate": 62}}, {"body": "You&#39;re asking a loaded question, but do you consider DB2 &amp;| Oracle systems that don&#39;t support a true <i>relation</i>al model?", "edited": false, "comment_id": 1815899, "creation_date": 1260918558, "score": 0, "owner": {"display_name": "Xepoch", "reputation": 4623, "user_id": 199305, "user_type": "registered", "accept_rate": 70}}, {"body": "yes.  SQL database systems are just that: SQL database systems, not relational database systems.", "edited": false, "comment_id": 1816160, "creation_date": 1260920613, "score": 0, "owner": {"display_name": "just somebody", "reputation": 10815, "user_id": 209605, "user_type": "registered", "accept_rate": 62}}, {"body": "Do you mean Object Databases when you say relational databases? That is, db4o et al.? Relational Database system in my opinion are systems where you model relations between entities, also known as Foreign Keys and Update/Delete Cascades. Sadly, most of the time these entities are flat 2-Dimensional tables in RDBMS...", "edited": false, "comment_id": 1816322, "creation_date": 1260922300, "score": 0, "owner": {"display_name": "Michael Stum", "reputation": 83083, "user_id": 91, "user_type": "registered", "accept_rate": 91}}, {"body": "@Michael Stum: no, see expanded answer, and excuse me if it&#39;s not very coherent.  It&#39;s well past midnight here and I&#39;m almost done with second bottle of wine.", "edited": false, "comment_id": 1816791, "creation_date": 1260928537, "score": 0, "owner": {"display_name": "just somebody", "reputation": 10815, "user_id": 209605, "user_type": "registered", "accept_rate": 62}}, {"body": "@just somebody, all is still well, you should start another question here to discuss further.  i.e. Oracle can still support the model you&#39;ve described above a classic RELATION model (not relational).  (Non)Existence can be checked and this can be employed in set queries minus/intersect/&amp;c.  Yes, SQL is used to put these all together.  Not all schemas are written with foreign keys in the tables.", "edited": false, "comment_id": 1817425, "creation_date": 1260938958, "score": 0, "owner": {"display_name": "Xepoch", "reputation": 4623, "user_id": 199305, "user_type": "registered", "accept_rate": 70}}], "creation_date": 1260853301, "comment_count": 7, "score": 8, "owner": {"display_name": "just somebody", "reputation": 10815, "user_id": 209605, "user_type": "registered", "accept_rate": 62}, "last_editor": {"display_name": "just somebody", "reputation": 10815, "user_id": 209605, "user_type": "registered", "accept_rate": 62}, "last_edit_date": 1260928428, "up_vote_count": 8}, {"community_owned_date": 1260855697, "body": "<p><strong>Development is 80% about the design and 20% about coding</strong></p>\n\n<p>I believe that developers should spend 80% of time designing at the fine level of detail, what they are going to build and only 20% actually coding what they've designed. This will produce code with near zero bugs and save a lot on test-fix-retest cycle.</p>\n\n<p>Getting to the metal (or IDE) early is like premature optimization, which is know to be a root of all evil. Thoughtful upfront design (I'm not necessarily talking about enormous design document, simple drawings on white board will work as well) will yield much better results than just coding and fixing.</p>\n", "answer_id": 1905392, "tags": [], "down_vote_count": 0, "last_activity_date": 1260855697, "creation_date": 1260855697, "comment_count": 0, "score": 3, "owner": {"display_name": "Dima Malenko", "reputation": 1685, "user_id": 2586, "user_type": "registered", "accept_rate": 81}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1260856152, "body": "<p>Simplicity Vs Optimality</p>\n\n<p>I believe its very difficult to write code that's both simple and optimal.</p>\n", "answer_id": 1905410, "tags": [], "down_vote_count": 0, "last_activity_date": 1260856152, "creation_date": 1260856152, "comment_count": 0, "score": 1, "owner": {"display_name": "Salvin Francis", "reputation": 1739, "user_id": 146182, "user_type": "registered", "accept_rate": 66}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1260921800, "body": "<p>80% of bugs are introduced in the design stage.\n<br>\nThe other 80% are introduced in the coding stage.</p>\n\n<p>(This opinion was inspired by reading Dima Malenko's answer.  \"Development is 80% about the design and 20% about coding\", yes.  \"This will produce code with near zero bugs\", no.)</p>\n", "answer_id": 1911378, "tags": [], "down_vote_count": 0, "last_activity_date": 1260921800, "creation_date": 1260921800, "comment_count": 0, "score": 2, "owner": {"display_name": "Windows programmer", "reputation": 5760, "user_id": 23705, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1260990349, "body": "<p>Best practices aren't.</p>\n", "answer_id": 1916905, "tags": [], "down_vote_count": 0, "last_activity_date": 1260990349, "creation_date": 1260990349, "comment_count": 0, "score": 2, "owner": {"display_name": "Xepoch", "reputation": 4623, "user_id": 199305, "user_type": "registered", "accept_rate": 70}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1261568463, "body": "<p>small code is always better, but then complex ?: instead of if-else made me realize that sometime large code is more readable.</p>\n", "answer_id": 1952294, "tags": [], "down_vote_count": 0, "last_activity_date": 1261568463, "creation_date": 1261568463, "comment_count": 0, "score": 4, "owner": {"display_name": "Vinay Pandey", "reputation": 3021, "user_id": 87956, "user_type": "registered", "accept_rate": 75}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1261896758, "body": "<p><strong>Python does everything that other programming languages do in half the dev time</strong>... and so does Google!!! Check out <a href=\"http://code.google.com/p/unladen-swallow/\" rel=\"nofollow\">Unladen Swallow</a> if you disagree.</p>\n\n<p>Wait, this is a fact. Does it still qualify as an answer to this question?</p>\n", "answer_id": 1965380, "tags": [], "down_vote_count": 2, "last_activity_date": 1261896758, "comments": [{"body": "Well, actually, Python still needs a bunch of C modules for some functionality.", "edited": false, "comment_id": 1879178, "creation_date": 1261900137, "score": 0, "owner": {"display_name": "Tor Valamo", "reputation": 17144, "user_id": 228936, "user_type": "registered"}}, {"body": "Unladen swallow is not ready for prime time except at certain places inside google, and the &quot;2 to 10 times&quot; faster than interpreted python doesn&#39;t come anywhere close to real-native-code speeds for most every work load out there that is not web-slinger centric.  If &quot;everything&quot; means &quot;the web crap I think of as programming&quot; then, yeah, Python can do that.  And I love python.  But I also see that performance-just-as-fast-as-native thing as a crock. Oh and don&#39;t forget about the global interpreter lock (GIL).", "edited": false, "comment_id": 2560266, "creation_date": 1270080479, "score": 2, "owner": {"display_name": "Warren  P", "reputation": 26418, "user_id": 84704, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1261896758, "comment_count": 2, "score": 1, "owner": {"display_name": "orokusaki", "reputation": 13706, "user_id": 128463, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 3}, {"community_owned_date": 1261898828, "body": "<p><strong>Lower camelCase is stupid and unsemantic</strong></p>\n\n<p>Using lower camelCase makes the name/identifier (\"name\" used from this point) look like a two-part thing. Upper CamelCase however, gives the clear indication that all the words belong together.</p>\n\n<p><em>Hungarian notation is different</em> ... because the first part of the name is a type indicator, and so it has a separate meaning from the rest of the name.</p>\n\n<p>Some might argue that lower camelCase should be used for functions/procedures, especially inside classes. This is popular in Java and object oriented PHP. However, there is no reason to do that to indicate that they are class methods, because <em>BY THE WAY THEY ARE ACCESSED</em> it becomes more than clear that these are just that.</p>\n\n<p>Some code examples:</p>\n\n<pre><code># Java\nmyobj.objMethod() \n# doesn't the dot and parens indicate that objMethod is a method of myobj?\n\n# PHP\n$myobj-&gt;objMethod() \n# doesn't the pointer and parens indicate that objMethod is a method of myobj?\n</code></pre>\n\n<p>Upper CamelCase is useful for class names, and other static names. All non-static content should be recognised by the way they are accessed, not by their name format(!)</p>\n\n<p>Here's my homogenous code example, where name behaviours are indicated by other things than their names... (also, I prefer underscore to separate words in names).</p>\n\n<pre><code># Java\nmy_obj = new MyObj() # Clearly a class, since it's upper CamelCase\nmy_obj.obj_method() # Clearly a method, since it's executed\nmy_obj.obj_var # Clearly an attribute, since it's referenced\n\n# PHP\n$my_obj = new MyObj()\n$my_obj-&gt;obj_method()\n$my_obj-&gt;obj_var\nMyObj::MyStaticMethod()\n\n# Python\nMyObj = MyClass # copies the reference of the class to a new name\nmy_obj = MyObj() # Clearly a class, being instantiated\nmy_obj.obj_method() # Clearly a method, since it's executed\nmy_obj.obj_var # clearly an attribute, since it's referenced\nmy_obj.obj_method # Also, an attribute, but holding the instance method.\nmy_method = myobj.obj_method # Instance method\nmy_method() # Same as myobj.obj_method()\nMyClassMethod = MyObj.obj_method # Attribute holding the class method\nMyClassMethod(myobj) # Same as myobj.obj_method()\nMyClassMethod(MyObj) # Same as calling MyObj.obj_method() as a static classmethod\n</code></pre>\n\n<p>So there goes, my completely <strike>ob</strike>subjective opinion on camelCase.</p>\n", "is_accepted": false, "tags": [], "answer_id": 1965432, "down_vote_count": 2, "last_activity_date": 1261905927, "comments": [{"body": "underscores suck.  Except in the way I use them, which is to mark a method as &quot;something that sucks and you definitely shouldn&#39;t use even though it&#39;s public&quot;.", "edited": false, "comment_id": 2560352, "creation_date": 1270081530, "score": 0, "owner": {"display_name": "Warren  P", "reputation": 26418, "user_id": 84704, "user_type": "registered", "accept_rate": 92}}, {"body": "if you say so...", "edited": false, "comment_id": 2561284, "creation_date": 1270099147, "score": 0, "owner": {"display_name": "Tor Valamo", "reputation": 17144, "user_id": 228936, "user_type": "registered"}}, {"body": "Depends on the programming language.", "edited": false, "comment_id": 4912141, "creation_date": 1292855961, "score": 0, "owner": {"display_name": "user142019", "user_type": "does_not_exist"}}, {"body": "if anything, the programming language is the least important variable in this", "edited": false, "comment_id": 4931539, "creation_date": 1292981016, "score": 0, "owner": {"display_name": "Tor Valamo", "reputation": 17144, "user_id": 228936, "user_type": "registered"}}], "creation_date": 1261898828, "comment_count": 4, "score": 5, "owner": {"display_name": "Tor Valamo", "reputation": 17144, "user_id": 228936, "user_type": "registered"}, "last_editor": {"display_name": "Tor Valamo", "reputation": 17144, "user_id": 228936, "user_type": "registered"}, "last_edit_date": 1261905927, "up_vote_count": 7}, {"community_owned_date": 1261983771, "body": "<p><strong>Programmers need to talk to customers</strong></p>\n\n<p>Some programmers believe that they don't need to be the ones talking to customers. It's a sure way for your company to write something absolutely brilliant which no one can work out what it's for or how it was intended to be used.</p>\n\n<p>You can't expect product managers and business analysts to make all the decisions. In fact, programmers should be making 990 out of the 1000 (often small) decisions that go into creating a module or feature, otherwise the product would simply never ship! So make sure your decisions are informed. Understand your customers, work with them, watch them use your software.</p>\n\n<p>If you're going the write the best code, you want people to use it. Take an interest in your user base and learn from the \"dumb idiots\" who are out there. Don't be afraid, they'll actually love you for it.</p>\n", "answer_id": 1968309, "tags": [], "down_vote_count": 0, "last_activity_date": 1261983771, "creation_date": 1261983771, "comment_count": 0, "score": 5, "owner": {"display_name": "Vincent", "reputation": 2008, "user_id": 238524, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1261984928, "body": "<p>Zealous adherence to standards stands in the way of simplicity.</p>\n\n<p>MVC is over-rated for websites.  It's mostly just VC, sometimes M.</p>\n", "answer_id": 1968361, "tags": [], "down_vote_count": 0, "last_activity_date": 1261984928, "comments": [{"body": "How about this MVC is overrated, period.", "edited": false, "comment_id": 2560323, "creation_date": 1270081132, "score": 0, "owner": {"display_name": "Warren  P", "reputation": 26418, "user_id": 84704, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1261984928, "comment_count": 1, "score": 4, "owner": {"display_name": "Justin Johnson", "reputation": 18757, "user_id": 126562, "user_type": "registered", "accept_rate": 80}, "is_accepted": false, "up_vote_count": 4}], "answer_count": 408, "last_editor": {"display_name": "Stu Thompson", "reputation": 20094, "user_id": 2961, "user_type": "registered", "accept_rate": 81}, "locked_date": 1339642856, "down_vote_count": 23, "close_vote_count": 0, "question_id": 406760}, {"last_activity_date": 1337809291, "accepted_answer_id": 431360, "creation_date": 1231605864, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1253210991, "favorite_count": 58, "view_count": 8628, "delete_vote_count": 0, "title": "How can I take more control in ASP.NET?", "comments": [{"body": "&quot;Cue comments of how the mighty are fallen&quot; - we&#39;re all ignorant, just of different things.   I&#39;m only recently started participating here, but I admire the question more than all the points.  You&#39;re obviously still thinking and learning.  Kudos to you.", "edited": false, "comment_id": 254702, "creation_date": 1231606446, "score": 15, "owner": {"display_name": "duffymo", "reputation": 209039, "user_id": 37213, "user_type": "registered", "accept_rate": 81}}, {"body": "I don&#39;t think I&#39;d ever pay attention to someone who&#39;d given up learning :)", "edited": false, "comment_id": 254720, "creation_date": 1231607116, "score": 15, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "True in general case. Very true in computer science.", "edited": false, "comment_id": 254735, "creation_date": 1231607657, "score": 1, "owner": {"display_name": "Mehrdad Afshari", "reputation": 239800, "user_id": 33708, "user_type": "registered", "accept_rate": 83}}, {"body": "And will your next book be &quot;ASP.NET in Depth&quot;? :-P", "edited": false, "comment_id": 254768, "creation_date": 1231608698, "score": 3, "owner": {"display_name": "chakrit", "reputation": 35169, "user_id": 3055, "user_type": "registered", "accept_rate": 74}}, {"body": "Yes, it&#39;s due out in 2025 ;)", "edited": false, "comment_id": 254770, "creation_date": 1231608753, "score": 18, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "This is awesome by the way.  <a href=\"http://feeds.feedburner.com/~r/JonSkeetCodingBlog/~3/513263291/stack-overflow-reputation-tool-now-online.aspx\" rel=\"nofollow\">feeds.feedburner.com/~r/JonSkeetCodingBlog/~3/513263291/&hellip;</a>", "edited": false, "comment_id": 269386, "creation_date": 1232051989, "score": 0, "owner": {"display_name": "David Basarab", "reputation": 30732, "user_id": 2469, "user_type": "registered", "accept_rate": 98}}, {"body": "@GK: Don&#39;t use my name here, you are removing an important link as context. I have never done this.", "edited": false, "comment_id": 421185, "creation_date": 1236123423, "score": 1, "owner": {"display_name": "GEOCHET", "reputation": 15015, "user_id": 5640, "user_type": "registered", "accept_rate": 100}}], "comment_count": 7, "score": 118, "body": "<p>I'm trying to build a very, very simple \"micro-webapp\" which I suspect will be of interest to a few Stack Overflow'rs if I ever get it done. I'm hosting it on my C# in Depth site, which is vanilla ASP.NET 3.5 (i.e. not MVC).</p>\n\n<p>The flow is very simple:</p>\n\n<ul>\n<li>If a user enters the app with a URL which doesn't specify all the parameters (or if any of them are invalid) I want to just display the user input controls. (There are only two.)</li>\n<li>If a user enters the app with a URL which <em>does</em> have all the required parameters, I want to display the results <em>and</em> the input controls (so they can change the parameters)</li>\n</ul>\n\n<p>Here are my self-imposed requirements (mixture of design and implementation):</p>\n\n<ul>\n<li>I want the submission to use GET rather than POST, mostly so users can bookmark the page easily.</li>\n<li>I <em>don't</em> want the URL to end up looking silly after submission, with extraneous bits and pieces on it. Just the main URL and the real parameters please.</li>\n<li>Ideally I'd like to avoid requiring JavaScript at all. There's no good reason for it in this app.</li>\n<li>I want to be able to access the controls during render time and set values etc. In particular, I want to be able to set the default values of the controls to the parameter values passed in, if ASP.NET can't do this automatically for me (within the other restrictions).</li>\n<li>I'm happy to do all the parameter validation myself, and I don't need much in the way of server side events. It's really simple to set everything on page load instead of attaching events to buttons etc.</li>\n</ul>\n\n<p>Most of this is okay, but I haven't found any way of <em>completely</em> removing the viewstate and keeping the rest of the useful functionality. Using the post from <a href=\"http://aspnyc.blogspot.com/2007/10/how-to-completely-disable-viewstate.html\">this blog post</a> I've managed to avoid getting any actual <em>value</em> for the viewstate - but it still ends up as a parameter on the URL, which looks really ugly.</p>\n\n<p>If I make it a plain HTML form instead of an ASP.NET form (i.e. take out <code>runat=\"server\"</code>) then I don't get any magic viewstate - but then I can't access the controls programmatically.</p>\n\n<p>I <em>could</em> do all of this by ignoring most of ASP.NET and building up an XML document with LINQ to XML, and implementing <code>IHttpHandler</code>. That feels a bit low level though.</p>\n\n<p>I realise that my problems could be solved by either relaxing my constraints (e.g. using POST and not caring about the surplus parameter) or by using ASP.NET MVC, but are my requirements really unreasonable?</p>\n\n<p>Maybe ASP.NET just doesn't scale <em>down</em> to this sort of app? There's a very likely alternative though: I'm just being stupid, and there's a perfectly simple way of doing it that I just haven't found.</p>\n\n<p>Any thoughts, anyone? (Cue comments of how the mighty are fallen, etc. That's fine - I hope I've never claimed to be an ASP.NET expert, as the truth is quite the opposite...)</p>\n", "is_answered": true, "up_vote_count": 118, "tags": [".net", "asp.net", ".net-3.5", "viewstate"], "reopen_vote_count": 0, "answer_count": 7, "answers": [{"body": "<p>Have you thought about not eliminating the POST but rather redirecting to a suitable GET url when the form is POSTed.   That is, accept both GET and POST, but on POST construct a GET request and redirect to it.  This could be handled either on the page or via an HttpModule if you wanted to make it page-independent. I think this would make things much easier.</p>\n\n<p><strong>EDIT:</strong> I assume that you have EnableViewState=\"false\" set on the page.</p>\n", "is_accepted": false, "tags": [], "answer_id": 431316, "down_vote_count": 0, "last_activity_date": 1231606885, "comments": [{"body": "Nice idea. Well, horrible idea in terms of being forced to do it, but nice in terms of it probably working :) Will try...", "edited": false, "comment_id": 254705, "creation_date": 1231606505, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "And yes, I&#39;ve tried EnableViewState=false all over the place. It doesn&#39;t completely disable it, just cuts it down.", "edited": false, "comment_id": 254718, "creation_date": 1231607060, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Jon: If you don&#39;t use the damned server controls (no runat=&quot;server&quot;) and you don&#39;t have a &lt;form runat=&quot;server&quot;&gt; at all, ViewState will not be a trouble. That&#39;s why I said not to use server controls. You can always use Request.Form collection.", "edited": false, "comment_id": 254725, "creation_date": 1231607305, "score": 0, "owner": {"display_name": "Mehrdad Afshari", "reputation": 239800, "user_id": 33708, "user_type": "registered", "accept_rate": 83}}, {"body": "But without runat=server on the controls, it&#39;s a pain to propagate the value to the controls again when rendering. Fortunately, HTML controls with runat=server work well.", "edited": false, "comment_id": 254764, "creation_date": 1231608624, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1231606344, "comment_count": 4, "score": 1, "owner": {"display_name": "tvanfosson", "reputation": 308606, "user_id": 12950, "user_type": "registered", "accept_rate": 95}, "last_editor": {"display_name": "tvanfosson", "reputation": 308606, "user_id": 12950, "user_type": "registered", "accept_rate": 95}, "last_edit_date": 1231606885, "up_vote_count": 1}, {"body": "<p>I would create an HTTP module that handles routing (similar to MVC but not sophisticated, just a couple <code>if</code> statements) and hand it to <code>aspx</code> or <code>ashx</code> pages. <code>aspx</code> is preferred since it's easier to modify the page template. I wouldn't use <code>WebControls</code> in the <code>aspx</code> however. Just <code>Response.Write</code>.</p>\n\n<p>By the way, to simplify things, you can do parameter validation in the module (as it shares code with routing probably) and save it to <code>HttpContext.Items</code> and then render them in the page. This will work pretty much like the MVC without all the bell and whistles. This is what I did a lot before ASP.NET MVC days.</p>\n", "is_accepted": false, "tags": [], "answer_id": 431321, "down_vote_count": 0, "last_activity_date": 1231606953, "creation_date": 1231606507, "comment_count": 0, "score": 1, "owner": {"display_name": "Mehrdad Afshari", "reputation": 239800, "user_id": 33708, "user_type": "registered", "accept_rate": 83}, "last_editor": {"display_name": "Mehrdad Afshari", "reputation": 239800, "user_id": 33708, "user_type": "registered", "accept_rate": 83}, "last_edit_date": 1231606953, "up_vote_count": 1}, {"body": "<p>You're definitely (IMHO) on the right track by not using runat=\"server\" in your FORM tag. This just means you'll need to extract values from the Request.QueryString directly, though, as in this example:</p>\n\n<p>In the .aspx page itself:</p>\n\n<pre><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" \n     CodeFile=\"FormPage.aspx.cs\" Inherits=\"FormPage\" %&gt;\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head&gt;\n  &lt;title&gt;ASP.NET with GET requests and no viewstate&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;asp:Panel ID=\"ResultsPanel\" runat=\"server\"&gt;\n      &lt;h1&gt;Results:&lt;/h1&gt;\n      &lt;asp:Literal ID=\"ResultLiteral\" runat=\"server\" /&gt;\n      &lt;hr /&gt;\n    &lt;/asp:Panel&gt;\n    &lt;h1&gt;Parameters&lt;/h1&gt;\n    &lt;form action=\"FormPage.aspx\" method=\"get\"&gt;\n    &lt;label for=\"parameter1TextBox\"&gt;\n      Parameter 1:&lt;/label&gt;\n    &lt;input type=\"text\" name=\"param1\" id=\"param1TextBox\" value='&lt;asp:Literal id=\"Param1ValueLiteral\" runat=\"server\" /&gt;'/&gt;\n    &lt;label for=\"parameter1TextBox\"&gt;\n      Parameter 2:&lt;/label&gt;\n    &lt;input type=\"text\" name=\"param2\" id=\"param2TextBox\"  value='&lt;asp:Literal id=\"Param2ValueLiteral\" runat=\"server\" /&gt;'/&gt;\n    &lt;input type=\"submit\" name=\"verb\" value=\"Submit\" /&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>and in the code-behind:</p>\n\n<pre><code>using System;\n\npublic partial class FormPage : System.Web.UI.Page {\n\n        private string param1;\n        private string param2;\n\n        protected void Page_Load(object sender, EventArgs e) {\n\n            param1 = Request.QueryString[\"param1\"];\n            param2 = Request.QueryString[\"param2\"];\n\n            string result = GetResult(param1, param2);\n            ResultsPanel.Visible = (!String.IsNullOrEmpty(result));\n\n            Param1ValueLiteral.Text = Server.HtmlEncode(param1);\n            Param2ValueLiteral.Text = Server.HtmlEncode(param2);\n            ResultLiteral.Text = Server.HtmlEncode(result);\n        }\n\n        // Do something with parameters and return some result.\n        private string GetResult(string param1, string param2) {\n            if (String.IsNullOrEmpty(param1) &amp;&amp; String.IsNullOrEmpty(param2)) return(String.Empty);\n            return (String.Format(\"You supplied {0} and {1}\", param1, param2));\n        }\n    }\n</code></pre>\n\n<p>The trick here is that we're using ASP.NET Literals inside the value=\"\" attributes of the text inputs, so the text-boxes themselves don't have to runat=\"server\". The results are then wrapped inside an ASP:Panel, and the Visible property set on page load depending whether you want to display any results or not.</p>\n", "answer_id": 431330, "tags": [], "down_vote_count": 0, "last_activity_date": 1231606943, "comments": [{"body": "It works pretty well, but the URLs will not be as friendly as, say, StackOverflow.", "edited": false, "comment_id": 254719, "creation_date": 1231607092, "score": 0, "owner": {"display_name": "Mehrdad Afshari", "reputation": 239800, "user_id": 33708, "user_type": "registered", "accept_rate": 83}}, {"body": "The URLs will be pretty friendly, I think... This looks like a really good solution.", "edited": false, "comment_id": 254737, "creation_date": 1231607695, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Argh, I read your tweets earlier, had researched it, and now I missed your question preparing my ittle kids for the bathtub... :-)", "edited": false, "comment_id": 254748, "creation_date": 1231608061, "score": 0, "owner": {"display_name": "splattne", "reputation": 57794, "user_id": 6461, "user_type": "registered", "accept_rate": 86}}], "creation_date": 1231606943, "comment_count": 3, "score": 12, "owner": {"display_name": "Dylan Beattie", "reputation": 28331, "user_id": 5017, "user_type": "registered", "accept_rate": 70}, "is_accepted": false, "up_vote_count": 12}, {"body": "<p>I've really been happy to totally abandon the page class altogether and just handler every request with a big switch case based on url. Evey \"page\" becomes a html template and a c# object. The template class uses a regex with a match delegate that compares against a key collection.</p>\n\n<p>benefits: </p>\n\n<ol>\n<li>It's really fast, even after a recompile, there is almost no lag (the page class must be big)</li>\n<li>control is really granular (great for SEO, and crafting the DOM to play well with JS)</li>\n<li>the presentation is separate from logic</li>\n<li>jQuery has total control of the html</li>\n</ol>\n\n<p>bummers:</p>\n\n<ol>\n<li>simple stuff takes a bit longer in\nthat a single text box requires code\nin several places, but it does scale\nup really well</li>\n<li>it's always tempting to just do it with page view until i see a\nviewstate (urgh) then i snap back to\nreality.</li>\n</ol>\n\n<p>Jon, what are we doing on SO on a Saturday morning:) ?</p>\n", "answer_id": 431359, "tags": [], "down_vote_count": 0, "last_activity_date": 1231607912, "comments": [{"body": "It&#39;s Saturday evening here. Does that make it okay? (I&#39;d love to see a scatter graph of my posting times/days, btw...)", "edited": false, "comment_id": 254750, "creation_date": 1231608141, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1231607912, "comment_count": 1, "score": 1, "owner": {"display_name": "rizzle", "reputation": 3466, "user_id": 46706, "user_type": "registered", "accept_rate": 75}, "is_accepted": false, "up_vote_count": 1}, {"body": "<p>This solution will give you programmatic access to the controls in their entirety including all attributes on the controls. Also, only the text box values will appear in the URL upon submission so your GET request URL will be more \"meaningful\"</p>\n\n<pre><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"JonSkeetForm.aspx.cs\" Inherits=\"JonSkeetForm\" %&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" &gt;\n&lt;head runat=\"server\"&gt;\n    &lt;title&gt;Jon Skeet's Form Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form action=\"JonSkeetForm.aspx\" method=\"get\"&gt;\n    &lt;div&gt;\n        &lt;input type=\"text\" ID=\"text1\" runat=\"server\" /&gt;\n        &lt;input type=\"text\" ID=\"text2\" runat=\"server\" /&gt;\n        &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n        &lt;asp:Repeater ID=\"Repeater1\" runat=\"server\"&gt;\n            &lt;ItemTemplate&gt;\n                &lt;div&gt;Some text&lt;/div&gt;\n            &lt;/ItemTemplate&gt;\n        &lt;/asp:Repeater&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Then in your code-behind you can do everything you need on PageLoad</p>\n\n<pre><code>public partial class JonSkeetForm : System.Web.UI.Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        text1.Value = Request.QueryString[text1.ClientID];\n        text2.Value = Request.QueryString[text2.ClientID];\n    }\n}\n</code></pre>\n\n<p>If you don't want a form that has <code>runat=\"server\"</code>, then you should use HTML controls. It's easier to work with for your purposes. Just use regular HTML tags and put <code>runat=\"server\"</code> and give them an ID. Then you can access them programmatically <strong>and</strong> code without a <code>ViewState</code>. </p>\n\n<p>The only downside is that you won't have access to many of the \"helpful\" ASP.NET server controls like <code>GridView</code>s. I included a <code>Repeater</code> in my example because I'm assuming that you want to have the fields on the same page as the results and (to my knowledge) a <code>Repeater</code> is the only DataBound control that will run without a <code>runat=\"server\"</code> attribute in the Form tag.</p>\n", "is_accepted": true, "tags": [], "answer_id": 431360, "down_vote_count": 0, "last_activity_date": 1337809291, "comments": [{"body": "I&#39;ve got so few fields that doing it manually is really easy :) The key was that I didn&#39;t know I could use runat=server with normal HTML controls. I haven&#39;t implemented the results yet, but that&#39;s the easy bit. Nearly there!", "edited": false, "comment_id": 254763, "creation_date": 1231608555, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Indeed, a &lt;form runat=&quot;server&quot;&gt; would add the __VIEWSTATE (and some other) hidden field even when you set EnableViewState=&quot;False&quot; at page level. This is the way to go if you want to loose the ViewState on the page. As for Url friendliness, urlrewriting might be an option.", "edited": false, "comment_id": 254809, "creation_date": 1231609698, "score": 0, "owner": {"display_name": "Sergiu Damian", "reputation": 1250, "user_id": 41345, "user_type": "registered"}}, {"body": "No need for rewriting. This answer works fine (although it does mean having a control with an ID of &quot;user&quot; - for some reason I can&#39;t change the name of a textbox control separately from its ID).", "edited": false, "comment_id": 254817, "creation_date": 1231609936, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Just to confirm, this worked very well indeed. Thanks very much!", "edited": false, "comment_id": 255133, "creation_date": 1231621252, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Will this work if you are using master pages? The clientId of the controls usually change when using master pages.", "edited": false, "comment_id": 384386, "creation_date": 1235203596, "score": 0, "owner": {"display_name": "Binoj Antony", "reputation": 8574, "user_id": 33015, "user_type": "registered", "accept_rate": 58}}, {"body": "This will work in Master Pages, you just have to use the ClientID property of your text boxes instead of hard-coding IDs into the Query String lookup.", "edited": false, "comment_id": 385077, "creation_date": 1235236322, "score": 0, "owner": {"display_name": "Dan Herbert", "reputation": 46010, "user_id": 392, "user_type": "registered", "accept_rate": 83}}, {"body": "Looks like you should have just written it in classic asp!", "edited": false, "comment_id": 920843, "creation_date": 1247167361, "score": 13, "owner": {"display_name": "ScottE", "reputation": 13008, "user_id": 112194, "user_type": "registered", "accept_rate": 82}}], "creation_date": 1231607916, "comment_count": 7, "score": 69, "owner": {"display_name": "Dan Herbert", "reputation": 46010, "user_id": 392, "user_type": "registered", "accept_rate": 83}, "last_editor": {"display_name": "Dan Herbert", "reputation": 46010, "user_id": 392, "user_type": "registered", "accept_rate": 83}, "last_edit_date": 1337809291, "up_vote_count": 69}, {"body": "<p>What the hell, I thought the asp:Repeater control was obsolete.</p>\n\n<p>The ASP.NET template engine is nice but you can just as easily accomplish repeating with a for loop...</p>\n\n<pre><code>&lt;form action=\"JonSkeetForm.aspx\" method=\"get\"&gt;\n&lt;div&gt;\n    &lt;input type=\"text\" ID=\"text1\" runat=\"server\" /&gt;\n    &lt;input type=\"text\" ID=\"text2\" runat=\"server\" /&gt;\n    &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;% foreach( var item in dataSource ) { %&gt;\n        &lt;div&gt;Some text&lt;/div&gt;   \n    &lt;% } %&gt;\n&lt;/div&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>ASP.NET Forms is sort of okay, there's decent support from Visual Studio but this runat=\"server\" thing, that's just wrong. ViewState to.</p>\n\n<p>I suggest you take a look at what makes ASP.NET MVC so great, who it moves away from the ASP.NET Forms approach without throwing it all away.</p>\n\n<p>You can even write your own build provider stuff to compile custom views like NHaml. I think you should look here for more control and simply relying on the ASP.NET runtime for wrapping HTTP and as a CLR hosting environment. If you run integrated mode then you'll be able to manipulate the HTTP request/response as well.</p>\n", "answer_id": 577505, "tags": [], "down_vote_count": 0, "last_activity_date": 1235392785, "creation_date": 1235392785, "comment_count": 0, "score": 1, "owner": {"display_name": "John Leidegren", "reputation": 26097, "user_id": 58961, "user_type": "registered", "accept_rate": 88}, "is_accepted": false, "up_vote_count": 1}, {"body": "<p>Okay Jon, the viewstate issue first:</p>\n\n<p>I haven't checked if there's any kind of internal code change since 2.0 but here's how I handled getting rid of the viewstate a few years ago. Actually that hidden field is hardcoded inside HtmlForm so you should derive your new one and step into its rendering making the calls by yourself. Note that you can also leave __eventtarget and __eventtarget out if you stick to plain old input controls (which I guess you'd want to since it also helps not requiring JS on the client):</p>\n\n<pre><code>protected override void RenderChildren(System.Web.UI.HtmlTextWriter writer)\n{\n    System.Web.UI.Page page = this.Page;\n    if (page != null)\n    {\n        onFormRender.Invoke(page, null);\n        writer.Write(\"&lt;div&gt;&lt;input type=\\\"hidden\\\" name=\\\"__eventtarget\\\" id=\\\"__eventtarget\\\" value=\\\"\\\" /&gt;&lt;input type=\\\"hidden\\\" name=\\\"__eventargument\\\" id=\\\"__eventargument\\\" value=\\\"\\\" /&gt;&lt;/div&gt;\");\n    }\n\n    ICollection controls = (this.Controls as ICollection);\n    renderChildrenInternal.Invoke(this, new object[] {writer, controls});\n\n    if (page != null)\n        onFormPostRender.Invoke(page, null);\n}\n</code></pre>\n\n<p>So you get those 3 static MethodInfo's and call them out skipping that viewstate part out ;)</p>\n\n<pre><code>static MethodInfo onFormRender;\nstatic MethodInfo renderChildrenInternal;\nstatic MethodInfo onFormPostRender;\n</code></pre>\n\n<p>and here's your form's type constructor:</p>\n\n<pre><code>static Form()\n{\n    Type aspNetPageType = typeof(System.Web.UI.Page);\n\n    onFormRender = aspNetPageType.GetMethod(\"OnFormRender\", BindingFlags.Instance | BindingFlags.NonPublic);\n    renderChildrenInternal = typeof(System.Web.UI.Control).GetMethod(\"RenderChildrenInternal\", BindingFlags.Instance | BindingFlags.NonPublic);\n    onFormPostRender = aspNetPageType.GetMethod(\"OnFormPostRender\", BindingFlags.Instance | BindingFlags.NonPublic);\n}\n</code></pre>\n\n<p>If I'm getting your question right, you also want not to use POST as the action of your forms so here's how you'd do that:</p>\n\n<pre><code>protected override void RenderAttributes(System.Web.UI.HtmlTextWriter writer)\n{\n    writer.WriteAttribute(\"method\", \"get\");\n    base.Attributes.Remove(\"method\");\n\n    // the rest of it...\n}\n</code></pre>\n\n<p>I guess this is pretty much it. Let me know how it goes.</p>\n\n<p>EDIT: I forgot the Page viewstate methods:</p>\n\n<p>So your custom Form : HtmlForm gets its brand new abstract (or not) Page : System.Web.UI.Page :P</p>\n\n<pre><code>protected override sealed object SaveViewState()\n{\n    return null;\n}\n\nprotected override sealed void SavePageStateToPersistenceMedium(object state)\n{\n}\n\nprotected override sealed void LoadViewState(object savedState)\n{\n}\n\nprotected override sealed object LoadPageStateFromPersistenceMedium()\n{\n    return null;\n}\n</code></pre>\n\n<p>In this case I seal the methods 'cause you can't seal the Page (even if it isn't abstract Scott Guthrie will wrap it into yet another one :P) but you can seal your Form.</p>\n", "is_accepted": false, "tags": [], "answer_id": 1105878, "down_vote_count": 0, "last_activity_date": 1247167005, "comments": [{"body": "Thanks for this - although it sounds like rather a lot of work. Dan&#39;s solution worked fine for me, but it&#39;s always good to have more options.", "edited": false, "comment_id": 921054, "creation_date": 1247169502, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1247166311, "comment_count": 1, "score": 2, "owner": {"display_name": "user134706", "reputation": 935, "user_id": 134706, "user_type": "registered"}, "last_editor": {"display_name": "user134706", "reputation": 935, "user_id": 134706, "user_type": "registered"}, "last_edit_date": 1247167005, "up_vote_count": 2}], "last_editor": {"display_name": "bludger", "reputation": 2538, "user_id": 170339, "user_type": "registered", "accept_rate": 91}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 431296}, {"body": "<p><a href=\"http://noda-time.googlecode.com\">Noda Time</a> has an <a href=\"http://code.google.com/p/noda-time/issues/detail?id=42&amp;colspec=ID%20Type%20Status%20V1%20Owner%20Summary\">issue</a> against it that the XML documentation file it ships contains all the internal and private members too - which is a shame.</p>\n\n<p>Fortunately, <a href=\"http://shfb.codeplex.com/\">Sandcastle Help File Builder</a> has a custom build component - <a href=\"http://www.ewoodruff.us/shfbdocs/html/5d546511-6aec-455a-ba09-9daffb124c6d.htm\"><code>IntelliSenseComponent</code></a> - which does exactly the right thing... in theory. Unfortunately, I can't work out how on earth to configure it properly.</p>\n\n<p>The documentation gives this example:</p>\n\n<pre><code> &lt;output includeNamespaces=\"false\" namespacesFile=\"Namespaces\"\n   folder=\"{@OutputFolder}\" /&gt;\n</code></pre>\n\n<p>and states:</p>\n\n<blockquote>\n  <p>The example given above is taken from the Sandcastle Help File Builder's configuration file. When used with it, the replacement tags {@SHFBFolder} and {@OutputFolder} are used to insert the help file builder's folder and the project's output folder in the file paths. These are replaced at build time with the appropriate values. If using the component in your own build scripts, replace the tags with a relative or absolute path to the component assembly and output folder respectively.</p>\n</blockquote>\n\n<p>Well, I <em>am</em> using SHFB, so I'd expect that to work. However, I can't get <em>anything</em> other than an absolute path to work. I've tried:</p>\n\n<pre><code>folder=\".\"\nfolder=\"{@OutputFolder}\"\nfolder=\"{@OutputFolder}XYZZY\"\nfolder=\"{@OutputFolder}\\XYZZY\"\nfolder=\"{@OutputFolder}/XYZZY\"\nfolder=\"{@OutputFolder}/XYZZY/\"\n</code></pre>\n\n<p>(I'm just using XYZZY as something that's easy to search for.)</p>\n\n<p>Looking at the <a href=\"http://shfb.codeplex.com/SourceControl/changeset/view/95992#1673439\">source code</a>, I'd hoped that I could use an environment variable, but this didn't work:</p>\n\n<pre><code>folder=\"%CD%\\XYZZY\"\n</code></pre>\n\n<p>although this did...</p>\n\n<pre><code>folder=\"%USERPROFILE%\\XYZZY\"\n</code></pre>\n\n<p>This works:</p>\n\n<pre><code>folder=\"c:\\users\\jon\\test\\xyzzy\"\n</code></pre>\n\n<p>... but I really don't want an absolute path-name there.</p>\n\n<p>The documentation suggests that all of this should be really easy... what am I missing?</p>\n\n<p>Versions involved:</p>\n\n<ul>\n<li>SHFB: 1.9.3.0</li>\n<li>Sandcastle: 2.6.10621.1</li>\n</ul>\n", "is_answered": true, "delete_vote_count": 0, "accepted_answer_id": 9329081, "tags": [".net", "sandcastle", "xml-documentation", "shfb"], "question_id": 9301437, "reopen_vote_count": 0, "down_vote_count": 2, "view_count": 1429, "comments": [{"body": "<code>folder=&quot;%CD%\\XYZZY&quot;</code> doesn&#39;t work because <code>%CD%</code> is not expanded by <code>Environment.ExpandEnvironmentVariables</code> which IntelliSenseComponent uses. I believe it can be expanded by <code>cmd.exe</code> only (just like %TIME%, %CMDCMDLINE%, etc.)", "edited": false, "comment_id": 11771958, "creation_date": 1329486217, "score": 0, "owner": {"display_name": "Igor Korkhov", "reputation": 4724, "user_id": 93462, "user_type": "registered"}}], "last_activity_date": 1335560199, "comment_count": 1, "score": 43, "answer_count": 1, "answers": [{"body": "<p>My experiments showed that SHFB's IntelliSenseComponent <em>did</em> treat <code>{@OutputFolder}</code> correctly, but there's a nuance.</p>\n\n<p>If the <code>folder</code> attribute specified in</p>\n\n<pre><code>&lt;output includeNamespaces=\"false\" namespacesFile=\"Namespaces\"\n        folder=\"...\" /&gt;\n</code></pre>\n\n<p>points to a folder <em>inside</em> a project's <code>OutputPath</code> folder (<code>.\\docs\\api</code> in your case) then SHFB's build process creates the folder, but then deletes it before generating website contents:</p>\n\n<blockquote>\n<pre><code>Last step completed in 00:00:34.5875\n-------------------------------\nCombining conceptual and API intermediate TOC files...\n\nClearing any prior web output\n    Last step completed in 00:00:00.2360\n-------------------------------\nExtracting HTML info for HTML Help 1 and/or website...\n</code></pre>\n</blockquote>\n\n<p>The problem is that the default value of the <code>{@OutputFolder}</code> is exactly the same as the value of <code>$(OutputPath)</code>, therefore if you put something like <code>{@OutputFolder}\\foo</code> in the <code>folder</code> attribute then you'll never see <code>foo</code> after build has finished.</p>\n\n<p>The solution is simple: specify a folder that is located <em>outside</em> of your project's output folder, like this:</p>\n\n<pre><code>&lt;output includeNamespaces=\"false\" namespacesFile=\"Namespaces\"\n        folder=\"{@OutputFolder}\\..\\distilledApi\" /&gt;\n&lt;!--                            ^^       --&gt;\n</code></pre>\n\n<p>Hope this helps.</p>\n", "is_accepted": true, "tags": [], "answer_id": 9329081, "down_vote_count": 0, "last_activity_date": 1335560199, "creation_date": 1329485211, "comment_count": 0, "score": 44, "owner": {"display_name": "Igor Korkhov", "reputation": 4724, "user_id": 93462, "user_type": "registered"}, "last_editor": {"display_name": "George W Bush", "reputation": 15217, "user_id": 127880, "user_type": "registered", "accept_rate": 95}, "last_edit_date": 1335560199, "up_vote_count": 44}], "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "title": "What rules are applied to SHFB's IntelliSenseComponent's output folder?", "close_vote_count": 0, "creation_date": 1329340166, "favorite_count": 1, "up_vote_count": 45}, {"body": "<p>I'm trying to give a short example of <a href=\"http://msdn.microsoft.com/en-us/library/system.dynamic.idynamicmetaobjectprovider%28VS.100%29.aspx\"><code>IDynamicMetaObjectProvider</code></a> for the second edition of C# in Depth, and I'm running into issues.</p>\n\n<p>I want to be able to express a void call, and I'm failing. I'm sure it's possible, because if I dynamically call a void method using the reflection binder, all is fine. Here's a short but complete example:</p>\n\n<pre><code>using System;\nusing System.Dynamic;\nusing System.Linq.Expressions;\n\nclass DynamicDemo : IDynamicMetaObjectProvider\n{\n    public DynamicMetaObject GetMetaObject(Expression expression)\n    {\n        return new MetaDemo(expression, this);\n    }\n\n    public void TestMethod(string name)\n    {\n        Console.WriteLine(name);\n    }\n\n}\n\nclass MetaDemo : DynamicMetaObject\n{\n    internal MetaDemo(Expression expression, DynamicDemo demo)\n        : base(expression, BindingRestrictions.Empty, demo)\n    {\n    }\n\n    public override DynamicMetaObject BindInvokeMember\n        (InvokeMemberBinder binder, DynamicMetaObject[] args)\n    {\n        Expression self = this.Expression;\n\n        Expression target = Expression.Call\n            (Expression.Convert(self, typeof(DynamicDemo)),\n             typeof(DynamicDemo).GetMethod(\"TestMethod\"),\n             Expression.Constant(binder.Name));\n\n        var restrictions = BindingRestrictions.GetTypeRestriction\n            (self, typeof(DynamicDemo));\n\n        return new DynamicMetaObject(target, restrictions);\n    }\n}\n\nclass Test\n{\n    public void Foo()\n    {\n    }\n\n    static void Main()\n    {\n        dynamic x = new Test();\n        x.Foo(); // Works fine!\n\n        x = new DynamicDemo();\n        x.Foo(); // Throws\n    }\n}\n</code></pre>\n\n<p>This throws an exception:</p>\n\n<blockquote>\n  <p>Unhandled Exception:\n  System.InvalidCastException: The\n  result type 'System.Void' of the\n  dynamic binding produced by the object\n  with type 'DynamicDemo' for the binder\n  'Microsoft.CSharp.RuntimeBinder.CSharpInvokeMemberBinder'\n  is not compatible  with the result type 'System.Object' expected by the\n  call site.</p>\n</blockquote>\n\n<p>If I change the method to return object and return null, it works fine... but I don't want the result to be null, I want it to be void. That works fine for the reflection binder (see the first call in Main) but it fails for my dynamic object. I want it to work like the reflection binder - it's fine to call the method, so long as you don't try to use the result.</p>\n\n<p>Have I missed a particular kind of expression I can use as the target?</p>\n", "is_answered": true, "delete_vote_count": 0, "accepted_answer_id": 1836591, "tags": ["dynamic", ".net-4.0", "c#-4.0", "dynamic-language-runtime"], "question_id": 1835912, "reopen_vote_count": 0, "down_vote_count": 0, "view_count": 2873, "comments": [{"body": "Talk about throwing down a gauntlet...", "edited": false, "comment_id": 1728335, "creation_date": 1259789252, "score": 1, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "Jon Skeet asked a question...and he hasn&#39;t answered himself correctly yet. It&#39;s the end of the world as we know it.", "edited": false, "comment_id": 1728365, "creation_date": 1259789523, "score": 11, "owner": {"display_name": "Justin Niessner", "reputation": 161153, "user_id": 84651, "user_type": "registered", "accept_rate": 75}}, {"body": "@Marc: My last question will hopefully end up with a bug being fixed for the release of .NET 4.0... who knows what will happen this time? :)", "edited": false, "comment_id": 1728376, "creation_date": 1259789604, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "But does anyone get electrocuted? (Eric&#39;s blog) - otherwise, it&#39;ll probably be SP1 at best.", "edited": false, "comment_id": 1728386, "creation_date": 1259789713, "score": 0, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "We&#39;ll see - I&#39;m not even sure whether it&#39;s the compiler or not. Anyway, enough chatting - Marc, you know more about expression trees than anyone else I know outside MS... I asked this about 20 minutes ago... why haven&#39;t I got an answer yet? :)", "edited": false, "comment_id": 1728422, "creation_date": 1259790099, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I am trying... sheesh!", "edited": false, "comment_id": 1728434, "creation_date": 1259790206, "score": 1, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "Marc &amp; Jon ...can either one of you Reflect into the System.Dynamic assembly and see what is populating InvokeMemberBinder binder?", "edited": false, "comment_id": 1728663, "creation_date": 1259791794, "score": 0, "owner": {"display_name": "Justin Niessner", "reputation": 161153, "user_id": 84651, "user_type": "registered", "accept_rate": 75}}, {"body": "@Justin Niessner: No doubt that would be feasible in theory. However, given the way the DLR works, I think it would be extraordinarily painful without a huge investment in learning the details of the DLR. I was hoping to avoid that :)", "edited": false, "comment_id": 1728761, "creation_date": 1259792383, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "What he said...", "edited": false, "comment_id": 1728794, "creation_date": 1259792636, "score": 0, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "Oh come on...where&#39;s your sense of adventure? :-P", "edited": false, "comment_id": 1732983, "creation_date": 1259849282, "score": 1, "owner": {"display_name": "Justin Niessner", "reputation": 161153, "user_id": 84651, "user_type": "registered", "accept_rate": 75}}, {"body": "+1 Once again SO saves the day. I&#39;ve fighting this all morning.", "edited": false, "comment_id": 3123391, "creation_date": 1276673335, "score": 1, "owner": {"display_name": "Brian Rasmussen", "reputation": 76194, "user_id": 38206, "user_type": "registered", "accept_rate": 80}}], "last_activity_date": 1325087887, "comment_count": 11, "score": 49, "answer_count": 4, "answers": [{"body": "<p>I don't like this, but it seems to work; the real problem seems to be the <code>binder.ReturnType</code> coming in oddly (and not being dropped (\"pop\") automatically), but:</p>\n\n<pre><code>if (target.Type != binder.ReturnType) {\n    if (target.Type == typeof(void)) {\n        target = Expression.Block(target, Expression.Default(binder.ReturnType));\n    } else if (binder.ReturnType == typeof(void)) {\n        target = Expression.Block(target, Expression.Empty());\n    } else {\n        target = Expression.Convert(target, binder.ReturnType);\n    }\n}\nreturn new DynamicMetaObject(target, restrictions);\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 1836150, "down_vote_count": 0, "last_activity_date": 1259791891, "comments": [{"body": "Hmm... that will still end up returning null though. Ideally, I&#39;d like the same behaviour as the reflection binder - that it knows it&#39;s null (and will barf if you assign the result to a variable) but it doesn&#39;t care if you&#39;re just invoking it. +1 anyway because I wasn&#39;t aware of Expression.Empty :)", "edited": false, "comment_id": 1728701, "creation_date": 1259792031, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I agree - something is funky here - but with a <code>binder.ReturnType</code> of <code>object</code> (and it being picky)... (and I did start &quot;I don&#39;t like this&quot;...)", "edited": false, "comment_id": 1728766, "creation_date": 1259792413, "score": 1, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}], "creation_date": 1259791362, "comment_count": 2, "score": 9, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}, "last_editor": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}, "last_edit_date": 1259791891, "up_vote_count": 9}, {"body": "<p>Perhaps the callsite expects null to be returned but discards the result - This enum looks interesting, particularly the \"ResultDiscarded\" flag... </p>\n\n<pre><code>[Flags, EditorBrowsable(EditorBrowsableState.Never)]\npublic enum CSharpBinderFlags\n{\n    BinaryOperationLogical = 8,\n    CheckedContext = 1,\n    ConvertArrayIndex = 0x20,\n    ConvertExplicit = 0x10,\n    InvokeSimpleName = 2,\n    InvokeSpecialName = 4,\n    None = 0,\n    ResultDiscarded = 0x100,\n    ResultIndexed = 0x40,\n    ValueFromCompoundAssignment = 0x80\n}\n</code></pre>\n\n<p>Food for thought...</p>\n\n<p>UPDATE:</p>\n\n<p>More hints can be gleaned from Microsoft / CSharp / RuntimeBinder / DynamicMetaObjectProviderDebugView which is used (I presume) as a visualizer for debuggers. The method TryEvalMethodVarArgs examines the delegate and creates a binder with the result discarded flag (???)</p>\n\n<pre><code> Type delegateType = Expression.GetDelegateType(list.ToArray());\n    if (string.IsNullOrEmpty(name))\n    {\n        binder = new CSharpInvokeBinder(CSharpCallFlags.ResultDiscarded, AccessibilityContext, list2.ToArray());\n    }\n    else\n    {\n        binder = new CSharpInvokeMemberBinder(CSharpCallFlags.ResultDiscarded, name, AccessibilityContext, types, list2.ToArray());\n    }\n    CallSite site = CallSite.Create(delegateType, binder);\n</code></pre>\n\n<p>... I'm at the end of my Reflector-foo here, but the framing of this code seems a bit odd since the TryEvalMethodVarArgs method itself expects an object as a return type, and the final line returns the result of the dynamic invoke. I'm probably barking up the wrong [expression] tree.</p>\n\n<p>-Oisin</p>\n", "is_accepted": false, "tags": [], "answer_id": 1836260, "down_vote_count": 0, "last_activity_date": 1259793178, "creation_date": 1259792325, "comment_count": 0, "score": 5, "owner": {"display_name": "x0n", "reputation": 30234, "user_id": 6920, "user_type": "registered"}, "last_editor": {"display_name": "x0n", "reputation": 30234, "user_id": 6920, "user_type": "registered"}, "last_edit_date": 1259793178, "up_vote_count": 5}, {"body": "<p>This is similar to:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/1360097/dlr-return-type\">DLR return type</a></p>\n\n<p>You do need to match the return type specified by the <code>ReturnType</code> property.  For all of the standard binaries this is fixed to object for almost everything or void (for the deletion operations).  If you know you're making a void call I'd suggest wrapping it in:</p>\n\n<pre><code>Expression.Block(\n    call,\n    Expression.Default(typeof(object))\n);\n</code></pre>\n\n<p>The DLR used to be quite lax about what it would allow and it would provide some minimal amount of coercion automatically.  We got rid of that because we didn't want to provide a set of convensions which may or may not have made sense for each language.  </p>\n\n<p>It sounds like you want to prevent:</p>\n\n<pre><code>dynamic x = obj.SomeMember();\n</code></pre>\n\n<p>There's no way to do that, there'll always be a value returned that the user can attempt to continue to interact with dynamically.</p>\n", "is_accepted": true, "tags": [], "answer_id": 1836591, "down_vote_count": 0, "last_activity_date": 1325087887, "comments": [{"body": "Thanks. It seems slightly odd that the reflection-based binder can somehow do this but I can&#39;t, but it&#39;s not a biggie. If I know we can&#39;t do it, that&#39;s just something I need to warn my readers about :)", "edited": false, "comment_id": 1729197, "creation_date": 1259796477, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1259796054, "comment_count": 1, "score": 22, "owner": {"display_name": "Dino Viehland", "reputation": 5675, "user_id": 114000, "user_type": "registered"}, "last_editor": {"display_name": "skolima", "reputation": 14161, "user_id": 3205, "user_type": "registered", "accept_rate": 88}, "last_edit_date": 1325087887, "up_vote_count": 22}, {"body": "<p>The C# binder (in Microsoft.CSharp.dll) knows whether or not the result is used; as x0n (+1) says, it keeps track of it in a flag. Unfortunately, the flag is buried inside a <code>CSharpInvokeMemberBinder</code> instance, which is a private type.</p>\n\n<p>It looks like the C# binding mechanism uses <code>ICSharpInvokeOrInvokeMemberBinder.ResultDiscarded</code> (a property on an internal interface) to read it out; <code>CSharpInvokeMemberBinder</code> implements the interface (and property). The job appears to be done in <code>Microsoft.CSharp.RuntimeBinder.BinderHelper.ConvertResult()</code>. That method has code that throws if the aforementioned <code>ResultDiscarded</code> property doesn't return true if the type of the expression is void.</p>\n\n<p>So it doesn't look to me like there's an easy way to tease out the fact that the result of the expression is dropped from the C# binder, in Beta 2 at least.</p>\n", "answer_id": 1836595, "tags": [], "down_vote_count": 0, "last_activity_date": 1259796111, "creation_date": 1259796111, "comment_count": 0, "score": 5, "owner": {"display_name": "Barry Kelly", "reputation": 32194, "user_id": 3712, "user_type": "registered", "accept_rate": 81}, "is_accepted": false, "up_vote_count": 5}], "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "title": "How do I express a void method call as the result of DynamicMetaObject.BindInvokeMember?", "close_vote_count": 0, "creation_date": 1259788947, "favorite_count": 9, "up_vote_count": 49}, {"body": "<p>This sounds like it should be simple. I have a <code>Page</code> declared in XAML in the normal way (i.e. with \"Add new item...\") and it has a custom property. I'd like to set that property in the XAML associated with the page.</p>\n\n<p>Trying to do this the same way that I'd set any other property doesn't work, for reasons I understand but don't know how to work round. Just so we've got something concrete to talk about, here's some (invalid) XAML. I've reduced everything down as much as possible - originally there were attributes such as the designer size, but I believe those are irrelevant to what I'm trying to do.</p>\n\n<pre><code>&lt;Page x:Class=\"WpfSandbox.TestPage\"\n      xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n      MyProperty=\"MyPropertyValue\"&gt;\n&lt;/Page&gt;\n</code></pre>\n\n<p>and the corresponding code-behind:</p>\n\n<pre><code>using System.Windows.Controls;\n\nnamespace WpfSandbox {\n  public partial class TestPage : Page {\n    public TestPage() {\n      InitializeComponent();\n    }\n\n    public string MyProperty { get; set; }\n  }\n}\n</code></pre>\n\n<p>Error message: </p>\n\n<blockquote>\n  <p>Error 1   The property 'MyProperty' does not exist in XML namespace \n  'http://schemas.microsoft.com/winfx/2006/xaml/presentation'. Line 4 Position 7.   </p>\n</blockquote>\n\n<p>Now I know why this is failing: the element is of type <code>Page</code>, and <code>Page</code> doesn't have a property called <code>MyProperty</code>. That's only declared in <code>TestPage</code>... which is specified by the <code>x:Class</code> attribute, but not by the element itself. As far as I'm aware, this configuration is required by the XAML processing model (i.e. the Visual Studio integration etc).</p>\n\n<p>I suspect I <em>could</em> handle this with a dependency property, but that feels a little like overkill. I could also use an existing property (e.g. <code>DataContext</code>) and then copy the value into the custom property in code later, but that would be pretty ugly. </p>\n\n<p>The above is a WPF example, but I suspect the same answers will apply in Silverlight. I'm interested in both - so if you post an answer which you know will work in one but not the other, I'd be grateful if you'd indicate that within the answer :)</p>\n\n<p>I'm preparing to kick myself when someone posts an absolutely trivial solution...</p>\n", "is_answered": true, "delete_vote_count": 0, "accepted_answer_id": 3657981, "tags": ["wpf", "silverlight", "xaml"], "question_id": 3657778, "reopen_vote_count": 0, "down_vote_count": 0, "view_count": 4346, "comments": [{"body": "Does &quot;MyProperty&quot; in the xaml <code>Page</code> element need a xml namespace?  Such as &quot;<code>x:MyProperty</code>&quot;?  (Not that literally, but similar).  Point being it&#39;s not in that namespace, so what other namespaces is it checking?", "edited": false, "comment_id": 3847569, "creation_date": 1283855530, "score": 0, "owner": {"display_name": "Neil Barnwell", "reputation": 23014, "user_id": 26414, "user_type": "registered", "accept_rate": 74}}, {"body": "@Filip: I don&#39;t believe it&#39;s actually a duplicate of that question, which is talking about attached properties. The problem here is that the property I&#39;m trying to set is effectively a property of the <i>actual</i> class rather than the one declared by the element. I could be wrong, of course.", "edited": false, "reply_to_user": {"display_name": "Filip Ekberg", "reputation": 24544, "user_id": 39106, "user_type": "registered", "accept_rate": 99}, "comment_id": 3847589, "creation_date": 1283855702, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Wow.. Jon Skeet got a close vote! What is the world coming to??", "edited": false, "comment_id": 3848183, "creation_date": 1283860107, "score": 4, "owner": {"display_name": "Arcturus", "reputation": 16433, "user_id": 900, "user_type": "registered", "accept_rate": 88}}, {"body": "Mad dash to answer a Jon Skeet question! I had the exact same problem a while ago, this question helped a bit: <a href=\"http://stackoverflow.com/questions/225878/how-to-correctly-inherit-from-a-usercontrol-defined-in-xaml-in-silverlight\" title=\"how to correctly inherit from a usercontrol defined in xaml in silverlight\">stackoverflow.com/questions/225878/&hellip;</a>", "edited": false, "comment_id": 3848301, "creation_date": 1283860952, "score": 0, "owner": {"display_name": "Chris S", "reputation": 37309, "user_id": 21574, "user_type": "registered", "accept_rate": 81}}, {"body": "Is there a reason you can&#39;t just set the value of the property in the constructor?", "edited": false, "comment_id": 3848335, "creation_date": 1283861130, "score": 0, "owner": {"display_name": "Quartermeister", "reputation": 27909, "user_id": 364001, "user_type": "registered"}}, {"body": "@Quartermeister: Only that it would be slightly ugly to do so. I&#39;m getting the value from a static resource, and it&#39;s just nicer to do that declaratively.", "edited": false, "reply_to_user": {"display_name": "Quartermeister", "reputation": 27909, "user_id": 364001, "user_type": "registered"}, "comment_id": 3848384, "creation_date": 1283861421, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "last_activity_date": 1315808654, "comment_count": 6, "score": 37, "answer_count": 9, "answers": [{"body": "<p>You would need to define it is attachable property to access it like this.</p>\n", "answer_id": 3657844, "tags": [], "down_vote_count": 1, "last_activity_date": 1283855840, "creation_date": 1283855840, "comment_count": 0, "score": 0, "owner": {"display_name": "Pavel", "reputation": 9, "user_id": 441344, "user_type": "unregistered"}, "is_accepted": false, "up_vote_count": 1}, {"body": "<p>You could declare your <code>&lt;Page&gt;</code> element to be a <code>&lt;TestPage&gt;</code> element instead:</p>\n\n<pre><code>&lt;YourApp:TestPage \n  xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" \n  xmlns:YourApp=\"clr-namespace:YourApp\"\n  MyProperty=\"Hello\"&gt;\n&lt;/YourApp:TestPage&gt;\n</code></pre>\n\n<p>That would do the trick, but you lose <code>InitializeComponent()</code> and the standard designer stuff. Design mode still seems to work flawlessly, though, but I haven't extensively tested this.</p>\n\n<p><strong>UPDATE:</strong> This compiles and runs, but does not actually set <code>MyProperty</code>. You also lose the ability to bind event handlers in XAML (although there may be a way to restore that which I am unaware of).</p>\n\n<p><strong>UPDATE 2:</strong>  Working sample from @Fredrik M\u00f6rk which sets the property, but does not support binding event handlers in XAML:</p>\n\n<p>Code behind:</p>\n\n<pre><code>namespace WpfApplication1\n{\n    public partial class MainWindow : Window\n    {\n        protected override void OnActivated(EventArgs e)\n        {\n            this.Title = MyProperty;\n        }      \n\n        public string MyProperty { get; set; }\n    }\n}\n</code></pre>\n\n<p>XAML:</p>\n\n<pre><code>&lt;WpfApplication1:MainWindow\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" \n    xmlns:WpfApplication1=\"clr-namespace:WpfApplication1\" \n    Title=\"MainWindow\" \n    Height=\"350\" \n    Width=\"525\"\n    MyProperty=\"My Property Value\"&gt; \n&lt;/WpfApplication1:MainWindow&gt;\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 3657848, "down_vote_count": 1, "last_activity_date": 1283858046, "comments": [{"body": "Trying that, I get &quot;The tag TestPage does not exist in XML namespace &#39;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation&#39;&quot\" rel=\"nofollow\">schemas.microsoft.com/winfx/2006/xaml/presentation&#39;&quot</a>; Line 2 Position 7. Hmm. I&#39;ve tried giving it a clr-namespace as well, and that doesn&#39;t seem to work either :(", "edited": false, "comment_id": 3847631, "creation_date": 1283856143, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@H&#229;vard, That will compile and run but the Property does not have the value &quot;Hello&quot;.", "edited": false, "reply_to_user": {"display_name": "H\u00e5vard S", "reputation": 12642, "user_id": 94237, "user_type": "registered", "accept_rate": 100}, "comment_id": 3847640, "creation_date": 1283856197, "score": 0, "owner": {"display_name": "Filip Ekberg", "reputation": 24544, "user_id": 39106, "user_type": "registered", "accept_rate": 99}}, {"body": "Sorry, slight mispost. You need <code>xmlns:YourApp=&quot;clr-namespace:YourApp&quot;</code> and declare as <code>&lt;YourApp:TestPage&gt;</code>. Updating the answer.", "edited": false, "comment_id": 3847646, "creation_date": 1283856263, "score": 0, "owner": {"display_name": "H\u00e5vard S", "reputation": 12642, "user_id": 94237, "user_type": "registered", "accept_rate": 100}}, {"body": "While working, this solution also removes the possibility to bind event handlers in XAML, which may be an inconvenience.", "edited": false, "comment_id": 3847653, "creation_date": 1283856363, "score": 0, "owner": {"display_name": "Fredrik M\u00f6rk", "reputation": 97089, "user_id": 93623, "user_type": "registered", "accept_rate": 86}}, {"body": "@Filip Ekberg Right you are. @Fredrik M&#246;rk It does so, yes. Uh well, it sort of seemed like it could work, but I guess I was proven wrong. :)", "edited": false, "reply_to_user": {"display_name": "Filip Ekberg", "reputation": 24544, "user_id": 39106, "user_type": "registered", "accept_rate": 99}, "comment_id": 3847681, "creation_date": 1283856564, "score": 0, "owner": {"display_name": "H\u00e5vard S", "reputation": 12642, "user_id": 94237, "user_type": "registered", "accept_rate": 100}}, {"body": "@H&#229;vard: you are not quite wrong. It <i>does</i> work, but comes with some drawbacks.", "edited": false, "reply_to_user": {"display_name": "H\u00e5vard S", "reputation": 12642, "user_id": 94237, "user_type": "registered", "accept_rate": 100}, "comment_id": 3847695, "creation_date": 1283856729, "score": 1, "owner": {"display_name": "Fredrik M\u00f6rk", "reputation": 97089, "user_id": 93623, "user_type": "registered", "accept_rate": 86}}, {"body": "@Fredrik M&#246;rk The property is not set for me, so no, it does not work. Please share your code if it does work for you, so we can all be enlightened. :)", "edited": false, "reply_to_user": {"display_name": "Fredrik M\u00f6rk", "reputation": 97089, "user_id": 93623, "user_type": "registered", "accept_rate": 86}, "comment_id": 3847705, "creation_date": 1283856826, "score": 0, "owner": {"display_name": "H\u00e5vard S", "reputation": 12642, "user_id": 94237, "user_type": "registered", "accept_rate": 100}}, {"body": "@H&#229;vard: it worked fine for me. With your permission, I&#39;ll edit it into your answer.", "edited": false, "reply_to_user": {"display_name": "H\u00e5vard S", "reputation": 12642, "user_id": 94237, "user_type": "registered", "accept_rate": 100}, "comment_id": 3847782, "creation_date": 1283857431, "score": 0, "owner": {"display_name": "Fredrik M\u00f6rk", "reputation": 97089, "user_id": 93623, "user_type": "registered", "accept_rate": 86}}, {"body": "You loose the property assignment <b>because</b> you don&#39;t have a <code>InitialiseComponent</code>.  You don&#39;t have <code>InitialiseComponent</code> because you don&#39;t have an <code>x:Class</code> attribute hence no partial class is created.  Of course if try to add this attribute you end up with a circular reference.", "edited": false, "comment_id": 3847783, "creation_date": 1283857432, "score": 0, "owner": {"display_name": "AnthonyWJones", "reputation": 134121, "user_id": 17516, "user_type": "registered", "accept_rate": 79}}, {"body": "@AnthonyWJones Right you are, you are only able to set on the base class when using <code>x:Class</code> to define the class. So, you&#39;re either left with using XAML purely for instantiating, or using attachable properties, or putting a third class &quot;in between&quot; in the hierarchy which you declare as your <code>x:Class</code> and which contains the desired properties.", "edited": false, "reply_to_user": {"display_name": "AnthonyWJones", "reputation": 134121, "user_id": 17516, "user_type": "registered", "accept_rate": 79}, "comment_id": 3847913, "creation_date": 1283858191, "score": 0, "owner": {"display_name": "H\u00e5vard S", "reputation": 12642, "user_id": 94237, "user_type": "registered", "accept_rate": 100}}, {"body": "XAML: removing all OO concepts wherever possible", "edited": false, "comment_id": 3848394, "creation_date": 1283861511, "score": 1, "owner": {"display_name": "Chris S", "reputation": 37309, "user_id": 21574, "user_type": "registered", "accept_rate": 81}}], "creation_date": 1283855871, "comment_count": 11, "score": 3, "owner": {"display_name": "H\u00e5vard S", "reputation": 12642, "user_id": 94237, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "H\u00e5vard S", "reputation": 12642, "user_id": 94237, "user_type": "registered", "accept_rate": 100}, "last_edit_date": 1283858046, "up_vote_count": 4}, {"body": "<p>You would need to make it an <a href=\"http://stackoverflow.com/questions/1173494/how-exactly-do-attached-properties-work-in-wpf\">attachable property</a> as Pavel noted, then you can write something like this</p>\n\n<pre><code>&lt;Page x:Class=\"JonSkeetTest.SkeetPage\"\n      xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n      xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" \n      xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" xmlns:JonSkeetTest=\"clr-namespace:JonSkeetTest\" mc:Ignorable=\"d\" \n      d:DesignHeight=\"300\" d:DesignWidth=\"300\"\n       JonSkeetTest:SkeetPage.MyProperty=\"testar\"\n    Title=\"SkeetPage\"&gt;\n    &lt;Grid&gt;\n\n    &lt;/Grid&gt;\n&lt;/Page&gt;\n</code></pre>\n\n<p>However with only this code behind: </p>\n\n<p>You will get this error instead:</p>\n\n<blockquote>\n  <p>The attachable property 'MyProperty'\n  was not found in type 'SkeetPage'.    </p>\n  \n  <p>The attached property\n  'SkeetPage.MyProperty' is not defined\n  on 'Page' or one of its base classes.</p>\n</blockquote>\n\n<hr>\n\n<p><strong>Edit</strong></p>\n\n<p>Unfortunatly you have to use Dependency Properties, her's a working example</p>\n\n<p><strong>Page</strong></p>\n\n<pre><code>&lt;Page x:Class=\"JonSkeetTest.SkeetPage\"\n      xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n      xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" \n      xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" xmlns:JonSkeetTest=\"clr-namespace:JonSkeetTest\" mc:Ignorable=\"d\" \n      JonSkeetTest:SkeetPage.MyProperty=\"Testing..\"\n      d:DesignHeight=\"300\" d:DesignWidth=\"300\"\n    Title=\"SkeetPage\"&gt;\n\n    &lt;Grid&gt;\n        &lt;Button Click=\"ButtonTest_Pressed\"&gt;&lt;/Button&gt;\n    &lt;/Grid&gt;\n&lt;/Page&gt;\n</code></pre>\n\n<p><strong>The Code behind</strong></p>\n\n<pre><code>using System.Windows;\nusing System.Windows.Controls;\n\nnamespace JonSkeetTest\n{\n    public partial class SkeetPage\n    {\n        public SkeetPage()\n        {\n            InitializeComponent();\n        }\n\n        public static readonly DependencyProperty MyPropertyProperty = DependencyProperty.Register(\n          \"MyProperty\",\n          typeof(string),\n          typeof(Page),\n          new FrameworkPropertyMetadata(null,\n              FrameworkPropertyMetadataOptions.AffectsRender\n          )\n        );\n\n        public static void SetMyProperty(UIElement element, string value)\n        {\n            element.SetValue(MyPropertyProperty, value);\n        }\n        public static string GetMyProperty(UIElement element)\n        {\n            return element.GetValue(MyPropertyProperty).ToString();\n        }\n\n        public string MyProperty\n        {\n            get { return GetValue(MyPropertyProperty).ToString(); }\n            set { SetValue(MyPropertyProperty, value); }\n        }\n\n        private void ButtonTest_Pressed(object sender, RoutedEventArgs e)\n        {\n            MessageBox.Show(MyProperty);\n        }\n    }\n}\n</code></pre>\n\n<p>If you press the button, you will see \"Testing...\" in a MessageBox.</p>\n", "is_accepted": false, "tags": [], "answer_id": 3657932, "down_vote_count": 1, "last_activity_date": 1283858109, "comments": [{"body": "This is the right answer.", "edited": false, "comment_id": 20325938, "creation_date": 1359391521, "score": 0, "owner": {"display_name": "l33t", "reputation": 3440, "user_id": 419761, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1283856532, "comment_count": 1, "score": 7, "owner": {"display_name": "Filip Ekberg", "reputation": 24544, "user_id": 39106, "user_type": "registered", "accept_rate": 99}, "last_editor": {"display_name": "Filip Ekberg", "reputation": 24544, "user_id": 39106, "user_type": "registered", "accept_rate": 99}, "last_edit_date": 1283858109, "up_vote_count": 8}, {"body": "<p>You can work with normal property without Dependency property if you create a Base class for your Page. </p>\n\n<pre><code> public class BaseWindow : Window\n {\n   public string MyProperty { get; set; }\n }\n\n&lt;local:BaseWindow x:Class=\"BaseWindowSample.Window1\" x:Name=\"winImp\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"clr-namespace:BaseWindowSample\" \n    MyProperty=\"myproperty value\"\n    Title=\"Window1\" Height=\"300\" Width=\"300\"&gt;\n\n&lt;/local:BaseWindow&gt;\n</code></pre>\n\n<p>And it works even though MyProperty is not a Dependency or Attached. </p>\n", "answer_id": 3657981, "tags": [], "down_vote_count": 2, "last_activity_date": 1283856857, "comments": [{"body": "That will loose <code>InitializeComponent()</code>", "edited": false, "comment_id": 3847728, "creation_date": 1283857068, "score": 0, "owner": {"display_name": "Filip Ekberg", "reputation": 24544, "user_id": 39106, "user_type": "registered", "accept_rate": 99}}, {"body": "-1 for daring to answer a jon skeet question?", "edited": false, "comment_id": 3847801, "creation_date": 1283857629, "score": 23, "owner": {"display_name": "Sudhir Jonathan", "reputation": 7753, "user_id": 73831, "user_type": "registered", "accept_rate": 96}}, {"body": "@Sudhir Good Job.", "edited": false, "reply_to_user": {"display_name": "Sudhir Jonathan", "reputation": 7753, "user_id": 73831, "user_type": "registered", "accept_rate": 96}, "comment_id": 3847829, "creation_date": 1283857809, "score": 1, "owner": {"display_name": "abhishek", "reputation": 1907, "user_id": 255575, "user_type": "registered", "accept_rate": 89}}, {"body": "@Filip Yes, Its My bad... Just was looking into it for a solution. :D", "edited": false, "reply_to_user": {"display_name": "Filip Ekberg", "reputation": 24544, "user_id": 39106, "user_type": "registered", "accept_rate": 99}, "comment_id": 3847843, "creation_date": 1283857868, "score": 0, "owner": {"display_name": "abhishek", "reputation": 1907, "user_id": 255575, "user_type": "registered", "accept_rate": 89}}, {"body": "@Filip: What do you mean, exactly? I&#39;m trying this at the moment, and it&#39;s looking good so far... Just to be specific, I don&#39;t mind the small base class not having an <code>InitializeComponent()</code> method - but the derived class (<code>Window1</code> in the sample above) will still have initialization won&#39;t it?", "edited": false, "reply_to_user": {"display_name": "Filip Ekberg", "reputation": 24544, "user_id": 39106, "user_type": "registered", "accept_rate": 99}, "comment_id": 3847898, "creation_date": 1283858089, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon, this is the same approach H&#229;vard was aiming at. You will loose <code>InitializeComponent()</code>. See the comments on his post. You should have <code>InitializeComponent()</code> in <code>Window1</code>. However, it seems cleaner to just use Dependency Properties instead, which makes more sense.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 3847925, "creation_date": 1283858299, "score": 0, "owner": {"display_name": "Filip Ekberg", "reputation": 24544, "user_id": 39106, "user_type": "registered", "accept_rate": 99}}, {"body": "@Filip: It doesn&#39;t look like the same approach as H&#229;vard&#39;s - and I still don&#39;t know <i>exactly</i> what you mean by &quot;losing&quot; <code>InitializeComponent()</code>. From which class? (There are two involved here.) It&#39;s still present in the derived class, and seems to work.", "edited": false, "reply_to_user": {"display_name": "Filip Ekberg", "reputation": 24544, "user_id": 39106, "user_type": "registered", "accept_rate": 99}, "comment_id": 3847998, "creation_date": 1283858755, "score": 3, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "+1 I was just putting together my example but this pretty much ties it up anyway.", "edited": false, "comment_id": 3848009, "creation_date": 1283858830, "score": 0, "owner": {"display_name": "AnthonyWJones", "reputation": 134121, "user_id": 17516, "user_type": "registered", "accept_rate": 79}}, {"body": "@Jon, You are right, you will still have <code>InitializeComponent()</code>. But can you use event bindings in xaml?", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 3848025, "creation_date": 1283858944, "score": 0, "owner": {"display_name": "Filip Ekberg", "reputation": 24544, "user_id": 39106, "user_type": "registered", "accept_rate": 99}}, {"body": "@Filip: Bindings to which events in particular? It all seems to be working fine at the moment... can you give a precise example of what might be failing? If I would only not be able to bind to events declared in the intermediate class, that would be a pity but probably not an issue for me right now.", "edited": false, "reply_to_user": {"display_name": "Filip Ekberg", "reputation": 24544, "user_id": 39106, "user_type": "registered", "accept_rate": 99}, "comment_id": 3848033, "creation_date": 1283859009, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Filip I think here I can change the value of MyProperty anywhere. I changed the value in XAML, in Window1 or even in BaseWindow. I think I am not intended towards doing any designer stuffs in my BaseWindow class, the BaseWindow will hold only the Base properties.", "edited": false, "reply_to_user": {"display_name": "Filip Ekberg", "reputation": 24544, "user_id": 39106, "user_type": "registered", "accept_rate": 99}, "comment_id": 3848038, "creation_date": 1283859035, "score": 0, "owner": {"display_name": "abhishek", "reputation": 1907, "user_id": 255575, "user_type": "registered", "accept_rate": 89}}, {"body": "@Jon: you are correct. A modification to H&#229;vard&#39;s approach that might be used is to implement <code>InitializeComponent()</code> yourself if you don&#39;t have too many Named elements.  However the benefits of getting much better support from the designer IMO out-weighs the cost of a small base class shim to hold the properties.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 3848043, "creation_date": 1283859079, "score": 0, "owner": {"display_name": "AnthonyWJones", "reputation": 134121, "user_id": 17516, "user_type": "registered", "accept_rate": 79}}, {"body": "@Jon, I am referring to the comment made on H&#229;vard&#39;s answer. I did not try it myself though. But I do guess he means <code>&lt;button Click=&quot;ButtonOne_Pressed&quot; &#47;&gt;</code>. Is there a particular reason to why you would not want to use Dependency Properties instead? Is this not what they should be used to? You can always create a snippet :)", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 3848080, "creation_date": 1283859335, "score": 0, "owner": {"display_name": "Filip Ekberg", "reputation": 24544, "user_id": 39106, "user_type": "registered", "accept_rate": 99}}, {"body": "@Filip Well, I personally don&#39;t declare a Dependency property when I don&#39;t want to have support for Styles, animations, etc. For simple datastorage I think normal properties are enough. implementing INotifyPropertyChanged will add more life to that property.", "edited": false, "reply_to_user": {"display_name": "Filip Ekberg", "reputation": 24544, "user_id": 39106, "user_type": "registered", "accept_rate": 99}, "comment_id": 3848160, "creation_date": 1283859925, "score": 0, "owner": {"display_name": "abhishek", "reputation": 1907, "user_id": 255575, "user_type": "registered", "accept_rate": 89}}, {"body": "@Filip: H&#229;vard&#39;s answer looks different enough to me that I think it&#39;s unlikely to be a problem. It&#39;s not using <code>x:Class</code> which I suspect is the problem. As for why it shouldn&#39;t be a dependency property: as far as I can see, that makes it signficantly more complicated, and it just doesn&#39;t <i>feel</i> like a dependency property. It feels like a normal property to me. It&#39;s something my page will always need, unlike (say) Grid dependency properties which only make sense for controls in a grid. But I&#39;m still relatively new at XAML... I may change my mind :)", "edited": false, "reply_to_user": {"display_name": "Filip Ekberg", "reputation": 24544, "user_id": 39106, "user_type": "registered", "accept_rate": 99}, "comment_id": 3848169, "creation_date": 1283859967, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon, I think that if you want to access a property like that On the Page In the Design, you have a dependency between your Model / View / Presenter which imho is what Dependency Properties are there for. It is more code than a &quot;normal&quot; property, but that also gives your better interaction with your UI.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 3848260, "creation_date": 1283860624, "score": 0, "owner": {"display_name": "Filip Ekberg", "reputation": 24544, "user_id": 39106, "user_type": "registered", "accept_rate": 99}}, {"body": "If BaseWindow calls InitializeComponent() in its constructor, how do you lose it?", "edited": false, "comment_id": 3848337, "creation_date": 1283861133, "score": 0, "owner": {"display_name": "Chris S", "reputation": 37309, "user_id": 21574, "user_type": "registered", "accept_rate": 81}}, {"body": "This is what I meant in my latter comment on my own response. +1 for it. The problem of my example is indeed that it doesn&#39;t use <code>x:Class</code>, and to get both worlds, you need a class in between, like this answer suggests.", "edited": false, "comment_id": 3848346, "creation_date": 1283861201, "score": 0, "owner": {"display_name": "H\u00e5vard S", "reputation": 12642, "user_id": 94237, "user_type": "registered", "accept_rate": 100}}, {"body": "So x:Class redeems the event handlers?", "edited": false, "comment_id": 3848411, "creation_date": 1283861603, "score": 0, "owner": {"display_name": "Chris S", "reputation": 37309, "user_id": 21574, "user_type": "registered", "accept_rate": 81}}, {"body": "@Filip: I&#39;m using MVVM rather than MVP, but this property is actually for a ViewModel factory. The only code which needs to know about this property is the page itself. I <i>could</i> just fetch it straight from the application resources when I want it, but this way feels cleaner to me. It&#39;s working fine for me at the moment.", "edited": false, "reply_to_user": {"display_name": "Filip Ekberg", "reputation": 24544, "user_id": 39106, "user_type": "registered", "accept_rate": 99}, "comment_id": 3848421, "creation_date": 1283861669, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Chris: x:Class results in a partial class being created with contains a dynamically created <code>InitializeComponent</code> method.  In that method there is a call to <code>LoadComponent</code> which applies the Xaml to the page being constructed.  Its this <code>LoadComponent</code> which will attach events declared in the Xaml to the appropriate event method defined in the Page.  See my answer below.", "edited": false, "reply_to_user": {"display_name": "Chris S", "reputation": 37309, "user_id": 21574, "user_type": "registered", "accept_rate": 81}, "comment_id": 3848591, "creation_date": 1283862850, "score": 0, "owner": {"display_name": "AnthonyWJones", "reputation": 134121, "user_id": 17516, "user_type": "registered", "accept_rate": 79}}, {"body": "@Anthony this might explain VS2010 getting its knickers in a twist when I subclass UserControls, I haven&#39;t been using x:Class because of the recursion problem -all the intellisense vanishes and I have to restart VS.", "edited": false, "reply_to_user": {"display_name": "AnthonyWJones", "reputation": 134121, "user_id": 17516, "user_type": "registered", "accept_rate": 79}, "comment_id": 3848949, "creation_date": 1283865097, "score": 0, "owner": {"display_name": "Chris S", "reputation": 37309, "user_id": 21574, "user_type": "registered", "accept_rate": 81}}, {"body": "@Anthony is correct.  If you declare an <code>x:Class</code> the hidden partial class (whatever.xaml.g.cs) will be generated by... something.  Whether its the compiler or its the WPF project system that does it I&#39;m not exactly sure.  Too much magic in the whole process, imho.", "edited": false, "reply_to_user": {"display_name": "AnthonyWJones", "reputation": 134121, "user_id": 17516, "user_type": "registered", "accept_rate": 79}, "comment_id": 3850152, "creation_date": 1283872366, "score": 0, "owner": {"display_name": "Will", "reputation": 86618, "user_id": 1228, "user_type": "registered", "accept_rate": 91}}], "creation_date": 1283856857, "comment_count": 23, "score": 29, "owner": {"display_name": "abhishek", "reputation": 1907, "user_id": 255575, "user_type": "registered", "accept_rate": 89}, "is_accepted": true, "up_vote_count": 31}, {"body": "<p>Your XAML is equivalent of the following:</p>\n\n<pre><code>&lt;Page x:Class=\"SkeetProblem.TestPage\"\n  xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"&gt;\n    &lt;Page.MyProperty&gt;MyPropertyValue&lt;/Page.MyProperty&gt; \n&lt;/Page&gt;\n</code></pre>\n\n<p>This is obviously illegal.  The XAML-file is being loaded by the static LoadComponent method of the Application class, and <a href=\"http://msdn.microsoft.com/en-us/library/ms596995.aspx\" rel=\"nofollow\">the reference</a> says:</p>\n\n<blockquote>\n  <p>Loads a XAML file that is located at the specified uniform resource identifier (URI) and converts it to an instance of the object that is specified by the root element of the XAML file.</p>\n</blockquote>\n\n<p>That means that you can only set properties for the type specified by the root element.  So you need to subclass Page and specify that subclass as the root element of you XAML.</p>\n", "is_accepted": false, "tags": [], "answer_id": 3658191, "down_vote_count": 0, "last_activity_date": 1283859294, "creation_date": 1283858624, "comment_count": 0, "score": 2, "owner": {"display_name": "Alf K\u00e5re Lefdal", "reputation": 177, "user_id": 67326, "user_type": "registered", "accept_rate": 80}, "last_editor": {"display_name": "Alf K\u00e5re Lefdal", "reputation": 177, "user_id": 67326, "user_type": "registered", "accept_rate": 80}, "last_edit_date": 1283859294, "up_vote_count": 2}, {"body": "<p>My suggestion would be a <code>DependencyProperty</code> with a default:</p>\n\n<pre><code>    public int MyProperty\n    {\n        get { return (int)GetValue(MyPropertyProperty); }\n        set { SetValue(MyPropertyProperty, value); }\n    }\n\n    public static readonly DependencyProperty MyPropertyProperty =\n        DependencyProperty.Register(\"MyProperty\", typeof(int), typeof(MyClass), \n               new PropertyMetadata(1337)); //&lt;-- Default goes here\n</code></pre>\n\n<p>See the properties of controls as something you expose to the outside world to use. </p>\n\n<p>If you wish to use your own property, you can use either <code>ElementName</code> or <code>RelativeSource</code> Bindings.</p>\n\n<p>About the overkill thing, <code>DependencyProperties</code> go hand in hand with <code>DependencyObjects</code> ;)</p>\n\n<p>No further XAML needed, the default in the <code>PropertyMetadata</code> will do the rest.</p>\n\n<p>If you really wish to put it in the XAML, go for the base class solution, or gods forbid, introduce an attachable property, which can be used on any other control as well.</p>\n", "is_accepted": false, "tags": [], "answer_id": 3658339, "down_vote_count": 1, "last_activity_date": 1283860842, "comments": [{"body": "I suggest you actually try this, it doesn&#39;t work.", "edited": false, "comment_id": 3848236, "creation_date": 1283860465, "score": 0, "owner": {"display_name": "AnthonyWJones", "reputation": 134121, "user_id": 17516, "user_type": "registered", "accept_rate": 79}}, {"body": "Why would this not work? No further XAML needed... The default will do the rest..", "edited": false, "comment_id": 3848267, "creation_date": 1283860742, "score": 0, "owner": {"display_name": "Arcturus", "reputation": 16433, "user_id": 900, "user_type": "registered", "accept_rate": 88}}], "creation_date": 1283859856, "comment_count": 2, "score": 1, "owner": {"display_name": "Arcturus", "reputation": 16433, "user_id": 900, "user_type": "registered", "accept_rate": 88}, "last_editor": {"display_name": "Arcturus", "reputation": 16433, "user_id": 900, "user_type": "registered", "accept_rate": 88}, "last_edit_date": 1283860842, "up_vote_count": 2}, {"body": "<p>Answer relates to Silverlight.</p>\n\n<p>There is no simple obvious way to use plain property in the way you want, there will have to be some compromise along the way.</p>\n\n<p><strong>Doesn't really work:-</strong></p>\n\n<p>Some suggest a dependency property.  That won't work, its still a public property from Xaml POV.  An attached property will work but that would make working with it in code ugly.</p>\n\n<p><strong>Close but no banana:-</strong></p>\n\n<p>The Xaml and the class can be fully separated like this:-</p>\n\n<pre><code>&lt;local:PageWithProperty\n           xmlns:local=\"clr-namespace:StackoverflowSpikes\"\n           xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" \n           xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" \n           xmlns:navigation=\"clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Navigation\"\n    Message=\"Hello World\"\n    Loaded=\"PageWithProperty_Loaded\"\n    Title=\"Some Title\"\n           &gt;\n    &lt;Grid x:Name=\"LayoutRoot\"&gt;\n        &lt;TextBlock Text=\"{Binding Parent.Message, ElementName=LayoutRoot}\" /&gt;\n    &lt;/Grid&gt;\n&lt;/local:PageWithProperty&gt;\n</code></pre>\n\n<p>Code:-</p>\n\n<pre><code>public class PageWithProperty : Page\n{\n\n        internal System.Windows.Controls.Grid LayoutRoot;\n\n        private bool _contentLoaded;\n\n        public void InitializeComponent()\n        {\n            if (_contentLoaded) {\n                return;\n            }\n            _contentLoaded = true;\n            System.Windows.Application.LoadComponent(this, new System.Uri(\"/StackoverflowSpikes;component/PageWithProperty.xaml\", System.UriKind.Relative));\n            this.LayoutRoot = ((System.Windows.Controls.Grid)(this.FindName(\"LayoutRoot\")));\n         }\n\n    public PageWithProperty()\n    {\n        InitializeComponent();\n    }\n\n    void PageWithProperty_Loaded(object sender, RoutedEventArgs e)\n    {\n        MessageBox.Show(\"Hi\");\n    }\n    public string Message {get; set; }\n\n}\n</code></pre>\n\n<p>However you lose some support from the designer. Notably you will have to create the fields to hold references to named elements and assign them yourself in your own implementation of <code>InitialiseComponent</code> (IMO all these automatic fields for named items isn't necessarily a good thing anyway).  Also the designer won't create event code dynamically for you (although strangely it seems to know how to navigate to one you have manually created) however events defined in Xaml will be wired up at runtime.</p>\n\n<p><strong>IMO best option:-</strong></p>\n\n<p>The best compromise has already been posted by abhishek, use a shim base class to hold the properties.  Minimul effort, maximum compatibility.</p>\n", "answer_id": 3658387, "tags": [], "down_vote_count": 0, "last_activity_date": 1283860335, "creation_date": 1283860335, "comment_count": 0, "score": 1, "owner": {"display_name": "AnthonyWJones", "reputation": 134121, "user_id": 17516, "user_type": "registered", "accept_rate": 79}, "is_accepted": false, "up_vote_count": 1}, {"body": "<p>I just tried to do the same with some different intent, though.</p>\n\n<p>The real answer actually is: You need the WPF convention for Set-methods done right.\nAs outlined here: <a href=\"http://msdn.microsoft.com/en-us/library/ms749011.aspx#custom\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/ms749011.aspx#custom</a>\nyou have to define the SetXxx and GetXxx methods if you are about to definde an attached property named Xxx.</p>\n\n<p>So see this working example:</p>\n\n<pre><code>public class Lokalisierer : DependencyObject\n{\n    public Lokalisierer()\n    {\n    }\n\n    public static readonly DependencyProperty LIdProperty = \n        DependencyProperty.RegisterAttached(\"LId\", \n                                            typeof(string), \n                                            typeof(Lokalisierer),\n                                            new FrameworkPropertyMetadata( \n                                                  null,\n                                                     FrameworkPropertyMetadataOptions.AffectsRender | \n                                                     FrameworkPropertyMetadataOptions.AffectsMeasure,\n                                                     new PropertyChangedCallback(OnLocIdChanged)));\n\n    private static void OnLocIdChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\n    {\n    // on startup youll be called here\n    }\n\n    public static void SetLId(UIElement element, string value)\n    {\n      element.SetValue(LIdProperty, value);\n    }\n    public static string GetLId(UIElement element)\n    {\n      return (string)element.GetValue(LIdProperty);\n    }\n\n\n    public string LId\n    {\n        get{    return (string)GetValue(LIdProperty);   }\n        set{ SetValue(LIdProperty, value); }\n    }\n}\n</code></pre>\n\n<p>And the WPF part:</p>\n\n<pre><code>&lt;Window x:Class=\"LokalisierungMitAP.Window1\"\nxmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\nxmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\nxmlns:me=\"clr-namespace:LokalisierungMitAP\"\nTitle=\"LokalisierungMitAP\" Height=\"300\" Width=\"300\"\n&gt;\n&lt;StackPanel&gt;\n    &lt;Label  me:Lokalisierer.LId=\"hhh\"&gt;Label1&lt;/Label&gt;\n   &lt;/StackPanel&gt;\n</code></pre>\n\n<p></p>\n\n<p>BTW: You need also to inherit DependencyObject</p>\n", "answer_id": 4047440, "tags": [], "down_vote_count": 0, "last_activity_date": 1288302624, "creation_date": 1288302624, "comment_count": 0, "score": 1, "owner": {"display_name": "RobKop", "reputation": 31, "user_id": 490668, "user_type": "unregistered"}, "is_accepted": false, "up_vote_count": 1}, {"body": "<p>This worked for me </p>\n\n<pre><code>&lt;Window x:Class=\"WpfSandbox.MainWindow\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"clr-namespace:WpfSandbox\"        \n    xmlns:src=\"clr-namespace:WpfSandbox\" \n    Title=\"MainWindow\" Height=\"350\" Width=\"525\"\n    src:MainWindow.SuperClick=\"SuperClickEventHandler\"&gt;\n&lt;/Window&gt;\n</code></pre>\n\n<p>So this may work for the original question (didn't try). Note xmlns:src.</p>\n\n<pre><code>&lt;Page x:Class=\"WpfSandbox.TestPage\"\n  xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n  xmlns:local=\"clr-namespace:WpfSandbox\"        \n  xmlns:src=\"clr-namespace:WpfSandbox\" \n  src:TestPage.MyProperty=\"MyPropertyValue\"&gt;\n&lt;/Page&gt;\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 7383986, "down_vote_count": 0, "last_activity_date": 1315808654, "creation_date": 1315808349, "comment_count": 0, "score": 1, "owner": {"display_name": "bab", "reputation": 11, "user_id": 939965, "user_type": "unregistered"}, "last_editor": {"display_name": "bab", "reputation": 11, "user_id": 939965, "user_type": "unregistered"}, "last_edit_date": 1315808654, "up_vote_count": 1}], "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "title": "Setting a custom property within a WPF/Silverlight page", "close_vote_count": 0, "creation_date": 1283855237, "favorite_count": 5, "up_vote_count": 37}, {"last_activity_date": 1313401841, "accepted_answer_id": 3076525, "creation_date": 1255808937, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1270608376, "favorite_count": 77, "view_count": 16713, "delete_vote_count": 0, "title": "Performance surprise with \"as\" and nullable types", "comments": [{"body": "oh sure, you update everything the week after I buy it  ;)", "edited": false, "comment_id": 1445140, "creation_date": 1255811194, "score": 52, "owner": {"display_name": "Leroy Jenkins", "reputation": 1100, "user_id": 151954, "user_type": "registered", "accept_rate": 96}}, {"body": "Why not look at the jitted code? Even VS debugger can show it.", "edited": false, "comment_id": 1445145, "creation_date": 1255811280, "score": 7, "owner": {"display_name": "Anton Tykhyy", "reputation": 13784, "user_id": 77724, "user_type": "registered"}}, {"body": "I&#39;m just curious, did you test with CLR 4.0 as well?", "edited": false, "comment_id": 1445161, "creation_date": 1255811557, "score": 2, "owner": {"display_name": "Dirk Vollmar - 0xA3", "reputation": 86880, "user_id": 40347, "user_type": "registered", "accept_rate": 100}}, {"body": "@Anton: Good point. Will do at some point (although this isn&#39;t in VS at the moment :) @divo: Yes, and it&#39;s worse all round. But then that&#39;s in beta, so there may be a lot of debugging code in there.", "edited": false, "comment_id": 1445178, "creation_date": 1255811834, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Why not? VS debugger is happy to show JITted code in the Disassembly window, although it does not show real addresses or proper names for call targets (grrr!) Also, you could use windbg+SOS. One can even attach a windbg in read-only mode to a process being debugged in VS.", "edited": false, "comment_id": 1446376, "creation_date": 1255845570, "score": 0, "owner": {"display_name": "Anton Tykhyy", "reputation": 13784, "user_id": 77724, "user_type": "registered"}}, {"body": "@Anton: I just happened not to have it open. Will investigate later on.", "edited": false, "comment_id": 1446507, "creation_date": 1255849962, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Re your comment; I also left some feedback with Karen re {Direct Comparisons}, &quot;When the type argument is a nullable type, the comparison will do the obvious thing, treating an instance without a value as null.&quot; - as actually this behaviour isn&#39;t <i>necessarily</i> obvious, especially given the comments about non-nullable structs and the JIT handling.", "edited": false, "comment_id": 1448115, "creation_date": 1255889087, "score": 0, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "@Downvoter: Care to comment why?", "edited": false, "comment_id": 1626491, "creation_date": 1258408871, "score": 7, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "The Linq is not faster than the is-as above, you just have values that unconditionally executes even it is null:  int? x = o as int?; try to move that inside of: if(x.HasValue) and change the if(x.HasValue) to: if(o is int).  Then that is more apple-to-apple comparison. If you will modify as advised, is-as is faster than Linq.  Lest be mistaken, I&#39;m not the downvoter", "edited": false, "comment_id": 2695058, "creation_date": 1271775807, "score": 0, "owner": {"display_name": "Michael Buen", "reputation": 23353, "user_id": 11432, "user_type": "registered", "accept_rate": 95}}, {"body": "@Michael: No, the whole point of using &quot;as&quot; would be to only perform one operation which is dynamic based on the execution-time type. If x has a value then &quot;if (o is int)&quot; will definitely return true - but testing for <code>x.HasValue</code> <i>should</i> be very fast indeed; it&#39;s just fetching a field.", "edited": false, "reply_to_user": {"display_name": "Michael Buen", "reputation": 23353, "user_id": 11432, "user_type": "registered", "accept_rate": 95}, "comment_id": 2696496, "creation_date": 1271785793, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon: I mean, the <b>As and Has</b> code above suffers this kind of performance problem(some operation is unconditionally executed): <code>i = someValue; if (a &gt; 10) i = 7;</code> should be: <code>if (a &gt; 10) i = 7; else i = someValue;</code>, that&#39;s what i mean by apple-to-apple comparison. I think on value types, both <code>as</code> and <code>HasValue</code> are costly operations, they don&#39;t do <code>in-memory-site</code> operations, they have to make a staging variable first for the <code>Has</code> and <code>Value</code> magic to kick. Even <code>Convert.ToInt32(o)</code> is significantly faster than <code>x.Value</code>. I added some more testing on your code, kindly check the code below", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 2699404, "creation_date": 1271814465, "score": 0, "owner": {"display_name": "Michael Buen", "reputation": 23353, "user_id": 11432, "user_type": "registered", "accept_rate": 95}}, {"body": "@Jon: I have another benchmark regarding <code>as</code> and casting (albeit on reference type, if that matters).  I posted a question regarding benchmarking, kindly take a look, thanks :-) <a href=\"http://stackoverflow.com/questions/2680035/how-to-invalidate-cache-when-benchmarking\" title=\"how to invalidate cache when benchmarking\">stackoverflow.com/questions/2680035/&hellip;</a>", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 2699872, "creation_date": 1271822717, "score": 0, "owner": {"display_name": "Michael Buen", "reputation": 23353, "user_id": 11432, "user_type": "registered", "accept_rate": 95}}, {"body": "@Michael: The point is that performing the assignment unconditionally but then making the &quot;if&quot; fast should (IMO) be faster than performing the dynamic type check twice - at least in the case where a significant proportion of the values <i>are</i> integers. Assigning to a local variable should be very quick - it&#39;s not like it&#39;s got to allocate space for a new variable each time. Will look at your answer and other question soon (off to work now).", "edited": false, "reply_to_user": {"display_name": "Michael Buen", "reputation": 23353, "user_id": 11432, "user_type": "registered", "accept_rate": 95}, "comment_id": 2700206, "creation_date": 1271828035, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I placed a bounty on this question to see if maybe someone out there knows the answer to this as I&#39;m very curious, and also if this is still true with the new .Net 4.0 release", "edited": false, "comment_id": 3150824, "creation_date": 1276937755, "score": 0, "owner": {"display_name": "Earlz", "reputation": 22528, "user_id": 69742, "user_type": "registered", "accept_rate": 70}}, {"body": "@Earlz: Yes, it occurs with the released version too.", "edited": false, "reply_to_user": {"display_name": "Earlz", "reputation": 22528, "user_id": 69742, "user_type": "registered", "accept_rate": 70}, "comment_id": 3150869, "creation_date": 1276938592, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Today I learnt you can use <code>as</code> on nullable types. Interesting, as it can&#39;t be used on other value types. Actually, more surprising.", "edited": false, "comment_id": 3151036, "creation_date": 1276942806, "score": 1, "owner": {"display_name": "leppie", "reputation": 75677, "user_id": 15541, "user_type": "registered", "accept_rate": 86}}, {"body": "@Lepp it makes perfect sense for it to not work on value types. Think about it, <code>as</code> attempts to cast to a type and if it fails then it returns null. You can&#39;t set value types to null", "edited": false, "reply_to_user": {"display_name": "leppie", "reputation": 75677, "user_id": 15541, "user_type": "registered", "accept_rate": 86}, "comment_id": 3152863, "creation_date": 1276973638, "score": 3, "owner": {"display_name": "Earlz", "reputation": 22528, "user_id": 69742, "user_type": "registered", "accept_rate": 70}}, {"body": "@Jon: Don&#39;t worry I up voted to compensate for the downvoter :O", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 7377524, "creation_date": 1307744842, "score": 0, "owner": {"display_name": "Joan Venge", "reputation": 45346, "user_id": 51816, "user_type": "registered", "accept_rate": 82}}, {"body": "Just for completeness: The idea, from one of the answers, to use <code>if (o != null &amp;&amp; o.GetType() == typeof(int)) { int x = (int)o; ...</code> is nearly as fast as using <code>is</code>, and still much faster than &quot;<code>as</code> nullable&quot; or the LINQ way. I guess in this way we unbox the <code>int</code> twice. (When a type is sealed, like a struct, there&#39;s not much differece between an <code>is</code> check and a <code>GetType() == something</code> check.)", "edited": false, "comment_id": 15198772, "creation_date": 1342440444, "score": 0, "owner": {"display_name": "Jeppe Stig Nielsen", "reputation": 24141, "user_id": 1336654, "user_type": "registered", "accept_rate": 70}}], "comment_count": 19, "score": 213, "body": "<p>I'm just revising chapter 4 of C# in Depth which deals with nullable types, and I'm adding a section about using the \"as\" operator, which allows you to write:</p>\n\n<pre><code>object o = ...;\nint? x = o as int?;\nif (x.HasValue)\n{\n    ... // Use x.Value in here\n}\n</code></pre>\n\n<p>I thought this was really neat, and that it could improve performance over the C# 1 equivalent, using \"is\" followed by a cast - after all, this way we only need to ask for dynamic type checking once, and then a simple value check.</p>\n\n<p>This appears not to be the case, however. I've included a sample test app below, which basically sums all the integers within an object array - but the array contains a lot of null references and string references as well as boxed integers. The benchmark measures the code you'd have to use in C# 1, the code using the \"as\" operator, and just for kicks a LINQ solution. To my astonishment, the C# 1 code is 20 times faster in this case - and even the LINQ code (which I'd have expected to be slower, given the iterators involved) beats the \"as\" code.</p>\n\n<p>Is the .NET implementation of <code>isinst</code> for nullable types just really slow? Is it the additional <code>unbox.any</code> that causes the problem? Is there another explanation for this? At the moment it feels like I'm going to have to include a warning against using this in performance sensitive situations...</p>\n\n<p>Results:</p>\n\n<blockquote>\n  <p>Cast: 10000000 : 121<br />\n  As: 10000000 : 2211<br />\n  LINQ: 10000000 : 2143  </p>\n</blockquote>\n\n<p>Code:</p>\n\n<pre><code>using System;\nusing System.Diagnostics;\nusing System.Linq;\n\nclass Test\n{\n    const int Size = 30000000;\n\n    static void Main()\n    {\n        object[] values = new object[Size];\n        for (int i = 0; i &lt; Size - 2; i += 3)\n        {\n            values[i] = null;\n            values[i+1] = \"\";\n            values[i+2] = 1;\n        }\n\n        FindSumWithCast(values);\n        FindSumWithAs(values);\n        FindSumWithLinq(values);\n    }\n\n    static void FindSumWithCast(object[] values)\n    {\n        Stopwatch sw = Stopwatch.StartNew();\n        int sum = 0;\n        foreach (object o in values)\n        {\n            if (o is int)\n            {\n                int x = (int) o;\n                sum += x;\n            }\n        }\n        sw.Stop();\n        Console.WriteLine(\"Cast: {0} : {1}\", sum, \n                          (long) sw.ElapsedMilliseconds);\n    }\n\n    static void FindSumWithAs(object[] values)\n    {\n        Stopwatch sw = Stopwatch.StartNew();\n        int sum = 0;\n        foreach (object o in values)\n        {\n            int? x = o as int?;\n            if (x.HasValue)\n            {\n                sum += x.Value;\n            }\n        }\n        sw.Stop();\n        Console.WriteLine(\"As: {0} : {1}\", sum, \n                          (long) sw.ElapsedMilliseconds);\n    }\n\n    static void FindSumWithLinq(object[] values)\n    {\n        Stopwatch sw = Stopwatch.StartNew();\n        int sum = values.OfType&lt;int&gt;().Sum();\n        sw.Stop();\n        Console.WriteLine(\"LINQ: {0} : {1}\", sum, \n                          (long) sw.ElapsedMilliseconds);\n    }\n}\n</code></pre>\n", "is_answered": true, "up_vote_count": 214, "tags": ["c#", "performance", "clr", "nullable", "unboxing"], "reopen_vote_count": 0, "answer_count": 9, "answers": [{"body": "<p>I don't have time to try it, but you may want to have:</p>\n\n<pre><code>foreach (object o in values)\n        {\n            int? x = o as int?;\n</code></pre>\n\n<p>as</p>\n\n<pre><code>int? x;\nforeach (object o in values)\n        {\n            x = o as int?;\n</code></pre>\n\n<p>You are creating a new object each time, which won't completely explain the problem, but may contribute.</p>\n", "answer_id": 1583073, "tags": [], "down_vote_count": 0, "last_activity_date": 1255809591, "comments": [{"body": "I tried but this seems to have little effect...", "edited": false, "comment_id": 1445094, "creation_date": 1255809816, "score": 0, "owner": {"display_name": "Dirk Vollmar - 0xA3", "reputation": 86880, "user_id": 40347, "user_type": "registered", "accept_rate": 100}}, {"body": "No, I ran that and it is marginally slower.", "edited": false, "comment_id": 1445095, "creation_date": 1255809818, "score": 1, "owner": {"display_name": "Henk Holterman", "reputation": 167974, "user_id": 60761, "user_type": "registered", "accept_rate": 91}}, {"body": "Declaring a variable in a different place only affects the generated code significantly when the variable is captured (at which point it affects the actual semantics) in my experience. Note that it&#39;s not creating a new object on the heap, although it&#39;s certainly creating a new instance of <code>int?</code> on the stack using <code>unbox.any</code>. I suspect that&#39;s the issue - my guess is that hand-crafted IL could beat both options here... although it&#39;s also possible that the JIT is optimised to recognise for the is/cast case and only check once.", "edited": false, "comment_id": 1445107, "creation_date": 1255810094, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I was thinking that the cast is probably optimized since it has been around for so long.", "edited": false, "comment_id": 1445123, "creation_date": 1255810666, "score": 0, "owner": {"display_name": "James Black", "reputation": 28717, "user_id": 67566, "user_type": "registered", "accept_rate": 76}}, {"body": "is/cast is an easy target for optimization, it&#39;s such an annoyingly common idiom.", "edited": false, "comment_id": 1445137, "creation_date": 1255811179, "score": 1, "owner": {"display_name": "Anton Tykhyy", "reputation": 13784, "user_id": 77724, "user_type": "registered"}}, {"body": "@James Black: The cast has definitely been optimized, <code>as</code> conversion has been significantly faster (in .NET 1.1 if I remember correctly) as this no longer up-to-date benchmark shows: <a href=\"http://www.codeproject.com/KB/cs/csharpcasts.aspx\" rel=\"nofollow\">codeproject.com/KB/cs/csharpcasts.aspx</a>.", "edited": false, "comment_id": 1445149, "creation_date": 1255811367, "score": 0, "owner": {"display_name": "Dirk Vollmar - 0xA3", "reputation": 86880, "user_id": 40347, "user_type": "registered", "accept_rate": 100}}, {"body": "Local variables are allocated on the stack when the stack frame for the method is created, so where you declare the variable in the method makes no difference at all. (Unless it&#39;s in a closure of course, but that&#39;s not the case here.)", "edited": false, "comment_id": 1445328, "creation_date": 1255815054, "score": 2, "owner": {"display_name": "Guffa", "reputation": 380491, "user_id": 69083, "user_type": "registered"}}, {"body": "The jitter automatically uses the same variable in these cases (when it&#39;s not captured by a lambda or anything). This has been confirmed by Eric Lippert.", "edited": false, "comment_id": 1668945, "creation_date": 1258974199, "score": 0, "owner": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}}], "creation_date": 1255809591, "comment_count": 8, "score": 6, "owner": {"display_name": "James Black", "reputation": 28717, "user_id": 67566, "user_type": "registered", "accept_rate": 76}, "is_accepted": false, "up_vote_count": 6}, {"body": "<p>It seems to me that the <code>isinst</code> is just really slow on nullable types. In method <code>FindSumWithCast</code> I changed</p>\n\n<pre><code>if (o is int)\n</code></pre>\n\n<p>to</p>\n\n<pre><code>if (o is int?)\n</code></pre>\n\n<p>which also significantly slows down execution. The only differenc in IL I can see is that </p>\n\n<pre><code>isinst     [mscorlib]System.Int32\n</code></pre>\n\n<p>gets changed to</p>\n\n<pre><code>isinst     valuetype [mscorlib]System.Nullable`1&lt;int32&gt;\n</code></pre>\n", "answer_id": 1583092, "tags": [], "down_vote_count": 0, "last_activity_date": 1255810202, "comments": [{"body": "It&#39;s more than that; in the &quot;cast&quot; case the <code>isinst</code> is followed by a test for nullity and then <i>conditionally</i> an <code>unbox.any</code>. In the nullable case there&#39;s an <i>unconditional</i> <code>unbox.any</code>.", "edited": false, "comment_id": 1445115, "creation_date": 1255810476, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Yes, turns out <b>both</b> <code>isinst</code> and <code>unbox.any</code> are slower on nullable types.", "edited": false, "comment_id": 1445141, "creation_date": 1255811214, "score": 0, "owner": {"display_name": "Dirk Vollmar - 0xA3", "reputation": 86880, "user_id": 40347, "user_type": "registered", "accept_rate": 100}}, {"body": "@Jon: You can review my answer as for why the cast is needed. (I know this is old, but I just discovered this q and thought I should provide my 2c of what I know about the CLR).", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 8501100, "creation_date": 1313612697, "score": 0, "owner": {"display_name": "Johannes Rudolph", "reputation": 22057, "user_id": 125407, "user_type": "registered", "accept_rate": 97}}], "creation_date": 1255810202, "comment_count": 3, "score": 18, "owner": {"display_name": "Dirk Vollmar - 0xA3", "reputation": 86880, "user_id": 40347, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 18}, {"body": "<p>Interestingly, I passed on feedback about operator support via <code>dynamic</code> being an order-of-magnitude slower for <code>Nullable&lt;T&gt;</code> (similar to <a href=\"http://social.msdn.microsoft.com/Forums/en-US/vs2010ctpvbcs/thread/287db1b9-c135-40bc-a1c5-a8a51efbfc65\">this early test</a>) - I suspect for very similar reasons.</p>\n\n<p>Gotta love <code>Nullable&lt;T&gt;</code>. Another fun one is that even though the JIT spots (and removes) <code>null</code> for non-nullable structs, it borks it for <code>Nullable&lt;T&gt;</code>:</p>\n\n<pre><code>using System;\nusing System.Diagnostics;\nstatic class Program {\n    static void Main() { \n        // JIT\n        TestUnrestricted&lt;int&gt;(1,5);\n        TestUnrestricted&lt;string&gt;(\"abc\",5);\n        TestUnrestricted&lt;int?&gt;(1,5);\n        TestNullable&lt;int&gt;(1, 5);\n\n        const int LOOP = 100000000;\n        Console.WriteLine(TestUnrestricted&lt;int&gt;(1, LOOP));\n        Console.WriteLine(TestUnrestricted&lt;string&gt;(\"abc\", LOOP));\n        Console.WriteLine(TestUnrestricted&lt;int?&gt;(1, LOOP));\n        Console.WriteLine(TestNullable&lt;int&gt;(1, LOOP));\n\n    }\n    static long TestUnrestricted&lt;T&gt;(T x, int loop) {\n        Stopwatch watch = Stopwatch.StartNew();\n        int count = 0;\n        for (int i = 0; i &lt; loop; i++) {\n            if (x != null) count++;\n        }\n        watch.Stop();\n        return watch.ElapsedMilliseconds;\n    }\n    static long TestNullable&lt;T&gt;(T? x, int loop) where T : struct {\n        Stopwatch watch = Stopwatch.StartNew();\n        int count = 0;\n        for (int i = 0; i &lt; loop; i++) {\n            if (x != null) count++;\n        }\n        watch.Stop();\n        return watch.ElapsedMilliseconds;\n    }\n}\n</code></pre>\n", "answer_id": 1583270, "tags": [], "down_vote_count": 0, "last_activity_date": 1255814810, "comments": [{"body": "Yowser. That&#39;s a really painful difference. Eek.", "edited": false, "comment_id": 1445335, "creation_date": 1255815161, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Hence some of the obscure code in MiscUtil/Operator ;-p", "edited": false, "comment_id": 1445342, "creation_date": 1255815361, "score": 0, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "If no other good has come out of all of this, it&#39;s led me to include warnings for both my original code <i>and</i> this :)", "edited": false, "comment_id": 1447081, "creation_date": 1255866746, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I know this is an old question, but could you explain what you mean by &quot;the JIT spots (and removes) <code>null</code> for non-nullable structs&quot;? Do you mean it replaces <code>null</code> with a default value or something during runtime?", "edited": false, "reply_to_user": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}, "comment_id": 6581409, "creation_date": 1303421021, "score": 0, "owner": {"display_name": "Justin Morgan", "reputation": 14971, "user_id": 399649, "user_type": "registered", "accept_rate": 90}}, {"body": "@Justin - a generic method can be used at runtime with any number of permutations of generic-parameters (<code>T</code> etc). The stack etc requirements depend on the args (amount of stack space for a local, etc), so you get one JIT for any unique permutation involving a value type. However, references are all the same size so share a JIT. While doing the per-value-type JIT, it can check for a few obvious scenarios, and <i>tries</i> to excise unreachable code due to things like impossible nulls. It isn&#39;t perfect, note. Also, I&#39;m ignoring AOT for the above.", "edited": false, "reply_to_user": {"display_name": "Justin Morgan", "reputation": 14971, "user_id": 399649, "user_type": "registered", "accept_rate": 90}, "comment_id": 6581536, "creation_date": 1303421544, "score": 1, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "The unrestricted nullable test is still 2.5 orders of magnitude slower, but there&#39;s some optimisation going on when you don&#39;t use the <code>count</code> variable. Adding <code>Console.Write(count.ToString()+&quot; &quot;);</code> after the <code>watch.Stop();</code> in both cases slows the other tests by just under an order of magnitude, but the unrestricted nullable test is not changed. Note there are also changes when you test the cases when <code>null</code> is passed, confirming the original code isn&#39;t really doing the null check and increment for the other tests. <a href=\"http://share.linqpad.net/xhwp8a.linq\" rel=\"nofollow\">Linqpad</a>", "edited": false, "comment_id": 36517585, "creation_date": 1400565680, "score": 0, "owner": {"display_name": "Mark Hurd", "reputation": 5791, "user_id": 256431, "user_type": "registered", "accept_rate": 79}}], "creation_date": 1255814810, "comment_count": 6, "score": 14, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 14}, {"body": "<pre><code>using System;\nusing System.Diagnostics;\nusing System.Linq;\n\nclass Test\n{\n    const int Size = 30000000;\n\n    static void Main()\n    {\n        object[] values = new object[Size];\n        for (int i = 0; i &lt; Size - 2; i += 3)\n        {\n            values[i] = null;\n            values[i + 1] = \"\";\n            values[i + 2] = 1;\n        }\n\n        FindSumWithCast(values);\n        FindSumWithAsAndHas(values);\n        FindSumWithAsAndIs(values);\n\n\n        FindSumWithIsThenAs(values);\n        FindSumWithIsThenConvert(values);\n\n        FindSumWithLinq(values);\n\n\n\n        Console.ReadLine();\n    }\n\n    static void FindSumWithCast(object[] values)\n    {\n        Stopwatch sw = Stopwatch.StartNew();\n        int sum = 0;\n        foreach (object o in values)\n        {\n            if (o is int)\n            {\n                int x = (int)o;\n                sum += x;\n            }\n        }\n        sw.Stop();\n        Console.WriteLine(\"Cast: {0} : {1}\", sum,\n                          (long)sw.ElapsedMilliseconds);\n    }\n\n    static void FindSumWithAsAndHas(object[] values)\n    {\n        Stopwatch sw = Stopwatch.StartNew();\n        int sum = 0;\n        foreach (object o in values)\n        {\n            int? x = o as int?;\n            if (x.HasValue)\n            {\n                sum += x.Value;\n            }\n        }\n        sw.Stop();\n        Console.WriteLine(\"As and Has: {0} : {1}\", sum,\n                          (long)sw.ElapsedMilliseconds);\n    }\n\n\n    static void FindSumWithAsAndIs(object[] values)\n    {\n        Stopwatch sw = Stopwatch.StartNew();\n        int sum = 0;\n        foreach (object o in values)\n        {\n            int? x = o as int?;\n            if (o is int)\n            {\n                sum += x.Value;\n            }\n        }\n        sw.Stop();\n        Console.WriteLine(\"As and Is: {0} : {1}\", sum,\n                          (long)sw.ElapsedMilliseconds);\n    }\n\n\n\n\n\n\n\n    static void FindSumWithIsThenAs(object[] values)\n    {\n        // Apple-to-apple comparison with Cast routine above.\n        // Using the similar steps in Cast routine above,\n        // the AS here cannot be slower than Linq.\n\n\n\n        Stopwatch sw = Stopwatch.StartNew();\n        int sum = 0;\n        foreach (object o in values)\n        {\n\n            if (o is int)\n            {\n                int? x = o as int?;\n                sum += x.Value;\n            }\n        }\n        sw.Stop();\n        Console.WriteLine(\"Is then As: {0} : {1}\", sum,\n                          (long)sw.ElapsedMilliseconds);\n    }\n\n    static void FindSumWithIsThenConvert(object[] values)\n    {\n        Stopwatch sw = Stopwatch.StartNew();\n        int sum = 0;\n        foreach (object o in values)\n        {            \n            if (o is int)\n            {\n                int x = Convert.ToInt32(o);\n                sum += x;\n            }\n        }\n        sw.Stop();\n        Console.WriteLine(\"Is then Convert: {0} : {1}\", sum,\n                          (long)sw.ElapsedMilliseconds);\n    }\n\n\n\n    static void FindSumWithLinq(object[] values)\n    {\n        Stopwatch sw = Stopwatch.StartNew();\n        int sum = values.OfType&lt;int&gt;().Sum();\n        sw.Stop();\n        Console.WriteLine(\"LINQ: {0} : {1}\", sum,\n                          (long)sw.ElapsedMilliseconds);\n    }\n}\n</code></pre>\n\n<p>Outputs:</p>\n\n<pre><code>Cast: 10000000 : 456\nAs and Has: 10000000 : 2103\nAs and Is: 10000000 : 2029\nIs then As: 10000000 : 1376\nIs then Convert: 10000000 : 566\nLINQ: 10000000 : 1811\n</code></pre>\n\n<p><strong>[EDIT: 2010-06-19]</strong></p>\n\n<p>Note: Previous test was done inside VS, configuration debug, using VS2009, using Core i7(company development machine).  </p>\n\n<p>The following was done on my machine using Core 2 Duo, using VS2010</p>\n\n<pre><code>Inside VS, Configuration: Debug\n\nCast: 10000000 : 309\nAs and Has: 10000000 : 3322\nAs and Is: 10000000 : 3249\nIs then As: 10000000 : 1926\nIs then Convert: 10000000 : 410\nLINQ: 10000000 : 2018\n\n\n\n\nOutside VS, Configuration: Debug\n\nCast: 10000000 : 303\nAs and Has: 10000000 : 3314\nAs and Is: 10000000 : 3230\nIs then As: 10000000 : 1942\nIs then Convert: 10000000 : 418\nLINQ: 10000000 : 1944\n\n\n\n\nInside VS, Configuration: Release\n\nCast: 10000000 : 305\nAs and Has: 10000000 : 3327\nAs and Is: 10000000 : 3265\nIs then As: 10000000 : 1942\nIs then Convert: 10000000 : 414\nLINQ: 10000000 : 1932\n\n\n\n\nOutside VS, Configuration: Release\n\nCast: 10000000 : 301\nAs and Has: 10000000 : 3274\nAs and Is: 10000000 : 3240\nIs then As: 10000000 : 1904\nIs then Convert: 10000000 : 414\nLINQ: 10000000 : 1936\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 2679594, "down_vote_count": 0, "last_activity_date": 1276942619, "comments": [{"body": "Which framework version are you using, out of interest? The results on my netbook (using .NET 4RC) are even more dramatic - the versions using As are <i>much</i> worse than your results. Maybe they&#39;ve improved it for .NET 4 RTM? I still think it could be faster...", "edited": false, "comment_id": 2700351, "creation_date": 1271829989, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I&#39;m using .NET 3.5 Framework", "edited": false, "comment_id": 2700368, "creation_date": 1271830215, "score": 0, "owner": {"display_name": "Michael Buen", "reputation": 23353, "user_id": 11432, "user_type": "registered", "accept_rate": 95}}, {"body": "@Michael: Were you running an unoptimised build, or running in the debugger?", "edited": false, "reply_to_user": {"display_name": "Michael Buen", "reputation": 23353, "user_id": 11432, "user_type": "registered", "accept_rate": 95}, "comment_id": 3150871, "creation_date": 1276938654, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon: unoptimized build, under debugger", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 3150966, "creation_date": 1276941123, "score": 0, "owner": {"display_name": "Michael Buen", "reputation": 23353, "user_id": 11432, "user_type": "registered", "accept_rate": 95}}, {"body": "@Michael: Right - I tend to view performance results under a debugger as largely irrelevant :)", "edited": false, "reply_to_user": {"display_name": "Michael Buen", "reputation": 23353, "user_id": 11432, "user_type": "registered", "accept_rate": 95}, "comment_id": 3150968, "creation_date": 1276941186, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon: If by under debugger, meaning inside of VS; yes the previous benchmark was done under debugger.  I benchmark again, inside of VS and outside of it, and compiled as debug and compiled as release.  Check the edit", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 3151033, "creation_date": 1276942757, "score": 0, "owner": {"display_name": "Michael Buen", "reputation": 23353, "user_id": 11432, "user_type": "registered", "accept_rate": 95}}], "creation_date": 1271809695, "comment_count": 6, "score": 4, "owner": {"display_name": "Michael Buen", "reputation": 23353, "user_id": 11432, "user_type": "registered", "accept_rate": 95}, "last_editor": {"display_name": "Michael Buen", "reputation": 23353, "user_id": 11432, "user_type": "registered", "accept_rate": 95}, "last_edit_date": 1276942619, "up_vote_count": 4}, {"body": "<p>I tried the exact type check construct</p>\n\n<p><code>typeof(int) == item.GetType()</code>, which performs as fast as the <code>item is int</code> version, and always returns the number (emphasis: even if you wrote a <code>Nullable&lt;int&gt;</code> to the array, you would need to use <code>typeof(int)</code>). You also need an additional <code>null != item</code> check here.</p>\n\n<p>However</p>\n\n<p><code>typeof(int?) == item.GetType()</code> stays fast (in contrast to <code>item is int?</code>), but always returns false.</p>\n\n<p>The typeof-construct is in my eyes the fastest way for <em>exact</em> type checking, as it uses the RuntimeTypeHandle. Since the exact types in this case don't match with nullable, my guess is, <code>is/as</code> have to do additional heavylifting here on ensuring that it is in fact an instance of a Nullable type.</p>\n\n<p>And honestly: what does your <code>is Nullable&lt;xxx&gt; plus HasValue</code> buy you? Nothing. You can always go directly to the underlying (value) type (in this case). You either get the value or \"no, not an instance of the type you were asking for\". Even if you wrote <code>(int?)null</code> to the array, the type check will return false.</p>\n", "answer_id": 3075097, "tags": [], "down_vote_count": 0, "last_activity_date": 1276941681, "comments": [{"body": "Interesting... the idea of using the &quot;as&quot; + HasValue (not <i>is</i> plus HasValue, note) is that it&#39;s only performing the type check <i>once</i> instead of twice. It&#39;s doing the &quot;check and unbox&quot; in a single step. That feels like it <i>should</i> be faster... but it clearly isn&#39;t. I&#39;m not sure what you mean by the last sentence, but there&#39;s no such thing as a boxed <code>int?</code> - if you box an <code>int?</code> value it ends up as a boxed int or a <code>null</code> reference.", "edited": false, "comment_id": 3151030, "creation_date": 1276942635, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1276941681, "comment_count": 1, "score": 5, "owner": {"display_name": "dalo", "reputation": 373, "user_id": 287135, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 5}, {"body": "<p>This is the result of FindSumWithAsAndHas above: <img src=\"http://www.freeimagehosting.net/uploads/9e3c0bfb75.png\" alt=\"alt text\"></p>\n\n<p>This is the result of FindSumWithCast: <img src=\"http://www.freeimagehosting.net/uploads/ce8a5a3934.png\" alt=\"alt text\"></p>\n\n<p>Findings:</p>\n\n<ul>\n<li><p>Using <code>as</code>, it test first if an object is an instance of Int32; under the hood it is using <code>isinst Int32</code> (which is similar to hand-written code: if (o is int) ). And using <code>as</code>, it also unconditionally unbox the object.  And it's a real performance-killer to call a property(it's still a function under the hood), IL_0027</p></li>\n<li><p>Using cast, you test first if object is an <code>int</code> <code>if (o is int)</code>; under the hood this is using <code>isinst Int32</code>.  If it is an instance of int, then you can safely unbox the value, IL_002D</p></li>\n</ul>\n\n<p>Simply put, this is the pseudo-code of using <code>as</code> approach:</p>\n\n<pre><code>int? x;\n\n(x.HasValue, x.Value) = (o isinst Int32, o unbox Int32)\n\nif (x.HasValue)\n    sum += x.Value;    \n</code></pre>\n\n<p>And this is the pseudo-code of using cast approach:</p>\n\n<pre><code>if (o isinst Int32)\n    sum += (o unbox Int32)\n</code></pre>\n\n<p>So the cast (<code>(int)a[i]</code>, well the syntax looks like a cast, but it's actually unboxing, cast and unboxing share the same syntax, next time I'll be pedantic with the right terminology) approach is really faster, you only needed to unbox a value when an object is decidedly an <code>int</code>.  The same thing can't be said to using an <code>as</code> approach.</p>\n", "is_accepted": false, "tags": [], "answer_id": 3075741, "down_vote_count": 0, "last_activity_date": 1311470070, "creation_date": 1276956270, "comment_count": 0, "score": 10, "owner": {"display_name": "Michael Buen", "reputation": 23353, "user_id": 11432, "user_type": "registered", "accept_rate": 95}, "last_editor": {"display_name": "Michael Buen", "reputation": 23353, "user_id": 11432, "user_type": "registered", "accept_rate": 95}, "last_edit_date": 1311470070, "up_vote_count": 10}, {"body": "<p>Clearly the machine code the JIT compiler can generate for the first case is much more efficient.  One rule that really helps there is that an object can only be unboxed to a variable that has the same type as the boxed value.  That allows the JIT compiler to generate very efficient code, no value conversions have to be considered.</p>\n\n<p>The <em>is</em> operator test is easy, just check if the object isn't null and is of the expected type, takes but a few machine code instructions.  The cast is also easy, the JIT compiler knows the location of the value bits in the object and uses them directly.  No copying or conversion occurs, all machine code is inline and takes but about a dozen instructions.  This needed to be really efficient back in .NET 1.0 when boxing was common.</p>\n\n<p>Casting to int? takes a lot more work.  The value representation of the boxed integer is not compatible with the memory layout of <code>Nullable&lt;int&gt;</code>.  A conversion is required and the code is tricky due to possible boxed enum types.  The JIT compiler generates a call to a CLR helper function named JIT_Unbox_Nullable to get the job done.  This is a general purpose function for any value type, lots of code there to check types.  And the value is copied.  Hard to estimate the cost since this code is locked up inside mscorwks.dll, but hundreds of machine code instructions is likely.</p>\n\n<p>The Linq OfType() extension method also uses the <em>is</em> operator and the cast.  This is however a cast to a generic type.  The JIT compiler generates a call to a helper function, JIT_Unbox() that can perform a cast to an arbitrary value type.  I don't have a great explanation why it is as slow as the cast to <code>Nullable&lt;int&gt;</code>, given that less work ought to be necessary.  I suspect that ngen.exe might cause trouble here.</p>\n", "is_accepted": true, "tags": [], "answer_id": 3076525, "down_vote_count": 0, "last_activity_date": 1277035593, "comments": [{"body": "Okay, I&#39;m convinced. I guess I&#39;m used to thinking of &quot;is&quot; as potentially expensive because of the possibilities of walking up an inheritance hierarchy - but in the case of a value type, there&#39;s no possibility of a hierarchy, so it can be a simple bitwise comparison. I still think the JIT code for the nullable case could be optimised by the JIT a lot more heavily than it is though.", "edited": false, "comment_id": 3152736, "creation_date": 1276971688, "score": 10, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "OT: I&#39;ve only just seen your profile; I didn&#39;t realise SO had absorbed &quot;nobugz&quot;. A belated welcome, from a fellow MSDN escapee.", "edited": false, "comment_id": 3153262, "creation_date": 1276980851, "score": 6, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}], "awarded_bounty_users": [{"display_name": "Earlz", "reputation": 22528, "user_id": 69742, "user_type": "registered", "accept_rate": 70}], "awarded_bounty_amount": 100, "comment_count": 2, "score": 138, "owner": {"display_name": "Hans Passant", "reputation": 569404, "user_id": 17034, "user_type": "registered"}, "last_editor": {"display_name": "Hans Passant", "reputation": 569404, "user_id": 17034, "user_type": "registered"}, "last_edit_date": 1277035593, "creation_date": 1276968517, "up_vote_count": 138}, {"community_owned_date": 1277129852, "body": "<p>Profiling further:</p>\n\n<pre><code>using System;\nusing System.Diagnostics;\n\nclass Program\n{\n    const int Size = 30000000;\n\n    static void Main(string[] args)\n    {\n        object[] values = new object[Size];\n        for (int i = 0; i &lt; Size - 2; i += 3)\n        {\n            values[i] = null;\n            values[i + 1] = \"\";\n            values[i + 2] = 1;\n        }\n\n        FindSumWithIsThenCast(values);\n\n        FindSumWithAsThenHasThenValue(values);\n        FindSumWithAsThenHasThenCast(values);\n\n        FindSumWithManualAs(values);\n        FindSumWithAsThenManualHasThenValue(values);\n\n\n\n        Console.ReadLine();\n    }\n\n    static void FindSumWithIsThenCast(object[] values)\n    {\n        Stopwatch sw = Stopwatch.StartNew();\n        int sum = 0;\n        foreach (object o in values)\n        {\n            if (o is int)\n            {\n                int x = (int)o;\n                sum += x;\n            }\n        }\n        sw.Stop();\n        Console.WriteLine(\"Is then Cast: {0} : {1}\", sum,\n                            (long)sw.ElapsedMilliseconds);\n    }\n\n    static void FindSumWithAsThenHasThenValue(object[] values)\n    {\n        Stopwatch sw = Stopwatch.StartNew();\n        int sum = 0;\n        foreach (object o in values)\n        {\n            int? x = o as int?;\n\n            if (x.HasValue)\n            {\n                sum += x.Value;\n            }\n        }\n        sw.Stop();\n        Console.WriteLine(\"As then Has then Value: {0} : {1}\", sum,\n                            (long)sw.ElapsedMilliseconds);\n    }\n\n    static void FindSumWithAsThenHasThenCast(object[] values)\n    {\n        Stopwatch sw = Stopwatch.StartNew();\n        int sum = 0;\n        foreach (object o in values)\n        {\n            int? x = o as int?;\n\n            if (x.HasValue)\n            {\n                sum += (int)o;\n            }\n        }\n        sw.Stop();\n        Console.WriteLine(\"As then Has then Cast: {0} : {1}\", sum,\n                            (long)sw.ElapsedMilliseconds);\n    }\n\n    static void FindSumWithManualAs(object[] values)\n    {\n        Stopwatch sw = Stopwatch.StartNew();\n        int sum = 0;\n        foreach (object o in values)\n        {\n            bool hasValue = o is int;\n            int x = hasValue ? (int)o : 0;\n\n            if (hasValue)\n            {\n                sum += x;\n            }\n        }\n        sw.Stop();\n        Console.WriteLine(\"Manual As: {0} : {1}\", sum,\n                            (long)sw.ElapsedMilliseconds);\n    }\n\n    static void FindSumWithAsThenManualHasThenValue(object[] values)\n    {\n        Stopwatch sw = Stopwatch.StartNew();\n        int sum = 0;\n        foreach (object o in values)\n        {\n            int? x = o as int?;\n\n            if (o is int)\n            {\n                sum += x.Value;\n            }\n        }\n        sw.Stop();\n        Console.WriteLine(\"As then Manual Has then Value: {0} : {1}\", sum,\n                            (long)sw.ElapsedMilliseconds);\n    }\n\n}\n</code></pre>\n\n<p>Output: </p>\n\n<pre><code>Is then Cast: 10000000 : 303\nAs then Has then Value: 10000000 : 3524\nAs then Has then Cast: 10000000 : 3272\nManual As: 10000000 : 395\nAs then Manual Has then Value: 10000000 : 3282\n</code></pre>\n\n<p>What can we infer from these figures?    </p>\n\n<ul>\n<li>First, is-then-cast approach is significantly faster than <strong>as</strong> approach. 303 vs 3524</li>\n<li>Second, .Value is marginally slower than casting. 3524 vs 3272</li>\n<li>Third, .HasValue is marginally slower than using manual has(i.e. using <strong>is</strong>). 3524 vs 3282</li>\n<li>Fourth, doing an apple-to-apple comparison(i.e. both assigning of simulated HasValue and converting simulated Value happens together) between <strong>simulated as</strong> and <strong>real as</strong> approach, we can see <strong>simulated as</strong> is still significantly faster than <strong>real as</strong>. 395 vs 3524</li>\n<li>Lastly, based on first and fourth conclusion, there's something wrong with <strong>as</strong>\nimplementation ^_^</li>\n</ul>\n", "answer_id": 3085422, "tags": [], "down_vote_count": 0, "last_activity_date": 1277129852, "creation_date": 1277129852, "comment_count": 0, "score": 5, "owner": {"display_name": "Michael Buen", "reputation": 23353, "user_id": 11432, "user_type": "registered", "accept_rate": 95}, "is_accepted": false, "up_vote_count": 5}, {"body": "<p>This originally started out as a Comment to Hans Passants excellent answer, but it got too long so I want to add a few bits here:</p>\n\n<p>First, the C# as operator will emit an isinst IL instruction (so does the is operator). (Side note: the other interesting instruction is castclass, emited when you do a direct cast and the compiler knows that runtime checking cannot be ommited)..</p>\n\n<p>Here is what it does (ECMA 335 Partition III, 4.6):</p>\n\n<blockquote>\n  <p>Format: isinst <em>typeTok</em></p>\n  \n  <ul>\n  <li>typeTok is a metadata token (a typeref, typedef or typespec),\n  indicating the desired class. If </li>\n  <li>typeTok is a non-nullable value type or a generic parameter type it\n  is interpreted as \u2015boxed\u2016 typeTok. If </li>\n  <li>typeTok is a nullable type, Nullable, it is interpreted as\n  \u2015boxed\u2016 T.</li>\n  </ul>\n</blockquote>\n\n<p>Most importantly:</p>\n\n<blockquote>\n  <p>If the actual type (not the verifier tracked type) of obj is\n  verifier-assignable-to the type typeTok then isinst succeeds and obj\n  (as result) is returned unchanged while verification tracks its type\n  as typeTok. <strong>Unlike coercions (\u00a71.6) and conversions (\u00a73.27), isinst\n  never changes the actual type of an object and preserves object\n  identity (see Partition I).</strong></p>\n</blockquote>\n\n<p>So, the performance killer isn't <code>isinst</code> in this case, but the additional <code>unbox.any</code>. This wasn't clear from Hans Answer, as he looked at the JITed code only. In general, the C# compiler will emit an <code>unbox.any</code> after a <code>isinst T?</code> (but will omit it in case you do <code>isinst T</code>, when T is a reference type).</p>\n\n<p>Why does it do that? <code>isinst T?</code> never has the effect that would have been obvious, i.e. you get back a <code>T?</code>. Instead, all these instructions ensure is that you have a <code>\"boxed T\"</code> that can be unboxed to <code>T?</code>. To get an actual <code>T?</code>, we still need to unbox our <code>\"boxed T\"</code> to <code>T?</code>, which is why the compiler emits an unbox.any after isinst. If you think about it, this makes sense because the \"box format\" for <code>T?</code> is just a <code>\"boxed T\"</code> and making castclass and isinst perform the unbox would be inconsistent.</p>\n\n<p>Backing up Hans' finding with some information from the Standard, here it goes:</p>\n\n<p>(ECMA 335 Partition III, 4.33): unbox.any</p>\n\n<blockquote>\n  <p>When applied to the boxed form of a value type, the unbox.any\n  instruction extracts the value contained within obj (of type O). (It\n  is equivalent to unbox followed by ldobj.) When applied to a reference\n  type, the unbox.any instruction has the same effect as castclass\n  typeTok.</p>\n</blockquote>\n\n<p>(ECMA 335 Partition III, 4.32): unbox</p>\n\n<blockquote>\n  <p>[Note: Typically, unbox simply computes the address of the value type\n  that is already present inside of the boxed object. This approach is\n  not possible when unboxing nullable value types. Because Nullable\n  values are converted to boxed Ts during the box operation, an\n  implementation often must manufacture a new Nullable on the heap\n  and compute the address to the newly allocated object. end note]</p>\n</blockquote>\n", "answer_id": 7063626, "tags": [], "down_vote_count": 0, "last_activity_date": 1313401841, "creation_date": 1313401841, "comment_count": 0, "score": 12, "owner": {"display_name": "Johannes Rudolph", "reputation": 22057, "user_id": 125407, "user_type": "registered", "accept_rate": 97}, "is_accepted": false, "up_vote_count": 12}], "last_editor": {"display_name": "Jon Seigel", "reputation": 9119, "user_id": 164901, "user_type": "registered", "accept_rate": 90}, "down_vote_count": 1, "close_vote_count": 0, "question_id": 1583050}, {"body": "<p>Background: Over the next month, I'll be giving three talks about or at least including <code>LINQ</code> in the context of <code>C#</code>. I'd like to know which topics are worth giving a fair amount of attention to, based on what people may find hard to understand, or what they may have a mistaken impression of. I won't be specifically talking about <code>LINQ</code> to <code>SQL</code> or the Entity Framework except as examples of how queries can be executed remotely using expression trees (and usually <code>IQueryable</code>).</p>\n\n<p>So, what have you found hard about <code>LINQ</code>? What have you seen in terms of misunderstandings? Examples might be any of the following, but please don't limit yourself!</p>\n\n<ul>\n<li>How the <code>C#</code> compiler treats query expressions</li>\n<li>Lambda expressions</li>\n<li>Expression trees</li>\n<li>Extension methods</li>\n<li>Anonymous types</li>\n<li><code>IQueryable</code></li>\n<li>Deferred vs immediate execution</li>\n<li>Streaming vs buffered execution (e.g. OrderBy is deferred but buffered)</li>\n<li>Implicitly typed local variables</li>\n<li>Reading complex generic signatures (e.g. <a href=\"http://msdn.microsoft.com/en-us/library/bb549267.aspx\" rel=\"nofollow\">Enumerable.Join</a>)</li>\n</ul>\n", "last_activity_date": 1312447801, "accepted_answer_id": 215562, "creation_date": 1224362860, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1246110626, "favorite_count": 243, "closed_date": 1313864857, "view_count": 41965, "delete_vote_count": 0, "closed_reason": "not constructive", "title": "What's the hardest or most misunderstood aspect of LINQ?", "comments": [{"body": "I would be interested to know when you are going to do these talks, and if there is any way to view them online", "edited": false, "comment_id": 86751, "creation_date": 1224447878, "score": 3, "owner": {"display_name": "Mark Heath", "reputation": 26083, "user_id": 7532, "user_type": "registered", "accept_rate": 87}}, {"body": "First talk: Copenhagen, October 30th. Hopefully this will be taped. (Whole day!) Second talk: London, Nov 19th in the evening, London .NET Users Group, probably on Push LINQ. Third talk: Reading, Nov 22nd, Developer Developer Day, Implementing LINQ to Objects in 60 minutes.", "edited": false, "comment_id": 86761, "creation_date": 1224448483, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "cool, I might see if I can get along to the DDD day in Reading", "edited": false, "comment_id": 86779, "creation_date": 1224449466, "score": 0, "owner": {"display_name": "Mark Heath", "reputation": 26083, "user_id": 7532, "user_type": "registered", "accept_rate": 87}}, {"body": "Downvoters: please add an explanatory comment.", "edited": false, "comment_id": 688178, "creation_date": 1242710079, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon, Sorry, but I need to close this.", "edited": false, "comment_id": 8552393, "creation_date": 1313864849, "score": 2, "owner": {"display_name": "Tim Post", "reputation": 23392, "user_id": 50049, "user_type": "moderator", "accept_rate": 96}}, {"body": "@Tim: Fair enough - it wasn&#39;t getting any more answers anyway. Personally I think it <i>did</i> end up being constructive, mind you - I certainly found it useful to see what people find tricky. I probably wouldn&#39;t have asked it now though...", "edited": false, "reply_to_user": {"display_name": "Tim Post", "reputation": 23392, "user_id": 50049, "user_type": "moderator", "accept_rate": 96}, "comment_id": 8552451, "creation_date": 1313865231, "score": 3, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon - I can change it to &#39;too localized&#39; if you like. I have an enumerated list to pick from, I picked the one that I thought fit the best. I&#39;m sure this question will have value for others, it&#39;s just not on topic for the Stack Overflow that emerged almost three years after you asked this.", "edited": false, "comment_id": 8553116, "creation_date": 1313869211, "score": 0, "owner": {"display_name": "Tim Post", "reputation": 23392, "user_id": 50049, "user_type": "moderator", "accept_rate": 96}}, {"body": "@Tim: Exactly. Possibly worth migrating to Programmers instead? It&#39;s about programmers as people... but also about a specific technology, which makes it a tricky one. I&#39;m really not that picky though, to be honest.", "edited": false, "reply_to_user": {"display_name": "Tim Post", "reputation": 23392, "user_id": 50049, "user_type": "moderator", "accept_rate": 96}, "comment_id": 8553187, "creation_date": 1313869642, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon This has quite a few answers (one accepted), it&#39;s nearly three years old and migrating it to another site would not be very constructive. I&#39;m not quite sure how the system could be improved based on this experience. Or rather, I can&#39;t articulate any kind of suggested improvement.", "edited": false, "comment_id": 8553352, "creation_date": 1313870767, "score": 0, "owner": {"display_name": "Tim Post", "reputation": 23392, "user_id": 50049, "user_type": "moderator", "accept_rate": 96}}, {"body": "@Tim: Maybe one to ask for opinions on in meta? Or straight to Jeff? I don&#39;t know how common it is.", "edited": false, "reply_to_user": {"display_name": "Tim Post", "reputation": 23392, "user_id": 50049, "user_type": "moderator", "accept_rate": 96}, "comment_id": 8553473, "creation_date": 1313871481, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon these are corner cases that really should be addressed, I suggest meta. Remember, Jeff <i>hates</i> email. Touching a question like this induces a sense of trepidation for all of us [moderators], so a consensus would be extremely useful.", "edited": false, "comment_id": 8553555, "creation_date": 1313871913, "score": 0, "owner": {"display_name": "Tim Post", "reputation": 23392, "user_id": 50049, "user_type": "moderator", "accept_rate": 96}}], "comment_count": 11, "score": 283, "community_owned_date": 1244117557, "is_answered": true, "notice": {"body": "<p>This question exists because it has historical significance, but <b>it is not considered a good, on-topic question for this site</b>,   so please do not use it as evidence that you can ask similar questions here.  This question and its answers are frozen and cannot be changed.  More info: <a href=\"http://stackoverflow.com/help\">help center</a>.</p>", "owner_user_id": 102937, "creation_date": 1332265763}, "tags": ["c#", "linq", "c#-3.0"], "reopen_vote_count": 0, "answer_count": 42, "answers": [{"community_owned_date": 1244117557, "body": "<p>Lazy Loading.</p>\n", "answer_id": 215560, "tags": [], "down_vote_count": 0, "last_activity_date": 1224363886, "comments": [{"body": "similar to <a href=\"http://stackoverflow.com/questions/215548/whats-the-hardest-or-most-misunderstood-aspect-of-linq/215562#215562\" title=\"whats the hardest or most misunderstood aspect of linq\">stackoverflow.com/questions/215548/&hellip;</a>", "edited": false, "comment_id": 9348487, "creation_date": 1318003046, "score": 0, "owner": {"display_name": "Pratik", "reputation": 4408, "user_id": 368472, "user_type": "registered", "accept_rate": 97}}], "creation_date": 1224363886, "comment_count": 1, "score": 2, "owner": {"display_name": "Ryan Eastabrook", "reputation": 1508, "user_id": 105, "user_type": "registered", "accept_rate": 54}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1244117557, "body": "<p>Delayed execution</p>\n", "answer_id": 215562, "tags": [], "down_vote_count": 3, "last_activity_date": 1224363980, "comments": [{"body": "Righto - this is clearly the favourite amongst readers, which is the most important thing for this question. I&#39;ll add &quot;buffering vs streaming&quot; into the mix as well, as that&#39;s closely related - and often isn&#39;t discussed in as much detail as I&#39;d like to see in books.", "edited": false, "comment_id": 101205, "creation_date": 1224964294, "score": 12, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Really? I had it&#39;s lazy-loaded nature pointed out to me so many times while learning Linq, it was never an issue for me.", "edited": false, "comment_id": 203264, "creation_date": 1229530745, "score": 10, "owner": {"display_name": "Adam Lassek", "reputation": 21890, "user_id": 1249, "user_type": "registered", "accept_rate": 96}}, {"body": "@ALassek, it really depends on where you learn LINQ from.  I&#39;ve presented for user groups where not a one knew than it was lazy evaluated.", "edited": false, "comment_id": 204362, "creation_date": 1229557440, "score": 0, "owner": {"display_name": "JaredPar", "reputation": 389992, "user_id": 23283, "user_type": "registered", "accept_rate": 100}}, {"body": "Agree with ALassek. The MSDN documentation clearly states the lazy evaluation nature of LINQ. Maybe the real problem is the lazy programming nature of the developers... =)", "edited": false, "comment_id": 206431, "creation_date": 1229625043, "score": 26, "owner": {"display_name": "Seiti", "reputation": 1098, "user_id": 27959, "user_type": "registered", "accept_rate": 100}}, {"body": "... especially when you realize that it applies to LINQ to objects and not just LINQ 2 SQL - when you see 10 web method calls to retrieve a list of items when you&#39;re already enumerating through that same list of items and you thought the list was already evaluated", "edited": false, "comment_id": 362049, "creation_date": 1234675577, "score": 4, "owner": {"display_name": "Simon_Weaver", "reputation": 39886, "user_id": 16940, "user_type": "registered", "accept_rate": 62}}, {"body": "This should be deferred execution, right? Anders has mentioned this many times in his videos about LINQ in MSDN&#39;s Channel 9.", "edited": false, "comment_id": 417283, "creation_date": 1236053643, "score": 1, "owner": {"display_name": "Eriawan Kusumawardhono", "reputation": 1738, "user_id": 2671158, "user_type": "registered", "accept_rate": 75}}, {"body": "@eriawan, delayed or deferred works :)", "edited": false, "comment_id": 417329, "creation_date": 1236054829, "score": 0, "owner": {"display_name": "JaredPar", "reputation": 389992, "user_id": 23283, "user_type": "registered", "accept_rate": 100}}, {"body": "Knowing what the yield statement is and how it works is IMHO critical for a thorough understanding of LINQ.", "edited": false, "comment_id": 430904, "creation_date": 1236325430, "score": 5, "owner": {"display_name": "peSHIr", "reputation": 4303, "user_id": 50846, "user_type": "registered", "accept_rate": 90}}, {"body": "i have colleagues that, even being told a million times or after reading book in abd book out still don&#39;t get the lazy execution behavior of LINQ.", "edited": false, "comment_id": 4840861, "creation_date": 1292282986, "score": 0, "owner": {"display_name": "Pauli \u00d8ster\u00f8", "reputation": 5134, "user_id": 11709, "user_type": "registered", "accept_rate": 86}}, {"body": "It seems to be a common misconception that IEnumerable is a lazy list, i.e. only evaluated once..", "edited": false, "comment_id": 6036346, "creation_date": 1300397513, "score": 0, "owner": {"display_name": "Robert Jeppesen", "reputation": 5248, "user_id": 9436, "user_type": "registered", "accept_rate": 80}}], "creation_date": 1224363980, "comment_count": 10, "score": 272, "owner": {"display_name": "JaredPar", "reputation": 389992, "user_id": 23283, "user_type": "registered", "accept_rate": 100}, "is_accepted": true, "up_vote_count": 275}, {"community_owned_date": 1244117557, "body": "<p>That there is more than just <code>LINQ</code> to <code>SQL</code> and the features are more than just a <code>SQL</code> parser embedded in the language.</p>\n", "is_accepted": false, "tags": [], "answer_id": 215572, "down_vote_count": 2, "last_activity_date": 1246110722, "comments": [{"body": "I&#39;m sick of everyone thinking that :/", "edited": false, "comment_id": 86029, "creation_date": 1224378589, "score": 6, "owner": {"display_name": "TraumaPony", "reputation": 6920, "user_id": 18658, "user_type": "registered", "accept_rate": 53}}, {"body": "Not everyone does!  I still don&#39;t know what LINQ to SQL is, and I use LINQ all the damn time.", "edited": false, "comment_id": 86658, "creation_date": 1224442533, "score": 40, "owner": {"display_name": "Robert Rossney", "reputation": 50122, "user_id": 19403, "user_type": "registered", "accept_rate": 59}}, {"body": "I get so annoyed when I try and explain something using LINQ and the other person just looks at me and says &quot;ohhh I don&#39;t use LINQ for anything like that, only SQL&quot; :(", "edited": false, "comment_id": 105669, "creation_date": 1225198489, "score": 2, "owner": {"display_name": "Nathan W", "reputation": 24480, "user_id": 6335, "user_type": "registered", "accept_rate": 63}}, {"body": "Agreed, many people don&#39;t seem to understand that LINQ is a general purpose tool.", "edited": false, "comment_id": 434226, "creation_date": 1236400879, "score": 13, "owner": {"display_name": "Matt Olenik", "reputation": 3088, "user_id": 57776, "user_type": "registered", "accept_rate": 89}}], "creation_date": 1224364337, "comment_count": 4, "score": 104, "owner": {"display_name": "smaclell", "reputation": 3304, "user_id": 22914, "user_type": "registered", "accept_rate": 100}, "last_editor": {"display_name": "oxbow_lakes", "reputation": 79448, "user_id": 16853, "user_type": "registered", "accept_rate": 92}, "last_edit_date": 1246110722, "up_vote_count": 106}, {"community_owned_date": 1244117557, "body": "<p>I think the fact that a <code>Lambda</code> expression can resolve to both an expression tree and an anonymous delegate, so you can pass the same declarative <code>lambda</code> expression to both <code>IEnumerable&lt;T&gt;</code> extension methods and <code>IQueryable&lt;T&gt;</code> extension methods.</p>\n", "is_accepted": false, "tags": [], "answer_id": 215580, "down_vote_count": 2, "last_activity_date": 1246110678, "comments": [{"body": "Agreed. I&#39;m a veteran and I just realized this implicit casting was taking place as I started writing my own QueryProvider", "edited": false, "comment_id": 740216, "creation_date": 1243787468, "score": 2, "owner": {"display_name": "TheSoftwareJedi", "reputation": 18157, "user_id": 18941, "user_type": "registered", "accept_rate": 74}}], "creation_date": 1224364700, "comment_count": 1, "score": 55, "owner": {"display_name": "Tim Jarvis", "reputation": 12585, "user_id": 10387, "user_type": "registered", "accept_rate": 91}, "last_editor": {"display_name": "oxbow_lakes", "reputation": 79448, "user_id": 16853, "user_type": "registered", "accept_rate": 92}, "last_edit_date": 1246110678, "up_vote_count": 57}, {"community_owned_date": 1244117557, "body": "<p>I think you should give more attention to the most commonly used features of LINQ in detail - Lambda expressions and Anonymous types, rather than wasting time on \"hard to understand\" stuff that is rarely used in real world programs.</p>\n", "answer_id": 215677, "tags": [], "down_vote_count": 0, "last_activity_date": 1224370263, "comments": [{"body": "I agree with the principle, but in reality almost all of the hard-to-understand bits <i>are</i> used frequently in real world programs - just without people really understanding them.", "edited": false, "comment_id": 86197, "creation_date": 1224398249, "score": 4, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1224370263, "comment_count": 1, "score": 1, "owner": {"display_name": "user21582", "reputation": 155, "user_id": 21582, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1244117557, "body": "<p>I still have trouble with the \"let\" command (which I've never found a use for) and SelectMany (which I've used, but I'm not sure I've done it right)</p>\n", "answer_id": 215707, "tags": [], "down_vote_count": 1, "last_activity_date": 1224372382, "comments": [{"body": "Any time you want to introduce a variable you would use a let statement. Think of a traditional loop where you are introducing variables within it and giving each variable a name to help the readability of code. Sometimes it is also nice where you have a let statement evaluating a function result, which you can then select and order by on without having to evaluate the result twice.", "edited": false, "comment_id": 2360529, "creation_date": 1267741431, "score": 2, "owner": {"display_name": "Rob Packwood", "reputation": 1365, "user_id": 171485, "user_type": "registered", "accept_rate": 100}}, {"body": "&#39;let&#39; allows you to do composite types. Handy stuff.", "edited": false, "comment_id": 5014634, "creation_date": 1293801625, "score": 0, "owner": {"display_name": "Phill", "reputation": 9107, "user_id": 456813, "user_type": "registered", "accept_rate": 74}}], "creation_date": 1224372382, "comment_count": 2, "score": 19, "owner": {"display_name": "James Curran", "reputation": 64499, "user_id": 12725, "user_type": "registered", "accept_rate": 75}, "is_accepted": false, "up_vote_count": 20}, {"community_owned_date": 1244117557, "body": "<p>In LINQ to SQL I constantly see people not understanding the DataContext, how it can be used and how it should be used. Too many people don't see the DataContext for what it is, a Unit of Work object, not a persistant object.</p>\n\n<p>I've seen plenty of times where people are trying to singleton a DataContext/ session it/ etc rather than making a new time for each operation.</p>\n\n<p>And then there's disposing of the DataContext before the IQueryable has been evaluated but that's more of a prople with people not understanding IQueryable than the DataContext.</p>\n\n<p>The other concept I see a lot of confusion with is Query Syntax vs Expression Syntax. I will use which ever is the easiest at that point, often sticking with Expression Syntax. A lot of people still don't realise that they will produce the same thing in the end, Query is compiled into Expression after all.</p>\n", "answer_id": 215757, "tags": [], "down_vote_count": 2, "last_activity_date": 1224374738, "comments": [{"body": "Warning: Unit of work can be a small program with the data context as a singleton.", "edited": false, "comment_id": 166412, "creation_date": 1227968166, "score": 2, "owner": {"display_name": "graffic", "reputation": 592, "user_id": 15987, "user_type": "registered", "accept_rate": 86}}, {"body": "You should not use the DataContext in a singleton, it&#39;s not thread safe.", "edited": false, "comment_id": 167070, "creation_date": 1228020992, "score": 15, "owner": {"display_name": "Aaron Powell", "reputation": 16980, "user_id": 11388, "user_type": "registered", "accept_rate": 82}}, {"body": "@Slace, not all programs are multitheaded, so it is OK to have the DataContext as a singleton in a lot of &quot;desktop&quot; software", "edited": false, "comment_id": 1548458, "creation_date": 1257351407, "score": 3, "owner": {"display_name": "Ian Ringrose", "reputation": 22210, "user_id": 57159, "user_type": "registered", "accept_rate": 88}}, {"body": "I got bitten by this (using DataContext as a singleton) when I did my first LINQ to SQL project. I don&#39;t think that the documentation and books make this obvious enough. Actually, I think the name could be improved, but I&#39;m not sure how.", "edited": false, "comment_id": 2615530, "creation_date": 1270796391, "score": 2, "owner": {"display_name": "Roger Lipscombe", "reputation": 39946, "user_id": 8446, "user_type": "registered", "accept_rate": 69}}, {"body": "It took reading ScottGu&#39;s artivles on Linq multiple times to get this pounded in my head.", "edited": false, "comment_id": 3111268, "creation_date": 1276548578, "score": 1, "owner": {"display_name": "Evan Plaice", "reputation": 6736, "user_id": 290340, "user_type": "registered", "accept_rate": 75}}], "creation_date": 1224374738, "comment_count": 5, "score": 40, "owner": {"display_name": "Aaron Powell", "reputation": 16980, "user_id": 11388, "user_type": "registered", "accept_rate": 82}, "is_accepted": false, "up_vote_count": 42}, {"community_owned_date": 1244117557, "body": "<p>Understanding when the abstraction among Linq providers leaks. Some things work on objects but not SQL (e.g., .TakeWhile). Some methods can get translated into SQL (ToUpper) while others can't. Some techniques are more efficient in objects where others are more effective in SQL (different join methods).</p>\n", "answer_id": 215802, "tags": [], "down_vote_count": 1, "last_activity_date": 1224377605, "comments": [{"body": "This is a very good point.  It doesn&#39;t help that Intellisense will show you ALL of them and it will usually even compile.  Then you blow up at runtime.  I hope VS 2010 does a better job of showing relevant extension methods.", "edited": false, "comment_id": 1150405, "creation_date": 1250988101, "score": 1, "owner": {"display_name": "Jason Short", "reputation": 4222, "user_id": 19974, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1224377605, "comment_count": 1, "score": 19, "owner": {"display_name": "denis phillips", "reputation": 8059, "user_id": 748, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 20}, {"community_owned_date": 1244117557, "body": "<p>I for one would sure like to know if I need to know what expression trees are, and why.</p>\n", "answer_id": 216073, "tags": [], "down_vote_count": 1, "last_activity_date": 1224395566, "comments": [{"body": "I think it&#39;s worth knowing what expression trees are and why they exist, but not the details of how to build them yourself. (They&#39;re a pain to build by hand, but the compiler will do a great job when converting a lambda expression.)", "edited": false, "comment_id": 86198, "creation_date": 1224398344, "score": 6, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Actually, I was thinking about doing a few blog entries on expression trees (since I do &quot;get&quot; them). I find manipulating expression trees very useful...", "edited": false, "comment_id": 86267, "creation_date": 1224410617, "score": 3, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "However, I don&#39;t think they be helpful for Jon&#39;s talk(s) ;-p", "edited": false, "comment_id": 86268, "creation_date": 1224410663, "score": 0, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}, {"body": "I&#39;ll need to mention them briefly, but your blog entries would certainly be welcome :)", "edited": false, "comment_id": 86593, "creation_date": 1224437794, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I just worry that expression trees are going to be like the yield statement:  something that turned out to be incredibly valuable despite the fact that I didn&#39;t understand what it was for at first.", "edited": false, "comment_id": 86655, "creation_date": 1224442469, "score": 3, "owner": {"display_name": "Robert Rossney", "reputation": 50122, "user_id": 19403, "user_type": "registered", "accept_rate": 59}}, {"body": "Marc Gravell I&#39;d love to read your blog entries on the subject. Looking forward to it", "edited": false, "comment_id": 86942, "creation_date": 1224457562, "score": 1, "owner": {"display_name": "Alexandre Brisebois", "reputation": 3368, "user_id": 18619, "user_type": "registered", "accept_rate": 88}}, {"body": "I have added a post to this chain with a link...", "edited": false, "comment_id": 87418, "creation_date": 1224493755, "score": 0, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}}], "creation_date": 1224395566, "comment_count": 7, "score": 26, "owner": {"display_name": "Robert Rossney", "reputation": 50122, "user_id": 19403, "user_type": "registered", "accept_rate": 59}, "is_accepted": false, "up_vote_count": 27}, {"community_owned_date": 1244117557, "body": "<p>I'm fairly new to LINQ. Here's the things I stumbled over in my first attempt</p>\n\n<ul>\n<li>Combining several queries into one</li>\n<li>Effectively debugging LINQ queries in Visual Studio.</li>\n</ul>\n", "answer_id": 216725, "tags": [], "down_vote_count": 1, "last_activity_date": 1224438464, "comments": [{"body": "Debugging LINQ is a topic all by itself, and an important one.  I think the greatest weakness of LINQ is that it lets you write blocks of arbitrarily complex logic that you can&#39;t step through.", "edited": false, "comment_id": 86660, "creation_date": 1224442692, "score": 21, "owner": {"display_name": "Robert Rossney", "reputation": 50122, "user_id": 19403, "user_type": "registered", "accept_rate": 59}}, {"body": "these may be a good place to use LINQ pad", "edited": false, "comment_id": 893506, "creation_date": 1246647284, "score": 3, "owner": {"display_name": "Maslow", "reputation": 8620, "user_id": 57883, "user_type": "registered", "accept_rate": 72}}, {"body": "Agree heartily; that&#39;s why I wrote <a href=\"http://www.simple-talk.com/dotnet/.net-framework/linq-secrets-revealed-chaining-and-debugging/\" rel=\"nofollow\">LINQ Secrets Revealed: Chaining and Debugging</a>, just published on Simple-Talk.com, that you may find of assistance.", "edited": false, "comment_id": 4810300, "creation_date": 1291998793, "score": 2, "owner": {"display_name": "Michael Sorens", "reputation": 12865, "user_id": 115690, "user_type": "registered", "accept_rate": 77}}, {"body": "Yes, LinqPad is a great secondary tool for developing your LINQ queries in. Especially when starting out and you&#39;re new to the conventions/patterns.", "edited": false, "comment_id": 4821621, "creation_date": 1292109267, "score": 0, "owner": {"display_name": "Buffalo", "reputation": 343, "user_id": 73863, "user_type": "registered", "accept_rate": 83}}], "creation_date": 1224438464, "comment_count": 4, "score": 20, "owner": {"display_name": "Mark Heath", "reputation": 26083, "user_id": 7532, "user_type": "registered", "accept_rate": 87}, "is_accepted": false, "up_vote_count": 21}, {"community_owned_date": 1244117557, "body": "<p>OK, due to demand, I've written up some of the Expression stuff. I'm not 100% happy with how blogger and LiveWriter have conspired to format it, but it'll do for now...</p>\n\n<p>Anyway, here goes... I'd love any feedback, especially if there are areas where people want more information.</p>\n\n<p><a href=\"http://marcgravell.blogspot.com/2008/10/express-yourself.html\" rel=\"nofollow\">Here it is</a>, like it or hate it...</p>\n", "answer_id": 217835, "tags": [], "down_vote_count": 1, "last_activity_date": 1224493728, "creation_date": 1224493728, "comment_count": 0, "score": 11, "owner": {"display_name": "Marc Gravell", "reputation": 554903, "user_id": 23354, "user_type": "moderator", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 12}, {"community_owned_date": 1244117557, "body": "<p>Couple of things.</p>\n\n<ol>\n<li>People thinking of Linq as Linq to SQL.</li>\n<li>Some people think that they can start replacing all foreach/logic with Linq queries without considering this performance implications.</li>\n</ol>\n", "answer_id": 224652, "tags": [], "down_vote_count": 1, "last_activity_date": 1224656595, "creation_date": 1224656595, "comment_count": 0, "score": 12, "owner": {"display_name": "Krishna Kumar", "reputation": 1887, "user_id": 26788, "user_type": "registered", "accept_rate": 46}, "is_accepted": false, "up_vote_count": 13}, {"community_owned_date": 1244117557, "body": "<p><strong>Which is faster, inline Linq-to-Sql or Linq-to-Sql using Tsql Sprocs</strong></p>\n\n<p>... and are there cases where it's better to use server-side (Sproc) or client-side (inline Linq) queries.</p>\n", "is_accepted": false, "tags": [], "answer_id": 242915, "down_vote_count": 0, "last_activity_date": 1225192598, "creation_date": 1225192141, "comment_count": 0, "score": 1, "owner": {"display_name": "user31939", "reputation": 155, "user_id": 31939, "user_type": "registered"}, "last_editor": {"display_name": "user31939", "reputation": 155, "user_id": 31939, "user_type": "registered"}, "last_edit_date": 1225192598, "up_vote_count": 1}, {"community_owned_date": 1244117557, "body": "<p><strong>What does var represent when a query is executed?</strong></p>\n\n<p>Is it <code>iQueryable</code>, <code>iSingleResult</code>, <code>iMultipleResult</code>, or does it change based on the the implementation. There's some speculation about using (what appears to be) dynamic-typing vs the standard static-typing in C#.</p>\n", "is_accepted": false, "tags": [], "answer_id": 242932, "down_vote_count": 0, "last_activity_date": 1246110798, "comments": [{"body": "AFAIK var always is the concrete class in question (even if it&#39;s an anonymous type) so it&#39;s <i>never</i> IQueryable, ISingleResult or anything beginning with &#39;I&#39; (concrete classes that begin with &#39;I&#39; need not apply).", "edited": false, "comment_id": 184593, "creation_date": 1228807535, "score": 0, "owner": {"display_name": "Motti", "reputation": 41465, "user_id": 3848, "user_type": "registered", "accept_rate": 96}}], "creation_date": 1225192518, "comment_count": 1, "score": 5, "owner": {"display_name": "user31939", "reputation": 155, "user_id": 31939, "user_type": "registered"}, "last_editor": {"display_name": "oxbow_lakes", "reputation": 79448, "user_id": 16853, "user_type": "registered", "accept_rate": 92}, "last_edit_date": 1246110798, "up_vote_count": 5}, {"community_owned_date": 1244117557, "body": "<p>Comprehension syntax 'magic'. How does comprehension syntax gets translated into method calls and what method calls are chosen.</p>\n\n<p>How does, for example:</p>\n\n<pre><code>from a in b\nfrom c in d\nwhere a &gt; c\nselect new { a, c }\n</code></pre>\n\n<p>gets translated into method calls.</p>\n", "answer_id": 261931, "tags": [], "down_vote_count": 0, "last_activity_date": 1225806232, "comments": [{"body": "I did a little bit of this in the talk, but mostly just &quot;this is the <i>sort</i> of thing the compiler does&quot; - including &quot;it doesn&#39;t know that the translation will call extension methods etc&quot;. The details are pretty complicated, of course...", "edited": false, "comment_id": 119128, "creation_date": 1225812396, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "(I did include a bit on transparent identifiers though, which is relevant to your example.)", "edited": false, "comment_id": 119129, "creation_date": 1225812472, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I always find it easier to understand if I try to rethink it as a method chain:   b.SelectMany(a =&gt; d, (a,c) =&gt; new { a=a, c=c }).Where(thing =&gt; thing.a &gt; thing.c).Select(otherthing =&gt; new {a=otherthing.a, c=otherthing.c} )", "edited": false, "comment_id": 2341525, "creation_date": 1267558197, "score": 0, "owner": {"display_name": "JerKimball", "reputation": 10383, "user_id": 48692, "user_type": "registered"}}], "creation_date": 1225806232, "comment_count": 3, "score": 1, "owner": {"display_name": "Pop Catalin", "reputation": 29192, "user_id": 4685, "user_type": "registered", "accept_rate": 93}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1244117557, "body": "<p><code>group by</code> still makes my head spin.</p>\n\n<p>Any confusion about <a href=\"http://blogs.msdn.com/charlie/archive/2007/12/09/deferred-execution.aspx\" rel=\"nofollow\">deferred execution</a> should be able to be resolved by stepping through some simple LINQ-based code and playing around in the watch window.</p>\n", "answer_id": 321349, "tags": [], "down_vote_count": 0, "last_activity_date": 1227717512, "comments": [{"body": "I&#39;ve found that implementing quite a bit of LINQ to Objects for fun really helps :) But yes, it is a bit confusing - certainly if I haven&#39;t done any LINQ for a while I have to go back to the signatures. Likewise &quot;join&quot; vs &quot;join into&quot; often gets me...", "edited": false, "comment_id": 161852, "creation_date": 1227719840, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1227717512, "comment_count": 1, "score": 4, "owner": {"display_name": "Richard Everett", "reputation": 21569, "user_id": 39709, "user_type": "registered", "accept_rate": 90}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1244117557, "body": "<p>For LINQ2SQL : Getting your head around some of the generated SQL and writing LINQ queries that translate to good (fast) SQL. This is part of the larger issue of knowing how to balance the declarative nature of LINQ queries with the realism that they need to execute fast in a known environment (SQL Server).</p>\n\n<p>You can get a completely different SQL generated query by changing a tiny tiny thing in the LINQ code. Can be especially dangerous if you are creating an expression tree based on conditional statements (i.e. adding optional filtering criteria).</p>\n", "answer_id": 351940, "tags": [], "down_vote_count": 0, "last_activity_date": 1228803319, "creation_date": 1228803319, "comment_count": 0, "score": 1, "owner": {"display_name": "Simon_Weaver", "reputation": 39886, "user_id": 16940, "user_type": "registered", "accept_rate": 62}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1244117557, "body": "<p>Something that I didn't originally realise was that the LINQ syntax <em>doesn't</em> require <code>IEnumerable&lt;T&gt;</code> or <code>IQueryable&lt;T&gt;</code> to work, LINQ is just about pattern matching.</p>\n\n<p><img src=\"http://bartdesmet.info/images_wlw/QIsIQueryabletheRightChoiceforMe_13478/image_thumb_3.png\" alt=\"alt text\" /></p>\n\n<p><a href=\"http://community.bartdesmet.net/blogs/bart/archive/2008/04/27/q-is-iqueryable-the-right-choice-for-me.aspx\" rel=\"nofollow\">Here is the answer</a> (no, I <strong>didn't</strong> write that blog, Bart De Smet did, and he's one of the best bloggers on LINQ I've found).</p>\n", "answer_id": 351985, "tags": [], "down_vote_count": 1, "last_activity_date": 1228805178, "comments": [{"body": "You might find this blog post interesting too: <a href=\"http://msmvps.com/blogs/jon_skeet/archive/2008/02/29/odd-query-expressions.aspx\" rel=\"nofollow\">msmvps.com/blogs/jon_skeet/archive/2008/02/29/&hellip;</a>", "edited": false, "comment_id": 184665, "creation_date": 1228813368, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Nice post Jon (I do subscribe to your blog, only recently though).", "edited": false, "comment_id": 184692, "creation_date": 1228814946, "score": 0, "owner": {"display_name": "Aaron Powell", "reputation": 16980, "user_id": 11388, "user_type": "registered", "accept_rate": 82}}], "creation_date": 1228805178, "comment_count": 2, "score": 20, "owner": {"display_name": "Aaron Powell", "reputation": 16980, "user_id": 11388, "user_type": "registered", "accept_rate": 82}, "is_accepted": false, "up_vote_count": 21}, {"community_owned_date": 1244117557, "body": "<p>I find it a bit disappointing that the query expression syntax only supports a subset of the LINQ functionality, so you cannot avoid chaining extension methods every now and then. E.g. the <code>Distinct</code> method cannot be called using the query expression syntax. To use the <code>Distinct</code> method you need to call the extension method. On the other hand the query expression syntax is very handy in many cases, so you don't want to skip that either.  </p>\n\n<p>A talk on LINQ could include some practical guidelines for when to prefer one syntax over the other and how to mix them. </p>\n", "answer_id": 354031, "tags": [], "down_vote_count": 0, "last_activity_date": 1228852912, "comments": [{"body": "Personally I&#39;m glad that the query expression syntax doesn&#39;t include very many operators. The dot notation is fine when you need to use it, and this balance keeps C# still a <i>reasonably</i> small language. The query expression part of the spec is nice and short - I wouldn&#39;t want a really long section.", "edited": false, "comment_id": 211179, "creation_date": 1229801951, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1228852912, "comment_count": 1, "score": 1, "owner": {"display_name": "Brian Rasmussen", "reputation": 76194, "user_id": 38206, "user_type": "registered", "accept_rate": 80}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1244117557, "body": "<p>As mentioned, lazy loading and deferred execution</p>\n\n<p>How LINQ to Objects and LINQ to XML (IEnumerable) are different from LINQ to SQL(IQueryable)</p>\n\n<p><em>HOW</em> to build a Data Access Layer, Business Layer, and Presentation Layer with LINQ in all layers....and a good example.</p>\n", "answer_id": 421260, "tags": [], "down_vote_count": 0, "last_activity_date": 1231350147, "comments": [{"body": "The first two I can do. I wouldn&#39;t like to try doing the third yet in a &quot;this is the right way to do it&quot; sense...", "edited": false, "comment_id": 245232, "creation_date": 1231350746, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "+1, until you pointed it out, I hadn&#39;t realized that LINQ-to-Objects and LINQ-to-XML were IEnumerable as opposed to LINQ-to-SQL as IQueryable, but it makes sense. Thanks!", "edited": false, "comment_id": 2869093, "creation_date": 1273766251, "score": 0, "owner": {"display_name": "Pretzel", "reputation": 2657, "user_id": 21244, "user_type": "registered", "accept_rate": 89}}], "creation_date": 1231350147, "comment_count": 2, "score": 2, "owner": {"display_name": "Ash Machine", "reputation": 2884, "user_id": 35615, "user_type": "registered", "accept_rate": 86}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1244117557, "body": "<p>I don't know if it qualifies as misunderstood - but for me, simply unknown.</p>\n\n<p>I was pleased to learn about DataLoadOptions and how I can control which tables are joined when I make a particular query.</p>\n\n<p>See here for more info: <a href=\"http://msdn.microsoft.com/en-us/library/system.data.linq.dataloadoptions.aspx\" rel=\"nofollow\">MSDN: DataLoadOptions</a></p>\n", "answer_id": 446863, "tags": [], "down_vote_count": 0, "last_activity_date": 1232028646, "creation_date": 1232028646, "comment_count": 0, "score": 6, "owner": {"display_name": "Martin", "reputation": 762, "user_id": 54144, "user_type": "registered", "accept_rate": 87}, "is_accepted": false, "up_vote_count": 6}, {"community_owned_date": 1244117557, "body": "<p>I think a great thing to cover in LINQ is how you can get yourself in trouble performance-wise. For instance, using LINQ's count as a loop condition is really, really not smart.</p>\n", "answer_id": 495859, "tags": [], "down_vote_count": 0, "last_activity_date": 1233328587, "creation_date": 1233328587, "comment_count": 0, "score": 9, "owner": {"display_name": "Steve", "reputation": 5408, "user_id": 48552, "user_type": "registered", "accept_rate": 77}, "is_accepted": false, "up_vote_count": 9}, {"community_owned_date": 1244117557, "body": "<p>I would say the most misunderstood (or should that be non-understood?) aspect of LINQ is <strong>IQueryable</strong> and <strong>custom LINQ providers</strong>.</p>\n\n<p>I have been using LINQ for a while now and am completely comfortable in the IEnumerable world, and can solve most problems with LINQ.</p>\n\n<p>But when I started to look at and read about IQueryable, and Expressions and custom linq providers it made my head spin. Take a look at how LINQ to SQL works if you want to see some pretty complex logic.</p>\n\n<p>I look forward to understanding that aspect of LINQ...</p>\n", "answer_id": 552001, "tags": [], "down_vote_count": 0, "last_activity_date": 1234747836, "creation_date": 1234747836, "comment_count": 0, "score": 6, "owner": {"display_name": "Schneider", "reputation": 4393, "user_id": 61714, "user_type": "registered", "accept_rate": 50}, "is_accepted": false, "up_vote_count": 6}, {"community_owned_date": 1244117557, "body": "<p>This is of course not 'the most hardest' but just something to add to the list :</p>\n\n<pre><code>ThenBy() extension method\n</code></pre>\n\n<p>Without looking at its implementation I'm initially puzzled as to how it works. Everyone understands just fine how comma separated sort fields work in SQL - but on face value I'm skeptical that ThenBy is going to do what I really want it to do. How can it 'know' what the previous sort field was - it seems like it ought to.</p>\n\n<p>I'm off to research it now...</p>\n", "answer_id": 617900, "tags": [], "down_vote_count": 0, "last_activity_date": 1236322656, "comments": [{"body": "The trick is that ThenBy is an extension method on IOrderedEnumerable (or IOrderedQueryable) rather than just IEnumerable/IQueryable. You can download my (very naive!) implementation from my talks page: <a href=\"http://csharpindepth.com/Talks.aspx\" rel=\"nofollow\">csharpindepth.com/Talks.aspx</a> - see &quot;LINQ to Objects in 60 minutes&quot;", "edited": false, "comment_id": 430845, "creation_date": 1236323402, "score": 4, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1236322656, "comment_count": 1, "score": 1, "owner": {"display_name": "Simon_Weaver", "reputation": 39886, "user_id": 16940, "user_type": "registered", "accept_rate": 62}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1244117557, "body": "<p>As most people said, i think the most misunderstood part is assuming LINQ is a just a replacement for T-SQL. \nMy manager who <em>considers</em> himself as a TSQL guru would not let us use LINQ in our project and even hates MS for releasing such a thing!!!</p>\n", "is_accepted": false, "tags": [], "answer_id": 729760, "down_vote_count": 0, "last_activity_date": 1239194720, "comments": [{"body": "Too many people use it as a replacement for TSQL. Most of them have never heard of an execution plan.", "edited": false, "comment_id": 725913, "creation_date": 1243458234, "score": 0, "owner": {"display_name": "erikkallen", "reputation": 19451, "user_id": 47161, "user_type": "registered", "accept_rate": 66}}, {"body": "+1 because I agree with your manager, at least insofar as allowing LINQ to SQL in any project.  LINQ to Objects is another matter entirely.", "edited": false, "comment_id": 4068351, "creation_date": 1285856802, "score": 0, "owner": {"display_name": "NotMe", "reputation": 64021, "user_id": 2424, "user_type": "registered", "accept_rate": 97}}], "creation_date": 1239194218, "comment_count": 2, "score": 6, "owner": {"display_name": "HashName", "reputation": 434, "user_id": 28773, "user_type": "registered", "accept_rate": 86}, "last_editor": {"display_name": "HashName", "reputation": 434, "user_id": 28773, "user_type": "registered", "accept_rate": 86}, "last_edit_date": 1239194720, "up_vote_count": 6}, {"community_owned_date": 1244117557, "body": "<p>I think <em>the</em> misunderstood part of LINQ is that it is a <em>language extension</em>, not a database extension or construct.</p>\n\n<p><code>LINQ</code> is so much more than <code>LINQ to SQL</code>.</p>\n\n<p>Now that most of us have used <code>LINQ</code> on collections, we will NEVER go back!</p>\n\n<p><code>LINQ</code> is the single most significant feature to .NET since Generics in 2.0, and Anonymous Types in 3.0.</p>\n\n<p>And now that we have Lambda's, I can't wait for parallel programming!</p>\n", "is_accepted": false, "tags": [], "answer_id": 758067, "down_vote_count": 2, "last_activity_date": 1281892456, "comments": [{"body": "I&#39;d even call it more significant than anonymous types, and possibly even more than generics.", "edited": false, "comment_id": 5364148, "creation_date": 1296251933, "score": 0, "owner": {"display_name": "Justin Morgan", "reputation": 14971, "user_id": 399649, "user_type": "registered", "accept_rate": 90}}], "creation_date": 1239916184, "comment_count": 1, "score": 34, "owner": {"display_name": "Chris", "reputation": 3468, "user_id": 36269, "user_type": "registered", "accept_rate": 68}, "last_editor": {"display_name": "Donal Fellows", "reputation": 68563, "user_id": 301832, "user_type": "registered", "accept_rate": 60}, "last_edit_date": 1281892456, "up_vote_count": 36}, {"community_owned_date": 1244117557, "body": "<p>I know the deferred execution concept should be beaten into me by now, but this example really helped me get a practical grasp of it:</p>\n\n<pre><code>static void Linq_Deferred_Execution_Demo()\n{\n    List&lt;String&gt; items = new List&lt;string&gt; { \"Bob\", \"Alice\", \"Trent\" };\n\n    var results = from s in items select s;\n\n    Console.WriteLine(\"Before add:\");\n    foreach (var result in results)\n    {\n        Console.WriteLine(result);\n    }\n\n    items.Add(\"Mallory\");\n\n    //\n    //  Enumerating the results again will return the new item, even\n    //  though we did not re-assign the Linq expression to it!\n    //\n\n    Console.WriteLine(\"\\nAfter add:\");\n    foreach (var result in results)\n    {\n        Console.WriteLine(result);\n    }\n}\n</code></pre>\n\n<p>The above code returns the following:</p>\n\n<pre><code>Before add:\nBob\nAlice\nTrent\n\nAfter add:\nBob\nAlice\nTrent\nMallory\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 917259, "down_vote_count": 2, "last_activity_date": 1243456897, "comments": [{"body": "thats a good example!", "edited": false, "comment_id": 4840868, "creation_date": 1292283059, "score": 0, "owner": {"display_name": "Pauli \u00d8ster\u00f8", "reputation": 5134, "user_id": 11709, "user_type": "registered", "accept_rate": 86}}, {"body": "<a href=\"http://blogs.msdn.com/b/charlie/archive/2007/12/09/deferred-execution.aspx\" rel=\"nofollow\">blogs.msdn.com/b/charlie/archive/2007/12/09/&hellip;</a> &lt;-- I think this is the best blog to explain it in my opinion. (far out 2007, can&#39;t believe it&#39;s been around that long already)", "edited": false, "comment_id": 5014606, "creation_date": 1293801358, "score": 2, "owner": {"display_name": "Phill", "reputation": 9107, "user_id": 456813, "user_type": "registered", "accept_rate": 74}}, {"body": "really nice example, thanks!", "edited": false, "comment_id": 5542218, "creation_date": 1297401875, "score": 1, "owner": {"display_name": "Dienekes", "reputation": 916, "user_id": 382305, "user_type": "registered", "accept_rate": 81}}], "creation_date": 1243448394, "comment_count": 3, "score": 126, "owner": {"display_name": "DSO", "reputation": 6340, "user_id": 38087, "user_type": "registered", "accept_rate": 72}, "last_editor": {"display_name": "DSO", "reputation": 6340, "user_id": 38087, "user_type": "registered", "accept_rate": 72}, "last_edit_date": 1243456897, "up_vote_count": 128}, {"community_owned_date": 1244117557, "body": "<p><a href=\"http://en.wikipedia.org/wiki/Big_O_notation\" rel=\"nofollow\">Big O notation</a>. LINQ makes it incredibly easy to write O(n^4) algorithms without realizing it, if you don't know what you're doing.</p>\n", "is_accepted": false, "tags": [], "answer_id": 918017, "down_vote_count": 3, "last_activity_date": 1311167245, "comments": [{"body": "Can anyone clarify on this?", "edited": false, "comment_id": 1563752, "creation_date": 1257528354, "score": 4, "owner": {"display_name": "R. Martinho Fernandes", "reputation": 115192, "user_id": 46642, "user_type": "registered", "accept_rate": 90}}, {"body": "How about an example?", "edited": false, "comment_id": 1577309, "creation_date": 1257778442, "score": 16, "owner": {"display_name": "hughdbrown", "reputation": 18860, "user_id": 10293, "user_type": "registered", "accept_rate": 88}}, {"body": "As far as an example, maybe he means the fact that it is very easy to have a Select clause contain many Sum() operators with each of them causing another pass over the entire recordset.", "edited": false, "comment_id": 2360516, "creation_date": 1267741320, "score": 4, "owner": {"display_name": "Rob Packwood", "reputation": 1365, "user_id": 171485, "user_type": "registered", "accept_rate": 100}}, {"body": "In fact it might even be worth going through what big O notation is and why it&#39;s important, as well as some examples of inefficient resulting queries. I think that&#39;s what the original poster was suggesting, but I thought I&#39;d mention it anyways.  -- EDIT: just realised that this post was 1.5 years old :-)", "edited": false, "comment_id": 2875871, "creation_date": 1273844464, "score": 1, "owner": {"display_name": "zcrar70", "reputation": 1636, "user_id": 59384, "user_type": "registered"}}, {"body": "That wouldn&#39;t be O(n^x), that&#39;d be O(xn), which is just O(n).", "edited": false, "comment_id": 4527237, "creation_date": 1289857174, "score": 7, "owner": {"display_name": "Malfist", "reputation": 12030, "user_id": 12243, "user_type": "registered", "accept_rate": 88}}, {"body": "Trying to do a join without the join operator will result in O(n^x): from i1 in range1 from i2 in range2 from i3 in range3 from i4 in range4 where i1 == i2 &amp;&amp; i3 == i4 select new { i1, i2, i3, i4}. And I&#39;ve actually seen this written before. It works, but very slowly.", "edited": false, "comment_id": 6736577, "creation_date": 1304363896, "score": 3, "owner": {"display_name": "Mark", "reputation": 9800, "user_id": 190371, "user_type": "registered", "accept_rate": 73}}], "creation_date": 1243458470, "comment_count": 6, "score": 86, "owner": {"display_name": "erikkallen", "reputation": 19451, "user_id": 47161, "user_type": "registered", "accept_rate": 66}, "last_editor": {"display_name": "Benj", "reputation": 14220, "user_id": 193128, "user_type": "registered", "accept_rate": 93}, "last_edit_date": 1311167245, "up_vote_count": 89}, {"community_owned_date": 1244117557, "body": "<p>Some of the error messages, especially from LINQ to SQL can be pretty confusing. <em>grin</em></p>\n\n<p>I've been bitten by the deferred execution a couple of times like everyone else. I think the most confusing thing for me has been the SQL Server Query Provider and what you can and can't do with it.</p>\n\n<p>I'm still amazed by the fact you can't do a Sum() on a decimal/money column that's sometimes empty. Using DefaultIfEmpty() just won't work. :(</p>\n", "answer_id": 950140, "tags": [], "down_vote_count": 0, "last_activity_date": 1244117557, "comments": [{"body": "Shold be prette easy to slap a Where on that query to make sum work", "edited": false, "comment_id": 1437972, "creation_date": 1255681854, "score": 1, "owner": {"display_name": "Esben Skov Pedersen", "reputation": 2322, "user_id": 170196, "user_type": "registered", "accept_rate": 84}}], "creation_date": 1244117557, "comment_count": 1, "score": 10, "owner": {"display_name": "Per Erik Stendahl", "reputation": 707, "user_id": 93674, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 10}, {"community_owned_date": 1245376850, "body": "<p>Something i bet almost on one knows: you can use inline ifs in a linq query. Something like this:</p>\n\n<pre><code>var result = from foo in bars where (\n    ((foo.baz != null) ? foo.baz : false) &amp;&amp;\n    foo.blah == \"this\")\n    select foo;\n</code></pre>\n\n<p>I would suppose you can insert lambdas as well although i haven't tried.</p>\n", "answer_id": 1016042, "tags": [], "down_vote_count": 3, "last_activity_date": 1245376850, "comments": [{"body": "That&#39;s just a conditional expression - why <i>wouldn&#39;t</i> you be able to use that?", "edited": false, "comment_id": 825918, "creation_date": 1245396210, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I was of the (probably mistaken) impression that that is like a regular if: you wouldn&#39;t see any imbedding of regular ifs like that now would you? or i could be wrong...", "edited": false, "comment_id": 826293, "creation_date": 1245404044, "score": 0, "owner": {"display_name": "RCIX", "reputation": 14170, "user_id": 117069, "user_type": "registered", "accept_rate": 92}}, {"body": "If is a statement and the conditional operator is an expression. They are different forms of the same concept of branching. In this case, though, you could do &quot;foo.baz ?? false&quot; and use the null coalescing operator :-)", "edited": false, "comment_id": 1027599, "creation_date": 1248924170, "score": 3, "owner": {"display_name": "Bryan Watts", "reputation": 26037, "user_id": 37815, "user_type": "registered", "accept_rate": 100}}, {"body": "I think more people know the ternary operator than the opposite..", "edited": false, "comment_id": 1920279, "creation_date": 1262630801, "score": 0, "owner": {"display_name": "devoured elysium", "reputation": 23535, "user_id": 130758, "user_type": "registered", "accept_rate": 78}}, {"body": "Conditional expressions resulting in boolean values can be reduced to boolean or/and expressions, so <code>(foo.baz != null) ? foo.baz : false</code> is equivalent to <code>(foo.baz != null) &amp;&amp; foo.baz</code>. I think this can be applied to any ternary expression that could be passed as a <code>where</code> condition. So that&#39;s not all that surprising, IMHO", "edited": false, "comment_id": 5454356, "creation_date": 1296837843, "score": 0, "owner": {"display_name": "Justin Morgan", "reputation": 14971, "user_id": 399649, "user_type": "registered", "accept_rate": 90}}], "creation_date": 1245376850, "comment_count": 5, "score": -1, "owner": {"display_name": "RCIX", "reputation": 14170, "user_id": 117069, "user_type": "registered", "accept_rate": 92}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1252997767, "body": "<h1>Compiled Queries</h1>\n\n<p>The fact that you can't chain <code>IQueryable</code> because they are method calls (while <em>still</em> nothing else but SQL translateable!) and that it is almost impossible to work around it is mindboggling and creates a huge violation of DRY. I need my <code>IQueryable</code>'s for ad-hoc in which I don't have compiled queries (I only have compiled queries for the heavy scenarios), but in compiled queries I can't use them and instead need to write regular query syntax again. Now I'm doing the same subqueries in 2 places, need to remember to update both if something changes, and so forth. A nightmare.</p>\n", "answer_id": 1425548, "tags": [], "down_vote_count": 0, "last_activity_date": 1252997767, "comments": [{"body": "would give a +10 if I could!", "edited": false, "comment_id": 5976233, "creation_date": 1300113000, "score": 0, "owner": {"display_name": "zvolkov", "reputation": 11034, "user_id": 76859, "user_type": "registered", "accept_rate": 92}}], "creation_date": 1252997767, "comment_count": 1, "score": 4, "owner": {"display_name": "Alex", "reputation": 21290, "user_id": 114916, "user_type": "registered", "accept_rate": 74}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1260998518, "body": "<p>Took me <strong>way</strong> too long to realize that many LINQ extension methods such as <code>Single()</code>, <code>SingleOrDefault()</code> etc have overloads that take lambdas.</p>\n\n<p>You can do :</p>\n\n<pre><code>Single(x =&gt; x.id == id)\n</code></pre>\n\n<p>and don't need to say this - which some bad tutorial got me in the habit of doing</p>\n\n<pre><code>Where(x =&gt; x.id == id).Single()\n</code></pre>\n", "answer_id": 1917835, "tags": [], "down_vote_count": 2, "last_activity_date": 1260998518, "comments": [{"body": "+1, very nice. I&#39;ll keep it in mind.", "edited": false, "comment_id": 2869057, "creation_date": 1273765986, "score": 0, "owner": {"display_name": "Pretzel", "reputation": 2657, "user_id": 21244, "user_type": "registered", "accept_rate": 89}}, {"body": "I keep forgetting this as well. It&#39;s also true of <code>Count()</code>, among others. Do you know if there&#39;s any performance difference, in addition to the obvious bonus of code readability?", "edited": false, "comment_id": 5364138, "creation_date": 1296251870, "score": 4, "owner": {"display_name": "Justin Morgan", "reputation": 14971, "user_id": 399649, "user_type": "registered", "accept_rate": 90}}, {"body": "At university, my lecturer wanted to take off points for using these overloads!! I&#39;ve proven him wrong!", "edited": false, "comment_id": 5611618, "creation_date": 1297872620, "score": 1, "owner": {"display_name": "TDaver", "reputation": 3576, "user_id": 571536, "user_type": "registered", "accept_rate": 90}}, {"body": "It may sound strange but I prefer the second syntax. I find it more readable.", "edited": false, "comment_id": 5643857, "creation_date": 1298046044, "score": 12, "owner": {"display_name": "Konamiman", "reputation": 24304, "user_id": 4574, "user_type": "registered", "accept_rate": 85}}], "creation_date": 1260998518, "comment_count": 4, "score": 54, "owner": {"display_name": "Simon_Weaver", "reputation": 39886, "user_id": 16940, "user_type": "registered", "accept_rate": 62}, "is_accepted": false, "up_vote_count": 56}, {"community_owned_date": 1267741753, "body": "<p>How easy it is to nest a loop is something I don't think everyone understands.</p>\n\n<p>For example:</p>\n\n<pre><code>from outerloopitem in outerloopitems\nfrom innerloopitem in outerloopitem.childitems\nselect outerloopitem, innerloopitem\n</code></pre>\n", "answer_id": 2383203, "tags": [], "down_vote_count": 0, "last_activity_date": 1267741753, "comments": [{"body": "+1, whoa. that&#39;s pretty powerful.", "edited": false, "comment_id": 2869104, "creation_date": 1273766359, "score": 0, "owner": {"display_name": "Pretzel", "reputation": 2657, "user_id": 21244, "user_type": "registered", "accept_rate": 89}}], "creation_date": 1267741753, "comment_count": 1, "score": 5, "owner": {"display_name": "Rob Packwood", "reputation": 1365, "user_id": 171485, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 5}, {"community_owned_date": 1270034595, "body": "<p>As most people said, i think the most misunderstood part is assuming LINQ is a just a replacement for T-SQL. My manager who considers himself as a TSQL guru would not let us use LINQ in our project and even hates MS for releasing such a thing!!!</p>\n", "answer_id": 2552411, "tags": [], "down_vote_count": 0, "last_activity_date": 1270034595, "creation_date": 1270034595, "comment_count": 0, "score": 2, "owner": {"display_name": "stackuser1", "reputation": 112, "user_id": 294045, "user_type": "registered", "accept_rate": 47}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1270035133, "body": "<p>The fact that you can't chain IQueryable because they are method calls (while still nothing else but SQL translateable!) and that it is almost impossible to work around it is mindboggling and creates a huge violation of DRY. I need my IQueryable's for ad-hoc in which I don't have compiled queries (I only have compiled queries for the heavy scenarios), but in compiled queries I can't use them and instead need to write regular query syntax again. Now I'm doing the same subqueries in 2 places, need to remember to update both if something changes, and so forth. A nightmare.</p>\n", "answer_id": 2552471, "tags": [], "down_vote_count": 0, "last_activity_date": 1270035133, "creation_date": 1270035133, "comment_count": 0, "score": 0, "owner": {"display_name": "user305950", "user_type": "does_not_exist"}, "is_accepted": false, "up_vote_count": 0}, {"community_owned_date": 1285705266, "body": "<p>That IQueryable accept both, <code>Expression&lt;Func&lt;T1, T2, T3, ...&gt;&gt;</code> and <code>Func&lt;T1, T2, T3, ...&gt;</code>, without giving a hint about performance degradation in 2nd case.</p>\n\n<p>Here is code example, that demonstrates what I mean:</p>\n\n<pre><code>[TestMethod]\npublic void QueryComplexityTest()\n{\n    var users = _dataContext.Users;\n\n    Func&lt;User, bool&gt;                funcSelector =       q =&gt; q.UserName.StartsWith(\"Test\");\n    Expression&lt;Func&lt;User, bool&gt;&gt;    expressionSelector = q =&gt; q.UserName.StartsWith(\"Test\");\n\n    // Returns IEnumerable, and do filtering of data on client-side\n    IQueryable&lt;User&gt; func = users.Where(funcSelector).AsQueryable();\n    // Returns IQuerible and do filtering of data on server side\n    // SELECT ... FROM [dbo].[User] AS [t0] WHERE [t0].[user_name] LIKE @p0\n    IQueryable&lt;User&gt; exp = users.Where(expressionSelector);\n}\n</code></pre>\n", "is_accepted": false, "tags": [], "answer_id": 3816712, "down_vote_count": 1, "last_activity_date": 1285856531, "comments": [{"body": "Can you explain? I&#39;m not following...", "edited": false, "comment_id": 4058592, "creation_date": 1285780283, "score": 0, "owner": {"display_name": "Pretzel", "reputation": 2657, "user_id": 21244, "user_type": "registered", "accept_rate": 89}}, {"body": "@Pretzel I have added code example, that demonstrate my issue.", "edited": false, "reply_to_user": {"display_name": "Pretzel", "reputation": 2657, "user_id": 21244, "user_type": "registered", "accept_rate": 89}, "comment_id": 4068159, "creation_date": 1285855980, "score": 0, "owner": {"display_name": "Valera Kolupaev", "reputation": 1823, "user_id": 29300, "user_type": "registered"}}, {"body": "Thanks for the code example! Very helpful.", "edited": false, "comment_id": 4821515, "creation_date": 1292108181, "score": 0, "owner": {"display_name": "Buffalo", "reputation": 343, "user_id": 73863, "user_type": "registered", "accept_rate": 83}}], "creation_date": 1285705266, "comment_count": 3, "score": 7, "owner": {"display_name": "Valera Kolupaev", "reputation": 1823, "user_id": 29300, "user_type": "registered"}, "last_editor": {"display_name": "Valera Kolupaev", "reputation": 1823, "user_id": 29300, "user_type": "registered"}, "last_edit_date": 1285856531, "up_vote_count": 8}, {"community_owned_date": 1285825078, "body": "<p>Transactions (without using TransactionScope)</p>\n", "answer_id": 3828050, "tags": [], "down_vote_count": 0, "last_activity_date": 1285825078, "creation_date": 1285825078, "comment_count": 0, "score": 2, "owner": {"display_name": "Naeem Sarfraz", "reputation": 3434, "user_id": 40986, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 2}, {"community_owned_date": 1285856873, "body": "<p>I think the #1 misconception about LINQ to SQL is that you STILL HAVE TO KNOW SQL in order to make effective use of it.</p>\n\n<p>Another misunderstood thing about Linq to Sql is that you still have to lower your database security to the point of absurdity in order to make it work.</p>\n\n<p>A third point is that using Linq to Sql along with Dynamic classes (meaning the class definition is created at runtime) causes a tremendous amount of just-in-time compiling.  Which can absolutely kill performance.</p>\n", "answer_id": 3831537, "tags": [], "down_vote_count": 0, "last_activity_date": 1285856873, "comments": [{"body": "It is very beneficial to already know SQL, however.  Some SQL that is emitted by Linq to SQL (and other ORM&#39;s) can be downright dubious, and knowing SQL helps diagnose such problems.  Also, Linq to SQL can make use of stored procedures.", "edited": false, "comment_id": 4068470, "creation_date": 1285857329, "score": 4, "owner": {"display_name": "Robert Harvey", "reputation": 117921, "user_id": 102937, "user_type": "moderator", "accept_rate": 93}}], "creation_date": 1285856873, "comment_count": 1, "score": 4, "owner": {"display_name": "NotMe", "reputation": 64021, "user_id": 2424, "user_type": "registered", "accept_rate": 97}, "is_accepted": false, "up_vote_count": 4}, {"community_owned_date": 1292281853, "body": "<h2>How LINQ to SQL translate it!</h2>\n\n<p>Suppose that we have a table with 3 fields; A, B &amp; C (They are integers and table name is \"Table1\").<br/>\nI show it like this:<br/>\n[A, B, C]</p>\n\n<p>Now we want to get some result such as this:<br/>\n[X = A, Y = B + C]</p>\n\n<p>And we have such a class:</p>\n\n<pre><code>public class Temp\n{\n   public Temp(int x, int y)\n   {\n      this.X = x;\n      this.Y = y;\n   }\n\n   public int X { get; private set; }\n   public int Y { get; private set; }\n}\n</code></pre>\n\n<p>Then we use it like this:</p>\n\n<pre><code>using (MyDataContext db = new MyDataContext())\n{\n   var result = db.Table1.Select(row =&gt; \n                   new Temp(row.A, row.B + row.C)).ToList();\n}\n</code></pre>\n\n<p>The generated SQL query is:</p>\n\n<pre><code>SELECT [t0].[A] AS [x], [t0].[B] + [t0].[C] AS [y]\nFROM [Table1] AS [t0]\n</code></pre>\n\n<p>It translates the .ctor of the Temp. It knows that I want \"row.B + row.C\" (even more...) to put on the \"y\" paramter of my class constructor!</p>\n\n<p>These translations are very intrested to me. I like that and I think writing such translators (LINQ to Something) is a little hard!</p>\n\n<p>Of course! It's a bad news: the LINQ to Entities (4.0) does not support constructors with parameters. (Why not?)</p>\n", "answer_id": 4434392, "tags": [], "down_vote_count": 0, "last_activity_date": 1292281853, "comments": [{"body": "Yeah I really miss this feature in Linq to Entities...", "edited": false, "comment_id": 5611580, "creation_date": 1297872487, "score": 0, "owner": {"display_name": "TDaver", "reputation": 3576, "user_id": 571536, "user_type": "registered", "accept_rate": 90}}], "creation_date": 1292281853, "comment_count": 1, "score": 1, "owner": {"display_name": "Amir Karimi", "reputation": 1106, "user_id": 441889, "user_type": "registered", "accept_rate": 70}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1293800967, "body": "<p>I find \"Creating an Expression Tree\" to be tough. There are many things that bug me w.r.t what you can to with LINQ, LINQ to SQL and ADO.Net altogether.</p>\n", "answer_id": 4570286, "tags": [], "down_vote_count": 0, "last_activity_date": 1293800967, "creation_date": 1293800967, "comment_count": 0, "score": 1, "owner": {"display_name": "iTSrAVIE", "reputation": 475, "user_id": 359349, "user_type": "registered", "accept_rate": 54}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1299499126, "body": "<p>Explain why Linq does not handle left outer join as simple as in sql syntax.\nSee this articles: <a href=\"http://www.developer.com/db/article.php/3739391/Implementing-a-Left-Join-with-LINQ.htm\" rel=\"nofollow\">Implementing a Left Join with LINQ</a>, <a href=\"http://msdn.microsoft.com/en-us/library/bb397895.aspx\" rel=\"nofollow\">How to: Perform Left Outer Joins (C# Programming Guide)</a>\nI got so disappointed when I came across this obstacle that all my respect for the language vanished and I decedid that it was just something that quickly would fade away. No serious person would want to work with a syntax that lacks these battlefield proven primitives.  If you could explain why these sort of set operation are not supported. I would become a better and more openminded person.</p>\n", "answer_id": 5219433, "tags": [], "down_vote_count": 0, "last_activity_date": 1299499126, "comments": [{"body": "interesting. I haven&#39;t found a need for the Left Outer join in Linq so far. Can you provide situations where this would be the best choice and how it would benifit the execution of the query ?", "edited": false, "comment_id": 5873561, "creation_date": 1299510030, "score": 1, "owner": {"display_name": "Alexandre Brisebois", "reputation": 3368, "user_id": 18619, "user_type": "registered", "accept_rate": 88}}, {"body": "Left outer joins don&#39;t make sense in the context of object relational mapping (which is what LINQ does). Objects shouldn&#39;t be hydrated with all their fields set to null!", "edited": false, "comment_id": 5877244, "creation_date": 1299524782, "score": 1, "owner": {"display_name": "Billy ONeal", "reputation": 56723, "user_id": 82320, "user_type": "registered", "accept_rate": 83}}, {"body": "But at the time everyone  spoke how Linq now totally should replace SQL. Only old stubborn people use sql and stored procedure I was told. I was building a website where the economy dept people where matching (reconsiliating) external invoices with  internal accounting. Eg we got an invoice for a subcontracter who worked at project. The subcontracter Name matches, the activitity matches the client mathces but Project code does not matches. Something has to be done. Guess who is the project leader contact them, contact the subcontracter etd. So this is a left join al lot application.", "edited": false, "comment_id": 6463719, "creation_date": 1302791172, "score": 0, "owner": {"display_name": "Patrik Lindstr\u00f6m", "reputation": 447, "user_id": 648076, "user_type": "registered", "accept_rate": 50}}, {"body": "I like your inclusion of left join here, I didn&#39;t want to double post.  Your dismissal of LINQ otherwise is heavy-handed.  I&#39;d like to see left-join as an operator or something too, but I still use LINQ all the time.  Beats the hell out of the old way.", "edited": false, "comment_id": 6867274, "creation_date": 1305054222, "score": 1, "owner": {"display_name": "uos\u0250\u017f", "reputation": 5857, "user_id": 162273, "user_type": "registered", "accept_rate": 84}}, {"body": "I am now more openminded and use Linq. I even try to only use Linqpad for day to day adhoc database queries. But now it is group by in Linq that confuses me. (see eg <a href=\"http://www.richardbushnell.net/2008/02/08/how-to-use-grouping-in-c-linq-syntax/\" rel=\"nofollow\">richardbushnell.net/2008/02/08/&hellip;</a>) Its like now I get it and no i dont.", "edited": false, "comment_id": 10558253, "creation_date": 1323980066, "score": 0, "owner": {"display_name": "Patrik Lindstr\u00f6m", "reputation": 447, "user_id": 648076, "user_type": "registered", "accept_rate": 50}}], "creation_date": 1299499126, "comment_count": 5, "score": 1, "owner": {"display_name": "Patrik Lindstr\u00f6m", "reputation": 447, "user_id": 648076, "user_type": "registered", "accept_rate": 50}, "is_accepted": false, "up_vote_count": 1}, {"community_owned_date": 1303911890, "body": "<p>I have found hard to find clear information about Anonymous types specially in regard of performances in web application.\nAlso I would suggest better and practical Lamda expressions examples and \"How to\" section in quering and performance related topics.</p>\n\n<p>Hope my brief list can help!</p>\n", "is_accepted": false, "tags": [], "answer_id": 5805124, "down_vote_count": 0, "last_activity_date": 1303913568, "creation_date": 1303911890, "comment_count": 0, "score": 1, "owner": {"display_name": "GibboK", "reputation": 14245, "user_id": 379008, "user_type": "registered", "accept_rate": 84}, "last_editor": {"display_name": "GibboK", "reputation": 14245, "user_id": 379008, "user_type": "registered", "accept_rate": 84}, "last_edit_date": 1303913568, "up_vote_count": 1}], "last_editor": {"display_name": "oxbow_lakes", "reputation": 79448, "user_id": 16853, "user_type": "registered", "accept_rate": 92}, "locked_date": 1332265763, "closed_details": {"reason": "not constructive", "by_users": [{"display_name": "Tim Post", "reputation": 23392, "user_id": 50049, "user_type": "moderator", "accept_rate": 96}], "description": "As it currently stands, this question is not a good fit for our Q&amp;A format. We expect answers to be supported by facts, references,   or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question   can be improved and possibly reopened, <a href=\"http://stackoverflow.com/help/reopen-questions\">visit the help center</a> for guidance.", "on_hold": false}, "down_vote_count": 11, "question_id": 215548, "close_vote_count": 0, "up_vote_count": 294}, {"last_activity_date": 1311345852, "accepted_answer_id": 1209328, "creation_date": 1248986079, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1248989015, "favorite_count": 5, "view_count": 1297, "delete_vote_count": 0, "title": "How free can I be in the code in an object invariant?", "comments": [{"body": "Apparently, you cannot be as free as the loop unrolls.  /rimshot", "edited": false, "comment_id": 1032699, "creation_date": 1248986506, "score": 0, "owner": {"display_name": "Tom Ritter", "reputation": 55291, "user_id": 8435, "user_type": "registered", "accept_rate": 55}}, {"body": "The bizarre thing is that the <i>first</i> loop is okay... but the second isn&#39;t. It may turn out to be a bug in ccrewrite, of course.", "edited": false, "comment_id": 1032751, "creation_date": 1248986840, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "(I suspect it&#39;s capturing all the code before the call to Contract.Invariant...)", "edited": false, "comment_id": 1032817, "creation_date": 1248987339, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Jon, ForAll is [a,b) so it should be ForAll(1, count, ...), not count-1", "edited": false, "comment_id": 1032960, "creation_date": 1248988902, "score": 0, "owner": {"display_name": "Henk Holterman", "reputation": 167974, "user_id": 60761, "user_type": "registered", "accept_rate": 91}}, {"body": "Doh, yes. Clearly not thinking straight tonight.", "edited": false, "comment_id": 1032967, "creation_date": 1248988989, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "comment_count": 5, "score": 21, "body": "<p>I'm trying to demonstrate invariants in Code Contracts, and I thought I'd give an example of a sorted list of strings. It maintains an array internally, with spare space for additions etc - just like <code>List&lt;T&gt;</code>, basically. When it needs to add an item, it inserts it into the array, etc. I figured I had three invariants:</p>\n\n<ul>\n<li>The count must be sensible: non-negative and at most as big as the buffer size</li>\n<li>Everything in the unused part of the buffer should be null</li>\n<li>Each item in the used part of the buffer should be at least as \"big\" as the item before it</li>\n</ul>\n\n<p>Now, I've tried to implement that in this way:</p>\n\n<pre><code>[ContractInvariantMethod]\nprivate void ObjectInvariant()\n{\n    Contract.Invariant(count &gt;= 0 &amp;&amp; count &lt;= buffer.Length);\n    for (int i = count; i &lt; buffer.Length; i++)\n    {\n        Contract.Invariant(buffer[i] == null);\n    }\n    for (int i = 1; i &lt; count; i++)\n    {\n        Contract.Invariant(string.Compare(buffer[i], buffer[i - 1]) &gt;= 0);\n    }\n}\n</code></pre>\n\n<p>Unfortunately, <code>ccrewrite</code> is messing up the loops.</p>\n\n<p>The user documentation says that the method should just be a series of calls to <code>Contract.Invariant</code>. Do I really have to rewrite the code as something like this?</p>\n\n<pre><code>Contract.Invariant(count &gt;= 0 &amp;&amp; count &lt;= buffer.Length);\nContract.Invariant(Contract.ForAll\n    (count, buffer.Length, i =&gt; buffer[i] == null));\nContract.Invariant(Contract.ForAll\n    (1, count, i =&gt; string.Compare(buffer[i], buffer[i - 1]) &gt;= 0));\n</code></pre>\n\n<p>That's somewhat ugly, although it does work. (It's much better than my previous attempt, mind you.)</p>\n\n<p>Are my expectations unreasonable? Are my invariants unreasonable?</p>\n\n<p>(Also asked as a <a href=\"http://social.msdn.microsoft.com/Forums/en-US/codecontracts/thread/733c6bc5-6781-4137-a039-ec24c1953f0a\">question in the Code Contracts forum</a>. I'll add any relevant answers here myself.)</p>\n", "is_answered": true, "up_vote_count": 21, "tags": [".net-4.0", "code-contracts", "visual-studio-2010-beta-1", "invariants"], "reopen_vote_count": 0, "answer_count": 3, "answers": [{"body": "<p>From the (preliminary) MSDN pages it looks like the Contract.ForAll member could help you with the 2 range contracts. The documentation isn't very explicit about its function though.</p>\n\n<pre><code>//untested\nContract.Invariant(Contract.ForAll(count, buffer.Length, i =&gt; buffer[i] == null));\nContract.Invariant(Contract.ForAll(1, count, \n    i =&gt; string.Compare(buffer[i], buffer[i - 1]) &gt;= 0));\n</code></pre>\n", "is_accepted": true, "tags": [], "answer_id": 1209328, "down_vote_count": 0, "last_activity_date": 1311345852, "comments": [{"body": "I could use ForAll for the first one (if that&#39;s allowed in invariants) but the second one needs two elements at a time, which is somewhat trickier.", "edited": false, "comment_id": 1032900, "creation_date": 1248988296, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Actually, it might be better than that. Hmm..", "edited": false, "comment_id": 1032927, "creation_date": 1248988551, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "There are two version, one is integer-range based and takes a Predicate&lt;int&gt;. I added a sample of how it could work.", "edited": false, "comment_id": 1032946, "creation_date": 1248988706, "score": 0, "owner": {"display_name": "Henk Holterman", "reputation": 167974, "user_id": 60761, "user_type": "registered", "accept_rate": 91}}, {"body": "Thanks very much for this Henk - it&#39;s definitely looking better than it did. I&#39;ve used buffer.Skip() with the normal ForAll for the first one, but we&#39;re clearly thinking alike for the second :)", "edited": false, "comment_id": 1032948, "creation_date": 1248988726, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Actually, now I look at it, I think I like your version better all round, as it&#39;s closer to the initial code. Editing again. I won&#39;t accept the answer <i>just yet</i> as I&#39;d still like to hear whether it&#39;s expected that my initial code won&#39;t work.", "edited": false, "comment_id": 1032963, "creation_date": 1248988928, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I found in an older posting that Contract.ForAll was not yet supported (static) last april: <a href=\"http://social.msdn.microsoft.com/Forums/en-US/codecontracts/thread/94ec2bce-61b5-463c-a1b6-22c22a42e67f\" rel=\"nofollow\">social.msdn.microsoft.com/Forums/en-US/codecontracts/thread/&hellip;</a>", "edited": false, "comment_id": 1033025, "creation_date": 1248989527, "score": 0, "owner": {"display_name": "Henk Holterman", "reputation": 167974, "user_id": 60761, "user_type": "registered", "accept_rate": 91}}, {"body": "Fortunately that doesn&#39;t affect me yet as I don&#39;t have VSTS :)", "edited": false, "comment_id": 1033111, "creation_date": 1248990438, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1248987438, "comment_count": 7, "score": 6, "owner": {"display_name": "Henk Holterman", "reputation": 167974, "user_id": 60761, "user_type": "registered", "accept_rate": 91}, "last_editor": {"display_name": "Mehrdad", "reputation": 86994, "user_id": 541686, "user_type": "registered", "accept_rate": 81}, "last_edit_date": 1311345852, "up_vote_count": 6}, {"body": "<p>(I'm going to accept Henk's answer, but I think it's worth adding this.)</p>\n\n<p>The question has now been answered on the <a href=\"http://social.msdn.microsoft.com/Forums/en-US/codecontracts/thread/733c6bc5-6781-4137-a039-ec24c1953f0a\" rel=\"nofollow\">MSDN forum</a>, and the upshot is that the first form <em>isn't</em> expected to work. Invariants really, really need to be a series of calls to <code>Contract.Invariant</code>, and that's all.</p>\n\n<p>This makes it more feasible for the static checker to understand the invariant and enforce it.</p>\n\n<p>This restriction can be circumvented by simply putting all the logic into a different member, e.g. an <code>IsValid</code> property, and then calling:</p>\n\n<pre><code>Contract.Invariant(IsValid);\n</code></pre>\n\n<p>That would no doubt mess up the static checker, but in some cases it may be a useful alternative in some cases.</p>\n", "answer_id": 1210959, "tags": [], "down_vote_count": 0, "last_activity_date": 1249021749, "comments": [{"body": "Pretty much what I suggested. I would adopt this as an &quot;effective&quot; pattern when using .Net Code Contracts.", "edited": false, "comment_id": 1193267, "creation_date": 1251708243, "score": 0, "owner": {"display_name": "Daniel Daranas", "reputation": 16413, "user_id": 96780, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1249021749, "comment_count": 1, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": false, "up_vote_count": 2}, {"body": "<p>Aren't the designers reinventing the wheel a bit?</p>\n\n<p>What was wrong with the <a href=\"http://www.state-machine.com/writings/samek0308.pdf\" rel=\"nofollow\">good old</a></p>\n\n<pre><code>bool Invariant() const; // in C++, mimicking Eiffel\n</code></pre>\n\n<p>?</p>\n\n<p>Now in C# we don't have const, but why can't you just define an <code>Invariant</code> function</p>\n\n<pre><code>private bool Invariant()\n{\n  // All the logic, function returns true if object is valid i.e. function\n  // simply will never return false, in the absence of a bug\n}\n// Good old invariant in C#, no special attributes, just a function\n</code></pre>\n\n<p>and then just use the Code Contracts in terms of that function?</p>\n\n<pre><code>[ContractInvariantMethod]\nprivate void ObjectInvariant()\n{\n    Contract.Invariant(Invariant() == true);\n}\n</code></pre>\n\n<p>Maybe I'm writing nonsense, but even in that case it will have some didactic value when everybody tells me wrong.</p>\n", "answer_id": 1319768, "tags": [], "down_vote_count": 0, "last_activity_date": 1251066998, "comments": [{"body": "You <i>can</i> do that - but then the static checker has almost no information to work with to make sure that the invariant remains intact. Where possible it&#39;s better to use a set of calls to Contract.Invariant.", "edited": false, "comment_id": 1197983, "creation_date": 1251782239, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon I see. Well, traditionally the invariant was not statically checked, only called before and after any public function when running with assertion checking on. I understand that Code Contracts try to introduce static analysis value. I still have to learn how that works in practice, though.", "edited": false, "comment_id": 1198125, "creation_date": 1251785700, "score": 0, "owner": {"display_name": "Daniel Daranas", "reputation": 16413, "user_id": 96780, "user_type": "registered", "accept_rate": 100}}], "creation_date": 1251066998, "comment_count": 2, "score": 1, "owner": {"display_name": "Daniel Daranas", "reputation": 16413, "user_id": 96780, "user_type": "registered", "accept_rate": 100}, "is_accepted": false, "up_vote_count": 1}], "last_editor": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 1209185}, {"last_activity_date": 1303542988, "accepted_answer_id": 5762859, "creation_date": 1297940114, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "last_edit_date": 1300438732, "favorite_count": 44, "view_count": 6859, "delete_vote_count": 0, "title": "C# 5 async CTP: why is internal \"state\" set to 0 in generated code before EndAwait call?", "comments": [{"body": "The VB compiler produces a similar state machine (don&#39;t know if that&#39;s expected or not, but VB didn&#39;t have iterator blocks before)", "edited": false, "comment_id": 5623845, "creation_date": 1297941860, "score": 7, "owner": {"display_name": "Damien_The_Unbeliever", "reputation": 122457, "user_id": 15498, "user_type": "registered", "accept_rate": 75}}, {"body": "@Damien: Thanks, that&#39;s interesting to hear. I have no idea to what extent the two compilers share code.", "edited": false, "reply_to_user": {"display_name": "Damien_The_Unbeliever", "reputation": 122457, "user_id": 15498, "user_type": "registered", "accept_rate": 75}, "comment_id": 5623887, "creation_date": 1297942017, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon - actually, I just checked again. They&#39;re similar, but not identical, so I don&#39;t think they&#39;re sharing code.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 5623906, "creation_date": 1297942074, "score": 0, "owner": {"display_name": "Damien_The_Unbeliever", "reputation": 122457, "user_id": 15498, "user_type": "registered", "accept_rate": 75}}, {"body": "What&#39;s the inner workings of MoveNextDelegate?", "edited": false, "comment_id": 5626730, "creation_date": 1297954372, "score": 0, "owner": {"display_name": "Rune FS", "reputation": 14748, "user_id": 112407, "user_type": "registered", "accept_rate": 89}}, {"body": "@Rune: MoveNextDelegate is just a delegate field which refers to MoveNext. It&#39;s cached to avoid creating a new Action to pass into the awaiter each time, I believe.", "edited": false, "reply_to_user": {"display_name": "Rune FS", "reputation": 14748, "user_id": 112407, "user_type": "registered", "accept_rate": 89}, "comment_id": 5626772, "creation_date": 1297954535, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "If t1 is already complete and it enters the default case again, will BeginAwait return immediately with false, thereby making the MoveNext call innocuous?", "edited": false, "comment_id": 5626854, "creation_date": 1297954820, "score": 0, "owner": {"display_name": "Jeff Yates", "reputation": 41509, "user_id": 23234, "user_type": "registered", "accept_rate": 86}}, {"body": "I think the answer is: this is a CTP. The high order bit for the team was getting this out there and the language design validated. And they did so amazingly quickly. You should expect the shipped implementation (of the compilers, not MoveNext) to differ significantly. I think Eric or Lucian to come back with an answer along the lines that there&#39;s nothing deep here, just a behavior/bug that doesn&#39;t matter in most cases and no one noticed. Because it&#39;s a CTP.", "edited": false, "comment_id": 5628685, "creation_date": 1297961120, "score": 5, "owner": {"display_name": "Chris Burrows", "reputation": 1131, "user_id": 116900, "user_type": "registered"}}, {"body": "@Chris: That sounds entirely likely. Btw, you may want to update your Stack Overflow user profile :)", "edited": false, "reply_to_user": {"display_name": "Chris Burrows", "reputation": 1131, "user_id": 116900, "user_type": "registered"}, "comment_id": 5628810, "creation_date": 1297961532, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "Have you checked the actual IL code? I wonder if this can be a bug in Reflector.", "edited": false, "comment_id": 5640043, "creation_date": 1298028806, "score": 0, "owner": {"display_name": "Stilgar", "reputation": 10609, "user_id": 122507, "user_type": "registered", "accept_rate": 91}}, {"body": "@Stilgar: I&#39;ve just checked with ildasm, and it really is doing this.", "edited": false, "reply_to_user": {"display_name": "Stilgar", "reputation": 10609, "user_id": 122507, "user_type": "registered", "accept_rate": 91}, "comment_id": 5640073, "creation_date": 1298028999, "score": 2, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "What exactly is in the awaiter? Is it possible that EndAwait somehow observes the state of the field?", "edited": false, "comment_id": 5640208, "creation_date": 1298029729, "score": 0, "owner": {"display_name": "Stilgar", "reputation": 10609, "user_id": 122507, "user_type": "registered", "accept_rate": 91}}, {"body": "@Chris: Aside: your rep is currently (8:55AM EST, 2/18/2011) 666.", "edited": false, "reply_to_user": {"display_name": "Chris Burrows", "reputation": 1131, "user_id": 116900, "user_type": "registered"}, "comment_id": 5641589, "creation_date": 1298037290, "score": 1, "owner": {"display_name": "Jeff Yates", "reputation": 41509, "user_id": 23234, "user_type": "registered", "accept_rate": 86}}, {"body": "@Stilgar: The generated code shouldn&#39;t know or care about the awaiter. The spec says what the awaiter should do in terms of the callers to BeginAwait and EndAwait - it can&#39;t snoop on the state.", "edited": false, "reply_to_user": {"display_name": "Stilgar", "reputation": 10609, "user_id": 122507, "user_type": "registered", "accept_rate": 91}, "comment_id": 5641609, "creation_date": 1298037367, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@JonSkeet: Notice how no one upvotes the answers. 99% of us can&#39;t really tell if the answer even sounds about right.", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 5832343, "creation_date": 1299214012, "score": 3, "owner": {"display_name": "the_drow", "reputation": 6912, "user_id": 85140, "user_type": "registered", "accept_rate": 83}}, {"body": "@the_drow: True. I&#39;m not sufficiently convinced by any of them at the moment... Chris&#39;s explanation is the only one I believe at the minute. It&#39;ll be interesting to see what happens when the next CTP/beta arrives.", "edited": false, "reply_to_user": {"display_name": "the_drow", "reputation": 6912, "user_id": 85140, "user_type": "registered", "accept_rate": 83}, "comment_id": 5833031, "creation_date": 1299219789, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "I am summoning Eric Lippert as strongly as I can.", "edited": false, "comment_id": 5833197, "creation_date": 1299221075, "score": 1, "owner": {"display_name": "Amy", "reputation": 9368, "user_id": 47589, "user_type": "registered", "accept_rate": 85}}, {"body": "@Inuyasha: I pinged Eric when I wrote the question. He&#39;s a very busy man, and realistically this isn&#39;t an <i>important</i> question in terms of how async is used.", "edited": false, "reply_to_user": {"display_name": "Amy", "reputation": 9368, "user_id": 47589, "user_type": "registered", "accept_rate": 85}, "comment_id": 5833407, "creation_date": 1299222332, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "If there is a good reason for this to happen it is probably because of how this kind of code ends up in machine code, however, in this particular case I can think of nothing that would explain this. The answer to this question, therefore, must be: It&#39;s an inefficiency in the compiler that should have been filtered out, because it serves no purpose, but has a very low impact on eventual performance and/or code size.", "edited": false, "comment_id": 5923275, "creation_date": 1299760890, "score": 0, "owner": {"display_name": "Wouter Simons", "reputation": 1173, "user_id": 647883, "user_type": "registered"}}, {"body": "@Wouter: I&#39;m not worried about the performance so much as the <i>correctness</i>. If there&#39;s any &quot;intermediate&quot; state, it should be a separate number meaning, &quot;it&#39;s not appropriate to be called back at this point&quot; as distinct from &quot;I&#39;m at the start of the method&quot;. We&#39;ll see what happens when we get the CTP refresh though :)", "edited": false, "reply_to_user": {"display_name": "Wouter Simons", "reputation": 1173, "user_id": 647883, "user_type": "registered"}, "comment_id": 5926344, "creation_date": 1299771680, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Damien: Lucian Wischik told me that the VB and C# compilers do in fact share most of the code for this. @Jon: You were there - don&#39;t you remember? He also asked if the C# iterator block code should be changed to use that new code...", "edited": false, "reply_to_user": {"display_name": "Damien_The_Unbeliever", "reputation": 122457, "user_id": 15498, "user_type": "registered", "accept_rate": 75}, "comment_id": 5955997, "creation_date": 1299955442, "score": 0, "owner": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}}, {"body": "@configurator: I was there when we were discussing it, but I&#39;m not sure I heard that... at least not for the async CTP. I thought that was the plan for the <i>new</i> (managed) compiler.", "edited": false, "reply_to_user": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}, "comment_id": 5956168, "creation_date": 1299956771, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "comment_count": 21, "score": 169, "body": "<p>Yesterday I was giving a talk about the new C# \"async\" feature, in particular delving into what the generated code looked like, and <code>the GetAwaiter()</code> / <code>BeginAwait()</code> / <code>EndAwait()</code> calls.</p>\n\n<p>We looked in some detail at the state machine generated by the C# compiler, and there were two aspects we couldn't understand:</p>\n\n<ul>\n<li>Why the generated class contains a <code>Dispose()</code> method and a <code>$__disposing</code> variable, which never appear to be used (and the class doesn't implement <code>IDisposable</code>).</li>\n<li>Why the internal <code>state</code> variable is set to 0 before any call to <code>EndAwait()</code>, when 0 normally appears to mean \"this is the initial entry point\".</li>\n</ul>\n\n<p>I suspect the first point could be answered by doing something more interesting within the async method, although if anyone has any further information I'd be glad to hear it. This question is more about the second point, however.</p>\n\n<p>Here's a very simple piece of sample code:</p>\n\n<pre><code>using System.Threading.Tasks;\n\nclass Test\n{\n    static async Task&lt;int&gt; Sum(Task&lt;int&gt; t1, Task&lt;int&gt; t2)\n    {\n        return await t1 + await t2;\n    }\n}\n</code></pre>\n\n<p>... and here's the code which gets generated for the <code>MoveNext()</code> method which implements the state machine. This is copied directly from Reflector - I haven't fixed up the unspeakable variable names:</p>\n\n<pre><code>public void MoveNext()\n{\n    try\n    {\n        this.$__doFinallyBodies = true;\n        switch (this.&lt;&gt;1__state)\n        {\n            case 1:\n                break;\n\n            case 2:\n                goto Label_00DA;\n\n            case -1:\n                return;\n\n            default:\n                this.&lt;a1&gt;t__$await2 = this.t1.GetAwaiter&lt;int&gt;();\n                this.&lt;&gt;1__state = 1;\n                this.$__doFinallyBodies = false;\n                if (this.&lt;a1&gt;t__$await2.BeginAwait(this.MoveNextDelegate))\n                {\n                    return;\n                }\n                this.$__doFinallyBodies = true;\n                break;\n        }\n        this.&lt;&gt;1__state = 0;\n        this.&lt;1&gt;t__$await1 = this.&lt;a1&gt;t__$await2.EndAwait();\n        this.&lt;a2&gt;t__$await4 = this.t2.GetAwaiter&lt;int&gt;();\n        this.&lt;&gt;1__state = 2;\n        this.$__doFinallyBodies = false;\n        if (this.&lt;a2&gt;t__$await4.BeginAwait(this.MoveNextDelegate))\n        {\n            return;\n        }\n        this.$__doFinallyBodies = true;\n    Label_00DA:\n        this.&lt;&gt;1__state = 0;\n        this.&lt;2&gt;t__$await3 = this.&lt;a2&gt;t__$await4.EndAwait();\n        this.&lt;&gt;1__state = -1;\n        this.$builder.SetResult(this.&lt;1&gt;t__$await1 + this.&lt;2&gt;t__$await3);\n    }\n    catch (Exception exception)\n    {\n        this.&lt;&gt;1__state = -1;\n        this.$builder.SetException(exception);\n    }\n}\n</code></pre>\n\n<p>It's long, but the important lines for this question are these:</p>\n\n<pre><code>// End of awaiting t1\nthis.&lt;&gt;1__state = 0;\nthis.&lt;1&gt;t__$await1 = this.&lt;a1&gt;t__$await2.EndAwait();\n\n// End of awaiting t2\nthis.&lt;&gt;1__state = 0;\nthis.&lt;2&gt;t__$await3 = this.&lt;a2&gt;t__$await4.EndAwait();\n</code></pre>\n\n<p>In both cases the state is changed again afterwards before it's next obviously observed... so why set it to 0 at all? If <code>MoveNext()</code> were called again at this point (either directly or via <code>Dispose</code>) it would effectively start the async method again, which would be wholly inappropriate as far as I can tell... if and <code>MoveNext()</code> <em>isn't</em> called, the change in state is irrelevant.</p>\n\n<p>Is this simply a side-effect of the compiler reusing iterator block generation code for async, where it may have a more obvious explanation?</p>\n\n<p><strong>Important disclaimer</strong></p>\n\n<p>Obviously this is just a CTP compiler. I fully expect things to change before the final release - and possibly even before the next CTP release. This question is in no way trying to claim this is a flaw in the C# compiler or anything like that. I'm just trying to work out whether there's a subtle reason for this that I've missed :)</p>\n", "is_answered": true, "up_vote_count": 169, "tags": ["c#", "asynchronous", "c#-5.0"], "reopen_vote_count": 0, "answer_count": 4, "answers": [{"body": "<p>Could it be something to do with stacked/nested async calls ?.. </p>\n\n<p>i.e:</p>\n\n<pre><code>async Task m1()\n{\n    await m2;\n}\n\nasync Task m2()\n{\n    await m3();\n}\n\nasync Task m3()\n{\nThread.Sleep(10000);\n}\n</code></pre>\n\n<p>Does the movenext delegate get called multiple times in this situation ?</p>\n\n<p>Just a punt really?</p>\n", "answer_id": 5030372, "tags": [], "down_vote_count": 0, "last_activity_date": 1297953668, "comments": [{"body": "There would be three different generated classes in that case. <code>MoveNext()</code> would be called once on each of them.", "edited": false, "comment_id": 5626609, "creation_date": 1297953918, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1297953668, "comment_count": 1, "score": 0, "owner": {"display_name": "GaryMcAllister", "reputation": 116, "user_id": 442143, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 0}, {"body": "<p>if it was kept at 1 (first case) you would get a call to <code>EndAwait</code> without a call to <code>BeginAwait</code>. If it's kept at 2 (second case) you'd get the same result just on the other awaiter.</p>\n\n<p>I'm guessing that calling the BeginAwait returns false if it has be started already (a guess from my side) and keeps the original value to return at the EndAwait. If that's the case it would work correctly whereas if you set it to -1 you might have an uninitialized <code>this.&lt;1&gt;t__$await1</code> for the first case.</p>\n\n<p>This however assumes that BeginAwaiter won't actually start the action on any calls after the first and that it will return false in those cases. Starting would of course be unacceptable since it could have side effect or simply give a different result. It also assumpes that the EndAwaiter will always return the same value no matter how many times it's called and that is can be called when BeginAwait returns false (as per the above assumption)</p>\n\n<p>It would seem to be a guard against race conditions\nIf we inline the statements where movenext is called by a different thread after the state = 0 in questions it woule look something like the below</p>\n\n<pre><code>this.&lt;a1&gt;t__$await2 = this.t1.GetAwaiter&lt;int&gt;();\nthis.&lt;&gt;1__state = 1;\nthis.$__doFinallyBodies = false;\nthis.&lt;a1&gt;t__$await2.BeginAwait(this.MoveNextDelegate)\nthis.&lt;&gt;1__state = 0;\n\n//second thread\nthis.&lt;a1&gt;t__$await2 = this.t1.GetAwaiter&lt;int&gt;();\nthis.&lt;&gt;1__state = 1;\nthis.$__doFinallyBodies = false;\nthis.&lt;a1&gt;t__$await2.BeginAwait(this.MoveNextDelegate)\nthis.$__doFinallyBodies = true;\nthis.&lt;&gt;1__state = 0;\nthis.&lt;1&gt;t__$await1 = this.&lt;a1&gt;t__$await2.EndAwait();\n\n//other thread\nthis.&lt;1&gt;t__$await1 = this.&lt;a1&gt;t__$await2.EndAwait();\n</code></pre>\n\n<p>If the assumptions above are correct the there's some unneeded work done such as get sawiater and reassigning the same value to &lt;1>t__$await1. If the state was kept at 1 then the last part would in stead be:</p>\n\n<pre><code>//second thread\n//I suppose this un matched call to EndAwait will fail\nthis.&lt;1&gt;t__$await1 = this.&lt;a1&gt;t__$await2.EndAwait();\n</code></pre>\n\n<p>further if it was set to 2 the state machine would assume it already had gotten the value of the first action which would be untrue and a (potentially) unassigned variable would be used to calculate the result</p>\n", "is_accepted": false, "tags": [], "answer_id": 5030611, "down_vote_count": 0, "last_activity_date": 1298027953, "comments": [{"body": "Bear in mind that the state isn&#39;t actually being <i>used</i> between the assignment to 0 and the assignment to a more meaningful value. If it&#39;s meant to guard against race conditions, I&#39;d expect some other value to indicate that, e.g. -2, with a check for that at the start of MoveNext to detect inappropriate use. Bear in mind that a single instance should never actually be used by two threads at a time anyway - it&#39;s meant to give the illusion of a single synchronous method call which manages to &quot;pause&quot; every so often.", "edited": false, "comment_id": 5627635, "creation_date": 1297957467, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Jon I agree it shouldn&#39;t be an issue with a race condition in the async case but could be in iteration block and could be a left over", "edited": false, "reply_to_user": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "comment_id": 5627866, "creation_date": 1297958226, "score": 0, "owner": {"display_name": "Rune FS", "reputation": 14748, "user_id": 112407, "user_type": "registered", "accept_rate": 89}}, {"body": "I suggest that you fill [potential] BUG report at <a href=\"http://connect.microsoft.com\" rel=\"nofollow\">connect.microsoft.com</a>", "edited": false, "comment_id": 5656943, "creation_date": 1298145428, "score": 2, "owner": {"display_name": "Tony", "reputation": 3205, "user_id": 194717, "user_type": "registered", "accept_rate": 61}}, {"body": "@Tony: I think I&#39;ll wait until the next CTP or beta comes out, and check that behaviour.", "edited": false, "reply_to_user": {"display_name": "Tony", "reputation": 3205, "user_id": 194717, "user_type": "registered", "accept_rate": 61}, "comment_id": 5816480, "creation_date": 1299133755, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1297954868, "comment_count": 4, "score": 1, "owner": {"display_name": "Rune FS", "reputation": 14748, "user_id": 112407, "user_type": "registered", "accept_rate": 89}, "last_editor": {"display_name": "Rob", "reputation": 27454, "user_id": 7872, "user_type": "registered", "accept_rate": 68}, "last_edit_date": 1298027953, "up_vote_count": 1}, {"body": "<p>Explanation of actual states:</p>\n\n<p>possible states:</p>\n\n<ul>\n<li><strong>0</strong> Initialized (i think so) <strong>or</strong> waiting for end of operation</li>\n<li><strong>>0</strong> just called MoveNext, chosing next state</li>\n<li><strong>-1</strong> ended</li>\n</ul>\n\n<p>Is it possible that this implementation just wants to assure that if another Call to MoveNext from whereever happens (while waiting) it will reevaluate the whole state-chain again from the beginning, <strong>to reevaluate results which could be in the mean time already outdated?</strong></p>\n", "answer_id": 5175046, "tags": [], "down_vote_count": 0, "last_activity_date": 1299110625, "comments": [{"body": "But why would it want to start from the beginning? That&#39;s almost certainly <i>not</i> what you&#39;d actually want to happen - you&#39;d want an exception thrown, because nothing else <i>should</i> be calling MoveNext.", "edited": false, "comment_id": 5816478, "creation_date": 1299133731, "score": 0, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}], "creation_date": 1299110625, "comment_count": 1, "score": 0, "owner": {"display_name": "fix_likes_coding", "reputation": 3973, "user_id": 633957, "user_type": "registered"}, "is_accepted": false, "up_vote_count": 0}, {"body": "<p>Okay, I finally have a real answer. I sort of worked it out on my own, but only after Lucian Wischik from the VB part of the team confirmed that there really is a good reason for it. Many thanks to him - and please visit <a href=\"http://blogs.msdn.com/b/lucian/\">his blog</a>, which rocks.</p>\n\n<p>The value 0 here is only special because it's <em>not</em> a valid state which you might be in just before the <code>await</code> in a normal case. In particular, it's not a state which the state machine may end up testing for elsewhere. I believe that using any non-positive value would work just as well: -1 isn't used for this as it's <em>logically</em> incorrect, as -1 normally means \"finished\". I could argue that we're giving an extra meaning to state 0 at the moment, but ultimately it doesn't really matter. The point of this question was finding out why the state is being set at all.</p>\n\n<p>The value is relevant if the await ends in an exception which is caught. We can end up coming back to the same await statement again, but we <em>mustn't</em> be in the state meaning \"I'm just about to come back from that await\" as otherwise all kinds of code would be skipped. It's simplest to show this with an example. Note that I'm now using the second CTP, so the generated code is slightly different to that in the question.</p>\n\n<p>Here's the async method:</p>\n\n<pre><code>static async Task&lt;int&gt; FooAsync()\n{\n    var t = new SimpleAwaitable();\n\n    for (int i = 0; i &lt; 3; i++)\n    {\n        try\n        {\n            Console.WriteLine(\"In Try\");\n            return await t;\n        }                \n        catch (Exception)\n        {\n            Console.WriteLine(\"Trying again...\");\n        }\n    }\n    return 0;\n}\n</code></pre>\n\n<p>Conceptually, the <code>SimpleAwaitable</code> can be any awaitable - maybe a task, maybe something else. For the purposes of my tests, it always returns false for <code>IsCompleted</code>, and throws an exception in <code>GetResult</code>.</p>\n\n<p>Here's the generated code for <code>MoveNext</code>:</p>\n\n<pre><code>public void MoveNext()\n{\n    int returnValue;\n    try\n    {\n        int num3 = state;\n        if (num3 == 1)\n        {\n            goto Label_ContinuationPoint;\n        }\n        if (state == -1)\n        {\n            return;\n        }\n        t = new SimpleAwaitable();\n        i = 0;\n      Label_ContinuationPoint:\n        while (i &lt; 3)\n        {\n            // Label_ContinuationPoint: should be here\n            try\n            {\n                num3 = state;\n                if (num3 != 1)\n                {\n                    Console.WriteLine(\"In Try\");\n                    awaiter = t.GetAwaiter();\n                    if (!awaiter.IsCompleted)\n                    {\n                        state = 1;\n                        awaiter.OnCompleted(MoveNextDelegate);\n                        return;\n                    }\n                }\n                else\n                {\n                    state = 0;\n                }\n                int result = awaiter.GetResult();\n                awaiter = null;\n                returnValue = result;\n                goto Label_ReturnStatement;\n            }\n            catch (Exception)\n            {\n                Console.WriteLine(\"Trying again...\");\n            }\n            i++;\n        }\n        returnValue = 0;\n    }\n    catch (Exception exception)\n    {\n        state = -1;\n        Builder.SetException(exception);\n        return;\n    }\n  Label_ReturnStatement:\n    state = -1;\n    Builder.SetResult(returnValue);\n}\n</code></pre>\n\n<p>I had to move <code>Label_ContinuationPoint</code> to make it valid code - otherwise it's not in the scope of the <code>goto</code> statement - but that doesn't affect the answer.</p>\n\n<p>Think about what happens when <code>GetResult</code> throws its exception. We'll go through the catch block, increment <code>i</code>, and then loop round again (assuming <code>i</code> is still less than 3). We're still in whatever state we were before the <code>GetResult</code> call... but when we get inside the <code>try</code> block we <em>must</em> print \"In Try\" and call <code>GetAwaiter</code> again... and we'll only do that if state isn't 1. Without the <code>state = 0</code> assignment, it will use the existing awaiter and skip the <code>Console.WriteLine</code> call.</p>\n\n<p>It's a fairly tortuous bit of code to work through, but that just goes to show the kinds of thing that the team has to think about. I'm glad I'm not responsible for implementing this :)</p>\n", "answer_id": 5762859, "tags": [], "down_vote_count": 0, "last_activity_date": 1303542988, "comments": [{"body": "@Shekhar_Pro: Yes, it&#39;s a goto. You should <i>expect</i> to see plenty of goto statements in auto-generated state machines :)", "edited": false, "reply_to_user": {"display_name": "Shekhar_Pro", "reputation": 11364, "user_id": 399722, "user_type": "registered", "accept_rate": 88}, "comment_id": 6599619, "creation_date": 1303545280, "score": 7, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "@Shekhar_Pro: Within manually written code, it is - because it makes the code hard to read and follow. No-one reads autogenerated code though, except fools like me who decompile it :)", "edited": false, "reply_to_user": {"display_name": "Shekhar_Pro", "reputation": 11364, "user_id": 399722, "user_type": "registered", "accept_rate": 88}, "comment_id": 6599753, "creation_date": 1303546270, "score": 10, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "So what <i>does</i> happen when we await again after an exception? We start all over again?", "edited": false, "comment_id": 6605736, "creation_date": 1303597233, "score": 0, "owner": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}}, {"body": "@configurator: It calls GetAwaiter on the awaitable, which is what I&#39;d expect it to do.", "edited": false, "reply_to_user": {"display_name": "configurator", "reputation": 18380, "user_id": 9536, "user_type": "registered", "accept_rate": 67}, "comment_id": 6807170, "creation_date": 1304691072, "score": 1, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}}, {"body": "gotos don&#39;t always make code harder to read. In fact, sometimes they even make sense to use (sacrilege to say, I know). For example, sometimes you may need to break multiple nested loops. I lesser used feature of goto (and IMO uglier use) is to cause switch statements to cascade. On a seperate note, I remember a day and age when gotos were a primary underpinning of some programming languages and because of that I fully realize why the mere mention of goto makes developers shudder. They can make things ugly if used poorly.", "edited": false, "comment_id": 12295323, "creation_date": 1331609909, "score": 0, "owner": {"display_name": "Ben Lesh", "reputation": 61659, "user_id": 135786, "user_type": "registered", "accept_rate": 97}}], "creation_date": 1303542988, "comment_count": 5, "score": 59, "owner": {"display_name": "Jon Skeet", "reputation": 801619, "user_id": 22656, "user_type": "registered", "accept_rate": 87}, "is_accepted": true, "up_vote_count": 59}], "last_editor": {"display_name": "Doctor Jones", "reputation": 13005, "user_id": 39277, "user_type": "registered", "accept_rate": 94}, "down_vote_count": 0, "close_vote_count": 0, "question_id": 5027999}]]}}]