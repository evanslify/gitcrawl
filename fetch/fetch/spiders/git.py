import scrapy
import json
import re
from fetch.items import GithubItem


class GitSpider(scrapy.Spider):
    name = 'github'
    http_user = 'evanslify'
    http_pass = '4e4b57cc169d0e7a6812f73a9a48843b84a2200b'

    def __init__(self, *args, **kwargs):
        super(GitSpider, self).__init__(*args, **kwargs)
        self.mode = kwargs.get('mode', 'all').split(',')
        self.target = kwargs.get('target', '')

    def callnext(self, response=None, caller=None,
                 html=False, start_meta=None):
        # trick to override the default parsing method :D
        try:
            meta = response.request.meta
        except AttributeError:
            meta = start_meta

        callstack = meta['callstack']

        if html is False and response is not None:
            link = response.headers.get('Link')
            if link is not None:
                url = self.page_plus_one(link, response.url)
                if url is not None:
                    callstack.append({
                        'url': url, 'callback': caller
                    })

        if len(callstack) > 0:
            target = callstack.pop(0)
            url = target['url']
            if 'per_page=' and 'page=' not in url:
                url = url + '?per_page=100&page=1'
            yield scrapy.Request(
                url=url, meta=meta,
                callback=target['callback'], errback=self.callnext)

        else:
            item = GithubItem()
            loader = response.meta.get('Loader')
            item['GistInfo'] = loader['GistInfo']
            item['UserInfo'] = loader['UserInfo']
            item['RepoInfo'] = loader['RepoInfo']
            item['identifier'] = loader['identifier']
            yield item

    def page_plus_one(self, header, url):
        # called only when response.headers.get('Link') returns valid

        if header.find('next') != -1:
            # if valid, first url will be the next page
            new_page_number = re.findall('(?<=&page=)[0-9]', header)[0]
            new_page = str(re.sub('(?<=&page=)[0-9]', new_page_number, url))
        else:
            new_page = None
        return new_page

    def start_requests(self):
        # override scrapy's own method to start requests.
        meta = scrapy.Request.meta
        # declaring item loader's layout.
        meta = {
            'callstack': [],
            'Loader': {
                'UserInfo': {},
                'GistInfo': [],
                'RepoInfo': {},
                'identifier': self.target,
            }
        }
        callstack = meta['callstack']

        calls = self.parse_arguments()
        callstack.extend(calls)
        return self.callnext(start_meta=meta)

    def parse_arguments(self):
        # returns a list, generated by parsing start arguments
        # which can be extended into callstack
        # raises exception while mode is invalid

        actions = []
        base_url = 'https://api.github.com'
        user_url = base_url + '/users/%s' % self.target
        gist_url = user_url + '/gists'
        repo_url = user_url + '/repos'

        url_dict = {
            'user': (user_url, self.crawl_user_page),
            'gist': (gist_url, self.crawl_user_gist),
            'repo': (repo_url, self.crawl_user_repo)
        }
        if 'all' in self.mode:
            for i in url_dict.itervalues():
                actions.append({
                    'url': i[0], 'callback': i[1]
                })
        else:
            for i in self.mode:
                if i in url_dict.iterkeys():
                    detail = url_dict[i]
                    actions.append({
                        'url': detail[0], 'callback': detail[1]
                    })
                else:
                    raise Exception('Parsing mode invalid.')
        return actions
# ----------------------------------------------------------------
# Start declaring methods to parse JSON items.
# ----------------------------------------------------------------

    def parse_mini_repo(self, input):
        result = {
            'id': input.get('id'),
            'name': input.get('name')
        }
        return result

# ------- functions for parsing events.
    def parse_milestone(self, input):
        creator = input.get('creator')
        creator_info = self.parse_mini_user(creator)
        result = {
            'title': input.get('title'),
            'description': input.get('description'),
            'open_issues': input.get('open_issues'),
            'closed_issues': input.get('closed_issues'),
            'state': input.get('state'),
            'created_at': input.get('created_at'),
            'updated_at': input.get('updated_at'),
            'creator': creator_info
        }
        return result

    def parse_issue_label(self, input):
        result = {
            'name': input.get('name'),
            'color': input.get('color')
        }
        return result

    def parse_event_payload_issue(self, input):

        result = {
            'created_at': input.get('created_at'),
            'updated_at': input.get('updated_at'),
            'closed_at': input.get('closed_at'),
            'comments': input.get('comments'),
            'id': input.get('id'),
            'number': input.get('number'),
            'title': input.get('title'),
            'body': input.get('body'),
            'action': input.get('action')
        }

        user = input.get('user')
        if user:
            user_info = self.parse_mini_user(user)
            result['user'] = user_info

        assignee = input.get('assignee')
        if assignee:
            assignee_info = self.parse_mini_user(assignee)
            result['assignee'] = assignee_info

        labels = input.get('labels')
        if labels:
            for i in labels:
                labels_info = self.parse_issue_label(i)
            result['labels'] = labels_info

        return result

    def parse_push_commits(self, input):
        result = {
            'sha': input.get('sha'),
            'author': input.get('author'),
            'message': input.get('message'),
            'distinct': input.get('distinct'),
            'url': input.get('url')
        }
        return result

    def parse_event_payload_push(self, input):
        commits = input.get('commits')
        commits_list = []
        for i in commits:
            info = self.parse_push_commits(i)
            commits_list.append(info)

        result = {
            'push_id': input.get('push_id'),
            'size': input.get('size'),
            'disinct_size': input.get('disinct_size'),
            'ref': input.get('ref'),
            'head_after': input.get('head'),
            'head_before': input.get('before'),
            'commits': commits_list,
            'created_at': input.get('created_at')
        }
        return result

    def parse_event(self, input):

        event_type = input['type']
        payload = input['payload']
        if event_type == 'PushEvent':
            payload_info = self.parse_event_payload_push(payload)
        elif event_type == 'IssuesEvent':
            payload_info = self.parse_event_payload_issue(payload)

        repo = input['repo']
        repo_info = self.parse_mini_user(repo)
        actor = input['actor']
        actor_info = self.parse_mini_user(actor)

        org = input.get('org')
        if org:
            org_info = self.parse_mini_user(org)
        else:
            org_info = None

        result = {
            'id': input['id'],
            'type': event_type,
            'created_at': input['created_at'],
            'repo': repo_info,
            'org': org_info,
            'payload': payload_info,
            'actor': actor_info
        }
        return result

# ------- functions for parsing events.

    def parse_user(self, input):
        item = {
            'user_html_url': input.get('html_url'),
            'user_public_repo_count': input.get('public_repos'),
            'user_public_gist_count': input.get('public_gists'),
            'user_email': input.get('email'),
            'user_followers_count': input.get('followers'),
            'user_company': input.get('compant'),
            'user_hireable': input.get('hireable'),
            'user_id': input.get('id'),
            'user_login': input.get('login'),
            'user_display_name': input.get('name'),
            'user_blog': input.get('blog'),
            'user_location': input.get('location'),
            'user_bio': input.get('bio'),
            'user_following_count': input.get('following'),
            'user_created': input.get('created_at'),
            'user_updated': input.get('updated_at'),
            'user_url': input.get('url')
        }
        # item = dict((k, v) for k, v in item.iteritems() if v is not None)

        return item

    def parse_mini_user(self, input):
        # parses mini user object
        result = {
            'user_id': input.get('id'),
            'user_login': input.get('login')
        }
        return result

    def parse_contributor(self, input):
        # parses contributor
        result = {
            'user_id': input.get('id'),
            'user_login': input.get('login'),
            'times_contributed': input.get('contributions')
        }
        return result

    def parse_gist(self, input):
        # parses one gist object, returns a 2-list:
        # list[0]: gist object ; list[1]: [gist comment URL, gist id]
        files = input['files'].values()

        file_info = []
        for i in files:
            info = {
                'type': i.get('type'),
                'name': i.get('filename'),
                'raw_url': i.get('raw_url'),
                'language': i.get('language')
            }
        file_info.append(info)

        comments = input.get('comments')
        comment_url = input.get('comments_url') if comments > 0 else None

        gist = {
            'gist_id': input.get('id'),
            'gist_created': input.get('created_at'),
            'gist_comment_counts': comments,
            'gist_comment_url': comment_url,
            'gist_file_info': file_info
        }
        gist = dict((k, v) for k, v in gist.iteritems() if v is not None)
        result = [gist, comment_url]
        return result

    def parse_gist_comment(self, input):
        user = input['user']
        user_info = {
            'user_id': user.get('id'),
            'user_login': user.get('login')
        }
        result = {
            'time': input.get('created_at'),
            'content': input.get('body'),
            'comment_id': input.get('id'),
            'user': user_info
        }
        return result

    def parse_repository(self, input, detailing=False):
        # returns list, [result, status]
        forked = input['fork']
        stargazers_count = input['stargazers_count']
        forks_count = input['forks_count']
        open_issues_count = input['open_issues_count']
        html_url = input['html_url']
        status = {
            'fork': forked,
            'starred': bool(stargazers_count),
            'forks': bool(forks_count),
            'open_issues': bool(open_issues_count)
        }
        extras_url = {
            'stargazers_url': input['stargazers_url'],
            'contributors_url': input['contributors_url']
        }

        repo = {
            'id': input['id'],
            'name': input['name'],
            'created_at': input['created_at'],
            'updated_at': input['updated_at'],
            'pushed_at': input['pushed_at'],
            'homepage': input['homepage'],
            'stargazers_count': stargazers_count,
            'watchers_count': input['watchers_count'],
            'language': input['language'],
            'forks_count': forks_count,
            'forked': forked,
            'open_issues_count': open_issues_count,
            'html_url': html_url,
            'zipurl': html_url + "/archive/master.zip",
            'url': input['url'],
            'description': input['description'],
            'extras_url': extras_url
        }
        if detailing is True:
            owner = input.pop('owner')
            owner_info = self.parse_mini_user(owner)
            repo.update({
                owner: owner_info
            })
        result = [repo, status]
        return result
# ----------------------------------------------------------------
# End declaring methods to parse JSON items.
# ----------------------------------------------------------------

    def crawl_user_page(self, response):
        # crawls user page.
        # https://api.github.com/users/<username>

        jr = json.loads(response.body_as_unicode())
        callstack = response.meta['callstack']
        loader = response.meta['Loader']

        user_item = self.parse_user(jr)
        loader['UserInfo'] = user_item

        html_url = user_item['user_html_url']
        followers_count = user_item['user_followers_count']
        following_count = user_item['user_following_count']
        url = user_item['user_url']

        html_followers = html_url + '/followers'
        html_following = html_url + '/following'
        html_userpage_js = (
            html_url + '?tab=contributions&from=2013-01-08'
            '&_pjax=.js-contribution-activity')

        followers_url = url + '/followers'
        following_url = url + '/following'
        starred_url = url + '/starred'
        events_url = url + '/events'

        actions = []
        if followers_count > 0:
            actions.extend([
                {
                    'url': followers_url,
                    'callback': self.crawl_user_fellows
                },
                {
                    'url': html_followers,
                    'callback': self.crawl_html_user_fellow
                }])


        if following_count > 0:
            actions.extend([
                {
                    'url': following_url,
                    'callback': self.crawl_user_fellows
                },
                {
                    'url': html_following,
                    'callback': self.crawl_html_user_fellow
                }])

        actions.extend([
            {'url': starred_url, 'callback': self.crawl_user_starred},
            {'url': html_userpage_js, 'callback': self.crawl_html_userpage_js},
            {'url': events_url, 'callback': self.crawl_user_events}])
        callstack.extend(actions)

        return self.callnext(response)

    def crawl_html_userpage_js(self, response):
        loader = response.meta['Loader']
        items = loader['UserInfo']

        contrib_number = response.selector.xpath(
            '//span[@class="contrib-number"]/text()').extract()
        items.update({
            'user_last_year_contributes': contrib_number[0],
            'user_longest_streak': contrib_number[1],
            'user_current_streak': contrib_number[2],
        })

        return self.callnext(response)

    def crawl_html_user_fellow(self, response, mode=None):
        # crawls followers / following at HTML

        callstack = response.meta['callstack']
        loader = response.meta['Loader']

        if 'following' in response.url:
            items = loader['UserInfo'].setdefault('user_following', [])
        elif 'followers' in response.url:
            items = loader['UserInfo'].setdefault('user_followers', [])
        else:
            raise Exception

        name_list = response.selector.xpath(
            '//h3[@class="follow-list-name"]/span/a/text()').extract()
        info_list = response.selector.xpath(
            '//p[@class="follow-list-info"]/descendant-or-self::text()'
            ).extract()
        info_list = [name for name in info_list if name.strip()]

        for i in range(0, len(name_list)):
            username = response.selector.xpath(
                '//h3[@class="follow-list-name"]/span/a/@href'
                ).extract()[i][1:]
            # i shall repair thie in a more elegant way.
            # repaired temporary aug 17 2015
            # start
            try:
                user = filter(lambda x: x['user_login'] == username, items)[0]
            except IndexError:
                items.append({
                    'user_login': username
                    })
                user = filter(lambda x: x['user_login'] == username, items)[0]

            user.update({
                'user_display_name': name_list[i],
                'user_info': info_list[i],
            })
            # end
        html_pagination = response.selector.xpath(
            '//div[@class="pagination"]/a[text()[contains(.,"Next")]]/@href'
            ).extract()

        if len(html_pagination) > 0:
            callstack.append({
                'url': html_pagination[0],
                'callback': self.crawl_html_user_fellow})

        return self.callnext(response, html=True)

    def crawl_user_fellows(self, response):
        # crawls followers / following

        jr = json.loads(response.body_as_unicode())
        loader = response.meta['Loader']
        items = loader['UserInfo']

        if 'followers' in response.url:
            key_name = 'user_followers'
        elif 'following' in response.url:
            key_name = 'user_following'
        else:
            raise Exception

        user_list = items.setdefault(key_name, [])

        for i in jr:
            user = self.parse_mini_user(i)
            user_list.append(user)

        return self.callnext(response, caller=self.crawl_user_fellows)

    def crawl_user_gist(self, response):
        # only called when public_gists > 0
        # https://api.github.com/users/<username>/gists

        jr = json.loads(response.body_as_unicode())
        callstack = response.meta['callstack']
        loader = response.meta['Loader']
        items = loader['GistInfo']

        for i in jr:
            gist = self.parse_gist(i)
            if gist[1] is not None:
                url = gist[1]
                callstack.insert(0, {
                    'url': url, 'callback': self.crawl_user_gists_comments
                })
            items.append(gist[0])
        return self.callnext(response, caller=self.crawl_user_gist)

    def crawl_user_gist_comments(self, response):
        # only called when a gist has comment.
        # https://api.github.com/gists/<Gist ID>/comments

        jr = json.loads(response.body_as_unicode())
        loader = response.meta['Loader']
        items = loader['GistInfo']
        gist_id = response.url.split('/')[-2]
        target_gist = filter(lambda x: x['gist_id'] == gist_id, items)[0]

        comments = []
        for i in jr:
            comment = self.parse_gist_comment(i)
            comments.append(comment)
        target_gist['comments'] = comments

        return self.callnext(response, caller=self.crawl_user_gist_comments)

    def crawl_user_starred(self, response):
        # always called. make sure to check whether len(jr) is true.
        # https://api.github.com/users/<username>/starred

        jr = json.loads(response.body_as_unicode())
        loader = response.meta['Loader']
        items = loader['UserInfo']

        if len(jr) > 0:
            starred = []
            for i in jr:
                info = self.parse_repository(i)[0]
                starred.append(info)
            items['user_starred'] = starred
        else:
            pass
        return self.callnext(response, caller=self.crawl_user_starred)

    def crawl_user_repo(self, response):
        # https://api.github.com/users/<username>/repos
        # parsing repository list of a user
        # includes repo info

        jr = json.loads(response.body_as_unicode())
        callstack = response.meta['callstack']
        loader = response.meta['Loader']
        items = loader['RepoInfo']

        for i in jr:
            result = self.parse_repository(i)
            repo_info = result[0]
            repo_name = repo_info['name']
            repo_extra_url = repo_info['extras_url']
            status = result[1]
            items.update({
                repo_name: repo_info
            })
            action = []
            for i in status:
                if 'forked' == True:
                    repo_url = repo_info.get('url')
                    action.append({
                        'url': repo_url,
                        'callback': self.crawl_repo_detail
                    })
                if 'starred' == True:
                    stargazer_url = repo_extra_url.get('stargazers_url')
                    action.append({
                        'url': stargazer_url,
                        'callback': self.crawl_repo_stars
                    })
                if 'forks' == True:
                    forks_url = repo_info.get('forks_url')
                    action.append({
                        'url': forks_url,
                        'callback': self.crawl_repo_forks
                    })
                if 'open_issues' == True:
                    issues_url = repo_info.get('url') + '/issues'
                    action.append({
                        'url': issues_url,
                        'callback': self.crawl_repo_issues
                    })
            contributors_url = repo_extra_url.get('contributors_url')
            action.append({
                'url': contributors_url,
                'callback': self.crawl_repo_contributors
            })
            callstack.extend(action)

        return self.callnext(response, caller=self.crawl_user_repo)

    def crawl_repo_forks(self, response):
        # parse repo forks
        # this is loaded only while forked count > 1
        # https://api.github.com/repos/<username>/<repository name>/forks

        loader = response.meta['Loader']
        items = loader['RepoInfo']

        repo_name = response.url.split('/')[-2]
        item = items[repo_name].setdefault('forks', [])
        jr = json.loads(response.body_as_unicode())

        for i in jr:
            result = self.parse_repository(i, detailing=True)
            item.append(result)

        return self.callnext(response, caller=self.crawl_repo_forks)

    def crawl_repo_contributors(self, response):
        # parse this repo's count of contributors; always runned
        loader = response.meta['Loader']
        repo_name = response.url.split('/')[-2]
        item = loader['RepoInfo'][repo_name]

        if response.status == 204:
            return self.callnext(response)
        else:
            jr = json.loads(response.body_as_unicode())

        times_contributed = len(jr)
        item['times_contributed'] = times_contributed

        # check whether this repo has contributors
        if times_contributed > 0:
            contributors = item.setdefault('contributed_users', [])
            for i in jr:
                result = self.parse_contributor(i)
                contributors.append(result)
        return self.callnext(response, caller=self.crawl_repo_contributors)

    def crawl_repo_detail(self, response):
        # crawls detail page of a repository.
        # only called while a repository is forked from someone.
        loader = response.meta['Loader']
        repo_name = response.url.split('/')[-1]
        items = loader['RepoInfo'][repo_name]
        jr = json.loads(response.body_as_unicode())

        parent = jr.get('parent')
        parent_info = self.parse_repository(parent, detailing=True)
        source = jr.get('source')
        source_info = self.parse_repository(source, detailing=True)
        result = {
            'fork_parent': parent_info,
            'fork_source': source_info
        }
        items['forkinfo'] = result

        return self.callnext(response, caller=self.crawl_repo_detail)

    def crawl_repo_stars(self, response):
        # https://api.github.com/repos/<username>/<repository name>/stargazers
        # only called while a repository has stargazers.
        loader = response.meta['Loader']
        repo_name = response.url.split('/')[-1]
        item = loader['RepoInfo'][repo_name].setdefault('stargazers', [])
        jr = json.loads(response.body_as_unicode())

        for i in jr:
            result = self.parse_mini_user(i)
            item.append(result)

        return self.callnext(response, caller=self.crawl_repo_stars)

    def crawl_user_events(self, response):

        jr = json.loads(response.body_as_unicode())
        loader = response.meta['Loader']
        items = loader['UserInfo'].setdefault('user_events', [])

        allowed = ['PushEvent', 'IssuesEvent']

        for i in jr:
            event_type = i['type']
            if event_type in allowed:
                event = self.parse_event(i)
                items.append(event)

        return self.callnext(response, caller=self.crawl_user_events)
